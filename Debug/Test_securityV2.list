
Test_securityV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c08  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c00  08007d98  08007d98  00017d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008998  08008998  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08008998  08008998  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008998  08008998  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008998  08008998  00018998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800899c  0800899c  0001899c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080089a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e0  20000070  08008a10  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000550  08008a10  00020550  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f5e4  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b3a  00000000  00000000  0003f684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b0  00000000  00000000  000431c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001218  00000000  00000000  00044570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b13f  00000000  00000000  00045788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018eae  00000000  00000000  000708c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9fb6  00000000  00000000  00089775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018372b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005aa4  00000000  00000000  00183780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007d80 	.word	0x08007d80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08007d80 	.word	0x08007d80

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000278:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800027c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000280:	f003 0301 	and.w	r3, r3, #1
 8000284:	2b00      	cmp	r3, #0
 8000286:	d013      	beq.n	80002b0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000288:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800028c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000290:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000294:	2b00      	cmp	r3, #0
 8000296:	d00b      	beq.n	80002b0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000298:	e000      	b.n	800029c <ITM_SendChar+0x2c>
    {
      __NOP();
 800029a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800029c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d0f9      	beq.n	800029a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002a6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002aa:	687a      	ldr	r2, [r7, #4]
 80002ac:	b2d2      	uxtb	r2, r2
 80002ae:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80002b0:	687b      	ldr	r3, [r7, #4]
}
 80002b2:	4618      	mov	r0, r3
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr

080002be <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80002be:	b580      	push	{r7, lr}
 80002c0:	b086      	sub	sp, #24
 80002c2:	af00      	add	r7, sp, #0
 80002c4:	60f8      	str	r0, [r7, #12]
 80002c6:	60b9      	str	r1, [r7, #8]
 80002c8:	607a      	str	r2, [r7, #4]
	int i=0;
 80002ca:	2300      	movs	r3, #0
 80002cc:	617b      	str	r3, [r7, #20]
	for (i = 0; i<len; i++)
 80002ce:	2300      	movs	r3, #0
 80002d0:	617b      	str	r3, [r7, #20]
 80002d2:	e009      	b.n	80002e8 <_write+0x2a>
		ITM_SendChar((*ptr++));
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	1c5a      	adds	r2, r3, #1
 80002d8:	60ba      	str	r2, [r7, #8]
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	4618      	mov	r0, r3
 80002de:	f7ff ffc7 	bl	8000270 <ITM_SendChar>
	for (i = 0; i<len; i++)
 80002e2:	697b      	ldr	r3, [r7, #20]
 80002e4:	3301      	adds	r3, #1
 80002e6:	617b      	str	r3, [r7, #20]
 80002e8:	697a      	ldr	r2, [r7, #20]
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	429a      	cmp	r2, r3
 80002ee:	dbf1      	blt.n	80002d4 <_write+0x16>
	return len;
 80002f0:	687b      	ldr	r3, [r7, #4]
}
 80002f2:	4618      	mov	r0, r3
 80002f4:	3718      	adds	r7, #24
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
	...

080002fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	f5ad 7d3a 	sub.w	sp, sp, #744	; 0x2e8
 8000302:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000304:	f001 fa10 	bl	8001728 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000308:	f000 f838 	bl	800037c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800030c:	f000 f8f6 	bl	80004fc <MX_GPIO_Init>
  MX_RNG_Init();
 8000310:	f000 f8e0 	bl	80004d4 <MX_RNG_Init>
  //MX_USB_DEVICE_Init();
  MX_CRC_Init();
 8000314:	f000 f8be 	bl	8000494 <MX_CRC_Init>
  uint8_t Encrypted_data[192];

  uint8_t Decrypted_data[64];

  //Generate a random key
  Key_Generate(24);
 8000318:	2018      	movs	r0, #24
 800031a:	f000 f92d 	bl	8000578 <Key_Generate>

  // Initialize AES Context by using fixed symmetric key
  Error = aesInit(&Aes_Handler, Random_key, CRL_AES192_KEY);
 800031e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000322:	2218      	movs	r2, #24
 8000324:	4913      	ldr	r1, [pc, #76]	; (8000374 <main+0x78>)
 8000326:	4618      	mov	r0, r3
 8000328:	f000 fb50 	bl	80009cc <aesInit>
 800032c:	4603      	mov	r3, r0
 800032e:	f8a7 32e6 	strh.w	r3, [r7, #742]	; 0x2e6
  if(Error != NO_ERROR )
 8000332:	f8b7 32e6 	ldrh.w	r3, [r7, #742]	; 0x2e6
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <main+0x42>
  {
	  Error_Handler();
 800033a:	f000 f941 	bl	80005c0 <Error_Handler>
  }

  // Encrypt data
  aesEncryptBlock(&Aes_Handler, Plaintext, Encrypted_data);
 800033e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000342:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000346:	490c      	ldr	r1, [pc, #48]	; (8000378 <main+0x7c>)
 8000348:	4618      	mov	r0, r3
 800034a:	f000 fcff 	bl	8000d4c <aesEncryptBlock>

  // Decrypt Data
  aesDecryptBlock(&Aes_Handler, Encrypted_data, Decrypted_data);
 800034e:	463a      	mov	r2, r7
 8000350:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000354:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000358:	4618      	mov	r0, r3
 800035a:	f000 ff69 	bl	8001230 <aesDecryptBlock>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800035e:	2120      	movs	r1, #32
 8000360:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000364:	f001 fdb6 	bl	8001ed4 <HAL_GPIO_TogglePin>
	  HAL_Delay(2000);
 8000368:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800036c:	f001 fa00 	bl	8001770 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000370:	e7f5      	b.n	800035e <main+0x62>
 8000372:	bf00      	nop
 8000374:	200000c0 	.word	0x200000c0
 8000378:	08007d98 	.word	0x08007d98

0800037c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b0b8      	sub	sp, #224	; 0xe0
 8000380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000382:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000386:	2244      	movs	r2, #68	; 0x44
 8000388:	2100      	movs	r1, #0
 800038a:	4618      	mov	r0, r3
 800038c:	f006 fcee 	bl	8006d6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000390:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000394:	2200      	movs	r2, #0
 8000396:	601a      	str	r2, [r3, #0]
 8000398:	605a      	str	r2, [r3, #4]
 800039a:	609a      	str	r2, [r3, #8]
 800039c:	60da      	str	r2, [r3, #12]
 800039e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003a0:	463b      	mov	r3, r7
 80003a2:	2288      	movs	r2, #136	; 0x88
 80003a4:	2100      	movs	r1, #0
 80003a6:	4618      	mov	r0, r3
 80003a8:	f006 fce0 	bl	8006d6c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80003ac:	2310      	movs	r3, #16
 80003ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80003b2:	2301      	movs	r3, #1
 80003b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80003b8:	2300      	movs	r3, #0
 80003ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80003be:	2360      	movs	r3, #96	; 0x60
 80003c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003c4:	2302      	movs	r3, #2
 80003c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80003ca:	2301      	movs	r3, #1
 80003cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80003d0:	2301      	movs	r3, #1
 80003d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 80003d6:	2328      	movs	r3, #40	; 0x28
 80003d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80003dc:	2307      	movs	r3, #7
 80003de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003e2:	2302      	movs	r3, #2
 80003e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003e8:	2302      	movs	r3, #2
 80003ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80003f2:	4618      	mov	r0, r3
 80003f4:	f002 fc5a 	bl	8002cac <HAL_RCC_OscConfig>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80003fe:	f000 f8df 	bl	80005c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000402:	230f      	movs	r3, #15
 8000404:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000408:	2303      	movs	r3, #3
 800040a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800040e:	2300      	movs	r3, #0
 8000410:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000414:	2300      	movs	r3, #0
 8000416:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800041a:	2300      	movs	r3, #0
 800041c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000420:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000424:	2104      	movs	r1, #4
 8000426:	4618      	mov	r0, r3
 8000428:	f003 f826 	bl	8003478 <HAL_RCC_ClockConfig>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000432:	f000 f8c5 	bl	80005c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_RNG;
 8000436:	f44f 2384 	mov.w	r3, #270336	; 0x42000
 800043a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800043c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000440:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8000442:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000446:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000448:	2301      	movs	r3, #1
 800044a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800044c:	2301      	movs	r3, #1
 800044e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000450:	2318      	movs	r3, #24
 8000452:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000454:	2307      	movs	r3, #7
 8000456:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000458:	2302      	movs	r3, #2
 800045a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800045c:	2302      	movs	r3, #2
 800045e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000460:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000464:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000466:	463b      	mov	r3, r7
 8000468:	4618      	mov	r0, r3
 800046a:	f003 fa27 	bl	80038bc <HAL_RCCEx_PeriphCLKConfig>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000474:	f000 f8a4 	bl	80005c0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000478:	f44f 7000 	mov.w	r0, #512	; 0x200
 800047c:	f002 fbc0 	bl	8002c00 <HAL_PWREx_ControlVoltageScaling>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <SystemClock_Config+0x10e>
  {
    Error_Handler();
 8000486:	f000 f89b 	bl	80005c0 <Error_Handler>
  }
}
 800048a:	bf00      	nop
 800048c:	37e0      	adds	r7, #224	; 0xe0
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
	...

08000494 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
void MX_CRC_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0

	hcrc.Instance = CRC;
 8000498:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <MX_CRC_Init+0x38>)
 800049a:	4a0d      	ldr	r2, [pc, #52]	; (80004d0 <MX_CRC_Init+0x3c>)
 800049c:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultInitValueUse = DEFAULT_POLYNOMIAL_ENABLE;
 800049e:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <MX_CRC_Init+0x38>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	715a      	strb	r2, [r3, #5]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80004a4:	4b09      	ldr	r3, [pc, #36]	; (80004cc <MX_CRC_Init+0x38>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80004aa:	4b08      	ldr	r3, [pc, #32]	; (80004cc <MX_CRC_Init+0x38>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <MX_CRC_Init+0x38>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	619a      	str	r2, [r3, #24]
	if(HAL_CRC_Init(&hcrc) != HAL_OK)
 80004b6:	4805      	ldr	r0, [pc, #20]	; (80004cc <MX_CRC_Init+0x38>)
 80004b8:	f001 fa60 	bl	800197c <HAL_CRC_Init>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_CRC_Init+0x32>
	{
		Error_Handler();
 80004c2:	f000 f87d 	bl	80005c0 <Error_Handler>
	}

}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	2000009c 	.word	0x2000009c
 80004d0:	40023000 	.word	0x40023000

080004d4 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <MX_RNG_Init+0x20>)
 80004da:	4a07      	ldr	r2, [pc, #28]	; (80004f8 <MX_RNG_Init+0x24>)
 80004dc:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80004de:	4805      	ldr	r0, [pc, #20]	; (80004f4 <MX_RNG_Init+0x20>)
 80004e0:	f003 fea8 	bl	8004234 <HAL_RNG_Init>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80004ea:	f000 f869 	bl	80005c0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	200000d8 	.word	0x200000d8
 80004f8:	50060800 	.word	0x50060800

080004fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b088      	sub	sp, #32
 8000500:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000502:	f107 030c 	add.w	r3, r7, #12
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]
 8000510:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000512:	4b18      	ldr	r3, [pc, #96]	; (8000574 <MX_GPIO_Init+0x78>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	4a17      	ldr	r2, [pc, #92]	; (8000574 <MX_GPIO_Init+0x78>)
 8000518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800051c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800051e:	4b15      	ldr	r3, [pc, #84]	; (8000574 <MX_GPIO_Init+0x78>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	4b12      	ldr	r3, [pc, #72]	; (8000574 <MX_GPIO_Init+0x78>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	4a11      	ldr	r2, [pc, #68]	; (8000574 <MX_GPIO_Init+0x78>)
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000536:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <MX_GPIO_Init+0x78>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000542:	2200      	movs	r2, #0
 8000544:	2120      	movs	r1, #32
 8000546:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800054a:	f001 fcab 	bl	8001ea4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800054e:	2320      	movs	r3, #32
 8000550:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000552:	2301      	movs	r3, #1
 8000554:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000556:	2300      	movs	r3, #0
 8000558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055a:	2300      	movs	r3, #0
 800055c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800055e:	f107 030c 	add.w	r3, r7, #12
 8000562:	4619      	mov	r1, r3
 8000564:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000568:	f001 faf2 	bl	8001b50 <HAL_GPIO_Init>

}
 800056c:	bf00      	nop
 800056e:	3720      	adds	r7, #32
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40021000 	.word	0x40021000

08000578 <Key_Generate>:

/* USER CODE BEGIN 4 */
void Key_Generate(uint8_t Key_length)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]
	// Generate a random number between 0 and 255 (8-bit number)
    for (int i=0 ; i< Key_length ; i++)
 8000582:	2300      	movs	r3, #0
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	e010      	b.n	80005aa <Key_Generate+0x32>
    {
    	Random_key[i] = (uint8_t)(rand() % 256);
 8000588:	f006 fbf8 	bl	8006d7c <rand>
 800058c:	4603      	mov	r3, r0
 800058e:	425a      	negs	r2, r3
 8000590:	b2db      	uxtb	r3, r3
 8000592:	b2d2      	uxtb	r2, r2
 8000594:	bf58      	it	pl
 8000596:	4253      	negpl	r3, r2
 8000598:	b2d9      	uxtb	r1, r3
 800059a:	4a08      	ldr	r2, [pc, #32]	; (80005bc <Key_Generate+0x44>)
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	4413      	add	r3, r2
 80005a0:	460a      	mov	r2, r1
 80005a2:	701a      	strb	r2, [r3, #0]
    for (int i=0 ; i< Key_length ; i++)
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	3301      	adds	r3, #1
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	68fa      	ldr	r2, [r7, #12]
 80005ae:	429a      	cmp	r2, r3
 80005b0:	dbea      	blt.n	8000588 <Key_Generate+0x10>
    }
}
 80005b2:	bf00      	nop
 80005b4:	bf00      	nop
 80005b6:	3710      	adds	r7, #16
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	200000c0 	.word	0x200000c0

080005c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c4:	b672      	cpsid	i
}
 80005c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <Error_Handler+0x8>
	...

080005cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005d2:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <HAL_MspInit+0x44>)
 80005d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005d6:	4a0e      	ldr	r2, [pc, #56]	; (8000610 <HAL_MspInit+0x44>)
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	6613      	str	r3, [r2, #96]	; 0x60
 80005de:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <HAL_MspInit+0x44>)
 80005e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ea:	4b09      	ldr	r3, [pc, #36]	; (8000610 <HAL_MspInit+0x44>)
 80005ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005ee:	4a08      	ldr	r2, [pc, #32]	; (8000610 <HAL_MspInit+0x44>)
 80005f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f4:	6593      	str	r3, [r2, #88]	; 0x58
 80005f6:	4b06      	ldr	r3, [pc, #24]	; (8000610 <HAL_MspInit+0x44>)
 80005f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000602:	bf00      	nop
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	40021000 	.word	0x40021000

08000614 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a0a      	ldr	r2, [pc, #40]	; (800064c <HAL_CRC_MspInit+0x38>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d10b      	bne.n	800063e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000626:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <HAL_CRC_MspInit+0x3c>)
 8000628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800062a:	4a09      	ldr	r2, [pc, #36]	; (8000650 <HAL_CRC_MspInit+0x3c>)
 800062c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000630:	6493      	str	r3, [r2, #72]	; 0x48
 8000632:	4b07      	ldr	r3, [pc, #28]	; (8000650 <HAL_CRC_MspInit+0x3c>)
 8000634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000636:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800063e:	bf00      	nop
 8000640:	3714      	adds	r7, #20
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	40023000 	.word	0x40023000
 8000650:	40021000 	.word	0x40021000

08000654 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000654:	b480      	push	{r7}
 8000656:	b085      	sub	sp, #20
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a0a      	ldr	r2, [pc, #40]	; (800068c <HAL_RNG_MspInit+0x38>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d10b      	bne.n	800067e <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000666:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <HAL_RNG_MspInit+0x3c>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066a:	4a09      	ldr	r2, [pc, #36]	; (8000690 <HAL_RNG_MspInit+0x3c>)
 800066c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000670:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000672:	4b07      	ldr	r3, [pc, #28]	; (8000690 <HAL_RNG_MspInit+0x3c>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000676:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800067e:	bf00      	nop
 8000680:	3714      	adds	r7, #20
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	50060800 	.word	0x50060800
 8000690:	40021000 	.word	0x40021000

08000694 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08c      	sub	sp, #48	; 0x30
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 80006a4:	2200      	movs	r2, #0
 80006a6:	6879      	ldr	r1, [r7, #4]
 80006a8:	2019      	movs	r0, #25
 80006aa:	f001 f93d 	bl	8001928 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80006ae:	2019      	movs	r0, #25
 80006b0:	f001 f956 	bl	8001960 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80006b4:	4b1e      	ldr	r3, [pc, #120]	; (8000730 <HAL_InitTick+0x9c>)
 80006b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006b8:	4a1d      	ldr	r2, [pc, #116]	; (8000730 <HAL_InitTick+0x9c>)
 80006ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006be:	6613      	str	r3, [r2, #96]	; 0x60
 80006c0:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <HAL_InitTick+0x9c>)
 80006c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006c8:	60fb      	str	r3, [r7, #12]
 80006ca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006cc:	f107 0210 	add.w	r2, r7, #16
 80006d0:	f107 0314 	add.w	r3, r7, #20
 80006d4:	4611      	mov	r1, r2
 80006d6:	4618      	mov	r0, r3
 80006d8:	f003 f85e 	bl	8003798 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80006dc:	f003 f846 	bl	800376c <HAL_RCC_GetPCLK2Freq>
 80006e0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006e4:	4a13      	ldr	r2, [pc, #76]	; (8000734 <HAL_InitTick+0xa0>)
 80006e6:	fba2 2303 	umull	r2, r3, r2, r3
 80006ea:	0c9b      	lsrs	r3, r3, #18
 80006ec:	3b01      	subs	r3, #1
 80006ee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80006f0:	4b11      	ldr	r3, [pc, #68]	; (8000738 <HAL_InitTick+0xa4>)
 80006f2:	4a12      	ldr	r2, [pc, #72]	; (800073c <HAL_InitTick+0xa8>)
 80006f4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80006f6:	4b10      	ldr	r3, [pc, #64]	; (8000738 <HAL_InitTick+0xa4>)
 80006f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006fc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80006fe:	4a0e      	ldr	r2, [pc, #56]	; (8000738 <HAL_InitTick+0xa4>)
 8000700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000702:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <HAL_InitTick+0xa4>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <HAL_InitTick+0xa4>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000710:	4809      	ldr	r0, [pc, #36]	; (8000738 <HAL_InitTick+0xa4>)
 8000712:	f003 fddf 	bl	80042d4 <HAL_TIM_Base_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d104      	bne.n	8000726 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800071c:	4806      	ldr	r0, [pc, #24]	; (8000738 <HAL_InitTick+0xa4>)
 800071e:	f003 fe3b 	bl	8004398 <HAL_TIM_Base_Start_IT>
 8000722:	4603      	mov	r3, r0
 8000724:	e000      	b.n	8000728 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000726:	2301      	movs	r3, #1
}
 8000728:	4618      	mov	r0, r3
 800072a:	3730      	adds	r7, #48	; 0x30
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40021000 	.word	0x40021000
 8000734:	431bde83 	.word	0x431bde83
 8000738:	200000e8 	.word	0x200000e8
 800073c:	40012c00 	.word	0x40012c00

08000740 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000744:	e7fe      	b.n	8000744 <NMI_Handler+0x4>

08000746 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800074a:	e7fe      	b.n	800074a <HardFault_Handler+0x4>

0800074c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000750:	e7fe      	b.n	8000750 <MemManage_Handler+0x4>

08000752 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000756:	e7fe      	b.n	8000756 <BusFault_Handler+0x4>

08000758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800075c:	e7fe      	b.n	800075c <UsageFault_Handler+0x4>

0800075e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800075e:	b480      	push	{r7}
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr

0800076c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr

0800077a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800077a:	b480      	push	{r7}
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr

08000788 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
	...

08000798 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800079c:	4802      	ldr	r0, [pc, #8]	; (80007a8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800079e:	f003 fe6b 	bl	8004478 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200000e8 	.word	0x200000e8

080007ac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80007b0:	4802      	ldr	r0, [pc, #8]	; (80007bc <OTG_FS_IRQHandler+0x10>)
 80007b2:	f001 fba9 	bl	8001f08 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000138 	.word	0x20000138

080007c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
	return 1;
 80007c4:	2301      	movs	r3, #1
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <_kill>:

int _kill(int pid, int sig)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80007da:	f006 fa9d 	bl	8006d18 <__errno>
 80007de:	4603      	mov	r3, r0
 80007e0:	2216      	movs	r2, #22
 80007e2:	601a      	str	r2, [r3, #0]
	return -1;
 80007e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <_exit>:

void _exit (int status)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80007f8:	f04f 31ff 	mov.w	r1, #4294967295
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f7ff ffe7 	bl	80007d0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000802:	e7fe      	b.n	8000802 <_exit+0x12>

08000804 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	60b9      	str	r1, [r7, #8]
 800080e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	e00a      	b.n	800082c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000816:	f3af 8000 	nop.w
 800081a:	4601      	mov	r1, r0
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	1c5a      	adds	r2, r3, #1
 8000820:	60ba      	str	r2, [r7, #8]
 8000822:	b2ca      	uxtb	r2, r1
 8000824:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	3301      	adds	r3, #1
 800082a:	617b      	str	r3, [r7, #20]
 800082c:	697a      	ldr	r2, [r7, #20]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	429a      	cmp	r2, r3
 8000832:	dbf0      	blt.n	8000816 <_read+0x12>
	}

return len;
 8000834:	687b      	ldr	r3, [r7, #4]
}
 8000836:	4618      	mov	r0, r3
 8000838:	3718      	adds	r7, #24
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <_close>:
	}
	return len;
}

int _close(int file)
{
 800083e:	b480      	push	{r7}
 8000840:	b083      	sub	sp, #12
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
	return -1;
 8000846:	f04f 33ff 	mov.w	r3, #4294967295
}
 800084a:	4618      	mov	r0, r3
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr

08000856 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000856:	b480      	push	{r7}
 8000858:	b083      	sub	sp, #12
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
 800085e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000866:	605a      	str	r2, [r3, #4]
	return 0;
 8000868:	2300      	movs	r3, #0
}
 800086a:	4618      	mov	r0, r3
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr

08000876 <_isatty>:

int _isatty(int file)
{
 8000876:	b480      	push	{r7}
 8000878:	b083      	sub	sp, #12
 800087a:	af00      	add	r7, sp, #0
 800087c:	6078      	str	r0, [r7, #4]
	return 1;
 800087e:	2301      	movs	r3, #1
}
 8000880:	4618      	mov	r0, r3
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	607a      	str	r2, [r7, #4]
	return 0;
 8000898:	2300      	movs	r3, #0
}
 800089a:	4618      	mov	r0, r3
 800089c:	3714      	adds	r7, #20
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
	...

080008a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008b0:	4a14      	ldr	r2, [pc, #80]	; (8000904 <_sbrk+0x5c>)
 80008b2:	4b15      	ldr	r3, [pc, #84]	; (8000908 <_sbrk+0x60>)
 80008b4:	1ad3      	subs	r3, r2, r3
 80008b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008bc:	4b13      	ldr	r3, [pc, #76]	; (800090c <_sbrk+0x64>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d102      	bne.n	80008ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008c4:	4b11      	ldr	r3, [pc, #68]	; (800090c <_sbrk+0x64>)
 80008c6:	4a12      	ldr	r2, [pc, #72]	; (8000910 <_sbrk+0x68>)
 80008c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ca:	4b10      	ldr	r3, [pc, #64]	; (800090c <_sbrk+0x64>)
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4413      	add	r3, r2
 80008d2:	693a      	ldr	r2, [r7, #16]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	d207      	bcs.n	80008e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008d8:	f006 fa1e 	bl	8006d18 <__errno>
 80008dc:	4603      	mov	r3, r0
 80008de:	220c      	movs	r2, #12
 80008e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008e2:	f04f 33ff 	mov.w	r3, #4294967295
 80008e6:	e009      	b.n	80008fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008e8:	4b08      	ldr	r3, [pc, #32]	; (800090c <_sbrk+0x64>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ee:	4b07      	ldr	r3, [pc, #28]	; (800090c <_sbrk+0x64>)
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4413      	add	r3, r2
 80008f6:	4a05      	ldr	r2, [pc, #20]	; (800090c <_sbrk+0x64>)
 80008f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008fa:	68fb      	ldr	r3, [r7, #12]
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3718      	adds	r7, #24
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20018000 	.word	0x20018000
 8000908:	00000400 	.word	0x00000400
 800090c:	2000008c 	.word	0x2000008c
 8000910:	20000550 	.word	0x20000550

08000914 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000918:	4b15      	ldr	r3, [pc, #84]	; (8000970 <SystemInit+0x5c>)
 800091a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800091e:	4a14      	ldr	r2, [pc, #80]	; (8000970 <SystemInit+0x5c>)
 8000920:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000924:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <SystemInit+0x60>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a11      	ldr	r2, [pc, #68]	; (8000974 <SystemInit+0x60>)
 800092e:	f043 0301 	orr.w	r3, r3, #1
 8000932:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <SystemInit+0x60>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <SystemInit+0x60>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a0d      	ldr	r2, [pc, #52]	; (8000974 <SystemInit+0x60>)
 8000940:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000944:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000948:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800094a:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <SystemInit+0x60>)
 800094c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000950:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000952:	4b08      	ldr	r3, [pc, #32]	; (8000974 <SystemInit+0x60>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a07      	ldr	r2, [pc, #28]	; (8000974 <SystemInit+0x60>)
 8000958:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800095c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800095e:	4b05      	ldr	r3, [pc, #20]	; (8000974 <SystemInit+0x60>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	e000ed00 	.word	0xe000ed00
 8000974:	40021000 	.word	0x40021000

08000978 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000978:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800097c:	f7ff ffca 	bl	8000914 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000980:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000982:	e003      	b.n	800098c <LoopCopyDataInit>

08000984 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000984:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000986:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000988:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800098a:	3104      	adds	r1, #4

0800098c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800098c:	480a      	ldr	r0, [pc, #40]	; (80009b8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <LoopForever+0xe>)
	adds	r2, r0, r1
 8000990:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000992:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000994:	d3f6      	bcc.n	8000984 <CopyDataInit>
	ldr	r2, =_sbss
 8000996:	4a0a      	ldr	r2, [pc, #40]	; (80009c0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000998:	e002      	b.n	80009a0 <LoopFillZerobss>

0800099a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800099a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800099c:	f842 3b04 	str.w	r3, [r2], #4

080009a0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80009a0:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <LoopForever+0x16>)
	cmp	r2, r3
 80009a2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80009a4:	d3f9      	bcc.n	800099a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009a6:	f006 f9bd 	bl	8006d24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009aa:	f7ff fca7 	bl	80002fc <main>

080009ae <LoopForever>:

LoopForever:
    b LoopForever
 80009ae:	e7fe      	b.n	80009ae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009b0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80009b4:	080089a0 	.word	0x080089a0
	ldr	r0, =_sdata
 80009b8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80009bc:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 80009c0:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 80009c4:	20000550 	.word	0x20000550

080009c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009c8:	e7fe      	b.n	80009c8 <ADC1_2_IRQHandler>
	...

080009cc <aesInit>:
 * @param[in] keyLen Length of the key
 * @return Error code
 **/

error_t aesInit(AesContext *context, const uint8_t *key, size_t keyLen)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b089      	sub	sp, #36	; 0x24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
   uint_t i;
   uint32_t temp;
   size_t keyScheduleSize;

   //Check parameters
   if(context == NULL || key == NULL)
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d002      	beq.n	80009e4 <aesInit+0x18>
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d101      	bne.n	80009e8 <aesInit+0x1c>
      return ERROR_INVALID_PARAMETER;
 80009e4:	2302      	movs	r3, #2
 80009e6:	e1a4      	b.n	8000d32 <aesInit+0x366>

   //Check the length of the key
   if(keyLen == 16)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2b10      	cmp	r3, #16
 80009ec:	d103      	bne.n	80009f6 <aesInit+0x2a>
   {
      //10 rounds are required for 128-bit key
      context->nr = 10;
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	220a      	movs	r2, #10
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	e00f      	b.n	8000a16 <aesInit+0x4a>
   }
   else if(keyLen == 24)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2b18      	cmp	r3, #24
 80009fa:	d103      	bne.n	8000a04 <aesInit+0x38>
   {
      //12 rounds are required for 192-bit key
      context->nr = 12;
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	220c      	movs	r2, #12
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	e008      	b.n	8000a16 <aesInit+0x4a>
   }
   else if(keyLen == 32)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2b20      	cmp	r3, #32
 8000a08:	d103      	bne.n	8000a12 <aesInit+0x46>
   {
      //14 rounds are required for 256-bit key
      context->nr = 14;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	220e      	movs	r2, #14
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	e001      	b.n	8000a16 <aesInit+0x4a>
   }
   else
   {
      //Report an error
      return ERROR_INVALID_KEY_LENGTH;
 8000a12:	23e8      	movs	r3, #232	; 0xe8
 8000a14:	e18d      	b.n	8000d32 <aesInit+0x366>
   }

   //Determine the number of 32-bit words in the key
   keyLen /= 4;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	089b      	lsrs	r3, r3, #2
 8000a1a:	607b      	str	r3, [r7, #4]

   //Copy the original key
   for(i = 0; i < keyLen; i++)
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61fb      	str	r3, [r7, #28]
 8000a20:	e026      	b.n	8000a70 <aesInit+0xa4>
   {
      context->ek[i] = LOAD32LE(key + (i * 4));
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	68ba      	ldr	r2, [r7, #8]
 8000a28:	4413      	add	r3, r2
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	68ba      	ldr	r2, [r7, #8]
 8000a34:	4413      	add	r3, r2
 8000a36:	3301      	adds	r3, #1
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	021b      	lsls	r3, r3, #8
 8000a3c:	ea41 0203 	orr.w	r2, r1, r3
 8000a40:	69fb      	ldr	r3, [r7, #28]
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	68b9      	ldr	r1, [r7, #8]
 8000a46:	440b      	add	r3, r1
 8000a48:	3302      	adds	r3, #2
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	041b      	lsls	r3, r3, #16
 8000a4e:	431a      	orrs	r2, r3
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	68b9      	ldr	r1, [r7, #8]
 8000a56:	440b      	add	r3, r1
 8000a58:	3303      	adds	r3, #3
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	061b      	lsls	r3, r3, #24
 8000a5e:	431a      	orrs	r2, r3
 8000a60:	68f9      	ldr	r1, [r7, #12]
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	440b      	add	r3, r1
 8000a68:	605a      	str	r2, [r3, #4]
   for(i = 0; i < keyLen; i++)
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	61fb      	str	r3, [r7, #28]
 8000a70:	69fa      	ldr	r2, [r7, #28]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d3d4      	bcc.n	8000a22 <aesInit+0x56>
   }

   //The size of the key schedule depends on the number of rounds
   keyScheduleSize = 4 * (context->nr + 1);
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	61bb      	str	r3, [r7, #24]

   //Generate the key schedule (encryption)
   for(i = keyLen; i < keyScheduleSize; i++)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	61fb      	str	r3, [r7, #28]
 8000a86:	e0c4      	b.n	8000c12 <aesInit+0x246>
   {
      //Save previous word
      temp = context->ek[i - 1];
 8000a88:	69fb      	ldr	r3, [r7, #28]
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	68fa      	ldr	r2, [r7, #12]
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	4413      	add	r3, r2
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	617b      	str	r3, [r7, #20]

      //Apply transformation
      if((i % keyLen) == 0)
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	687a      	ldr	r2, [r7, #4]
 8000a9a:	fbb3 f2f2 	udiv	r2, r3, r2
 8000a9e:	6879      	ldr	r1, [r7, #4]
 8000aa0:	fb01 f202 	mul.w	r2, r1, r2
 8000aa4:	1a9b      	subs	r3, r3, r2
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14e      	bne.n	8000b48 <aesInit+0x17c>
      {
         context->ek[i] = sbox[(temp >> 8) & 0xFF];
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	0a1b      	lsrs	r3, r3, #8
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	4aa3      	ldr	r2, [pc, #652]	; (8000d40 <aesInit+0x374>)
 8000ab2:	5cd3      	ldrb	r3, [r2, r3]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	68fa      	ldr	r2, [r7, #12]
 8000ab8:	69fb      	ldr	r3, [r7, #28]
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	4413      	add	r3, r2
 8000abe:	6059      	str	r1, [r3, #4]
         context->ek[i] |= (sbox[(temp >> 16) & 0xFF] << 8);
 8000ac0:	68fa      	ldr	r2, [r7, #12]
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	4413      	add	r3, r2
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	697a      	ldr	r2, [r7, #20]
 8000acc:	0c12      	lsrs	r2, r2, #16
 8000ace:	b2d2      	uxtb	r2, r2
 8000ad0:	499b      	ldr	r1, [pc, #620]	; (8000d40 <aesInit+0x374>)
 8000ad2:	5c8a      	ldrb	r2, [r1, r2]
 8000ad4:	0212      	lsls	r2, r2, #8
 8000ad6:	431a      	orrs	r2, r3
 8000ad8:	68f9      	ldr	r1, [r7, #12]
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	440b      	add	r3, r1
 8000ae0:	605a      	str	r2, [r3, #4]
         context->ek[i] |= (sbox[(temp >> 24) & 0xFF] << 16);
 8000ae2:	68fa      	ldr	r2, [r7, #12]
 8000ae4:	69fb      	ldr	r3, [r7, #28]
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	4413      	add	r3, r2
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	697a      	ldr	r2, [r7, #20]
 8000aee:	0e12      	lsrs	r2, r2, #24
 8000af0:	4993      	ldr	r1, [pc, #588]	; (8000d40 <aesInit+0x374>)
 8000af2:	5c8a      	ldrb	r2, [r1, r2]
 8000af4:	0412      	lsls	r2, r2, #16
 8000af6:	431a      	orrs	r2, r3
 8000af8:	68f9      	ldr	r1, [r7, #12]
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	440b      	add	r3, r1
 8000b00:	605a      	str	r2, [r3, #4]
         context->ek[i] |= (sbox[temp & 0xFF] << 24);
 8000b02:	68fa      	ldr	r2, [r7, #12]
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	4413      	add	r3, r2
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	697a      	ldr	r2, [r7, #20]
 8000b0e:	b2d2      	uxtb	r2, r2
 8000b10:	498b      	ldr	r1, [pc, #556]	; (8000d40 <aesInit+0x374>)
 8000b12:	5c8a      	ldrb	r2, [r1, r2]
 8000b14:	0612      	lsls	r2, r2, #24
 8000b16:	431a      	orrs	r2, r3
 8000b18:	68f9      	ldr	r1, [r7, #12]
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	440b      	add	r3, r1
 8000b20:	605a      	str	r2, [r3, #4]
         context->ek[i] ^= rcon[i / keyLen];
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	69fb      	ldr	r3, [r7, #28]
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	4413      	add	r3, r2
 8000b2a:	685a      	ldr	r2, [r3, #4]
 8000b2c:	69f9      	ldr	r1, [r7, #28]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b34:	4983      	ldr	r1, [pc, #524]	; (8000d44 <aesInit+0x378>)
 8000b36:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b3a:	405a      	eors	r2, r3
 8000b3c:	68f9      	ldr	r1, [r7, #12]
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	440b      	add	r3, r1
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	e04f      	b.n	8000be8 <aesInit+0x21c>
      }
      else if(keyLen > 6 && (i % keyLen) == 4)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2b06      	cmp	r3, #6
 8000b4c:	d946      	bls.n	8000bdc <aesInit+0x210>
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	fb01 f202 	mul.w	r2, r1, r2
 8000b5c:	1a9b      	subs	r3, r3, r2
 8000b5e:	2b04      	cmp	r3, #4
 8000b60:	d13c      	bne.n	8000bdc <aesInit+0x210>
      {
         context->ek[i] = sbox[temp & 0xFF];
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	4a76      	ldr	r2, [pc, #472]	; (8000d40 <aesInit+0x374>)
 8000b68:	5cd3      	ldrb	r3, [r2, r3]
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	68fa      	ldr	r2, [r7, #12]
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	4413      	add	r3, r2
 8000b74:	6059      	str	r1, [r3, #4]
         context->ek[i] |= (sbox[(temp >> 8) & 0xFF] << 8);
 8000b76:	68fa      	ldr	r2, [r7, #12]
 8000b78:	69fb      	ldr	r3, [r7, #28]
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	4413      	add	r3, r2
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	697a      	ldr	r2, [r7, #20]
 8000b82:	0a12      	lsrs	r2, r2, #8
 8000b84:	b2d2      	uxtb	r2, r2
 8000b86:	496e      	ldr	r1, [pc, #440]	; (8000d40 <aesInit+0x374>)
 8000b88:	5c8a      	ldrb	r2, [r1, r2]
 8000b8a:	0212      	lsls	r2, r2, #8
 8000b8c:	431a      	orrs	r2, r3
 8000b8e:	68f9      	ldr	r1, [r7, #12]
 8000b90:	69fb      	ldr	r3, [r7, #28]
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	440b      	add	r3, r1
 8000b96:	605a      	str	r2, [r3, #4]
         context->ek[i] |= (sbox[(temp >> 16) & 0xFF] << 16);
 8000b98:	68fa      	ldr	r2, [r7, #12]
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	4413      	add	r3, r2
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	697a      	ldr	r2, [r7, #20]
 8000ba4:	0c12      	lsrs	r2, r2, #16
 8000ba6:	b2d2      	uxtb	r2, r2
 8000ba8:	4965      	ldr	r1, [pc, #404]	; (8000d40 <aesInit+0x374>)
 8000baa:	5c8a      	ldrb	r2, [r1, r2]
 8000bac:	0412      	lsls	r2, r2, #16
 8000bae:	431a      	orrs	r2, r3
 8000bb0:	68f9      	ldr	r1, [r7, #12]
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	440b      	add	r3, r1
 8000bb8:	605a      	str	r2, [r3, #4]
         context->ek[i] |= (sbox[(temp >> 24) & 0xFF] << 24);
 8000bba:	68fa      	ldr	r2, [r7, #12]
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	4413      	add	r3, r2
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	697a      	ldr	r2, [r7, #20]
 8000bc6:	0e12      	lsrs	r2, r2, #24
 8000bc8:	495d      	ldr	r1, [pc, #372]	; (8000d40 <aesInit+0x374>)
 8000bca:	5c8a      	ldrb	r2, [r1, r2]
 8000bcc:	0612      	lsls	r2, r2, #24
 8000bce:	431a      	orrs	r2, r3
 8000bd0:	68f9      	ldr	r1, [r7, #12]
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	440b      	add	r3, r1
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	e005      	b.n	8000be8 <aesInit+0x21c>
      }
      else
      {
         context->ek[i] = temp;
 8000bdc:	68fa      	ldr	r2, [r7, #12]
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	4413      	add	r3, r2
 8000be4:	697a      	ldr	r2, [r7, #20]
 8000be6:	605a      	str	r2, [r3, #4]
      }

      //Update the key schedule
      context->ek[i] ^= context->ek[i - keyLen];
 8000be8:	68fa      	ldr	r2, [r7, #12]
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	4413      	add	r3, r2
 8000bf0:	685a      	ldr	r2, [r3, #4]
 8000bf2:	69f9      	ldr	r1, [r7, #28]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	1acb      	subs	r3, r1, r3
 8000bf8:	68f9      	ldr	r1, [r7, #12]
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	440b      	add	r3, r1
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	405a      	eors	r2, r3
 8000c02:	68f9      	ldr	r1, [r7, #12]
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	440b      	add	r3, r1
 8000c0a:	605a      	str	r2, [r3, #4]
   for(i = keyLen; i < keyScheduleSize; i++)
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	61fb      	str	r3, [r7, #28]
 8000c12:	69fa      	ldr	r2, [r7, #28]
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	f4ff af36 	bcc.w	8000a88 <aesInit+0xbc>
   }

   //Generate the key schedule (decryption)
   for(i = 0; i < keyScheduleSize; i++)
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	61fb      	str	r3, [r7, #28]
 8000c20:	e081      	b.n	8000d26 <aesInit+0x35a>
   {
      //Apply the InvMixColumns transformation to all round keys
      //but the first and the last
      if(i < 4 || i >= (keyScheduleSize - 4))
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	2b03      	cmp	r3, #3
 8000c26:	d904      	bls.n	8000c32 <aesInit+0x266>
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	3b04      	subs	r3, #4
 8000c2c:	69fa      	ldr	r2, [r7, #28]
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	d30b      	bcc.n	8000c4a <aesInit+0x27e>
      {
         context->dk[i] = context->ek[i];
 8000c32:	68fa      	ldr	r2, [r7, #12]
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	4413      	add	r3, r2
 8000c3a:	685a      	ldr	r2, [r3, #4]
 8000c3c:	68f9      	ldr	r1, [r7, #12]
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	333c      	adds	r3, #60	; 0x3c
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	440b      	add	r3, r1
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	e06a      	b.n	8000d20 <aesInit+0x354>
      }
      else
      {
         context->dk[i] = td[sbox[context->ek[i] & 0xFF]];
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	4413      	add	r3, r2
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	4a3a      	ldr	r2, [pc, #232]	; (8000d40 <aesInit+0x374>)
 8000c58:	5cd3      	ldrb	r3, [r2, r3]
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	4b3a      	ldr	r3, [pc, #232]	; (8000d48 <aesInit+0x37c>)
 8000c5e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c62:	68f9      	ldr	r1, [r7, #12]
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	333c      	adds	r3, #60	; 0x3c
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	440b      	add	r3, r1
 8000c6c:	605a      	str	r2, [r3, #4]
         temp = td[sbox[(context->ek[i] >> 8) & 0xFF]];
 8000c6e:	68fa      	ldr	r2, [r7, #12]
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	4413      	add	r3, r2
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	0a1b      	lsrs	r3, r3, #8
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	4a30      	ldr	r2, [pc, #192]	; (8000d40 <aesInit+0x374>)
 8000c7e:	5cd3      	ldrb	r3, [r2, r3]
 8000c80:	461a      	mov	r2, r3
 8000c82:	4b31      	ldr	r3, [pc, #196]	; (8000d48 <aesInit+0x37c>)
 8000c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c88:	617b      	str	r3, [r7, #20]
         context->dk[i] ^= ROL32(temp, 8);
 8000c8a:	68fa      	ldr	r2, [r7, #12]
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	333c      	adds	r3, #60	; 0x3c
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	4413      	add	r3, r2
 8000c94:	685a      	ldr	r2, [r3, #4]
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	ea4f 6333 	mov.w	r3, r3, ror #24
 8000c9c:	405a      	eors	r2, r3
 8000c9e:	68f9      	ldr	r1, [r7, #12]
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	333c      	adds	r3, #60	; 0x3c
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	440b      	add	r3, r1
 8000ca8:	605a      	str	r2, [r3, #4]
         temp = td[sbox[(context->ek[i] >> 16) & 0xFF]];
 8000caa:	68fa      	ldr	r2, [r7, #12]
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	4413      	add	r3, r2
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	0c1b      	lsrs	r3, r3, #16
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	4a21      	ldr	r2, [pc, #132]	; (8000d40 <aesInit+0x374>)
 8000cba:	5cd3      	ldrb	r3, [r2, r3]
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	4b22      	ldr	r3, [pc, #136]	; (8000d48 <aesInit+0x37c>)
 8000cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cc4:	617b      	str	r3, [r7, #20]
         context->dk[i] ^= ROL32(temp, 16);
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	333c      	adds	r3, #60	; 0x3c
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	4413      	add	r3, r2
 8000cd0:	685a      	ldr	r2, [r3, #4]
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	ea4f 4333 	mov.w	r3, r3, ror #16
 8000cd8:	405a      	eors	r2, r3
 8000cda:	68f9      	ldr	r1, [r7, #12]
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	333c      	adds	r3, #60	; 0x3c
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	440b      	add	r3, r1
 8000ce4:	605a      	str	r2, [r3, #4]
         temp = td[sbox[(context->ek[i] >> 24) & 0xFF]];
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	4413      	add	r3, r2
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	0e1b      	lsrs	r3, r3, #24
 8000cf2:	4a13      	ldr	r2, [pc, #76]	; (8000d40 <aesInit+0x374>)
 8000cf4:	5cd3      	ldrb	r3, [r2, r3]
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <aesInit+0x37c>)
 8000cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cfe:	617b      	str	r3, [r7, #20]
         context->dk[i] ^= ROL32(temp, 24);
 8000d00:	68fa      	ldr	r2, [r7, #12]
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	333c      	adds	r3, #60	; 0x3c
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	4413      	add	r3, r2
 8000d0a:	685a      	ldr	r2, [r3, #4]
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	ea4f 2333 	mov.w	r3, r3, ror #8
 8000d12:	405a      	eors	r2, r3
 8000d14:	68f9      	ldr	r1, [r7, #12]
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	333c      	adds	r3, #60	; 0x3c
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	440b      	add	r3, r1
 8000d1e:	605a      	str	r2, [r3, #4]
   for(i = 0; i < keyScheduleSize; i++)
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	3301      	adds	r3, #1
 8000d24:	61fb      	str	r3, [r7, #28]
 8000d26:	69fa      	ldr	r2, [r7, #28]
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	f4ff af79 	bcc.w	8000c22 <aesInit+0x256>
      }
   }

   //No error to report
   return NO_ERROR;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3724      	adds	r7, #36	; 0x24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	08007e20 	.word	0x08007e20
 8000d44:	08008820 	.word	0x08008820
 8000d48:	08008420 	.word	0x08008420

08000d4c <aesEncryptBlock>:
 * @param[in] input Plaintext block to encrypt
 * @param[out] output Ciphertext block resulting from encryption
 **/

void aesEncryptBlock(AesContext *context, const uint8_t *input, uint8_t *output)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b08f      	sub	sp, #60	; 0x3c
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
   uint32_t t2;
   uint32_t t3;
   uint32_t temp;

   //Copy the plaintext to the state array
   s0 = LOAD32LE(input + 0);
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	3301      	adds	r3, #1
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	021b      	lsls	r3, r3, #8
 8000d66:	431a      	orrs	r2, r3
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	3302      	adds	r3, #2
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	041b      	lsls	r3, r3, #16
 8000d70:	431a      	orrs	r2, r3
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	3303      	adds	r3, #3
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	061b      	lsls	r3, r3, #24
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	633b      	str	r3, [r7, #48]	; 0x30
   s1 = LOAD32LE(input + 4);
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	3304      	adds	r3, #4
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	461a      	mov	r2, r3
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	3304      	adds	r3, #4
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	021b      	lsls	r3, r3, #8
 8000d90:	431a      	orrs	r2, r3
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	3304      	adds	r3, #4
 8000d96:	3302      	adds	r3, #2
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	041b      	lsls	r3, r3, #16
 8000d9c:	431a      	orrs	r2, r3
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	3304      	adds	r3, #4
 8000da2:	3303      	adds	r3, #3
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	061b      	lsls	r3, r3, #24
 8000da8:	4313      	orrs	r3, r2
 8000daa:	62fb      	str	r3, [r7, #44]	; 0x2c
   s2 = LOAD32LE(input + 8);
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	3308      	adds	r3, #8
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	461a      	mov	r2, r3
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	3308      	adds	r3, #8
 8000db8:	3301      	adds	r3, #1
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	021b      	lsls	r3, r3, #8
 8000dbe:	431a      	orrs	r2, r3
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	3308      	adds	r3, #8
 8000dc4:	3302      	adds	r3, #2
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	041b      	lsls	r3, r3, #16
 8000dca:	431a      	orrs	r2, r3
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	3308      	adds	r3, #8
 8000dd0:	3303      	adds	r3, #3
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	061b      	lsls	r3, r3, #24
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	62bb      	str	r3, [r7, #40]	; 0x28
   s3 = LOAD32LE(input + 12);
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	330c      	adds	r3, #12
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	461a      	mov	r2, r3
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	330c      	adds	r3, #12
 8000de6:	3301      	adds	r3, #1
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	021b      	lsls	r3, r3, #8
 8000dec:	431a      	orrs	r2, r3
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	330c      	adds	r3, #12
 8000df2:	3302      	adds	r3, #2
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	041b      	lsls	r3, r3, #16
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	330c      	adds	r3, #12
 8000dfe:	3303      	adds	r3, #3
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	061b      	lsls	r3, r3, #24
 8000e04:	4313      	orrs	r3, r2
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24

   //Initial round key addition
   s0 ^= context->ek[0];
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e0e:	4053      	eors	r3, r2
 8000e10:	633b      	str	r3, [r7, #48]	; 0x30
   s1 ^= context->ek[1];
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e18:	4053      	eors	r3, r2
 8000e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   s2 ^= context->ek[2];
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e22:	4053      	eors	r3, r2
 8000e24:	62bb      	str	r3, [r7, #40]	; 0x28
   s3 ^= context->ek[3];
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	691b      	ldr	r3, [r3, #16]
 8000e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e2c:	4053      	eors	r3, r2
 8000e2e:	627b      	str	r3, [r7, #36]	; 0x24

   //The number of rounds depends on the key length
   for(i = 1; i < context->nr; i++)
 8000e30:	2301      	movs	r3, #1
 8000e32:	637b      	str	r3, [r7, #52]	; 0x34
 8000e34:	e0d9      	b.n	8000fea <aesEncryptBlock+0x29e>
   {
      //Apply round function
      t0 = te[s0 & 0xFF];
 8000e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	4aa2      	ldr	r2, [pc, #648]	; (80010c4 <aesEncryptBlock+0x378>)
 8000e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e40:	623b      	str	r3, [r7, #32]
      temp = te[(s1 >> 8) & 0xFF];
 8000e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e44:	0a1b      	lsrs	r3, r3, #8
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	4a9e      	ldr	r2, [pc, #632]	; (80010c4 <aesEncryptBlock+0x378>)
 8000e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e4e:	613b      	str	r3, [r7, #16]
      t0 ^= ROL32(temp, 8);
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	ea4f 6333 	mov.w	r3, r3, ror #24
 8000e56:	6a3a      	ldr	r2, [r7, #32]
 8000e58:	4053      	eors	r3, r2
 8000e5a:	623b      	str	r3, [r7, #32]
      temp = te[(s2 >> 16) & 0xFF];
 8000e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e5e:	0c1b      	lsrs	r3, r3, #16
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	4a98      	ldr	r2, [pc, #608]	; (80010c4 <aesEncryptBlock+0x378>)
 8000e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e68:	613b      	str	r3, [r7, #16]
      t0 ^= ROL32(temp, 16);
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	ea4f 4333 	mov.w	r3, r3, ror #16
 8000e70:	6a3a      	ldr	r2, [r7, #32]
 8000e72:	4053      	eors	r3, r2
 8000e74:	623b      	str	r3, [r7, #32]
      temp = te[(s3 >> 24) & 0xFF];
 8000e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e78:	0e1b      	lsrs	r3, r3, #24
 8000e7a:	4a92      	ldr	r2, [pc, #584]	; (80010c4 <aesEncryptBlock+0x378>)
 8000e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e80:	613b      	str	r3, [r7, #16]
      t0 ^= ROL32(temp, 24);
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	ea4f 2333 	mov.w	r3, r3, ror #8
 8000e88:	6a3a      	ldr	r2, [r7, #32]
 8000e8a:	4053      	eors	r3, r2
 8000e8c:	623b      	str	r3, [r7, #32]

      t1 = te[s1 & 0xFF];
 8000e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	4a8c      	ldr	r2, [pc, #560]	; (80010c4 <aesEncryptBlock+0x378>)
 8000e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e98:	61fb      	str	r3, [r7, #28]
      temp = te[(s2 >> 8) & 0xFF];
 8000e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e9c:	0a1b      	lsrs	r3, r3, #8
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	4a88      	ldr	r2, [pc, #544]	; (80010c4 <aesEncryptBlock+0x378>)
 8000ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ea6:	613b      	str	r3, [r7, #16]
      t1 ^= ROL32(temp, 8);
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	ea4f 6333 	mov.w	r3, r3, ror #24
 8000eae:	69fa      	ldr	r2, [r7, #28]
 8000eb0:	4053      	eors	r3, r2
 8000eb2:	61fb      	str	r3, [r7, #28]
      temp = te[(s3 >> 16) & 0xFF];
 8000eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb6:	0c1b      	lsrs	r3, r3, #16
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	4a82      	ldr	r2, [pc, #520]	; (80010c4 <aesEncryptBlock+0x378>)
 8000ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec0:	613b      	str	r3, [r7, #16]
      t1 ^= ROL32(temp, 16);
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	ea4f 4333 	mov.w	r3, r3, ror #16
 8000ec8:	69fa      	ldr	r2, [r7, #28]
 8000eca:	4053      	eors	r3, r2
 8000ecc:	61fb      	str	r3, [r7, #28]
      temp = te[(s0 >> 24) & 0xFF];
 8000ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ed0:	0e1b      	lsrs	r3, r3, #24
 8000ed2:	4a7c      	ldr	r2, [pc, #496]	; (80010c4 <aesEncryptBlock+0x378>)
 8000ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed8:	613b      	str	r3, [r7, #16]
      t1 ^= ROL32(temp, 24);
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	ea4f 2333 	mov.w	r3, r3, ror #8
 8000ee0:	69fa      	ldr	r2, [r7, #28]
 8000ee2:	4053      	eors	r3, r2
 8000ee4:	61fb      	str	r3, [r7, #28]

      t2 = te[s2 & 0xFF];
 8000ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	4a76      	ldr	r2, [pc, #472]	; (80010c4 <aesEncryptBlock+0x378>)
 8000eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef0:	61bb      	str	r3, [r7, #24]
      temp = te[(s3 >> 8) & 0xFF];
 8000ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef4:	0a1b      	lsrs	r3, r3, #8
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	4a72      	ldr	r2, [pc, #456]	; (80010c4 <aesEncryptBlock+0x378>)
 8000efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000efe:	613b      	str	r3, [r7, #16]
      t2 ^= ROL32(temp, 8);
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	ea4f 6333 	mov.w	r3, r3, ror #24
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4053      	eors	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
      temp = te[(s0 >> 16) & 0xFF];
 8000f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f0e:	0c1b      	lsrs	r3, r3, #16
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	4a6c      	ldr	r2, [pc, #432]	; (80010c4 <aesEncryptBlock+0x378>)
 8000f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f18:	613b      	str	r3, [r7, #16]
      t2 ^= ROL32(temp, 16);
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	ea4f 4333 	mov.w	r3, r3, ror #16
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4053      	eors	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
      temp = te[(s1 >> 24) & 0xFF];
 8000f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f28:	0e1b      	lsrs	r3, r3, #24
 8000f2a:	4a66      	ldr	r2, [pc, #408]	; (80010c4 <aesEncryptBlock+0x378>)
 8000f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f30:	613b      	str	r3, [r7, #16]
      t2 ^= ROL32(temp, 24);
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	ea4f 2333 	mov.w	r3, r3, ror #8
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4053      	eors	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]

      t3 = te[s3 & 0xFF];
 8000f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	4a60      	ldr	r2, [pc, #384]	; (80010c4 <aesEncryptBlock+0x378>)
 8000f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f48:	617b      	str	r3, [r7, #20]
      temp = te[(s0 >> 8) & 0xFF];
 8000f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f4c:	0a1b      	lsrs	r3, r3, #8
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	4a5c      	ldr	r2, [pc, #368]	; (80010c4 <aesEncryptBlock+0x378>)
 8000f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f56:	613b      	str	r3, [r7, #16]
      t3 ^= ROL32(temp, 8);
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	ea4f 6333 	mov.w	r3, r3, ror #24
 8000f5e:	697a      	ldr	r2, [r7, #20]
 8000f60:	4053      	eors	r3, r2
 8000f62:	617b      	str	r3, [r7, #20]
      temp = te[(s1 >> 16) & 0xFF];
 8000f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f66:	0c1b      	lsrs	r3, r3, #16
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	4a56      	ldr	r2, [pc, #344]	; (80010c4 <aesEncryptBlock+0x378>)
 8000f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f70:	613b      	str	r3, [r7, #16]
      t3 ^= ROL32(temp, 16);
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	ea4f 4333 	mov.w	r3, r3, ror #16
 8000f78:	697a      	ldr	r2, [r7, #20]
 8000f7a:	4053      	eors	r3, r2
 8000f7c:	617b      	str	r3, [r7, #20]
      temp = te[(s2 >> 24) & 0xFF];
 8000f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f80:	0e1b      	lsrs	r3, r3, #24
 8000f82:	4a50      	ldr	r2, [pc, #320]	; (80010c4 <aesEncryptBlock+0x378>)
 8000f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f88:	613b      	str	r3, [r7, #16]
      t3 ^= ROL32(temp, 24);
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	ea4f 2333 	mov.w	r3, r3, ror #8
 8000f90:	697a      	ldr	r2, [r7, #20]
 8000f92:	4053      	eors	r3, r2
 8000f94:	617b      	str	r3, [r7, #20]

      //Round key addition
      s0 = t0 ^ context->ek[i * 4];
 8000f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	4413      	add	r3, r2
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	6a3a      	ldr	r2, [r7, #32]
 8000fa4:	4053      	eors	r3, r2
 8000fa6:	633b      	str	r3, [r7, #48]	; 0x30
      s1 = t1 ^ context->ek[i * 4 + 1];
 8000fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	3301      	adds	r3, #1
 8000fae:	68fa      	ldr	r2, [r7, #12]
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	4413      	add	r3, r2
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	69fa      	ldr	r2, [r7, #28]
 8000fb8:	4053      	eors	r3, r2
 8000fba:	62fb      	str	r3, [r7, #44]	; 0x2c
      s2 = t2 ^ context->ek[i * 4 + 2];
 8000fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	3302      	adds	r3, #2
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	4413      	add	r3, r2
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4053      	eors	r3, r2
 8000fce:	62bb      	str	r3, [r7, #40]	; 0x28
      s3 = t3 ^ context->ek[i * 4 + 3];
 8000fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	3303      	adds	r3, #3
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	4413      	add	r3, r2
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	697a      	ldr	r2, [r7, #20]
 8000fe0:	4053      	eors	r3, r2
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
   for(i = 1; i < context->nr; i++)
 8000fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	637b      	str	r3, [r7, #52]	; 0x34
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	f4ff af20 	bcc.w	8000e36 <aesEncryptBlock+0xea>
   }

   //The last round differs slightly from the first rounds
   t0 = sbox[s0 & 0xFF];
 8000ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	4a33      	ldr	r2, [pc, #204]	; (80010c8 <aesEncryptBlock+0x37c>)
 8000ffc:	5cd3      	ldrb	r3, [r2, r3]
 8000ffe:	623b      	str	r3, [r7, #32]
   t0 |= sbox[(s1 >> 8) & 0xFF] << 8;
 8001000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001002:	0a1b      	lsrs	r3, r3, #8
 8001004:	b2db      	uxtb	r3, r3
 8001006:	4a30      	ldr	r2, [pc, #192]	; (80010c8 <aesEncryptBlock+0x37c>)
 8001008:	5cd3      	ldrb	r3, [r2, r3]
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	461a      	mov	r2, r3
 800100e:	6a3b      	ldr	r3, [r7, #32]
 8001010:	4313      	orrs	r3, r2
 8001012:	623b      	str	r3, [r7, #32]
   t0 |= sbox[(s2 >> 16) & 0xFF] << 16;
 8001014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001016:	0c1b      	lsrs	r3, r3, #16
 8001018:	b2db      	uxtb	r3, r3
 800101a:	4a2b      	ldr	r2, [pc, #172]	; (80010c8 <aesEncryptBlock+0x37c>)
 800101c:	5cd3      	ldrb	r3, [r2, r3]
 800101e:	041b      	lsls	r3, r3, #16
 8001020:	461a      	mov	r2, r3
 8001022:	6a3b      	ldr	r3, [r7, #32]
 8001024:	4313      	orrs	r3, r2
 8001026:	623b      	str	r3, [r7, #32]
   t0 |= sbox[(s3 >> 24) & 0xFF] << 24;
 8001028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102a:	0e1b      	lsrs	r3, r3, #24
 800102c:	4a26      	ldr	r2, [pc, #152]	; (80010c8 <aesEncryptBlock+0x37c>)
 800102e:	5cd3      	ldrb	r3, [r2, r3]
 8001030:	061b      	lsls	r3, r3, #24
 8001032:	461a      	mov	r2, r3
 8001034:	6a3b      	ldr	r3, [r7, #32]
 8001036:	4313      	orrs	r3, r2
 8001038:	623b      	str	r3, [r7, #32]

   t1 = sbox[s1 & 0xFF];
 800103a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800103c:	b2db      	uxtb	r3, r3
 800103e:	4a22      	ldr	r2, [pc, #136]	; (80010c8 <aesEncryptBlock+0x37c>)
 8001040:	5cd3      	ldrb	r3, [r2, r3]
 8001042:	61fb      	str	r3, [r7, #28]
   t1 |= sbox[(s2 >> 8) & 0xFF] << 8;
 8001044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001046:	0a1b      	lsrs	r3, r3, #8
 8001048:	b2db      	uxtb	r3, r3
 800104a:	4a1f      	ldr	r2, [pc, #124]	; (80010c8 <aesEncryptBlock+0x37c>)
 800104c:	5cd3      	ldrb	r3, [r2, r3]
 800104e:	021b      	lsls	r3, r3, #8
 8001050:	461a      	mov	r2, r3
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	4313      	orrs	r3, r2
 8001056:	61fb      	str	r3, [r7, #28]
   t1 |= sbox[(s3 >> 16) & 0xFF] << 16;
 8001058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105a:	0c1b      	lsrs	r3, r3, #16
 800105c:	b2db      	uxtb	r3, r3
 800105e:	4a1a      	ldr	r2, [pc, #104]	; (80010c8 <aesEncryptBlock+0x37c>)
 8001060:	5cd3      	ldrb	r3, [r2, r3]
 8001062:	041b      	lsls	r3, r3, #16
 8001064:	461a      	mov	r2, r3
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	4313      	orrs	r3, r2
 800106a:	61fb      	str	r3, [r7, #28]
   t1 |= sbox[(s0 >> 24) & 0xFF] << 24;
 800106c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800106e:	0e1b      	lsrs	r3, r3, #24
 8001070:	4a15      	ldr	r2, [pc, #84]	; (80010c8 <aesEncryptBlock+0x37c>)
 8001072:	5cd3      	ldrb	r3, [r2, r3]
 8001074:	061b      	lsls	r3, r3, #24
 8001076:	461a      	mov	r2, r3
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	4313      	orrs	r3, r2
 800107c:	61fb      	str	r3, [r7, #28]

   t2 = sbox[s2 & 0xFF];
 800107e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001080:	b2db      	uxtb	r3, r3
 8001082:	4a11      	ldr	r2, [pc, #68]	; (80010c8 <aesEncryptBlock+0x37c>)
 8001084:	5cd3      	ldrb	r3, [r2, r3]
 8001086:	61bb      	str	r3, [r7, #24]
   t2 |= sbox[(s3 >> 8) & 0xFF] << 8;
 8001088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108a:	0a1b      	lsrs	r3, r3, #8
 800108c:	b2db      	uxtb	r3, r3
 800108e:	4a0e      	ldr	r2, [pc, #56]	; (80010c8 <aesEncryptBlock+0x37c>)
 8001090:	5cd3      	ldrb	r3, [r2, r3]
 8001092:	021b      	lsls	r3, r3, #8
 8001094:	461a      	mov	r2, r3
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	4313      	orrs	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
   t2 |= sbox[(s0 >> 16) & 0xFF] << 16;
 800109c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800109e:	0c1b      	lsrs	r3, r3, #16
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	4a09      	ldr	r2, [pc, #36]	; (80010c8 <aesEncryptBlock+0x37c>)
 80010a4:	5cd3      	ldrb	r3, [r2, r3]
 80010a6:	041b      	lsls	r3, r3, #16
 80010a8:	461a      	mov	r2, r3
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
   t2 |= sbox[(s1 >> 24) & 0xFF] << 24;
 80010b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010b2:	0e1b      	lsrs	r3, r3, #24
 80010b4:	4a04      	ldr	r2, [pc, #16]	; (80010c8 <aesEncryptBlock+0x37c>)
 80010b6:	5cd3      	ldrb	r3, [r2, r3]
 80010b8:	061b      	lsls	r3, r3, #24
 80010ba:	461a      	mov	r2, r3
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	4313      	orrs	r3, r2
 80010c0:	e004      	b.n	80010cc <aesEncryptBlock+0x380>
 80010c2:	bf00      	nop
 80010c4:	08008020 	.word	0x08008020
 80010c8:	08007e20 	.word	0x08007e20
 80010cc:	61bb      	str	r3, [r7, #24]

   t3 = sbox[s3 & 0xFF];
 80010ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	4a56      	ldr	r2, [pc, #344]	; (800122c <aesEncryptBlock+0x4e0>)
 80010d4:	5cd3      	ldrb	r3, [r2, r3]
 80010d6:	617b      	str	r3, [r7, #20]
   t3 |= sbox[(s0 >> 8) & 0xFF] << 8;
 80010d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010da:	0a1b      	lsrs	r3, r3, #8
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	4a53      	ldr	r2, [pc, #332]	; (800122c <aesEncryptBlock+0x4e0>)
 80010e0:	5cd3      	ldrb	r3, [r2, r3]
 80010e2:	021b      	lsls	r3, r3, #8
 80010e4:	461a      	mov	r2, r3
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	617b      	str	r3, [r7, #20]
   t3 |= sbox[(s1 >> 16) & 0xFF] << 16;
 80010ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ee:	0c1b      	lsrs	r3, r3, #16
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	4a4e      	ldr	r2, [pc, #312]	; (800122c <aesEncryptBlock+0x4e0>)
 80010f4:	5cd3      	ldrb	r3, [r2, r3]
 80010f6:	041b      	lsls	r3, r3, #16
 80010f8:	461a      	mov	r2, r3
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	617b      	str	r3, [r7, #20]
   t3 |= sbox[(s2 >> 24) & 0xFF] << 24;
 8001100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001102:	0e1b      	lsrs	r3, r3, #24
 8001104:	4a49      	ldr	r2, [pc, #292]	; (800122c <aesEncryptBlock+0x4e0>)
 8001106:	5cd3      	ldrb	r3, [r2, r3]
 8001108:	061b      	lsls	r3, r3, #24
 800110a:	461a      	mov	r2, r3
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	4313      	orrs	r3, r2
 8001110:	617b      	str	r3, [r7, #20]

   //Last round key addition
   s0 = t0 ^ context->ek[context->nr * 4];
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	68fa      	ldr	r2, [r7, #12]
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	4413      	add	r3, r2
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	6a3a      	ldr	r2, [r7, #32]
 8001122:	4053      	eors	r3, r2
 8001124:	633b      	str	r3, [r7, #48]	; 0x30
   s1 = t1 ^ context->ek[context->nr * 4 + 1];
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	3301      	adds	r3, #1
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	4413      	add	r3, r2
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	69fa      	ldr	r2, [r7, #28]
 8001138:	4053      	eors	r3, r2
 800113a:	62fb      	str	r3, [r7, #44]	; 0x2c
   s2 = t2 ^ context->ek[context->nr * 4 + 2];
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	3302      	adds	r3, #2
 8001144:	68fa      	ldr	r2, [r7, #12]
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	4413      	add	r3, r2
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4053      	eors	r3, r2
 8001150:	62bb      	str	r3, [r7, #40]	; 0x28
   s3 = t3 ^ context->ek[context->nr * 4 + 3];
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	3303      	adds	r3, #3
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	4413      	add	r3, r2
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	697a      	ldr	r2, [r7, #20]
 8001164:	4053      	eors	r3, r2
 8001166:	627b      	str	r3, [r7, #36]	; 0x24

   //The final state is then copied to the output
   STORE32LE(s0, output + 0);
 8001168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800116a:	b2da      	uxtb	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	701a      	strb	r2, [r3, #0]
 8001170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001172:	0a1a      	lsrs	r2, r3, #8
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3301      	adds	r3, #1
 8001178:	b2d2      	uxtb	r2, r2
 800117a:	701a      	strb	r2, [r3, #0]
 800117c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800117e:	0c1a      	lsrs	r2, r3, #16
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3302      	adds	r3, #2
 8001184:	b2d2      	uxtb	r2, r2
 8001186:	701a      	strb	r2, [r3, #0]
 8001188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800118a:	0e1a      	lsrs	r2, r3, #24
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3303      	adds	r3, #3
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	701a      	strb	r2, [r3, #0]
   STORE32LE(s1, output + 4);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3304      	adds	r3, #4
 8001198:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	701a      	strb	r2, [r3, #0]
 800119e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011a0:	0a1a      	lsrs	r2, r3, #8
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	3305      	adds	r3, #5
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	701a      	strb	r2, [r3, #0]
 80011aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ac:	0c1a      	lsrs	r2, r3, #16
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	3306      	adds	r3, #6
 80011b2:	b2d2      	uxtb	r2, r2
 80011b4:	701a      	strb	r2, [r3, #0]
 80011b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011b8:	0e1a      	lsrs	r2, r3, #24
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	3307      	adds	r3, #7
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	701a      	strb	r2, [r3, #0]
   STORE32LE(s2, output + 8);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	3308      	adds	r3, #8
 80011c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011c8:	b2d2      	uxtb	r2, r2
 80011ca:	701a      	strb	r2, [r3, #0]
 80011cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ce:	0a1a      	lsrs	r2, r3, #8
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3309      	adds	r3, #9
 80011d4:	b2d2      	uxtb	r2, r2
 80011d6:	701a      	strb	r2, [r3, #0]
 80011d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011da:	0c1a      	lsrs	r2, r3, #16
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	330a      	adds	r3, #10
 80011e0:	b2d2      	uxtb	r2, r2
 80011e2:	701a      	strb	r2, [r3, #0]
 80011e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e6:	0e1a      	lsrs	r2, r3, #24
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	330b      	adds	r3, #11
 80011ec:	b2d2      	uxtb	r2, r2
 80011ee:	701a      	strb	r2, [r3, #0]
   STORE32LE(s3, output + 12);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	330c      	adds	r3, #12
 80011f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	701a      	strb	r2, [r3, #0]
 80011fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fc:	0a1a      	lsrs	r2, r3, #8
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	330d      	adds	r3, #13
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	701a      	strb	r2, [r3, #0]
 8001206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001208:	0c1a      	lsrs	r2, r3, #16
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	330e      	adds	r3, #14
 800120e:	b2d2      	uxtb	r2, r2
 8001210:	701a      	strb	r2, [r3, #0]
 8001212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001214:	0e1a      	lsrs	r2, r3, #24
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	330f      	adds	r3, #15
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	701a      	strb	r2, [r3, #0]
}
 800121e:	bf00      	nop
 8001220:	373c      	adds	r7, #60	; 0x3c
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	08007e20 	.word	0x08007e20

08001230 <aesDecryptBlock>:
 * @param[in] input Ciphertext block to decrypt
 * @param[out] output Plaintext block resulting from decryption
 **/

void aesDecryptBlock(AesContext *context, const uint8_t *input, uint8_t *output)
{
 8001230:	b480      	push	{r7}
 8001232:	b08f      	sub	sp, #60	; 0x3c
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
   uint32_t t2;
   uint32_t t3;
   uint32_t temp;

   //Copy the ciphertext to the state array
   s0 = LOAD32LE(input + 0);
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	461a      	mov	r2, r3
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	3301      	adds	r3, #1
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	021b      	lsls	r3, r3, #8
 800124a:	431a      	orrs	r2, r3
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	3302      	adds	r3, #2
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	041b      	lsls	r3, r3, #16
 8001254:	431a      	orrs	r2, r3
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	3303      	adds	r3, #3
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	061b      	lsls	r3, r3, #24
 800125e:	4313      	orrs	r3, r2
 8001260:	633b      	str	r3, [r7, #48]	; 0x30
   s1 = LOAD32LE(input + 4);
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	3304      	adds	r3, #4
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	461a      	mov	r2, r3
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	3304      	adds	r3, #4
 800126e:	3301      	adds	r3, #1
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	021b      	lsls	r3, r3, #8
 8001274:	431a      	orrs	r2, r3
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	3304      	adds	r3, #4
 800127a:	3302      	adds	r3, #2
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	041b      	lsls	r3, r3, #16
 8001280:	431a      	orrs	r2, r3
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	3304      	adds	r3, #4
 8001286:	3303      	adds	r3, #3
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	061b      	lsls	r3, r3, #24
 800128c:	4313      	orrs	r3, r2
 800128e:	62fb      	str	r3, [r7, #44]	; 0x2c
   s2 = LOAD32LE(input + 8);
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	3308      	adds	r3, #8
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	461a      	mov	r2, r3
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	3308      	adds	r3, #8
 800129c:	3301      	adds	r3, #1
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	021b      	lsls	r3, r3, #8
 80012a2:	431a      	orrs	r2, r3
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	3308      	adds	r3, #8
 80012a8:	3302      	adds	r3, #2
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	041b      	lsls	r3, r3, #16
 80012ae:	431a      	orrs	r2, r3
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	3308      	adds	r3, #8
 80012b4:	3303      	adds	r3, #3
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	061b      	lsls	r3, r3, #24
 80012ba:	4313      	orrs	r3, r2
 80012bc:	62bb      	str	r3, [r7, #40]	; 0x28
   s3 = LOAD32LE(input + 12);
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	330c      	adds	r3, #12
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	461a      	mov	r2, r3
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	330c      	adds	r3, #12
 80012ca:	3301      	adds	r3, #1
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	021b      	lsls	r3, r3, #8
 80012d0:	431a      	orrs	r2, r3
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	330c      	adds	r3, #12
 80012d6:	3302      	adds	r3, #2
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	041b      	lsls	r3, r3, #16
 80012dc:	431a      	orrs	r2, r3
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	330c      	adds	r3, #12
 80012e2:	3303      	adds	r3, #3
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	061b      	lsls	r3, r3, #24
 80012e8:	4313      	orrs	r3, r2
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24

   //Initial round key addition
   s0 ^= context->dk[context->nr * 4];
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	333c      	adds	r3, #60	; 0x3c
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4413      	add	r3, r2
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012fe:	4053      	eors	r3, r2
 8001300:	633b      	str	r3, [r7, #48]	; 0x30
   s1 ^= context->dk[context->nr * 4 + 1];
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	3301      	adds	r3, #1
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	333c      	adds	r3, #60	; 0x3c
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	4413      	add	r3, r2
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001316:	4053      	eors	r3, r2
 8001318:	62fb      	str	r3, [r7, #44]	; 0x2c
   s2 ^= context->dk[context->nr * 4 + 2];
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	3302      	adds	r3, #2
 8001322:	68fa      	ldr	r2, [r7, #12]
 8001324:	333c      	adds	r3, #60	; 0x3c
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800132e:	4053      	eors	r3, r2
 8001330:	62bb      	str	r3, [r7, #40]	; 0x28
   s3 ^= context->dk[context->nr * 4 + 3];
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	3303      	adds	r3, #3
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	333c      	adds	r3, #60	; 0x3c
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	4413      	add	r3, r2
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001346:	4053      	eors	r3, r2
 8001348:	627b      	str	r3, [r7, #36]	; 0x24

   //The number of rounds depends on the key length
   for(i = context->nr - 1; i >= 1; i--)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	3b01      	subs	r3, #1
 8001350:	637b      	str	r3, [r7, #52]	; 0x34
 8001352:	e0dd      	b.n	8001510 <aesDecryptBlock+0x2e0>
   {
      //Apply round function
      t0 = td[s0 & 0xFF];
 8001354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001356:	b2db      	uxtb	r3, r3
 8001358:	4aa2      	ldr	r2, [pc, #648]	; (80015e4 <aesDecryptBlock+0x3b4>)
 800135a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800135e:	623b      	str	r3, [r7, #32]
      temp = td[(s3 >> 8) & 0xFF];
 8001360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001362:	0a1b      	lsrs	r3, r3, #8
 8001364:	b2db      	uxtb	r3, r3
 8001366:	4a9f      	ldr	r2, [pc, #636]	; (80015e4 <aesDecryptBlock+0x3b4>)
 8001368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800136c:	613b      	str	r3, [r7, #16]
      t0 ^= ROL32(temp, 8);
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	ea4f 6333 	mov.w	r3, r3, ror #24
 8001374:	6a3a      	ldr	r2, [r7, #32]
 8001376:	4053      	eors	r3, r2
 8001378:	623b      	str	r3, [r7, #32]
      temp = td[(s2 >> 16) & 0xFF];
 800137a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800137c:	0c1b      	lsrs	r3, r3, #16
 800137e:	b2db      	uxtb	r3, r3
 8001380:	4a98      	ldr	r2, [pc, #608]	; (80015e4 <aesDecryptBlock+0x3b4>)
 8001382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001386:	613b      	str	r3, [r7, #16]
      t0 ^= ROL32(temp, 16);
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	ea4f 4333 	mov.w	r3, r3, ror #16
 800138e:	6a3a      	ldr	r2, [r7, #32]
 8001390:	4053      	eors	r3, r2
 8001392:	623b      	str	r3, [r7, #32]
      temp = td[(s1 >> 24) & 0xFF];
 8001394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001396:	0e1b      	lsrs	r3, r3, #24
 8001398:	4a92      	ldr	r2, [pc, #584]	; (80015e4 <aesDecryptBlock+0x3b4>)
 800139a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800139e:	613b      	str	r3, [r7, #16]
      t0 ^= ROL32(temp, 24);
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	ea4f 2333 	mov.w	r3, r3, ror #8
 80013a6:	6a3a      	ldr	r2, [r7, #32]
 80013a8:	4053      	eors	r3, r2
 80013aa:	623b      	str	r3, [r7, #32]

      t1 = td[s1 & 0xFF];
 80013ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	4a8c      	ldr	r2, [pc, #560]	; (80015e4 <aesDecryptBlock+0x3b4>)
 80013b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b6:	61fb      	str	r3, [r7, #28]
      temp = td[(s0 >> 8) & 0xFF];
 80013b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013ba:	0a1b      	lsrs	r3, r3, #8
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	4a89      	ldr	r2, [pc, #548]	; (80015e4 <aesDecryptBlock+0x3b4>)
 80013c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c4:	613b      	str	r3, [r7, #16]
      t1 ^= ROL32(temp, 8);
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	ea4f 6333 	mov.w	r3, r3, ror #24
 80013cc:	69fa      	ldr	r2, [r7, #28]
 80013ce:	4053      	eors	r3, r2
 80013d0:	61fb      	str	r3, [r7, #28]
      temp = td[(s3 >> 16) & 0xFF];
 80013d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d4:	0c1b      	lsrs	r3, r3, #16
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	4a82      	ldr	r2, [pc, #520]	; (80015e4 <aesDecryptBlock+0x3b4>)
 80013da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013de:	613b      	str	r3, [r7, #16]
      t1 ^= ROL32(temp, 16);
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	ea4f 4333 	mov.w	r3, r3, ror #16
 80013e6:	69fa      	ldr	r2, [r7, #28]
 80013e8:	4053      	eors	r3, r2
 80013ea:	61fb      	str	r3, [r7, #28]
      temp = td[(s2 >> 24) & 0xFF];
 80013ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ee:	0e1b      	lsrs	r3, r3, #24
 80013f0:	4a7c      	ldr	r2, [pc, #496]	; (80015e4 <aesDecryptBlock+0x3b4>)
 80013f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f6:	613b      	str	r3, [r7, #16]
      t1 ^= ROL32(temp, 24);
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	ea4f 2333 	mov.w	r3, r3, ror #8
 80013fe:	69fa      	ldr	r2, [r7, #28]
 8001400:	4053      	eors	r3, r2
 8001402:	61fb      	str	r3, [r7, #28]

      t2 = td[s2 & 0xFF];
 8001404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001406:	b2db      	uxtb	r3, r3
 8001408:	4a76      	ldr	r2, [pc, #472]	; (80015e4 <aesDecryptBlock+0x3b4>)
 800140a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140e:	61bb      	str	r3, [r7, #24]
      temp = td[(s1 >> 8) & 0xFF];
 8001410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001412:	0a1b      	lsrs	r3, r3, #8
 8001414:	b2db      	uxtb	r3, r3
 8001416:	4a73      	ldr	r2, [pc, #460]	; (80015e4 <aesDecryptBlock+0x3b4>)
 8001418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141c:	613b      	str	r3, [r7, #16]
      t2 ^= ROL32(temp, 8);
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	ea4f 6333 	mov.w	r3, r3, ror #24
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4053      	eors	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
      temp = td[(s0 >> 16) & 0xFF];
 800142a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800142c:	0c1b      	lsrs	r3, r3, #16
 800142e:	b2db      	uxtb	r3, r3
 8001430:	4a6c      	ldr	r2, [pc, #432]	; (80015e4 <aesDecryptBlock+0x3b4>)
 8001432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001436:	613b      	str	r3, [r7, #16]
      t2 ^= ROL32(temp, 16);
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	ea4f 4333 	mov.w	r3, r3, ror #16
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4053      	eors	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
      temp = td[(s3 >> 24) & 0xFF];
 8001444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001446:	0e1b      	lsrs	r3, r3, #24
 8001448:	4a66      	ldr	r2, [pc, #408]	; (80015e4 <aesDecryptBlock+0x3b4>)
 800144a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800144e:	613b      	str	r3, [r7, #16]
      t2 ^= ROL32(temp, 24);
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4053      	eors	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]

      t3 = td[s3 & 0xFF];
 800145c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145e:	b2db      	uxtb	r3, r3
 8001460:	4a60      	ldr	r2, [pc, #384]	; (80015e4 <aesDecryptBlock+0x3b4>)
 8001462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001466:	617b      	str	r3, [r7, #20]
      temp = td[(s2 >> 8) & 0xFF];
 8001468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800146a:	0a1b      	lsrs	r3, r3, #8
 800146c:	b2db      	uxtb	r3, r3
 800146e:	4a5d      	ldr	r2, [pc, #372]	; (80015e4 <aesDecryptBlock+0x3b4>)
 8001470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001474:	613b      	str	r3, [r7, #16]
      t3 ^= ROL32(temp, 8);
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	ea4f 6333 	mov.w	r3, r3, ror #24
 800147c:	697a      	ldr	r2, [r7, #20]
 800147e:	4053      	eors	r3, r2
 8001480:	617b      	str	r3, [r7, #20]
      temp = td[(s1 >> 16) & 0xFF];
 8001482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001484:	0c1b      	lsrs	r3, r3, #16
 8001486:	b2db      	uxtb	r3, r3
 8001488:	4a56      	ldr	r2, [pc, #344]	; (80015e4 <aesDecryptBlock+0x3b4>)
 800148a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800148e:	613b      	str	r3, [r7, #16]
      t3 ^= ROL32(temp, 16);
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	ea4f 4333 	mov.w	r3, r3, ror #16
 8001496:	697a      	ldr	r2, [r7, #20]
 8001498:	4053      	eors	r3, r2
 800149a:	617b      	str	r3, [r7, #20]
      temp = td[(s0 >> 24) & 0xFF];
 800149c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800149e:	0e1b      	lsrs	r3, r3, #24
 80014a0:	4a50      	ldr	r2, [pc, #320]	; (80015e4 <aesDecryptBlock+0x3b4>)
 80014a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a6:	613b      	str	r3, [r7, #16]
      t3 ^= ROL32(temp, 24);
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	ea4f 2333 	mov.w	r3, r3, ror #8
 80014ae:	697a      	ldr	r2, [r7, #20]
 80014b0:	4053      	eors	r3, r2
 80014b2:	617b      	str	r3, [r7, #20]

      //Round key addition
      s0 = t0 ^ context->dk[i * 4];
 80014b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	68fa      	ldr	r2, [r7, #12]
 80014ba:	333c      	adds	r3, #60	; 0x3c
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	6a3a      	ldr	r2, [r7, #32]
 80014c4:	4053      	eors	r3, r2
 80014c6:	633b      	str	r3, [r7, #48]	; 0x30
      s1 = t1 ^ context->dk[i * 4 + 1];
 80014c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	3301      	adds	r3, #1
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	333c      	adds	r3, #60	; 0x3c
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	69fa      	ldr	r2, [r7, #28]
 80014da:	4053      	eors	r3, r2
 80014dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      s2 = t2 ^ context->dk[i * 4 + 2];
 80014de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	3302      	adds	r3, #2
 80014e4:	68fa      	ldr	r2, [r7, #12]
 80014e6:	333c      	adds	r3, #60	; 0x3c
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	4413      	add	r3, r2
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4053      	eors	r3, r2
 80014f2:	62bb      	str	r3, [r7, #40]	; 0x28
      s3 = t3 ^ context->dk[i * 4 + 3];
 80014f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	3303      	adds	r3, #3
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	333c      	adds	r3, #60	; 0x3c
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	697a      	ldr	r2, [r7, #20]
 8001506:	4053      	eors	r3, r2
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
   for(i = context->nr - 1; i >= 1; i--)
 800150a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800150c:	3b01      	subs	r3, #1
 800150e:	637b      	str	r3, [r7, #52]	; 0x34
 8001510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001512:	2b00      	cmp	r3, #0
 8001514:	f47f af1e 	bne.w	8001354 <aesDecryptBlock+0x124>
   }

   //The last round differs slightly from the first rounds
   t0 = isbox[s0 & 0xFF];
 8001518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800151a:	b2db      	uxtb	r3, r3
 800151c:	4a32      	ldr	r2, [pc, #200]	; (80015e8 <aesDecryptBlock+0x3b8>)
 800151e:	5cd3      	ldrb	r3, [r2, r3]
 8001520:	623b      	str	r3, [r7, #32]
   t0 |= isbox[(s3 >> 8) & 0xFF] << 8;
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	0a1b      	lsrs	r3, r3, #8
 8001526:	b2db      	uxtb	r3, r3
 8001528:	4a2f      	ldr	r2, [pc, #188]	; (80015e8 <aesDecryptBlock+0x3b8>)
 800152a:	5cd3      	ldrb	r3, [r2, r3]
 800152c:	021b      	lsls	r3, r3, #8
 800152e:	461a      	mov	r2, r3
 8001530:	6a3b      	ldr	r3, [r7, #32]
 8001532:	4313      	orrs	r3, r2
 8001534:	623b      	str	r3, [r7, #32]
   t0 |= isbox[(s2 >> 16) & 0xFF] << 16;
 8001536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001538:	0c1b      	lsrs	r3, r3, #16
 800153a:	b2db      	uxtb	r3, r3
 800153c:	4a2a      	ldr	r2, [pc, #168]	; (80015e8 <aesDecryptBlock+0x3b8>)
 800153e:	5cd3      	ldrb	r3, [r2, r3]
 8001540:	041b      	lsls	r3, r3, #16
 8001542:	461a      	mov	r2, r3
 8001544:	6a3b      	ldr	r3, [r7, #32]
 8001546:	4313      	orrs	r3, r2
 8001548:	623b      	str	r3, [r7, #32]
   t0 |= isbox[(s1 >> 24) & 0xFF] << 24;
 800154a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800154c:	0e1b      	lsrs	r3, r3, #24
 800154e:	4a26      	ldr	r2, [pc, #152]	; (80015e8 <aesDecryptBlock+0x3b8>)
 8001550:	5cd3      	ldrb	r3, [r2, r3]
 8001552:	061b      	lsls	r3, r3, #24
 8001554:	461a      	mov	r2, r3
 8001556:	6a3b      	ldr	r3, [r7, #32]
 8001558:	4313      	orrs	r3, r2
 800155a:	623b      	str	r3, [r7, #32]

   t1 = isbox[s1 & 0xFF];
 800155c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800155e:	b2db      	uxtb	r3, r3
 8001560:	4a21      	ldr	r2, [pc, #132]	; (80015e8 <aesDecryptBlock+0x3b8>)
 8001562:	5cd3      	ldrb	r3, [r2, r3]
 8001564:	61fb      	str	r3, [r7, #28]
   t1 |= isbox[(s0 >> 8) & 0xFF] << 8;
 8001566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001568:	0a1b      	lsrs	r3, r3, #8
 800156a:	b2db      	uxtb	r3, r3
 800156c:	4a1e      	ldr	r2, [pc, #120]	; (80015e8 <aesDecryptBlock+0x3b8>)
 800156e:	5cd3      	ldrb	r3, [r2, r3]
 8001570:	021b      	lsls	r3, r3, #8
 8001572:	461a      	mov	r2, r3
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	4313      	orrs	r3, r2
 8001578:	61fb      	str	r3, [r7, #28]
   t1 |= isbox[(s3 >> 16) & 0xFF] << 16;
 800157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157c:	0c1b      	lsrs	r3, r3, #16
 800157e:	b2db      	uxtb	r3, r3
 8001580:	4a19      	ldr	r2, [pc, #100]	; (80015e8 <aesDecryptBlock+0x3b8>)
 8001582:	5cd3      	ldrb	r3, [r2, r3]
 8001584:	041b      	lsls	r3, r3, #16
 8001586:	461a      	mov	r2, r3
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	4313      	orrs	r3, r2
 800158c:	61fb      	str	r3, [r7, #28]
   t1 |= isbox[(s2 >> 24) & 0xFF] << 24;
 800158e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001590:	0e1b      	lsrs	r3, r3, #24
 8001592:	4a15      	ldr	r2, [pc, #84]	; (80015e8 <aesDecryptBlock+0x3b8>)
 8001594:	5cd3      	ldrb	r3, [r2, r3]
 8001596:	061b      	lsls	r3, r3, #24
 8001598:	461a      	mov	r2, r3
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	4313      	orrs	r3, r2
 800159e:	61fb      	str	r3, [r7, #28]

   t2 = isbox[s2 & 0xFF];
 80015a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	4a10      	ldr	r2, [pc, #64]	; (80015e8 <aesDecryptBlock+0x3b8>)
 80015a6:	5cd3      	ldrb	r3, [r2, r3]
 80015a8:	61bb      	str	r3, [r7, #24]
   t2 |= isbox[(s1 >> 8) & 0xFF] << 8;
 80015aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ac:	0a1b      	lsrs	r3, r3, #8
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	4a0d      	ldr	r2, [pc, #52]	; (80015e8 <aesDecryptBlock+0x3b8>)
 80015b2:	5cd3      	ldrb	r3, [r2, r3]
 80015b4:	021b      	lsls	r3, r3, #8
 80015b6:	461a      	mov	r2, r3
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
   t2 |= isbox[(s0 >> 16) & 0xFF] << 16;
 80015be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015c0:	0c1b      	lsrs	r3, r3, #16
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	4a08      	ldr	r2, [pc, #32]	; (80015e8 <aesDecryptBlock+0x3b8>)
 80015c6:	5cd3      	ldrb	r3, [r2, r3]
 80015c8:	041b      	lsls	r3, r3, #16
 80015ca:	461a      	mov	r2, r3
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
   t2 |= isbox[(s3 >> 24) & 0xFF] << 24;
 80015d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d4:	0e1b      	lsrs	r3, r3, #24
 80015d6:	4a04      	ldr	r2, [pc, #16]	; (80015e8 <aesDecryptBlock+0x3b8>)
 80015d8:	5cd3      	ldrb	r3, [r2, r3]
 80015da:	061b      	lsls	r3, r3, #24
 80015dc:	461a      	mov	r2, r3
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	e003      	b.n	80015ec <aesDecryptBlock+0x3bc>
 80015e4:	08008420 	.word	0x08008420
 80015e8:	08007f20 	.word	0x08007f20
 80015ec:	61bb      	str	r3, [r7, #24]

   t3 = isbox[s3 & 0xFF];
 80015ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	4a4c      	ldr	r2, [pc, #304]	; (8001724 <aesDecryptBlock+0x4f4>)
 80015f4:	5cd3      	ldrb	r3, [r2, r3]
 80015f6:	617b      	str	r3, [r7, #20]
   t3 |= isbox[(s2 >> 8) & 0xFF] << 8;
 80015f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015fa:	0a1b      	lsrs	r3, r3, #8
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	4a49      	ldr	r2, [pc, #292]	; (8001724 <aesDecryptBlock+0x4f4>)
 8001600:	5cd3      	ldrb	r3, [r2, r3]
 8001602:	021b      	lsls	r3, r3, #8
 8001604:	461a      	mov	r2, r3
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	4313      	orrs	r3, r2
 800160a:	617b      	str	r3, [r7, #20]
   t3 |= isbox[(s1 >> 16) & 0xFF] << 16;
 800160c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800160e:	0c1b      	lsrs	r3, r3, #16
 8001610:	b2db      	uxtb	r3, r3
 8001612:	4a44      	ldr	r2, [pc, #272]	; (8001724 <aesDecryptBlock+0x4f4>)
 8001614:	5cd3      	ldrb	r3, [r2, r3]
 8001616:	041b      	lsls	r3, r3, #16
 8001618:	461a      	mov	r2, r3
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	4313      	orrs	r3, r2
 800161e:	617b      	str	r3, [r7, #20]
   t3 |= isbox[(s0 >> 24) & 0xFF] << 24;
 8001620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001622:	0e1b      	lsrs	r3, r3, #24
 8001624:	4a3f      	ldr	r2, [pc, #252]	; (8001724 <aesDecryptBlock+0x4f4>)
 8001626:	5cd3      	ldrb	r3, [r2, r3]
 8001628:	061b      	lsls	r3, r3, #24
 800162a:	461a      	mov	r2, r3
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	4313      	orrs	r3, r2
 8001630:	617b      	str	r3, [r7, #20]

   //Last round key addition
   s0 = t0 ^ context->dk[0];
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001638:	6a3a      	ldr	r2, [r7, #32]
 800163a:	4053      	eors	r3, r2
 800163c:	633b      	str	r3, [r7, #48]	; 0x30
   s1 = t1 ^ context->dk[1];
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8001644:	69fa      	ldr	r2, [r7, #28]
 8001646:	4053      	eors	r3, r2
 8001648:	62fb      	str	r3, [r7, #44]	; 0x2c
   s2 = t2 ^ context->dk[2];
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4053      	eors	r3, r2
 8001654:	62bb      	str	r3, [r7, #40]	; 0x28
   s3 = t3 ^ context->dk[3];
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800165c:	697a      	ldr	r2, [r7, #20]
 800165e:	4053      	eors	r3, r2
 8001660:	627b      	str	r3, [r7, #36]	; 0x24

   //The final state is then copied to the output
   STORE32LE(s0, output + 0);
 8001662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001664:	b2da      	uxtb	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	701a      	strb	r2, [r3, #0]
 800166a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800166c:	0a1a      	lsrs	r2, r3, #8
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	3301      	adds	r3, #1
 8001672:	b2d2      	uxtb	r2, r2
 8001674:	701a      	strb	r2, [r3, #0]
 8001676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001678:	0c1a      	lsrs	r2, r3, #16
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	3302      	adds	r3, #2
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	701a      	strb	r2, [r3, #0]
 8001682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001684:	0e1a      	lsrs	r2, r3, #24
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3303      	adds	r3, #3
 800168a:	b2d2      	uxtb	r2, r2
 800168c:	701a      	strb	r2, [r3, #0]
   STORE32LE(s1, output + 4);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	3304      	adds	r3, #4
 8001692:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001694:	b2d2      	uxtb	r2, r2
 8001696:	701a      	strb	r2, [r3, #0]
 8001698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800169a:	0a1a      	lsrs	r2, r3, #8
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3305      	adds	r3, #5
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	701a      	strb	r2, [r3, #0]
 80016a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a6:	0c1a      	lsrs	r2, r3, #16
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3306      	adds	r3, #6
 80016ac:	b2d2      	uxtb	r2, r2
 80016ae:	701a      	strb	r2, [r3, #0]
 80016b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b2:	0e1a      	lsrs	r2, r3, #24
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3307      	adds	r3, #7
 80016b8:	b2d2      	uxtb	r2, r2
 80016ba:	701a      	strb	r2, [r3, #0]
   STORE32LE(s2, output + 8);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3308      	adds	r3, #8
 80016c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016c2:	b2d2      	uxtb	r2, r2
 80016c4:	701a      	strb	r2, [r3, #0]
 80016c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c8:	0a1a      	lsrs	r2, r3, #8
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3309      	adds	r3, #9
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	701a      	strb	r2, [r3, #0]
 80016d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d4:	0c1a      	lsrs	r2, r3, #16
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	330a      	adds	r3, #10
 80016da:	b2d2      	uxtb	r2, r2
 80016dc:	701a      	strb	r2, [r3, #0]
 80016de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e0:	0e1a      	lsrs	r2, r3, #24
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	330b      	adds	r3, #11
 80016e6:	b2d2      	uxtb	r2, r2
 80016e8:	701a      	strb	r2, [r3, #0]
   STORE32LE(s3, output + 12);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	330c      	adds	r3, #12
 80016ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016f0:	b2d2      	uxtb	r2, r2
 80016f2:	701a      	strb	r2, [r3, #0]
 80016f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f6:	0a1a      	lsrs	r2, r3, #8
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	330d      	adds	r3, #13
 80016fc:	b2d2      	uxtb	r2, r2
 80016fe:	701a      	strb	r2, [r3, #0]
 8001700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001702:	0c1a      	lsrs	r2, r3, #16
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	330e      	adds	r3, #14
 8001708:	b2d2      	uxtb	r2, r2
 800170a:	701a      	strb	r2, [r3, #0]
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	0e1a      	lsrs	r2, r3, #24
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	330f      	adds	r3, #15
 8001714:	b2d2      	uxtb	r2, r2
 8001716:	701a      	strb	r2, [r3, #0]
}
 8001718:	bf00      	nop
 800171a:	373c      	adds	r7, #60	; 0x3c
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	08007f20 	.word	0x08007f20

08001728 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800172e:	2300      	movs	r3, #0
 8001730:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001732:	2003      	movs	r0, #3
 8001734:	f000 f8ed 	bl	8001912 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001738:	2000      	movs	r0, #0
 800173a:	f7fe ffab 	bl	8000694 <HAL_InitTick>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d002      	beq.n	800174a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	71fb      	strb	r3, [r7, #7]
 8001748:	e001      	b.n	800174e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800174a:	f7fe ff3f 	bl	80005cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800174e:	79fb      	ldrb	r3, [r7, #7]
}
 8001750:	4618      	mov	r0, r3
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  return uwTick;
 800175c:	4b03      	ldr	r3, [pc, #12]	; (800176c <HAL_GetTick+0x14>)
 800175e:	681b      	ldr	r3, [r3, #0]
}
 8001760:	4618      	mov	r0, r3
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	20000134 	.word	0x20000134

08001770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001778:	f7ff ffee 	bl	8001758 <HAL_GetTick>
 800177c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001788:	d005      	beq.n	8001796 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800178a:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <HAL_Delay+0x44>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	461a      	mov	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4413      	add	r3, r2
 8001794:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001796:	bf00      	nop
 8001798:	f7ff ffde 	bl	8001758 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d8f7      	bhi.n	8001798 <HAL_Delay+0x28>
  {
  }
}
 80017a8:	bf00      	nop
 80017aa:	bf00      	nop
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000008 	.word	0x20000008

080017b8 <__NVIC_SetPriorityGrouping>:
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017d4:	4013      	ands	r3, r2
 80017d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ea:	4a04      	ldr	r2, [pc, #16]	; (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	60d3      	str	r3, [r2, #12]
}
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <__NVIC_GetPriorityGrouping>:
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001804:	4b04      	ldr	r3, [pc, #16]	; (8001818 <__NVIC_GetPriorityGrouping+0x18>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	0a1b      	lsrs	r3, r3, #8
 800180a:	f003 0307 	and.w	r3, r3, #7
}
 800180e:	4618      	mov	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_EnableIRQ>:
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	2b00      	cmp	r3, #0
 800182c:	db0b      	blt.n	8001846 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	f003 021f 	and.w	r2, r3, #31
 8001834:	4907      	ldr	r1, [pc, #28]	; (8001854 <__NVIC_EnableIRQ+0x38>)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	095b      	lsrs	r3, r3, #5
 800183c:	2001      	movs	r0, #1
 800183e:	fa00 f202 	lsl.w	r2, r0, r2
 8001842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000e100 	.word	0xe000e100

08001858 <__NVIC_SetPriority>:
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	6039      	str	r1, [r7, #0]
 8001862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001868:	2b00      	cmp	r3, #0
 800186a:	db0a      	blt.n	8001882 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	b2da      	uxtb	r2, r3
 8001870:	490c      	ldr	r1, [pc, #48]	; (80018a4 <__NVIC_SetPriority+0x4c>)
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	0112      	lsls	r2, r2, #4
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	440b      	add	r3, r1
 800187c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001880:	e00a      	b.n	8001898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	b2da      	uxtb	r2, r3
 8001886:	4908      	ldr	r1, [pc, #32]	; (80018a8 <__NVIC_SetPriority+0x50>)
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	3b04      	subs	r3, #4
 8001890:	0112      	lsls	r2, r2, #4
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	440b      	add	r3, r1
 8001896:	761a      	strb	r2, [r3, #24]
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000e100 	.word	0xe000e100
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <NVIC_EncodePriority>:
{
 80018ac:	b480      	push	{r7}
 80018ae:	b089      	sub	sp, #36	; 0x24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f1c3 0307 	rsb	r3, r3, #7
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	bf28      	it	cs
 80018ca:	2304      	movcs	r3, #4
 80018cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3304      	adds	r3, #4
 80018d2:	2b06      	cmp	r3, #6
 80018d4:	d902      	bls.n	80018dc <NVIC_EncodePriority+0x30>
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3b03      	subs	r3, #3
 80018da:	e000      	b.n	80018de <NVIC_EncodePriority+0x32>
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	f04f 32ff 	mov.w	r2, #4294967295
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43da      	mvns	r2, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	401a      	ands	r2, r3
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f4:	f04f 31ff 	mov.w	r1, #4294967295
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	fa01 f303 	lsl.w	r3, r1, r3
 80018fe:	43d9      	mvns	r1, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	4313      	orrs	r3, r2
}
 8001906:	4618      	mov	r0, r3
 8001908:	3724      	adds	r7, #36	; 0x24
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b082      	sub	sp, #8
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7ff ff4c 	bl	80017b8 <__NVIC_SetPriorityGrouping>
}
 8001920:	bf00      	nop
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
 8001934:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800193a:	f7ff ff61 	bl	8001800 <__NVIC_GetPriorityGrouping>
 800193e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	68b9      	ldr	r1, [r7, #8]
 8001944:	6978      	ldr	r0, [r7, #20]
 8001946:	f7ff ffb1 	bl	80018ac <NVIC_EncodePriority>
 800194a:	4602      	mov	r2, r0
 800194c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001950:	4611      	mov	r1, r2
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff ff80 	bl	8001858 <__NVIC_SetPriority>
}
 8001958:	bf00      	nop
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff ff54 	bl	800181c <__NVIC_EnableIRQ>
}
 8001974:	bf00      	nop
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e054      	b.n	8001a38 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	7f5b      	ldrb	r3, [r3, #29]
 8001992:	b2db      	uxtb	r3, r3
 8001994:	2b00      	cmp	r3, #0
 8001996:	d105      	bne.n	80019a4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7fe fe38 	bl	8000614 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2202      	movs	r2, #2
 80019a8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	791b      	ldrb	r3, [r3, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d10c      	bne.n	80019cc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a22      	ldr	r2, [pc, #136]	; (8001a40 <HAL_CRC_Init+0xc4>)
 80019b8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f022 0218 	bic.w	r2, r2, #24
 80019c8:	609a      	str	r2, [r3, #8]
 80019ca:	e00c      	b.n	80019e6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6899      	ldr	r1, [r3, #8]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	461a      	mov	r2, r3
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f000 f834 	bl	8001a44 <HAL_CRCEx_Polynomial_Set>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e028      	b.n	8001a38 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	795b      	ldrb	r3, [r3, #5]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d105      	bne.n	80019fa <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f04f 32ff 	mov.w	r2, #4294967295
 80019f6:	611a      	str	r2, [r3, #16]
 80019f8:	e004      	b.n	8001a04 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	6912      	ldr	r2, [r2, #16]
 8001a02:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	695a      	ldr	r2, [r3, #20]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	430a      	orrs	r2, r1
 8001a18:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	699a      	ldr	r2, [r3, #24]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	04c11db7 	.word	0x04c11db7

08001a44 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b087      	sub	sp, #28
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a50:	2300      	movs	r3, #0
 8001a52:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001a54:	231f      	movs	r3, #31
 8001a56:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001a58:	bf00      	nop
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1e5a      	subs	r2, r3, #1
 8001a5e:	613a      	str	r2, [r7, #16]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d009      	beq.n	8001a78 <HAL_CRCEx_Polynomial_Set+0x34>
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	f003 031f 	and.w	r3, r3, #31
 8001a6a:	68ba      	ldr	r2, [r7, #8]
 8001a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a70:	f003 0301 	and.w	r3, r3, #1
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0f0      	beq.n	8001a5a <HAL_CRCEx_Polynomial_Set+0x16>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b18      	cmp	r3, #24
 8001a7c:	d846      	bhi.n	8001b0c <HAL_CRCEx_Polynomial_Set+0xc8>
 8001a7e:	a201      	add	r2, pc, #4	; (adr r2, 8001a84 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a84:	08001b13 	.word	0x08001b13
 8001a88:	08001b0d 	.word	0x08001b0d
 8001a8c:	08001b0d 	.word	0x08001b0d
 8001a90:	08001b0d 	.word	0x08001b0d
 8001a94:	08001b0d 	.word	0x08001b0d
 8001a98:	08001b0d 	.word	0x08001b0d
 8001a9c:	08001b0d 	.word	0x08001b0d
 8001aa0:	08001b0d 	.word	0x08001b0d
 8001aa4:	08001b01 	.word	0x08001b01
 8001aa8:	08001b0d 	.word	0x08001b0d
 8001aac:	08001b0d 	.word	0x08001b0d
 8001ab0:	08001b0d 	.word	0x08001b0d
 8001ab4:	08001b0d 	.word	0x08001b0d
 8001ab8:	08001b0d 	.word	0x08001b0d
 8001abc:	08001b0d 	.word	0x08001b0d
 8001ac0:	08001b0d 	.word	0x08001b0d
 8001ac4:	08001af5 	.word	0x08001af5
 8001ac8:	08001b0d 	.word	0x08001b0d
 8001acc:	08001b0d 	.word	0x08001b0d
 8001ad0:	08001b0d 	.word	0x08001b0d
 8001ad4:	08001b0d 	.word	0x08001b0d
 8001ad8:	08001b0d 	.word	0x08001b0d
 8001adc:	08001b0d 	.word	0x08001b0d
 8001ae0:	08001b0d 	.word	0x08001b0d
 8001ae4:	08001ae9 	.word	0x08001ae9
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	2b06      	cmp	r3, #6
 8001aec:	d913      	bls.n	8001b16 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001af2:	e010      	b.n	8001b16 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	2b07      	cmp	r3, #7
 8001af8:	d90f      	bls.n	8001b1a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001afe:	e00c      	b.n	8001b1a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	2b0f      	cmp	r3, #15
 8001b04:	d90b      	bls.n	8001b1e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001b0a:	e008      	b.n	8001b1e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	75fb      	strb	r3, [r7, #23]
      break;
 8001b10:	e006      	b.n	8001b20 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001b12:	bf00      	nop
 8001b14:	e004      	b.n	8001b20 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001b16:	bf00      	nop
 8001b18:	e002      	b.n	8001b20 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001b1a:	bf00      	nop
 8001b1c:	e000      	b.n	8001b20 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001b1e:	bf00      	nop
  }
  if (status == HAL_OK)
 8001b20:	7dfb      	ldrb	r3, [r7, #23]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d10d      	bne.n	8001b42 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68ba      	ldr	r2, [r7, #8]
 8001b2c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f023 0118 	bic.w	r1, r3, #24
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	371c      	adds	r7, #28
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b087      	sub	sp, #28
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b5e:	e17f      	b.n	8001e60 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	2101      	movs	r1, #1
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f000 8171 	beq.w	8001e5a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d00b      	beq.n	8001b98 <HAL_GPIO_Init+0x48>
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d007      	beq.n	8001b98 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b8c:	2b11      	cmp	r3, #17
 8001b8e:	d003      	beq.n	8001b98 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b12      	cmp	r3, #18
 8001b96:	d130      	bne.n	8001bfa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	2203      	movs	r2, #3
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	4013      	ands	r3, r2
 8001bae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	68da      	ldr	r2, [r3, #12]
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bce:	2201      	movs	r2, #1
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	091b      	lsrs	r3, r3, #4
 8001be4:	f003 0201 	and.w	r2, r3, #1
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f003 0303 	and.w	r3, r3, #3
 8001c02:	2b03      	cmp	r3, #3
 8001c04:	d118      	bne.n	8001c38 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	08db      	lsrs	r3, r3, #3
 8001c22:	f003 0201 	and.w	r2, r3, #1
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	2203      	movs	r2, #3
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d003      	beq.n	8001c78 <HAL_GPIO_Init+0x128>
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b12      	cmp	r3, #18
 8001c76:	d123      	bne.n	8001cc0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	08da      	lsrs	r2, r3, #3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3208      	adds	r2, #8
 8001c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c84:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	220f      	movs	r2, #15
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	43db      	mvns	r3, r3
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	691a      	ldr	r2, [r3, #16]
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	08da      	lsrs	r2, r3, #3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	3208      	adds	r2, #8
 8001cba:	6939      	ldr	r1, [r7, #16]
 8001cbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	2203      	movs	r2, #3
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f003 0203 	and.w	r2, r3, #3
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f000 80ac 	beq.w	8001e5a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d02:	4b5f      	ldr	r3, [pc, #380]	; (8001e80 <HAL_GPIO_Init+0x330>)
 8001d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d06:	4a5e      	ldr	r2, [pc, #376]	; (8001e80 <HAL_GPIO_Init+0x330>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	6613      	str	r3, [r2, #96]	; 0x60
 8001d0e:	4b5c      	ldr	r3, [pc, #368]	; (8001e80 <HAL_GPIO_Init+0x330>)
 8001d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	60bb      	str	r3, [r7, #8]
 8001d18:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d1a:	4a5a      	ldr	r2, [pc, #360]	; (8001e84 <HAL_GPIO_Init+0x334>)
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	089b      	lsrs	r3, r3, #2
 8001d20:	3302      	adds	r3, #2
 8001d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d26:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	220f      	movs	r2, #15
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43db      	mvns	r3, r3
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d44:	d025      	beq.n	8001d92 <HAL_GPIO_Init+0x242>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a4f      	ldr	r2, [pc, #316]	; (8001e88 <HAL_GPIO_Init+0x338>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d01f      	beq.n	8001d8e <HAL_GPIO_Init+0x23e>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a4e      	ldr	r2, [pc, #312]	; (8001e8c <HAL_GPIO_Init+0x33c>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d019      	beq.n	8001d8a <HAL_GPIO_Init+0x23a>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a4d      	ldr	r2, [pc, #308]	; (8001e90 <HAL_GPIO_Init+0x340>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d013      	beq.n	8001d86 <HAL_GPIO_Init+0x236>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a4c      	ldr	r2, [pc, #304]	; (8001e94 <HAL_GPIO_Init+0x344>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d00d      	beq.n	8001d82 <HAL_GPIO_Init+0x232>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a4b      	ldr	r2, [pc, #300]	; (8001e98 <HAL_GPIO_Init+0x348>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d007      	beq.n	8001d7e <HAL_GPIO_Init+0x22e>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a4a      	ldr	r2, [pc, #296]	; (8001e9c <HAL_GPIO_Init+0x34c>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d101      	bne.n	8001d7a <HAL_GPIO_Init+0x22a>
 8001d76:	2306      	movs	r3, #6
 8001d78:	e00c      	b.n	8001d94 <HAL_GPIO_Init+0x244>
 8001d7a:	2307      	movs	r3, #7
 8001d7c:	e00a      	b.n	8001d94 <HAL_GPIO_Init+0x244>
 8001d7e:	2305      	movs	r3, #5
 8001d80:	e008      	b.n	8001d94 <HAL_GPIO_Init+0x244>
 8001d82:	2304      	movs	r3, #4
 8001d84:	e006      	b.n	8001d94 <HAL_GPIO_Init+0x244>
 8001d86:	2303      	movs	r3, #3
 8001d88:	e004      	b.n	8001d94 <HAL_GPIO_Init+0x244>
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	e002      	b.n	8001d94 <HAL_GPIO_Init+0x244>
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e000      	b.n	8001d94 <HAL_GPIO_Init+0x244>
 8001d92:	2300      	movs	r3, #0
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	f002 0203 	and.w	r2, r2, #3
 8001d9a:	0092      	lsls	r2, r2, #2
 8001d9c:	4093      	lsls	r3, r2
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001da4:	4937      	ldr	r1, [pc, #220]	; (8001e84 <HAL_GPIO_Init+0x334>)
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	089b      	lsrs	r3, r3, #2
 8001daa:	3302      	adds	r3, #2
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001db2:	4b3b      	ldr	r3, [pc, #236]	; (8001ea0 <HAL_GPIO_Init+0x350>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001dd6:	4a32      	ldr	r2, [pc, #200]	; (8001ea0 <HAL_GPIO_Init+0x350>)
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001ddc:	4b30      	ldr	r3, [pc, #192]	; (8001ea0 <HAL_GPIO_Init+0x350>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	43db      	mvns	r3, r3
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	4013      	ands	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d003      	beq.n	8001e00 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e00:	4a27      	ldr	r2, [pc, #156]	; (8001ea0 <HAL_GPIO_Init+0x350>)
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e06:	4b26      	ldr	r3, [pc, #152]	; (8001ea0 <HAL_GPIO_Init+0x350>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	4013      	ands	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e2a:	4a1d      	ldr	r2, [pc, #116]	; (8001ea0 <HAL_GPIO_Init+0x350>)
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e30:	4b1b      	ldr	r3, [pc, #108]	; (8001ea0 <HAL_GPIO_Init+0x350>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e54:	4a12      	ldr	r2, [pc, #72]	; (8001ea0 <HAL_GPIO_Init+0x350>)
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	fa22 f303 	lsr.w	r3, r2, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f47f ae78 	bne.w	8001b60 <HAL_GPIO_Init+0x10>
  }
}
 8001e70:	bf00      	nop
 8001e72:	bf00      	nop
 8001e74:	371c      	adds	r7, #28
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40021000 	.word	0x40021000
 8001e84:	40010000 	.word	0x40010000
 8001e88:	48000400 	.word	0x48000400
 8001e8c:	48000800 	.word	0x48000800
 8001e90:	48000c00 	.word	0x48000c00
 8001e94:	48001000 	.word	0x48001000
 8001e98:	48001400 	.word	0x48001400
 8001e9c:	48001800 	.word	0x48001800
 8001ea0:	40010400 	.word	0x40010400

08001ea4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	460b      	mov	r3, r1
 8001eae:	807b      	strh	r3, [r7, #2]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001eb4:	787b      	ldrb	r3, [r7, #1]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001eba:	887a      	ldrh	r2, [r7, #2]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ec0:	e002      	b.n	8001ec8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ec2:	887a      	ldrh	r2, [r7, #2]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	460b      	mov	r3, r1
 8001ede:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ee6:	887a      	ldrh	r2, [r7, #2]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	4013      	ands	r3, r2
 8001eec:	041a      	lsls	r2, r3, #16
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	43d9      	mvns	r1, r3
 8001ef2:	887b      	ldrh	r3, [r7, #2]
 8001ef4:	400b      	ands	r3, r1
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	619a      	str	r2, [r3, #24]
}
 8001efc:	bf00      	nop
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f08:	b590      	push	{r4, r7, lr}
 8001f0a:	b08d      	sub	sp, #52	; 0x34
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f16:	6a3b      	ldr	r3, [r7, #32]
 8001f18:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f003 fafd 	bl	800551e <USB_GetMode>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f040 838f 	bne.w	800264a <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f003 fa61 	bl	80053f8 <USB_ReadInterrupts>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 8385 	beq.w	8002648 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f003 fa58 	bl	80053f8 <USB_ReadInterrupts>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d107      	bne.n	8001f62 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	695a      	ldr	r2, [r3, #20]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f002 0202 	and.w	r2, r2, #2
 8001f60:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f003 fa46 	bl	80053f8 <USB_ReadInterrupts>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	f003 0310 	and.w	r3, r3, #16
 8001f72:	2b10      	cmp	r3, #16
 8001f74:	d161      	bne.n	800203a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	699a      	ldr	r2, [r3, #24]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0210 	bic.w	r2, r2, #16
 8001f84:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001f86:	6a3b      	ldr	r3, [r7, #32]
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	f003 020f 	and.w	r2, r3, #15
 8001f92:	4613      	mov	r3, r2
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	1a9b      	subs	r3, r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	3304      	adds	r3, #4
 8001fa4:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	0c5b      	lsrs	r3, r3, #17
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d124      	bne.n	8001ffc <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001fb8:	4013      	ands	r3, r2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d035      	beq.n	800202a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	091b      	lsrs	r3, r3, #4
 8001fc6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001fc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	461a      	mov	r2, r3
 8001fd0:	6a38      	ldr	r0, [r7, #32]
 8001fd2:	f003 f8ee 	bl	80051b2 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	68da      	ldr	r2, [r3, #12]
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	091b      	lsrs	r3, r3, #4
 8001fde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fe2:	441a      	add	r2, r3
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	699a      	ldr	r2, [r3, #24]
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	091b      	lsrs	r3, r3, #4
 8001ff0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ff4:	441a      	add	r2, r3
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	619a      	str	r2, [r3, #24]
 8001ffa:	e016      	b.n	800202a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	0c5b      	lsrs	r3, r3, #17
 8002000:	f003 030f 	and.w	r3, r3, #15
 8002004:	2b06      	cmp	r3, #6
 8002006:	d110      	bne.n	800202a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800200e:	2208      	movs	r2, #8
 8002010:	4619      	mov	r1, r3
 8002012:	6a38      	ldr	r0, [r7, #32]
 8002014:	f003 f8cd 	bl	80051b2 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	699a      	ldr	r2, [r3, #24]
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	091b      	lsrs	r3, r3, #4
 8002020:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002024:	441a      	add	r2, r3
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	699a      	ldr	r2, [r3, #24]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f042 0210 	orr.w	r2, r2, #16
 8002038:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f003 f9da 	bl	80053f8 <USB_ReadInterrupts>
 8002044:	4603      	mov	r3, r0
 8002046:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800204a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800204e:	d16e      	bne.n	800212e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002050:	2300      	movs	r3, #0
 8002052:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f003 f9e0 	bl	800541e <USB_ReadDevAllOutEpInterrupt>
 800205e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002060:	e062      	b.n	8002128 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b00      	cmp	r3, #0
 800206a:	d057      	beq.n	800211c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	4611      	mov	r1, r2
 8002076:	4618      	mov	r0, r3
 8002078:	f003 fa05 	bl	8005486 <USB_ReadDevOutEPInterrupt>
 800207c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00c      	beq.n	80020a2 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208a:	015a      	lsls	r2, r3, #5
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	4413      	add	r3, r2
 8002090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002094:	461a      	mov	r2, r3
 8002096:	2301      	movs	r3, #1
 8002098:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800209a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 fd1f 	bl	8002ae0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	f003 0308 	and.w	r3, r3, #8
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00c      	beq.n	80020c6 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	015a      	lsls	r2, r3, #5
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	4413      	add	r3, r2
 80020b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020b8:	461a      	mov	r2, r3
 80020ba:	2308      	movs	r3, #8
 80020bc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80020be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f000 fd5b 	bl	8002b7c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	f003 0310 	and.w	r3, r3, #16
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d008      	beq.n	80020e2 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	015a      	lsls	r2, r3, #5
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	4413      	add	r3, r2
 80020d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020dc:	461a      	mov	r2, r3
 80020de:	2310      	movs	r3, #16
 80020e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	f003 0320 	and.w	r3, r3, #32
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d008      	beq.n	80020fe <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	015a      	lsls	r2, r3, #5
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	4413      	add	r3, r2
 80020f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020f8:	461a      	mov	r2, r3
 80020fa:	2320      	movs	r3, #32
 80020fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d009      	beq.n	800211c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	015a      	lsls	r2, r3, #5
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	4413      	add	r3, r2
 8002110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002114:	461a      	mov	r2, r3
 8002116:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800211a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800211c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211e:	3301      	adds	r3, #1
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002124:	085b      	lsrs	r3, r3, #1
 8002126:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212a:	2b00      	cmp	r3, #0
 800212c:	d199      	bne.n	8002062 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f003 f960 	bl	80053f8 <USB_ReadInterrupts>
 8002138:	4603      	mov	r3, r0
 800213a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800213e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002142:	f040 8087 	bne.w	8002254 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f003 f981 	bl	8005452 <USB_ReadDevAllInEpInterrupt>
 8002150:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002152:	2300      	movs	r3, #0
 8002154:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002156:	e07a      	b.n	800224e <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	d06f      	beq.n	8002242 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002168:	b2d2      	uxtb	r2, r2
 800216a:	4611      	mov	r1, r2
 800216c:	4618      	mov	r0, r3
 800216e:	f003 f9a8 	bl	80054c2 <USB_ReadDevInEPInterrupt>
 8002172:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	d020      	beq.n	80021c0 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	f003 030f 	and.w	r3, r3, #15
 8002184:	2201      	movs	r2, #1
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002192:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	43db      	mvns	r3, r3
 8002198:	69f9      	ldr	r1, [r7, #28]
 800219a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800219e:	4013      	ands	r3, r2
 80021a0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	015a      	lsls	r2, r3, #5
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	4413      	add	r3, r2
 80021aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021ae:	461a      	mov	r2, r3
 80021b0:	2301      	movs	r3, #1
 80021b2:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	4619      	mov	r1, r3
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f004 fb07 	bl	80067ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	f003 0308 	and.w	r3, r3, #8
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d008      	beq.n	80021dc <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	015a      	lsls	r2, r3, #5
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	4413      	add	r3, r2
 80021d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021d6:	461a      	mov	r2, r3
 80021d8:	2308      	movs	r3, #8
 80021da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	f003 0310 	and.w	r3, r3, #16
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d008      	beq.n	80021f8 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	015a      	lsls	r2, r3, #5
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	4413      	add	r3, r2
 80021ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021f2:	461a      	mov	r2, r3
 80021f4:	2310      	movs	r3, #16
 80021f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d008      	beq.n	8002214 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	015a      	lsls	r2, r3, #5
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	4413      	add	r3, r2
 800220a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800220e:	461a      	mov	r2, r3
 8002210:	2340      	movs	r3, #64	; 0x40
 8002212:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d008      	beq.n	8002230 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	015a      	lsls	r2, r3, #5
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	4413      	add	r3, r2
 8002226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800222a:	461a      	mov	r2, r3
 800222c:	2302      	movs	r3, #2
 800222e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800223a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f000 fbc7 	bl	80029d0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002244:	3301      	adds	r3, #1
 8002246:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800224a:	085b      	lsrs	r3, r3, #1
 800224c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800224e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002250:	2b00      	cmp	r3, #0
 8002252:	d181      	bne.n	8002158 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4618      	mov	r0, r3
 800225a:	f003 f8cd 	bl	80053f8 <USB_ReadInterrupts>
 800225e:	4603      	mov	r3, r0
 8002260:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002264:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002268:	d122      	bne.n	80022b0 <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	69fa      	ldr	r2, [r7, #28]
 8002274:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002278:	f023 0301 	bic.w	r3, r3, #1
 800227c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002284:	2b01      	cmp	r3, #1
 8002286:	d108      	bne.n	800229a <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002290:	2100      	movs	r1, #0
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f004 fcec 	bl	8006c70 <HAL_PCDEx_LPM_Callback>
 8002298:	e002      	b.n	80022a0 <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f004 fb04 	bl	80068a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	695a      	ldr	r2, [r3, #20]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80022ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f003 f89f 	bl	80053f8 <USB_ReadInterrupts>
 80022ba:	4603      	mov	r3, r0
 80022bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022c4:	d112      	bne.n	80022ec <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d102      	bne.n	80022dc <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f004 fac0 	bl	800685c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	695a      	ldr	r2, [r3, #20]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80022ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f003 f881 	bl	80053f8 <USB_ReadInterrupts>
 80022f6:	4603      	mov	r3, r0
 80022f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002300:	d121      	bne.n	8002346 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	695a      	ldr	r2, [r3, #20]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002310:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002318:	2b00      	cmp	r3, #0
 800231a:	d111      	bne.n	8002340 <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800232a:	089b      	lsrs	r3, r3, #2
 800232c:	f003 020f 	and.w	r2, r3, #15
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002336:	2101      	movs	r1, #1
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f004 fc99 	bl	8006c70 <HAL_PCDEx_LPM_Callback>
 800233e:	e002      	b.n	8002346 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f004 fa8b 	bl	800685c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f003 f854 	bl	80053f8 <USB_ReadInterrupts>
 8002350:	4603      	mov	r3, r0
 8002352:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800235a:	f040 80c5 	bne.w	80024e8 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	69fa      	ldr	r2, [r7, #28]
 8002368:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800236c:	f023 0301 	bic.w	r3, r3, #1
 8002370:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2110      	movs	r1, #16
 8002378:	4618      	mov	r0, r3
 800237a:	f002 fb23 	bl	80049c4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800237e:	2300      	movs	r3, #0
 8002380:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002382:	e056      	b.n	8002432 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002386:	015a      	lsls	r2, r3, #5
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	4413      	add	r3, r2
 800238c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002390:	461a      	mov	r2, r3
 8002392:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002396:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800239a:	015a      	lsls	r2, r3, #5
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	4413      	add	r3, r2
 80023a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023a8:	0151      	lsls	r1, r2, #5
 80023aa:	69fa      	ldr	r2, [r7, #28]
 80023ac:	440a      	add	r2, r1
 80023ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80023b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80023b6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80023b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ba:	015a      	lsls	r2, r3, #5
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	4413      	add	r3, r2
 80023c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023c8:	0151      	lsls	r1, r2, #5
 80023ca:	69fa      	ldr	r2, [r7, #28]
 80023cc:	440a      	add	r2, r1
 80023ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80023d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80023d6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80023d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023da:	015a      	lsls	r2, r3, #5
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	4413      	add	r3, r2
 80023e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023e4:	461a      	mov	r2, r3
 80023e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80023ea:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80023ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ee:	015a      	lsls	r2, r3, #5
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	4413      	add	r3, r2
 80023f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023fc:	0151      	lsls	r1, r2, #5
 80023fe:	69fa      	ldr	r2, [r7, #28]
 8002400:	440a      	add	r2, r1
 8002402:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002406:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800240a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800240c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800240e:	015a      	lsls	r2, r3, #5
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	4413      	add	r3, r2
 8002414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800241c:	0151      	lsls	r1, r2, #5
 800241e:	69fa      	ldr	r2, [r7, #28]
 8002420:	440a      	add	r2, r1
 8002422:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002426:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800242a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800242c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242e:	3301      	adds	r3, #1
 8002430:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002438:	429a      	cmp	r2, r3
 800243a:	d3a3      	bcc.n	8002384 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002442:	69db      	ldr	r3, [r3, #28]
 8002444:	69fa      	ldr	r2, [r7, #28]
 8002446:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800244a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800244e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002454:	2b00      	cmp	r3, #0
 8002456:	d016      	beq.n	8002486 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800245e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002462:	69fa      	ldr	r2, [r7, #28]
 8002464:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002468:	f043 030b 	orr.w	r3, r3, #11
 800246c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002478:	69fa      	ldr	r2, [r7, #28]
 800247a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800247e:	f043 030b 	orr.w	r3, r3, #11
 8002482:	6453      	str	r3, [r2, #68]	; 0x44
 8002484:	e015      	b.n	80024b2 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	69fa      	ldr	r2, [r7, #28]
 8002490:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002494:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002498:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800249c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	69fa      	ldr	r2, [r7, #28]
 80024a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024ac:	f043 030b 	orr.w	r3, r3, #11
 80024b0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	69fa      	ldr	r2, [r7, #28]
 80024bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024c0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80024c4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80024d0:	4619      	mov	r1, r3
 80024d2:	4610      	mov	r0, r2
 80024d4:	f003 f854 	bl	8005580 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	695a      	ldr	r2, [r3, #20]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80024e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f002 ff83 	bl	80053f8 <USB_ReadInterrupts>
 80024f2:	4603      	mov	r3, r0
 80024f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024fc:	d124      	bne.n	8002548 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f003 f819 	bl	800553a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4618      	mov	r0, r3
 800250e:	f002 fa7f 	bl	8004a10 <USB_GetDevSpeed>
 8002512:	4603      	mov	r3, r0
 8002514:	461a      	mov	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681c      	ldr	r4, [r3, #0]
 800251e:	f001 f919 	bl	8003754 <HAL_RCC_GetHCLKFreq>
 8002522:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002528:	b2db      	uxtb	r3, r3
 800252a:	461a      	mov	r2, r3
 800252c:	4620      	mov	r0, r4
 800252e:	f002 f9ad 	bl	800488c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f004 f973 	bl	800681e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	695a      	ldr	r2, [r3, #20]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002546:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f002 ff53 	bl	80053f8 <USB_ReadInterrupts>
 8002552:	4603      	mov	r3, r0
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	2b08      	cmp	r3, #8
 800255a:	d10a      	bne.n	8002572 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f004 f950 	bl	8006802 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	695a      	ldr	r2, [r3, #20]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f002 0208 	and.w	r2, r2, #8
 8002570:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f002 ff3e 	bl	80053f8 <USB_ReadInterrupts>
 800257c:	4603      	mov	r3, r0
 800257e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002582:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002586:	d10f      	bne.n	80025a8 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002588:	2300      	movs	r3, #0
 800258a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	b2db      	uxtb	r3, r3
 8002590:	4619      	mov	r1, r3
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f004 f9c2 	bl	800691c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	695a      	ldr	r2, [r3, #20]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80025a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f002 ff23 	bl	80053f8 <USB_ReadInterrupts>
 80025b2:	4603      	mov	r3, r0
 80025b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025bc:	d10f      	bne.n	80025de <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80025be:	2300      	movs	r3, #0
 80025c0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	4619      	mov	r1, r3
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f004 f995 	bl	80068f8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	695a      	ldr	r2, [r3, #20]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80025dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f002 ff08 	bl	80053f8 <USB_ReadInterrupts>
 80025e8:	4603      	mov	r3, r0
 80025ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80025ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025f2:	d10a      	bne.n	800260a <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f004 f9a3 	bl	8006940 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	695a      	ldr	r2, [r3, #20]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002608:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f002 fef2 	bl	80053f8 <USB_ReadInterrupts>
 8002614:	4603      	mov	r3, r0
 8002616:	f003 0304 	and.w	r3, r3, #4
 800261a:	2b04      	cmp	r3, #4
 800261c:	d115      	bne.n	800264a <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	2b00      	cmp	r3, #0
 800262e:	d002      	beq.n	8002636 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f004 f993 	bl	800695c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6859      	ldr	r1, [r3, #4]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	430a      	orrs	r2, r1
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	e000      	b.n	800264a <HAL_PCD_IRQHandler+0x742>
      return;
 8002648:	bf00      	nop
    }
  }
}
 800264a:	3734      	adds	r7, #52	; 0x34
 800264c:	46bd      	mov	sp, r7
 800264e:	bd90      	pop	{r4, r7, pc}

08002650 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	460b      	mov	r3, r1
 800265a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002662:	2b01      	cmp	r3, #1
 8002664:	d101      	bne.n	800266a <HAL_PCD_SetAddress+0x1a>
 8002666:	2302      	movs	r3, #2
 8002668:	e013      	b.n	8002692 <HAL_PCD_SetAddress+0x42>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	78fa      	ldrb	r2, [r7, #3]
 8002676:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	78fa      	ldrb	r2, [r7, #3]
 8002680:	4611      	mov	r1, r2
 8002682:	4618      	mov	r0, r3
 8002684:	f002 fe92 	bl	80053ac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b084      	sub	sp, #16
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
 80026a2:	4608      	mov	r0, r1
 80026a4:	4611      	mov	r1, r2
 80026a6:	461a      	mov	r2, r3
 80026a8:	4603      	mov	r3, r0
 80026aa:	70fb      	strb	r3, [r7, #3]
 80026ac:	460b      	mov	r3, r1
 80026ae:	803b      	strh	r3, [r7, #0]
 80026b0:	4613      	mov	r3, r2
 80026b2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80026b4:	2300      	movs	r3, #0
 80026b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	da0f      	bge.n	80026e0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026c0:	78fb      	ldrb	r3, [r7, #3]
 80026c2:	f003 020f 	and.w	r2, r3, #15
 80026c6:	4613      	mov	r3, r2
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	1a9b      	subs	r3, r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	3338      	adds	r3, #56	; 0x38
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	4413      	add	r3, r2
 80026d4:	3304      	adds	r3, #4
 80026d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2201      	movs	r2, #1
 80026dc:	705a      	strb	r2, [r3, #1]
 80026de:	e00f      	b.n	8002700 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026e0:	78fb      	ldrb	r3, [r7, #3]
 80026e2:	f003 020f 	and.w	r2, r3, #15
 80026e6:	4613      	mov	r3, r2
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	1a9b      	subs	r3, r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	4413      	add	r3, r2
 80026f6:	3304      	adds	r3, #4
 80026f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002700:	78fb      	ldrb	r3, [r7, #3]
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	b2da      	uxtb	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800270c:	883a      	ldrh	r2, [r7, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	78ba      	ldrb	r2, [r7, #2]
 8002716:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	785b      	ldrb	r3, [r3, #1]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d004      	beq.n	800272a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	b29a      	uxth	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800272a:	78bb      	ldrb	r3, [r7, #2]
 800272c:	2b02      	cmp	r3, #2
 800272e:	d102      	bne.n	8002736 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800273c:	2b01      	cmp	r3, #1
 800273e:	d101      	bne.n	8002744 <HAL_PCD_EP_Open+0xaa>
 8002740:	2302      	movs	r3, #2
 8002742:	e00e      	b.n	8002762 <HAL_PCD_EP_Open+0xc8>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68f9      	ldr	r1, [r7, #12]
 8002752:	4618      	mov	r0, r3
 8002754:	f002 f97b 	bl	8004a4e <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002760:	7afb      	ldrb	r3, [r7, #11]
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b086      	sub	sp, #24
 800276e:	af00      	add	r7, sp, #0
 8002770:	60f8      	str	r0, [r7, #12]
 8002772:	607a      	str	r2, [r7, #4]
 8002774:	603b      	str	r3, [r7, #0]
 8002776:	460b      	mov	r3, r1
 8002778:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800277a:	7afb      	ldrb	r3, [r7, #11]
 800277c:	f003 020f 	and.w	r2, r3, #15
 8002780:	4613      	mov	r3, r2
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	1a9b      	subs	r3, r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	4413      	add	r3, r2
 8002790:	3304      	adds	r3, #4
 8002792:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	2200      	movs	r2, #0
 80027a4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	2200      	movs	r2, #0
 80027aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027ac:	7afb      	ldrb	r3, [r7, #11]
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027b8:	7afb      	ldrb	r3, [r7, #11]
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d106      	bne.n	80027d0 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6979      	ldr	r1, [r7, #20]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f002 fba3 	bl	8004f14 <USB_EP0StartXfer>
 80027ce:	e005      	b.n	80027dc <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6979      	ldr	r1, [r7, #20]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f002 f9c0 	bl	8004b5c <USB_EPStartXfer>
  }

  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3718      	adds	r7, #24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b086      	sub	sp, #24
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	60f8      	str	r0, [r7, #12]
 80027ee:	607a      	str	r2, [r7, #4]
 80027f0:	603b      	str	r3, [r7, #0]
 80027f2:	460b      	mov	r3, r1
 80027f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027f6:	7afb      	ldrb	r3, [r7, #11]
 80027f8:	f003 020f 	and.w	r2, r3, #15
 80027fc:	4613      	mov	r3, r2
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	1a9b      	subs	r3, r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	3338      	adds	r3, #56	; 0x38
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	4413      	add	r3, r2
 800280a:	3304      	adds	r3, #4
 800280c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	2200      	movs	r2, #0
 800281e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	2201      	movs	r2, #1
 8002824:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002826:	7afb      	ldrb	r3, [r7, #11]
 8002828:	f003 030f 	and.w	r3, r3, #15
 800282c:	b2da      	uxtb	r2, r3
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002832:	7afb      	ldrb	r3, [r7, #11]
 8002834:	f003 030f 	and.w	r3, r3, #15
 8002838:	2b00      	cmp	r3, #0
 800283a:	d106      	bne.n	800284a <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6979      	ldr	r1, [r7, #20]
 8002842:	4618      	mov	r0, r3
 8002844:	f002 fb66 	bl	8004f14 <USB_EP0StartXfer>
 8002848:	e005      	b.n	8002856 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6979      	ldr	r1, [r7, #20]
 8002850:	4618      	mov	r0, r3
 8002852:	f002 f983 	bl	8004b5c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800286c:	78fb      	ldrb	r3, [r7, #3]
 800286e:	f003 020f 	and.w	r2, r3, #15
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	429a      	cmp	r2, r3
 8002878:	d901      	bls.n	800287e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e04e      	b.n	800291c <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800287e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002882:	2b00      	cmp	r3, #0
 8002884:	da0f      	bge.n	80028a6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002886:	78fb      	ldrb	r3, [r7, #3]
 8002888:	f003 020f 	and.w	r2, r3, #15
 800288c:	4613      	mov	r3, r2
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	1a9b      	subs	r3, r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	3338      	adds	r3, #56	; 0x38
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	4413      	add	r3, r2
 800289a:	3304      	adds	r3, #4
 800289c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2201      	movs	r2, #1
 80028a2:	705a      	strb	r2, [r3, #1]
 80028a4:	e00d      	b.n	80028c2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80028a6:	78fa      	ldrb	r2, [r7, #3]
 80028a8:	4613      	mov	r3, r2
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	1a9b      	subs	r3, r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	4413      	add	r3, r2
 80028b8:	3304      	adds	r3, #4
 80028ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2201      	movs	r2, #1
 80028c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028c8:	78fb      	ldrb	r3, [r7, #3]
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d101      	bne.n	80028e2 <HAL_PCD_EP_SetStall+0x82>
 80028de:	2302      	movs	r3, #2
 80028e0:	e01c      	b.n	800291c <HAL_PCD_EP_SetStall+0xbc>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68f9      	ldr	r1, [r7, #12]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f002 fc87 	bl	8005204 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028f6:	78fb      	ldrb	r3, [r7, #3]
 80028f8:	f003 030f 	and.w	r3, r3, #15
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d108      	bne.n	8002912 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800290a:	4619      	mov	r1, r3
 800290c:	4610      	mov	r0, r2
 800290e:	f002 fe37 	bl	8005580 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	460b      	mov	r3, r1
 800292e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002930:	78fb      	ldrb	r3, [r7, #3]
 8002932:	f003 020f 	and.w	r2, r3, #15
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	429a      	cmp	r2, r3
 800293c:	d901      	bls.n	8002942 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e042      	b.n	80029c8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002942:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002946:	2b00      	cmp	r3, #0
 8002948:	da0f      	bge.n	800296a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800294a:	78fb      	ldrb	r3, [r7, #3]
 800294c:	f003 020f 	and.w	r2, r3, #15
 8002950:	4613      	mov	r3, r2
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	1a9b      	subs	r3, r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	3338      	adds	r3, #56	; 0x38
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	4413      	add	r3, r2
 800295e:	3304      	adds	r3, #4
 8002960:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2201      	movs	r2, #1
 8002966:	705a      	strb	r2, [r3, #1]
 8002968:	e00f      	b.n	800298a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800296a:	78fb      	ldrb	r3, [r7, #3]
 800296c:	f003 020f 	and.w	r2, r3, #15
 8002970:	4613      	mov	r3, r2
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	1a9b      	subs	r3, r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	4413      	add	r3, r2
 8002980:	3304      	adds	r3, #4
 8002982:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002990:	78fb      	ldrb	r3, [r7, #3]
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	b2da      	uxtb	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d101      	bne.n	80029aa <HAL_PCD_EP_ClrStall+0x86>
 80029a6:	2302      	movs	r3, #2
 80029a8:	e00e      	b.n	80029c8 <HAL_PCD_EP_ClrStall+0xa4>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68f9      	ldr	r1, [r7, #12]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f002 fc91 	bl	80052e0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b088      	sub	sp, #32
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	4613      	mov	r3, r2
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	1a9b      	subs	r3, r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	3338      	adds	r3, #56	; 0x38
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	4413      	add	r3, r2
 80029f4:	3304      	adds	r3, #4
 80029f6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	699a      	ldr	r2, [r3, #24]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d901      	bls.n	8002a08 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e067      	b.n	8002ad8 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	695a      	ldr	r2, [r3, #20]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	69fa      	ldr	r2, [r7, #28]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d902      	bls.n	8002a24 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	3303      	adds	r3, #3
 8002a28:	089b      	lsrs	r3, r3, #2
 8002a2a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a2c:	e026      	b.n	8002a7c <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	695a      	ldr	r2, [r3, #20]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	69fa      	ldr	r2, [r7, #28]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d902      	bls.n	8002a4a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	3303      	adds	r3, #3
 8002a4e:	089b      	lsrs	r3, r3, #2
 8002a50:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	68d9      	ldr	r1, [r3, #12]
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	6978      	ldr	r0, [r7, #20]
 8002a60:	f002 fb76 	bl	8005150 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	68da      	ldr	r2, [r3, #12]
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	441a      	add	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	699a      	ldr	r2, [r3, #24]
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	441a      	add	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	015a      	lsls	r2, r3, #5
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d809      	bhi.n	8002aa6 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	699a      	ldr	r2, [r3, #24]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d203      	bcs.n	8002aa6 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1c3      	bne.n	8002a2e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	695a      	ldr	r2, [r3, #20]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d811      	bhi.n	8002ad6 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	f003 030f 	and.w	r3, r3, #15
 8002ab8:	2201      	movs	r2, #1
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ac6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	43db      	mvns	r3, r3
 8002acc:	6939      	ldr	r1, [r7, #16]
 8002ace:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3720      	adds	r7, #32
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	333c      	adds	r3, #60	; 0x3c
 8002af8:	3304      	adds	r3, #4
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	015a      	lsls	r2, r3, #5
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	4413      	add	r3, r2
 8002b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	4a19      	ldr	r2, [pc, #100]	; (8002b78 <PCD_EP_OutXfrComplete_int+0x98>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d124      	bne.n	8002b60 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00a      	beq.n	8002b36 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	015a      	lsls	r2, r3, #5
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	4413      	add	r3, r2
 8002b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b32:	6093      	str	r3, [r2, #8]
 8002b34:	e01a      	b.n	8002b6c <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	f003 0320 	and.w	r3, r3, #32
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d008      	beq.n	8002b52 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	015a      	lsls	r2, r3, #5
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	4413      	add	r3, r2
 8002b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	2320      	movs	r3, #32
 8002b50:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	4619      	mov	r1, r3
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f003 fe1d 	bl	8006798 <HAL_PCD_DataOutStageCallback>
 8002b5e:	e005      	b.n	8002b6c <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	4619      	mov	r1, r3
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f003 fe16 	bl	8006798 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3718      	adds	r7, #24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	4f54310a 	.word	0x4f54310a

08002b7c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	333c      	adds	r3, #60	; 0x3c
 8002b94:	3304      	adds	r3, #4
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	015a      	lsls	r2, r3, #5
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	4a0c      	ldr	r2, [pc, #48]	; (8002be0 <PCD_EP_OutSetupPacket_int+0x64>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d90e      	bls.n	8002bd0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d009      	beq.n	8002bd0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	015a      	lsls	r2, r3, #5
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bc8:	461a      	mov	r2, r3
 8002bca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f003 fdcf 	bl	8006774 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	4f54300a 	.word	0x4f54300a

08002be4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002be8:	4b04      	ldr	r3, [pc, #16]	; (8002bfc <HAL_PWREx_GetVoltageRange+0x18>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	40007000 	.word	0x40007000

08002c00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c0e:	d130      	bne.n	8002c72 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c10:	4b23      	ldr	r3, [pc, #140]	; (8002ca0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c1c:	d038      	beq.n	8002c90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c1e:	4b20      	ldr	r3, [pc, #128]	; (8002ca0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c26:	4a1e      	ldr	r2, [pc, #120]	; (8002ca0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c2c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c2e:	4b1d      	ldr	r3, [pc, #116]	; (8002ca4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2232      	movs	r2, #50	; 0x32
 8002c34:	fb02 f303 	mul.w	r3, r2, r3
 8002c38:	4a1b      	ldr	r2, [pc, #108]	; (8002ca8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3e:	0c9b      	lsrs	r3, r3, #18
 8002c40:	3301      	adds	r3, #1
 8002c42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c44:	e002      	b.n	8002c4c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c4c:	4b14      	ldr	r3, [pc, #80]	; (8002ca0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c58:	d102      	bne.n	8002c60 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1f2      	bne.n	8002c46 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c60:	4b0f      	ldr	r3, [pc, #60]	; (8002ca0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c62:	695b      	ldr	r3, [r3, #20]
 8002c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c6c:	d110      	bne.n	8002c90 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e00f      	b.n	8002c92 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c72:	4b0b      	ldr	r3, [pc, #44]	; (8002ca0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c7e:	d007      	beq.n	8002c90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c80:	4b07      	ldr	r3, [pc, #28]	; (8002ca0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c88:	4a05      	ldr	r2, [pc, #20]	; (8002ca0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c8e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3714      	adds	r7, #20
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	40007000 	.word	0x40007000
 8002ca4:	20000000 	.word	0x20000000
 8002ca8:	431bde83 	.word	0x431bde83

08002cac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e3d4      	b.n	8003468 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cbe:	4ba1      	ldr	r3, [pc, #644]	; (8002f44 <HAL_RCC_OscConfig+0x298>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 030c 	and.w	r3, r3, #12
 8002cc6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cc8:	4b9e      	ldr	r3, [pc, #632]	; (8002f44 <HAL_RCC_OscConfig+0x298>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	f003 0303 	and.w	r3, r3, #3
 8002cd0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0310 	and.w	r3, r3, #16
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 80e4 	beq.w	8002ea8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d007      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x4a>
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	2b0c      	cmp	r3, #12
 8002cea:	f040 808b 	bne.w	8002e04 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	f040 8087 	bne.w	8002e04 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cf6:	4b93      	ldr	r3, [pc, #588]	; (8002f44 <HAL_RCC_OscConfig+0x298>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d005      	beq.n	8002d0e <HAL_RCC_OscConfig+0x62>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e3ac      	b.n	8003468 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a1a      	ldr	r2, [r3, #32]
 8002d12:	4b8c      	ldr	r3, [pc, #560]	; (8002f44 <HAL_RCC_OscConfig+0x298>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0308 	and.w	r3, r3, #8
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d004      	beq.n	8002d28 <HAL_RCC_OscConfig+0x7c>
 8002d1e:	4b89      	ldr	r3, [pc, #548]	; (8002f44 <HAL_RCC_OscConfig+0x298>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d26:	e005      	b.n	8002d34 <HAL_RCC_OscConfig+0x88>
 8002d28:	4b86      	ldr	r3, [pc, #536]	; (8002f44 <HAL_RCC_OscConfig+0x298>)
 8002d2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d2e:	091b      	lsrs	r3, r3, #4
 8002d30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d223      	bcs.n	8002d80 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f000 fd5d 	bl	80037fc <RCC_SetFlashLatencyFromMSIRange>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e38d      	b.n	8003468 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d4c:	4b7d      	ldr	r3, [pc, #500]	; (8002f44 <HAL_RCC_OscConfig+0x298>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a7c      	ldr	r2, [pc, #496]	; (8002f44 <HAL_RCC_OscConfig+0x298>)
 8002d52:	f043 0308 	orr.w	r3, r3, #8
 8002d56:	6013      	str	r3, [r2, #0]
 8002d58:	4b7a      	ldr	r3, [pc, #488]	; (8002f44 <HAL_RCC_OscConfig+0x298>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	4977      	ldr	r1, [pc, #476]	; (8002f44 <HAL_RCC_OscConfig+0x298>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d6a:	4b76      	ldr	r3, [pc, #472]	; (8002f44 <HAL_RCC_OscConfig+0x298>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	021b      	lsls	r3, r3, #8
 8002d78:	4972      	ldr	r1, [pc, #456]	; (8002f44 <HAL_RCC_OscConfig+0x298>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	604b      	str	r3, [r1, #4]
 8002d7e:	e025      	b.n	8002dcc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d80:	4b70      	ldr	r3, [pc, #448]	; (8002f44 <HAL_RCC_OscConfig+0x298>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a6f      	ldr	r2, [pc, #444]	; (8002f44 <HAL_RCC_OscConfig+0x298>)
 8002d86:	f043 0308 	orr.w	r3, r3, #8
 8002d8a:	6013      	str	r3, [r2, #0]
 8002d8c:	4b6d      	ldr	r3, [pc, #436]	; (8002f44 <HAL_RCC_OscConfig+0x298>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	496a      	ldr	r1, [pc, #424]	; (8002f44 <HAL_RCC_OscConfig+0x298>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d9e:	4b69      	ldr	r3, [pc, #420]	; (8002f44 <HAL_RCC_OscConfig+0x298>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	021b      	lsls	r3, r3, #8
 8002dac:	4965      	ldr	r1, [pc, #404]	; (8002f44 <HAL_RCC_OscConfig+0x298>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d109      	bne.n	8002dcc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f000 fd1d 	bl	80037fc <RCC_SetFlashLatencyFromMSIRange>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e34d      	b.n	8003468 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002dcc:	f000 fc36 	bl	800363c <HAL_RCC_GetSysClockFreq>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	4b5c      	ldr	r3, [pc, #368]	; (8002f44 <HAL_RCC_OscConfig+0x298>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	091b      	lsrs	r3, r3, #4
 8002dd8:	f003 030f 	and.w	r3, r3, #15
 8002ddc:	495a      	ldr	r1, [pc, #360]	; (8002f48 <HAL_RCC_OscConfig+0x29c>)
 8002dde:	5ccb      	ldrb	r3, [r1, r3]
 8002de0:	f003 031f 	and.w	r3, r3, #31
 8002de4:	fa22 f303 	lsr.w	r3, r2, r3
 8002de8:	4a58      	ldr	r2, [pc, #352]	; (8002f4c <HAL_RCC_OscConfig+0x2a0>)
 8002dea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002dec:	4b58      	ldr	r3, [pc, #352]	; (8002f50 <HAL_RCC_OscConfig+0x2a4>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7fd fc4f 	bl	8000694 <HAL_InitTick>
 8002df6:	4603      	mov	r3, r0
 8002df8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002dfa:	7bfb      	ldrb	r3, [r7, #15]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d052      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
 8002e02:	e331      	b.n	8003468 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d032      	beq.n	8002e72 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e0c:	4b4d      	ldr	r3, [pc, #308]	; (8002f44 <HAL_RCC_OscConfig+0x298>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a4c      	ldr	r2, [pc, #304]	; (8002f44 <HAL_RCC_OscConfig+0x298>)
 8002e12:	f043 0301 	orr.w	r3, r3, #1
 8002e16:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e18:	f7fe fc9e 	bl	8001758 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e20:	f7fe fc9a 	bl	8001758 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e31a      	b.n	8003468 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e32:	4b44      	ldr	r3, [pc, #272]	; (8002f44 <HAL_RCC_OscConfig+0x298>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d0f0      	beq.n	8002e20 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e3e:	4b41      	ldr	r3, [pc, #260]	; (8002f44 <HAL_RCC_OscConfig+0x298>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a40      	ldr	r2, [pc, #256]	; (8002f44 <HAL_RCC_OscConfig+0x298>)
 8002e44:	f043 0308 	orr.w	r3, r3, #8
 8002e48:	6013      	str	r3, [r2, #0]
 8002e4a:	4b3e      	ldr	r3, [pc, #248]	; (8002f44 <HAL_RCC_OscConfig+0x298>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	493b      	ldr	r1, [pc, #236]	; (8002f44 <HAL_RCC_OscConfig+0x298>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e5c:	4b39      	ldr	r3, [pc, #228]	; (8002f44 <HAL_RCC_OscConfig+0x298>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	021b      	lsls	r3, r3, #8
 8002e6a:	4936      	ldr	r1, [pc, #216]	; (8002f44 <HAL_RCC_OscConfig+0x298>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	604b      	str	r3, [r1, #4]
 8002e70:	e01a      	b.n	8002ea8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e72:	4b34      	ldr	r3, [pc, #208]	; (8002f44 <HAL_RCC_OscConfig+0x298>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a33      	ldr	r2, [pc, #204]	; (8002f44 <HAL_RCC_OscConfig+0x298>)
 8002e78:	f023 0301 	bic.w	r3, r3, #1
 8002e7c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e7e:	f7fe fc6b 	bl	8001758 <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e86:	f7fe fc67 	bl	8001758 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e2e7      	b.n	8003468 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e98:	4b2a      	ldr	r3, [pc, #168]	; (8002f44 <HAL_RCC_OscConfig+0x298>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1f0      	bne.n	8002e86 <HAL_RCC_OscConfig+0x1da>
 8002ea4:	e000      	b.n	8002ea8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ea6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d074      	beq.n	8002f9e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	2b08      	cmp	r3, #8
 8002eb8:	d005      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x21a>
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	2b0c      	cmp	r3, #12
 8002ebe:	d10e      	bne.n	8002ede <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	2b03      	cmp	r3, #3
 8002ec4:	d10b      	bne.n	8002ede <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec6:	4b1f      	ldr	r3, [pc, #124]	; (8002f44 <HAL_RCC_OscConfig+0x298>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d064      	beq.n	8002f9c <HAL_RCC_OscConfig+0x2f0>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d160      	bne.n	8002f9c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e2c4      	b.n	8003468 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ee6:	d106      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x24a>
 8002ee8:	4b16      	ldr	r3, [pc, #88]	; (8002f44 <HAL_RCC_OscConfig+0x298>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a15      	ldr	r2, [pc, #84]	; (8002f44 <HAL_RCC_OscConfig+0x298>)
 8002eee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef2:	6013      	str	r3, [r2, #0]
 8002ef4:	e01d      	b.n	8002f32 <HAL_RCC_OscConfig+0x286>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002efe:	d10c      	bne.n	8002f1a <HAL_RCC_OscConfig+0x26e>
 8002f00:	4b10      	ldr	r3, [pc, #64]	; (8002f44 <HAL_RCC_OscConfig+0x298>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a0f      	ldr	r2, [pc, #60]	; (8002f44 <HAL_RCC_OscConfig+0x298>)
 8002f06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f0a:	6013      	str	r3, [r2, #0]
 8002f0c:	4b0d      	ldr	r3, [pc, #52]	; (8002f44 <HAL_RCC_OscConfig+0x298>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a0c      	ldr	r2, [pc, #48]	; (8002f44 <HAL_RCC_OscConfig+0x298>)
 8002f12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f16:	6013      	str	r3, [r2, #0]
 8002f18:	e00b      	b.n	8002f32 <HAL_RCC_OscConfig+0x286>
 8002f1a:	4b0a      	ldr	r3, [pc, #40]	; (8002f44 <HAL_RCC_OscConfig+0x298>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a09      	ldr	r2, [pc, #36]	; (8002f44 <HAL_RCC_OscConfig+0x298>)
 8002f20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f24:	6013      	str	r3, [r2, #0]
 8002f26:	4b07      	ldr	r3, [pc, #28]	; (8002f44 <HAL_RCC_OscConfig+0x298>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a06      	ldr	r2, [pc, #24]	; (8002f44 <HAL_RCC_OscConfig+0x298>)
 8002f2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f30:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d01c      	beq.n	8002f74 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3a:	f7fe fc0d 	bl	8001758 <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f40:	e011      	b.n	8002f66 <HAL_RCC_OscConfig+0x2ba>
 8002f42:	bf00      	nop
 8002f44:	40021000 	.word	0x40021000
 8002f48:	08007dd8 	.word	0x08007dd8
 8002f4c:	20000000 	.word	0x20000000
 8002f50:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f54:	f7fe fc00 	bl	8001758 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b64      	cmp	r3, #100	; 0x64
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e280      	b.n	8003468 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f66:	4baf      	ldr	r3, [pc, #700]	; (8003224 <HAL_RCC_OscConfig+0x578>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d0f0      	beq.n	8002f54 <HAL_RCC_OscConfig+0x2a8>
 8002f72:	e014      	b.n	8002f9e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f74:	f7fe fbf0 	bl	8001758 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f7c:	f7fe fbec 	bl	8001758 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b64      	cmp	r3, #100	; 0x64
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e26c      	b.n	8003468 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f8e:	4ba5      	ldr	r3, [pc, #660]	; (8003224 <HAL_RCC_OscConfig+0x578>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1f0      	bne.n	8002f7c <HAL_RCC_OscConfig+0x2d0>
 8002f9a:	e000      	b.n	8002f9e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d060      	beq.n	800306c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d005      	beq.n	8002fbc <HAL_RCC_OscConfig+0x310>
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	2b0c      	cmp	r3, #12
 8002fb4:	d119      	bne.n	8002fea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d116      	bne.n	8002fea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fbc:	4b99      	ldr	r3, [pc, #612]	; (8003224 <HAL_RCC_OscConfig+0x578>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d005      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x328>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e249      	b.n	8003468 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd4:	4b93      	ldr	r3, [pc, #588]	; (8003224 <HAL_RCC_OscConfig+0x578>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	061b      	lsls	r3, r3, #24
 8002fe2:	4990      	ldr	r1, [pc, #576]	; (8003224 <HAL_RCC_OscConfig+0x578>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fe8:	e040      	b.n	800306c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d023      	beq.n	800303a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ff2:	4b8c      	ldr	r3, [pc, #560]	; (8003224 <HAL_RCC_OscConfig+0x578>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a8b      	ldr	r2, [pc, #556]	; (8003224 <HAL_RCC_OscConfig+0x578>)
 8002ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ffc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffe:	f7fe fbab 	bl	8001758 <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003004:	e008      	b.n	8003018 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003006:	f7fe fba7 	bl	8001758 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e227      	b.n	8003468 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003018:	4b82      	ldr	r3, [pc, #520]	; (8003224 <HAL_RCC_OscConfig+0x578>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003020:	2b00      	cmp	r3, #0
 8003022:	d0f0      	beq.n	8003006 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003024:	4b7f      	ldr	r3, [pc, #508]	; (8003224 <HAL_RCC_OscConfig+0x578>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	061b      	lsls	r3, r3, #24
 8003032:	497c      	ldr	r1, [pc, #496]	; (8003224 <HAL_RCC_OscConfig+0x578>)
 8003034:	4313      	orrs	r3, r2
 8003036:	604b      	str	r3, [r1, #4]
 8003038:	e018      	b.n	800306c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800303a:	4b7a      	ldr	r3, [pc, #488]	; (8003224 <HAL_RCC_OscConfig+0x578>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a79      	ldr	r2, [pc, #484]	; (8003224 <HAL_RCC_OscConfig+0x578>)
 8003040:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003044:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003046:	f7fe fb87 	bl	8001758 <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800304c:	e008      	b.n	8003060 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800304e:	f7fe fb83 	bl	8001758 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e203      	b.n	8003468 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003060:	4b70      	ldr	r3, [pc, #448]	; (8003224 <HAL_RCC_OscConfig+0x578>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1f0      	bne.n	800304e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0308 	and.w	r3, r3, #8
 8003074:	2b00      	cmp	r3, #0
 8003076:	d03c      	beq.n	80030f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d01c      	beq.n	80030ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003080:	4b68      	ldr	r3, [pc, #416]	; (8003224 <HAL_RCC_OscConfig+0x578>)
 8003082:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003086:	4a67      	ldr	r2, [pc, #412]	; (8003224 <HAL_RCC_OscConfig+0x578>)
 8003088:	f043 0301 	orr.w	r3, r3, #1
 800308c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003090:	f7fe fb62 	bl	8001758 <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003096:	e008      	b.n	80030aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003098:	f7fe fb5e 	bl	8001758 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e1de      	b.n	8003468 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030aa:	4b5e      	ldr	r3, [pc, #376]	; (8003224 <HAL_RCC_OscConfig+0x578>)
 80030ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d0ef      	beq.n	8003098 <HAL_RCC_OscConfig+0x3ec>
 80030b8:	e01b      	b.n	80030f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030ba:	4b5a      	ldr	r3, [pc, #360]	; (8003224 <HAL_RCC_OscConfig+0x578>)
 80030bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030c0:	4a58      	ldr	r2, [pc, #352]	; (8003224 <HAL_RCC_OscConfig+0x578>)
 80030c2:	f023 0301 	bic.w	r3, r3, #1
 80030c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ca:	f7fe fb45 	bl	8001758 <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030d2:	f7fe fb41 	bl	8001758 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e1c1      	b.n	8003468 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030e4:	4b4f      	ldr	r3, [pc, #316]	; (8003224 <HAL_RCC_OscConfig+0x578>)
 80030e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1ef      	bne.n	80030d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0304 	and.w	r3, r3, #4
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f000 80a6 	beq.w	800324c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003100:	2300      	movs	r3, #0
 8003102:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003104:	4b47      	ldr	r3, [pc, #284]	; (8003224 <HAL_RCC_OscConfig+0x578>)
 8003106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d10d      	bne.n	800312c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003110:	4b44      	ldr	r3, [pc, #272]	; (8003224 <HAL_RCC_OscConfig+0x578>)
 8003112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003114:	4a43      	ldr	r2, [pc, #268]	; (8003224 <HAL_RCC_OscConfig+0x578>)
 8003116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800311a:	6593      	str	r3, [r2, #88]	; 0x58
 800311c:	4b41      	ldr	r3, [pc, #260]	; (8003224 <HAL_RCC_OscConfig+0x578>)
 800311e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003124:	60bb      	str	r3, [r7, #8]
 8003126:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003128:	2301      	movs	r3, #1
 800312a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800312c:	4b3e      	ldr	r3, [pc, #248]	; (8003228 <HAL_RCC_OscConfig+0x57c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003134:	2b00      	cmp	r3, #0
 8003136:	d118      	bne.n	800316a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003138:	4b3b      	ldr	r3, [pc, #236]	; (8003228 <HAL_RCC_OscConfig+0x57c>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a3a      	ldr	r2, [pc, #232]	; (8003228 <HAL_RCC_OscConfig+0x57c>)
 800313e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003142:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003144:	f7fe fb08 	bl	8001758 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800314c:	f7fe fb04 	bl	8001758 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e184      	b.n	8003468 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800315e:	4b32      	ldr	r3, [pc, #200]	; (8003228 <HAL_RCC_OscConfig+0x57c>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003166:	2b00      	cmp	r3, #0
 8003168:	d0f0      	beq.n	800314c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d108      	bne.n	8003184 <HAL_RCC_OscConfig+0x4d8>
 8003172:	4b2c      	ldr	r3, [pc, #176]	; (8003224 <HAL_RCC_OscConfig+0x578>)
 8003174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003178:	4a2a      	ldr	r2, [pc, #168]	; (8003224 <HAL_RCC_OscConfig+0x578>)
 800317a:	f043 0301 	orr.w	r3, r3, #1
 800317e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003182:	e024      	b.n	80031ce <HAL_RCC_OscConfig+0x522>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	2b05      	cmp	r3, #5
 800318a:	d110      	bne.n	80031ae <HAL_RCC_OscConfig+0x502>
 800318c:	4b25      	ldr	r3, [pc, #148]	; (8003224 <HAL_RCC_OscConfig+0x578>)
 800318e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003192:	4a24      	ldr	r2, [pc, #144]	; (8003224 <HAL_RCC_OscConfig+0x578>)
 8003194:	f043 0304 	orr.w	r3, r3, #4
 8003198:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800319c:	4b21      	ldr	r3, [pc, #132]	; (8003224 <HAL_RCC_OscConfig+0x578>)
 800319e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a2:	4a20      	ldr	r2, [pc, #128]	; (8003224 <HAL_RCC_OscConfig+0x578>)
 80031a4:	f043 0301 	orr.w	r3, r3, #1
 80031a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031ac:	e00f      	b.n	80031ce <HAL_RCC_OscConfig+0x522>
 80031ae:	4b1d      	ldr	r3, [pc, #116]	; (8003224 <HAL_RCC_OscConfig+0x578>)
 80031b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b4:	4a1b      	ldr	r2, [pc, #108]	; (8003224 <HAL_RCC_OscConfig+0x578>)
 80031b6:	f023 0301 	bic.w	r3, r3, #1
 80031ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031be:	4b19      	ldr	r3, [pc, #100]	; (8003224 <HAL_RCC_OscConfig+0x578>)
 80031c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c4:	4a17      	ldr	r2, [pc, #92]	; (8003224 <HAL_RCC_OscConfig+0x578>)
 80031c6:	f023 0304 	bic.w	r3, r3, #4
 80031ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d016      	beq.n	8003204 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d6:	f7fe fabf 	bl	8001758 <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031dc:	e00a      	b.n	80031f4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031de:	f7fe fabb 	bl	8001758 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e139      	b.n	8003468 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031f4:	4b0b      	ldr	r3, [pc, #44]	; (8003224 <HAL_RCC_OscConfig+0x578>)
 80031f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d0ed      	beq.n	80031de <HAL_RCC_OscConfig+0x532>
 8003202:	e01a      	b.n	800323a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003204:	f7fe faa8 	bl	8001758 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800320a:	e00f      	b.n	800322c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800320c:	f7fe faa4 	bl	8001758 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	f241 3288 	movw	r2, #5000	; 0x1388
 800321a:	4293      	cmp	r3, r2
 800321c:	d906      	bls.n	800322c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e122      	b.n	8003468 <HAL_RCC_OscConfig+0x7bc>
 8003222:	bf00      	nop
 8003224:	40021000 	.word	0x40021000
 8003228:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800322c:	4b90      	ldr	r3, [pc, #576]	; (8003470 <HAL_RCC_OscConfig+0x7c4>)
 800322e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1e8      	bne.n	800320c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800323a:	7ffb      	ldrb	r3, [r7, #31]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d105      	bne.n	800324c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003240:	4b8b      	ldr	r3, [pc, #556]	; (8003470 <HAL_RCC_OscConfig+0x7c4>)
 8003242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003244:	4a8a      	ldr	r2, [pc, #552]	; (8003470 <HAL_RCC_OscConfig+0x7c4>)
 8003246:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800324a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 8108 	beq.w	8003466 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325a:	2b02      	cmp	r3, #2
 800325c:	f040 80d0 	bne.w	8003400 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003260:	4b83      	ldr	r3, [pc, #524]	; (8003470 <HAL_RCC_OscConfig+0x7c4>)
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f003 0203 	and.w	r2, r3, #3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003270:	429a      	cmp	r2, r3
 8003272:	d130      	bne.n	80032d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327e:	3b01      	subs	r3, #1
 8003280:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003282:	429a      	cmp	r2, r3
 8003284:	d127      	bne.n	80032d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003290:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003292:	429a      	cmp	r2, r3
 8003294:	d11f      	bne.n	80032d6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032a0:	2a07      	cmp	r2, #7
 80032a2:	bf14      	ite	ne
 80032a4:	2201      	movne	r2, #1
 80032a6:	2200      	moveq	r2, #0
 80032a8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d113      	bne.n	80032d6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b8:	085b      	lsrs	r3, r3, #1
 80032ba:	3b01      	subs	r3, #1
 80032bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80032be:	429a      	cmp	r2, r3
 80032c0:	d109      	bne.n	80032d6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032cc:	085b      	lsrs	r3, r3, #1
 80032ce:	3b01      	subs	r3, #1
 80032d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d06e      	beq.n	80033b4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	2b0c      	cmp	r3, #12
 80032da:	d069      	beq.n	80033b0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80032dc:	4b64      	ldr	r3, [pc, #400]	; (8003470 <HAL_RCC_OscConfig+0x7c4>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d105      	bne.n	80032f4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80032e8:	4b61      	ldr	r3, [pc, #388]	; (8003470 <HAL_RCC_OscConfig+0x7c4>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e0b7      	b.n	8003468 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80032f8:	4b5d      	ldr	r3, [pc, #372]	; (8003470 <HAL_RCC_OscConfig+0x7c4>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a5c      	ldr	r2, [pc, #368]	; (8003470 <HAL_RCC_OscConfig+0x7c4>)
 80032fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003302:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003304:	f7fe fa28 	bl	8001758 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800330c:	f7fe fa24 	bl	8001758 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e0a4      	b.n	8003468 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800331e:	4b54      	ldr	r3, [pc, #336]	; (8003470 <HAL_RCC_OscConfig+0x7c4>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1f0      	bne.n	800330c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800332a:	4b51      	ldr	r3, [pc, #324]	; (8003470 <HAL_RCC_OscConfig+0x7c4>)
 800332c:	68da      	ldr	r2, [r3, #12]
 800332e:	4b51      	ldr	r3, [pc, #324]	; (8003474 <HAL_RCC_OscConfig+0x7c8>)
 8003330:	4013      	ands	r3, r2
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800333a:	3a01      	subs	r2, #1
 800333c:	0112      	lsls	r2, r2, #4
 800333e:	4311      	orrs	r1, r2
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003344:	0212      	lsls	r2, r2, #8
 8003346:	4311      	orrs	r1, r2
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800334c:	0852      	lsrs	r2, r2, #1
 800334e:	3a01      	subs	r2, #1
 8003350:	0552      	lsls	r2, r2, #21
 8003352:	4311      	orrs	r1, r2
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003358:	0852      	lsrs	r2, r2, #1
 800335a:	3a01      	subs	r2, #1
 800335c:	0652      	lsls	r2, r2, #25
 800335e:	4311      	orrs	r1, r2
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003364:	0912      	lsrs	r2, r2, #4
 8003366:	0452      	lsls	r2, r2, #17
 8003368:	430a      	orrs	r2, r1
 800336a:	4941      	ldr	r1, [pc, #260]	; (8003470 <HAL_RCC_OscConfig+0x7c4>)
 800336c:	4313      	orrs	r3, r2
 800336e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003370:	4b3f      	ldr	r3, [pc, #252]	; (8003470 <HAL_RCC_OscConfig+0x7c4>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a3e      	ldr	r2, [pc, #248]	; (8003470 <HAL_RCC_OscConfig+0x7c4>)
 8003376:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800337a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800337c:	4b3c      	ldr	r3, [pc, #240]	; (8003470 <HAL_RCC_OscConfig+0x7c4>)
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	4a3b      	ldr	r2, [pc, #236]	; (8003470 <HAL_RCC_OscConfig+0x7c4>)
 8003382:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003386:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003388:	f7fe f9e6 	bl	8001758 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003390:	f7fe f9e2 	bl	8001758 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e062      	b.n	8003468 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033a2:	4b33      	ldr	r3, [pc, #204]	; (8003470 <HAL_RCC_OscConfig+0x7c4>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0f0      	beq.n	8003390 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033ae:	e05a      	b.n	8003466 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e059      	b.n	8003468 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033b4:	4b2e      	ldr	r3, [pc, #184]	; (8003470 <HAL_RCC_OscConfig+0x7c4>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d152      	bne.n	8003466 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80033c0:	4b2b      	ldr	r3, [pc, #172]	; (8003470 <HAL_RCC_OscConfig+0x7c4>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a2a      	ldr	r2, [pc, #168]	; (8003470 <HAL_RCC_OscConfig+0x7c4>)
 80033c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033cc:	4b28      	ldr	r3, [pc, #160]	; (8003470 <HAL_RCC_OscConfig+0x7c4>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	4a27      	ldr	r2, [pc, #156]	; (8003470 <HAL_RCC_OscConfig+0x7c4>)
 80033d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033d8:	f7fe f9be 	bl	8001758 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033e0:	f7fe f9ba 	bl	8001758 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e03a      	b.n	8003468 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033f2:	4b1f      	ldr	r3, [pc, #124]	; (8003470 <HAL_RCC_OscConfig+0x7c4>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0f0      	beq.n	80033e0 <HAL_RCC_OscConfig+0x734>
 80033fe:	e032      	b.n	8003466 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	2b0c      	cmp	r3, #12
 8003404:	d02d      	beq.n	8003462 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003406:	4b1a      	ldr	r3, [pc, #104]	; (8003470 <HAL_RCC_OscConfig+0x7c4>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a19      	ldr	r2, [pc, #100]	; (8003470 <HAL_RCC_OscConfig+0x7c4>)
 800340c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003410:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003412:	4b17      	ldr	r3, [pc, #92]	; (8003470 <HAL_RCC_OscConfig+0x7c4>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d105      	bne.n	800342a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800341e:	4b14      	ldr	r3, [pc, #80]	; (8003470 <HAL_RCC_OscConfig+0x7c4>)
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	4a13      	ldr	r2, [pc, #76]	; (8003470 <HAL_RCC_OscConfig+0x7c4>)
 8003424:	f023 0303 	bic.w	r3, r3, #3
 8003428:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800342a:	4b11      	ldr	r3, [pc, #68]	; (8003470 <HAL_RCC_OscConfig+0x7c4>)
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	4a10      	ldr	r2, [pc, #64]	; (8003470 <HAL_RCC_OscConfig+0x7c4>)
 8003430:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003434:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003438:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343a:	f7fe f98d 	bl	8001758 <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003442:	f7fe f989 	bl	8001758 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e009      	b.n	8003468 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003454:	4b06      	ldr	r3, [pc, #24]	; (8003470 <HAL_RCC_OscConfig+0x7c4>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1f0      	bne.n	8003442 <HAL_RCC_OscConfig+0x796>
 8003460:	e001      	b.n	8003466 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e000      	b.n	8003468 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3720      	adds	r7, #32
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40021000 	.word	0x40021000
 8003474:	f99d808c 	.word	0xf99d808c

08003478 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d101      	bne.n	800348c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e0c8      	b.n	800361e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800348c:	4b66      	ldr	r3, [pc, #408]	; (8003628 <HAL_RCC_ClockConfig+0x1b0>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	429a      	cmp	r2, r3
 8003498:	d910      	bls.n	80034bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800349a:	4b63      	ldr	r3, [pc, #396]	; (8003628 <HAL_RCC_ClockConfig+0x1b0>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f023 0207 	bic.w	r2, r3, #7
 80034a2:	4961      	ldr	r1, [pc, #388]	; (8003628 <HAL_RCC_ClockConfig+0x1b0>)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034aa:	4b5f      	ldr	r3, [pc, #380]	; (8003628 <HAL_RCC_ClockConfig+0x1b0>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0307 	and.w	r3, r3, #7
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d001      	beq.n	80034bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e0b0      	b.n	800361e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d04c      	beq.n	8003562 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	2b03      	cmp	r3, #3
 80034ce:	d107      	bne.n	80034e0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034d0:	4b56      	ldr	r3, [pc, #344]	; (800362c <HAL_RCC_ClockConfig+0x1b4>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d121      	bne.n	8003520 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e09e      	b.n	800361e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d107      	bne.n	80034f8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034e8:	4b50      	ldr	r3, [pc, #320]	; (800362c <HAL_RCC_ClockConfig+0x1b4>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d115      	bne.n	8003520 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e092      	b.n	800361e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d107      	bne.n	8003510 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003500:	4b4a      	ldr	r3, [pc, #296]	; (800362c <HAL_RCC_ClockConfig+0x1b4>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d109      	bne.n	8003520 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e086      	b.n	800361e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003510:	4b46      	ldr	r3, [pc, #280]	; (800362c <HAL_RCC_ClockConfig+0x1b4>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003518:	2b00      	cmp	r3, #0
 800351a:	d101      	bne.n	8003520 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e07e      	b.n	800361e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003520:	4b42      	ldr	r3, [pc, #264]	; (800362c <HAL_RCC_ClockConfig+0x1b4>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f023 0203 	bic.w	r2, r3, #3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	493f      	ldr	r1, [pc, #252]	; (800362c <HAL_RCC_ClockConfig+0x1b4>)
 800352e:	4313      	orrs	r3, r2
 8003530:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003532:	f7fe f911 	bl	8001758 <HAL_GetTick>
 8003536:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003538:	e00a      	b.n	8003550 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800353a:	f7fe f90d 	bl	8001758 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	f241 3288 	movw	r2, #5000	; 0x1388
 8003548:	4293      	cmp	r3, r2
 800354a:	d901      	bls.n	8003550 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e066      	b.n	800361e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003550:	4b36      	ldr	r3, [pc, #216]	; (800362c <HAL_RCC_ClockConfig+0x1b4>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f003 020c 	and.w	r2, r3, #12
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	429a      	cmp	r2, r3
 8003560:	d1eb      	bne.n	800353a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d008      	beq.n	8003580 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800356e:	4b2f      	ldr	r3, [pc, #188]	; (800362c <HAL_RCC_ClockConfig+0x1b4>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	492c      	ldr	r1, [pc, #176]	; (800362c <HAL_RCC_ClockConfig+0x1b4>)
 800357c:	4313      	orrs	r3, r2
 800357e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003580:	4b29      	ldr	r3, [pc, #164]	; (8003628 <HAL_RCC_ClockConfig+0x1b0>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0307 	and.w	r3, r3, #7
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	429a      	cmp	r2, r3
 800358c:	d210      	bcs.n	80035b0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800358e:	4b26      	ldr	r3, [pc, #152]	; (8003628 <HAL_RCC_ClockConfig+0x1b0>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f023 0207 	bic.w	r2, r3, #7
 8003596:	4924      	ldr	r1, [pc, #144]	; (8003628 <HAL_RCC_ClockConfig+0x1b0>)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	4313      	orrs	r3, r2
 800359c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800359e:	4b22      	ldr	r3, [pc, #136]	; (8003628 <HAL_RCC_ClockConfig+0x1b0>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0307 	and.w	r3, r3, #7
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d001      	beq.n	80035b0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e036      	b.n	800361e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0304 	and.w	r3, r3, #4
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d008      	beq.n	80035ce <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035bc:	4b1b      	ldr	r3, [pc, #108]	; (800362c <HAL_RCC_ClockConfig+0x1b4>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	4918      	ldr	r1, [pc, #96]	; (800362c <HAL_RCC_ClockConfig+0x1b4>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0308 	and.w	r3, r3, #8
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d009      	beq.n	80035ee <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035da:	4b14      	ldr	r3, [pc, #80]	; (800362c <HAL_RCC_ClockConfig+0x1b4>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	4910      	ldr	r1, [pc, #64]	; (800362c <HAL_RCC_ClockConfig+0x1b4>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035ee:	f000 f825 	bl	800363c <HAL_RCC_GetSysClockFreq>
 80035f2:	4602      	mov	r2, r0
 80035f4:	4b0d      	ldr	r3, [pc, #52]	; (800362c <HAL_RCC_ClockConfig+0x1b4>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	091b      	lsrs	r3, r3, #4
 80035fa:	f003 030f 	and.w	r3, r3, #15
 80035fe:	490c      	ldr	r1, [pc, #48]	; (8003630 <HAL_RCC_ClockConfig+0x1b8>)
 8003600:	5ccb      	ldrb	r3, [r1, r3]
 8003602:	f003 031f 	and.w	r3, r3, #31
 8003606:	fa22 f303 	lsr.w	r3, r2, r3
 800360a:	4a0a      	ldr	r2, [pc, #40]	; (8003634 <HAL_RCC_ClockConfig+0x1bc>)
 800360c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800360e:	4b0a      	ldr	r3, [pc, #40]	; (8003638 <HAL_RCC_ClockConfig+0x1c0>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f7fd f83e 	bl	8000694 <HAL_InitTick>
 8003618:	4603      	mov	r3, r0
 800361a:	72fb      	strb	r3, [r7, #11]

  return status;
 800361c:	7afb      	ldrb	r3, [r7, #11]
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	40022000 	.word	0x40022000
 800362c:	40021000 	.word	0x40021000
 8003630:	08007dd8 	.word	0x08007dd8
 8003634:	20000000 	.word	0x20000000
 8003638:	20000004 	.word	0x20000004

0800363c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800363c:	b480      	push	{r7}
 800363e:	b089      	sub	sp, #36	; 0x24
 8003640:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003642:	2300      	movs	r3, #0
 8003644:	61fb      	str	r3, [r7, #28]
 8003646:	2300      	movs	r3, #0
 8003648:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800364a:	4b3e      	ldr	r3, [pc, #248]	; (8003744 <HAL_RCC_GetSysClockFreq+0x108>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 030c 	and.w	r3, r3, #12
 8003652:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003654:	4b3b      	ldr	r3, [pc, #236]	; (8003744 <HAL_RCC_GetSysClockFreq+0x108>)
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	f003 0303 	and.w	r3, r3, #3
 800365c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d005      	beq.n	8003670 <HAL_RCC_GetSysClockFreq+0x34>
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	2b0c      	cmp	r3, #12
 8003668:	d121      	bne.n	80036ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d11e      	bne.n	80036ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003670:	4b34      	ldr	r3, [pc, #208]	; (8003744 <HAL_RCC_GetSysClockFreq+0x108>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0308 	and.w	r3, r3, #8
 8003678:	2b00      	cmp	r3, #0
 800367a:	d107      	bne.n	800368c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800367c:	4b31      	ldr	r3, [pc, #196]	; (8003744 <HAL_RCC_GetSysClockFreq+0x108>)
 800367e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003682:	0a1b      	lsrs	r3, r3, #8
 8003684:	f003 030f 	and.w	r3, r3, #15
 8003688:	61fb      	str	r3, [r7, #28]
 800368a:	e005      	b.n	8003698 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800368c:	4b2d      	ldr	r3, [pc, #180]	; (8003744 <HAL_RCC_GetSysClockFreq+0x108>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	091b      	lsrs	r3, r3, #4
 8003692:	f003 030f 	and.w	r3, r3, #15
 8003696:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003698:	4a2b      	ldr	r2, [pc, #172]	; (8003748 <HAL_RCC_GetSysClockFreq+0x10c>)
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10d      	bne.n	80036c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036ac:	e00a      	b.n	80036c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d102      	bne.n	80036ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036b4:	4b25      	ldr	r3, [pc, #148]	; (800374c <HAL_RCC_GetSysClockFreq+0x110>)
 80036b6:	61bb      	str	r3, [r7, #24]
 80036b8:	e004      	b.n	80036c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	2b08      	cmp	r3, #8
 80036be:	d101      	bne.n	80036c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036c0:	4b23      	ldr	r3, [pc, #140]	; (8003750 <HAL_RCC_GetSysClockFreq+0x114>)
 80036c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	2b0c      	cmp	r3, #12
 80036c8:	d134      	bne.n	8003734 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036ca:	4b1e      	ldr	r3, [pc, #120]	; (8003744 <HAL_RCC_GetSysClockFreq+0x108>)
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	f003 0303 	and.w	r3, r3, #3
 80036d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d003      	beq.n	80036e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2b03      	cmp	r3, #3
 80036de:	d003      	beq.n	80036e8 <HAL_RCC_GetSysClockFreq+0xac>
 80036e0:	e005      	b.n	80036ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80036e2:	4b1a      	ldr	r3, [pc, #104]	; (800374c <HAL_RCC_GetSysClockFreq+0x110>)
 80036e4:	617b      	str	r3, [r7, #20]
      break;
 80036e6:	e005      	b.n	80036f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80036e8:	4b19      	ldr	r3, [pc, #100]	; (8003750 <HAL_RCC_GetSysClockFreq+0x114>)
 80036ea:	617b      	str	r3, [r7, #20]
      break;
 80036ec:	e002      	b.n	80036f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	617b      	str	r3, [r7, #20]
      break;
 80036f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036f4:	4b13      	ldr	r3, [pc, #76]	; (8003744 <HAL_RCC_GetSysClockFreq+0x108>)
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	091b      	lsrs	r3, r3, #4
 80036fa:	f003 0307 	and.w	r3, r3, #7
 80036fe:	3301      	adds	r3, #1
 8003700:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003702:	4b10      	ldr	r3, [pc, #64]	; (8003744 <HAL_RCC_GetSysClockFreq+0x108>)
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	0a1b      	lsrs	r3, r3, #8
 8003708:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	fb02 f203 	mul.w	r2, r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	fbb2 f3f3 	udiv	r3, r2, r3
 8003718:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800371a:	4b0a      	ldr	r3, [pc, #40]	; (8003744 <HAL_RCC_GetSysClockFreq+0x108>)
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	0e5b      	lsrs	r3, r3, #25
 8003720:	f003 0303 	and.w	r3, r3, #3
 8003724:	3301      	adds	r3, #1
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003732:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003734:	69bb      	ldr	r3, [r7, #24]
}
 8003736:	4618      	mov	r0, r3
 8003738:	3724      	adds	r7, #36	; 0x24
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	40021000 	.word	0x40021000
 8003748:	08007df0 	.word	0x08007df0
 800374c:	00f42400 	.word	0x00f42400
 8003750:	007a1200 	.word	0x007a1200

08003754 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003754:	b480      	push	{r7}
 8003756:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003758:	4b03      	ldr	r3, [pc, #12]	; (8003768 <HAL_RCC_GetHCLKFreq+0x14>)
 800375a:	681b      	ldr	r3, [r3, #0]
}
 800375c:	4618      	mov	r0, r3
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	20000000 	.word	0x20000000

0800376c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003770:	f7ff fff0 	bl	8003754 <HAL_RCC_GetHCLKFreq>
 8003774:	4602      	mov	r2, r0
 8003776:	4b06      	ldr	r3, [pc, #24]	; (8003790 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	0adb      	lsrs	r3, r3, #11
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	4904      	ldr	r1, [pc, #16]	; (8003794 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003782:	5ccb      	ldrb	r3, [r1, r3]
 8003784:	f003 031f 	and.w	r3, r3, #31
 8003788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800378c:	4618      	mov	r0, r3
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40021000 	.word	0x40021000
 8003794:	08007de8 	.word	0x08007de8

08003798 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	220f      	movs	r2, #15
 80037a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80037a8:	4b12      	ldr	r3, [pc, #72]	; (80037f4 <HAL_RCC_GetClockConfig+0x5c>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f003 0203 	and.w	r2, r3, #3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80037b4:	4b0f      	ldr	r3, [pc, #60]	; (80037f4 <HAL_RCC_GetClockConfig+0x5c>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80037c0:	4b0c      	ldr	r3, [pc, #48]	; (80037f4 <HAL_RCC_GetClockConfig+0x5c>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80037cc:	4b09      	ldr	r3, [pc, #36]	; (80037f4 <HAL_RCC_GetClockConfig+0x5c>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	08db      	lsrs	r3, r3, #3
 80037d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80037da:	4b07      	ldr	r3, [pc, #28]	; (80037f8 <HAL_RCC_GetClockConfig+0x60>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0207 	and.w	r2, r3, #7
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	601a      	str	r2, [r3, #0]
}
 80037e6:	bf00      	nop
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	40021000 	.word	0x40021000
 80037f8:	40022000 	.word	0x40022000

080037fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b086      	sub	sp, #24
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003804:	2300      	movs	r3, #0
 8003806:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003808:	4b2a      	ldr	r3, [pc, #168]	; (80038b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800380a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003814:	f7ff f9e6 	bl	8002be4 <HAL_PWREx_GetVoltageRange>
 8003818:	6178      	str	r0, [r7, #20]
 800381a:	e014      	b.n	8003846 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800381c:	4b25      	ldr	r3, [pc, #148]	; (80038b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800381e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003820:	4a24      	ldr	r2, [pc, #144]	; (80038b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003826:	6593      	str	r3, [r2, #88]	; 0x58
 8003828:	4b22      	ldr	r3, [pc, #136]	; (80038b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800382a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800382c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003830:	60fb      	str	r3, [r7, #12]
 8003832:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003834:	f7ff f9d6 	bl	8002be4 <HAL_PWREx_GetVoltageRange>
 8003838:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800383a:	4b1e      	ldr	r3, [pc, #120]	; (80038b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800383c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800383e:	4a1d      	ldr	r2, [pc, #116]	; (80038b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003840:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003844:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800384c:	d10b      	bne.n	8003866 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b80      	cmp	r3, #128	; 0x80
 8003852:	d919      	bls.n	8003888 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2ba0      	cmp	r3, #160	; 0xa0
 8003858:	d902      	bls.n	8003860 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800385a:	2302      	movs	r3, #2
 800385c:	613b      	str	r3, [r7, #16]
 800385e:	e013      	b.n	8003888 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003860:	2301      	movs	r3, #1
 8003862:	613b      	str	r3, [r7, #16]
 8003864:	e010      	b.n	8003888 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2b80      	cmp	r3, #128	; 0x80
 800386a:	d902      	bls.n	8003872 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800386c:	2303      	movs	r3, #3
 800386e:	613b      	str	r3, [r7, #16]
 8003870:	e00a      	b.n	8003888 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b80      	cmp	r3, #128	; 0x80
 8003876:	d102      	bne.n	800387e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003878:	2302      	movs	r3, #2
 800387a:	613b      	str	r3, [r7, #16]
 800387c:	e004      	b.n	8003888 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2b70      	cmp	r3, #112	; 0x70
 8003882:	d101      	bne.n	8003888 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003884:	2301      	movs	r3, #1
 8003886:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003888:	4b0b      	ldr	r3, [pc, #44]	; (80038b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f023 0207 	bic.w	r2, r3, #7
 8003890:	4909      	ldr	r1, [pc, #36]	; (80038b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	4313      	orrs	r3, r2
 8003896:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003898:	4b07      	ldr	r3, [pc, #28]	; (80038b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0307 	and.w	r3, r3, #7
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d001      	beq.n	80038aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e000      	b.n	80038ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3718      	adds	r7, #24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	40021000 	.word	0x40021000
 80038b8:	40022000 	.word	0x40022000

080038bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80038c4:	2300      	movs	r3, #0
 80038c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038c8:	2300      	movs	r3, #0
 80038ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d041      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038e0:	d02a      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80038e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038e6:	d824      	bhi.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80038e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038ec:	d008      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80038ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038f2:	d81e      	bhi.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00a      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x52>
 80038f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038fc:	d010      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80038fe:	e018      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003900:	4b86      	ldr	r3, [pc, #536]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	4a85      	ldr	r2, [pc, #532]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800390a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800390c:	e015      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	3304      	adds	r3, #4
 8003912:	2100      	movs	r1, #0
 8003914:	4618      	mov	r0, r3
 8003916:	f000 fabb 	bl	8003e90 <RCCEx_PLLSAI1_Config>
 800391a:	4603      	mov	r3, r0
 800391c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800391e:	e00c      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	3320      	adds	r3, #32
 8003924:	2100      	movs	r1, #0
 8003926:	4618      	mov	r0, r3
 8003928:	f000 fba6 	bl	8004078 <RCCEx_PLLSAI2_Config>
 800392c:	4603      	mov	r3, r0
 800392e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003930:	e003      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	74fb      	strb	r3, [r7, #19]
      break;
 8003936:	e000      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003938:	bf00      	nop
    }

    if(ret == HAL_OK)
 800393a:	7cfb      	ldrb	r3, [r7, #19]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10b      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003940:	4b76      	ldr	r3, [pc, #472]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003946:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800394e:	4973      	ldr	r1, [pc, #460]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003950:	4313      	orrs	r3, r2
 8003952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003956:	e001      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003958:	7cfb      	ldrb	r3, [r7, #19]
 800395a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d041      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800396c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003970:	d02a      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003972:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003976:	d824      	bhi.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003978:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800397c:	d008      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800397e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003982:	d81e      	bhi.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00a      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003988:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800398c:	d010      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800398e:	e018      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003990:	4b62      	ldr	r3, [pc, #392]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	4a61      	ldr	r2, [pc, #388]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800399a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800399c:	e015      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	3304      	adds	r3, #4
 80039a2:	2100      	movs	r1, #0
 80039a4:	4618      	mov	r0, r3
 80039a6:	f000 fa73 	bl	8003e90 <RCCEx_PLLSAI1_Config>
 80039aa:	4603      	mov	r3, r0
 80039ac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039ae:	e00c      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	3320      	adds	r3, #32
 80039b4:	2100      	movs	r1, #0
 80039b6:	4618      	mov	r0, r3
 80039b8:	f000 fb5e 	bl	8004078 <RCCEx_PLLSAI2_Config>
 80039bc:	4603      	mov	r3, r0
 80039be:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039c0:	e003      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	74fb      	strb	r3, [r7, #19]
      break;
 80039c6:	e000      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80039c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039ca:	7cfb      	ldrb	r3, [r7, #19]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10b      	bne.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039d0:	4b52      	ldr	r3, [pc, #328]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039de:	494f      	ldr	r1, [pc, #316]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80039e6:	e001      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e8:	7cfb      	ldrb	r3, [r7, #19]
 80039ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 80a0 	beq.w	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039fa:	2300      	movs	r3, #0
 80039fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039fe:	4b47      	ldr	r3, [pc, #284]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e000      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003a0e:	2300      	movs	r3, #0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00d      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a14:	4b41      	ldr	r3, [pc, #260]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a18:	4a40      	ldr	r2, [pc, #256]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a1e:	6593      	str	r3, [r2, #88]	; 0x58
 8003a20:	4b3e      	ldr	r3, [pc, #248]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a28:	60bb      	str	r3, [r7, #8]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a30:	4b3b      	ldr	r3, [pc, #236]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a3a      	ldr	r2, [pc, #232]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a3c:	f7fd fe8c 	bl	8001758 <HAL_GetTick>
 8003a40:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a42:	e009      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a44:	f7fd fe88 	bl	8001758 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d902      	bls.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	74fb      	strb	r3, [r7, #19]
        break;
 8003a56:	e005      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a58:	4b31      	ldr	r3, [pc, #196]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d0ef      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003a64:	7cfb      	ldrb	r3, [r7, #19]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d15c      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a6a:	4b2c      	ldr	r3, [pc, #176]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a74:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d01f      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d019      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a88:	4b24      	ldr	r3, [pc, #144]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a92:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a94:	4b21      	ldr	r3, [pc, #132]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a9a:	4a20      	ldr	r2, [pc, #128]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003aa4:	4b1d      	ldr	r3, [pc, #116]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aaa:	4a1c      	ldr	r2, [pc, #112]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ab0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ab4:	4a19      	ldr	r2, [pc, #100]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d016      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac6:	f7fd fe47 	bl	8001758 <HAL_GetTick>
 8003aca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003acc:	e00b      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ace:	f7fd fe43 	bl	8001758 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d902      	bls.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	74fb      	strb	r3, [r7, #19]
            break;
 8003ae4:	e006      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ae6:	4b0d      	ldr	r3, [pc, #52]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0ec      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003af4:	7cfb      	ldrb	r3, [r7, #19]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10c      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003afa:	4b08      	ldr	r3, [pc, #32]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b0a:	4904      	ldr	r1, [pc, #16]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b12:	e009      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b14:	7cfb      	ldrb	r3, [r7, #19]
 8003b16:	74bb      	strb	r3, [r7, #18]
 8003b18:	e006      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003b1a:	bf00      	nop
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b24:	7cfb      	ldrb	r3, [r7, #19]
 8003b26:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b28:	7c7b      	ldrb	r3, [r7, #17]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d105      	bne.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b2e:	4b9e      	ldr	r3, [pc, #632]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b32:	4a9d      	ldr	r2, [pc, #628]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b38:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00a      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b46:	4b98      	ldr	r3, [pc, #608]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b4c:	f023 0203 	bic.w	r2, r3, #3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b54:	4994      	ldr	r1, [pc, #592]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00a      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b68:	4b8f      	ldr	r3, [pc, #572]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b6e:	f023 020c 	bic.w	r2, r3, #12
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b76:	498c      	ldr	r1, [pc, #560]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0304 	and.w	r3, r3, #4
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00a      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b8a:	4b87      	ldr	r3, [pc, #540]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b90:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b98:	4983      	ldr	r1, [pc, #524]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0308 	and.w	r3, r3, #8
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00a      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bac:	4b7e      	ldr	r3, [pc, #504]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bba:	497b      	ldr	r1, [pc, #492]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0310 	and.w	r3, r3, #16
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00a      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003bce:	4b76      	ldr	r3, [pc, #472]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bdc:	4972      	ldr	r1, [pc, #456]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0320 	and.w	r3, r3, #32
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00a      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bf0:	4b6d      	ldr	r3, [pc, #436]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bfe:	496a      	ldr	r1, [pc, #424]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00a      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c12:	4b65      	ldr	r3, [pc, #404]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c18:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c20:	4961      	ldr	r1, [pc, #388]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00a      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c34:	4b5c      	ldr	r3, [pc, #368]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c42:	4959      	ldr	r1, [pc, #356]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00a      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c56:	4b54      	ldr	r3, [pc, #336]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c5c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c64:	4950      	ldr	r1, [pc, #320]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00a      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c78:	4b4b      	ldr	r3, [pc, #300]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c86:	4948      	ldr	r1, [pc, #288]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00a      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c9a:	4b43      	ldr	r3, [pc, #268]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca8:	493f      	ldr	r1, [pc, #252]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d028      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cbc:	4b3a      	ldr	r3, [pc, #232]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cca:	4937      	ldr	r1, [pc, #220]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cda:	d106      	bne.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cdc:	4b32      	ldr	r3, [pc, #200]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	4a31      	ldr	r2, [pc, #196]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ce6:	60d3      	str	r3, [r2, #12]
 8003ce8:	e011      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cf2:	d10c      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	3304      	adds	r3, #4
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 f8c8 	bl	8003e90 <RCCEx_PLLSAI1_Config>
 8003d00:	4603      	mov	r3, r0
 8003d02:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003d04:	7cfb      	ldrb	r3, [r7, #19]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003d0a:	7cfb      	ldrb	r3, [r7, #19]
 8003d0c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d028      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d1a:	4b23      	ldr	r3, [pc, #140]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d20:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d28:	491f      	ldr	r1, [pc, #124]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d38:	d106      	bne.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d3a:	4b1b      	ldr	r3, [pc, #108]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	4a1a      	ldr	r2, [pc, #104]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d44:	60d3      	str	r3, [r2, #12]
 8003d46:	e011      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d50:	d10c      	bne.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	3304      	adds	r3, #4
 8003d56:	2101      	movs	r1, #1
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f000 f899 	bl	8003e90 <RCCEx_PLLSAI1_Config>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d62:	7cfb      	ldrb	r3, [r7, #19]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003d68:	7cfb      	ldrb	r3, [r7, #19]
 8003d6a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d02b      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d78:	4b0b      	ldr	r3, [pc, #44]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d7e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d86:	4908      	ldr	r1, [pc, #32]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d96:	d109      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d98:	4b03      	ldr	r3, [pc, #12]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	4a02      	ldr	r2, [pc, #8]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003da2:	60d3      	str	r3, [r2, #12]
 8003da4:	e014      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003da6:	bf00      	nop
 8003da8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003db0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003db4:	d10c      	bne.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	3304      	adds	r3, #4
 8003dba:	2101      	movs	r1, #1
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 f867 	bl	8003e90 <RCCEx_PLLSAI1_Config>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003dc6:	7cfb      	ldrb	r3, [r7, #19]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d001      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003dcc:	7cfb      	ldrb	r3, [r7, #19]
 8003dce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d02f      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ddc:	4b2b      	ldr	r3, [pc, #172]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dea:	4928      	ldr	r1, [pc, #160]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003df6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003dfa:	d10d      	bne.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	3304      	adds	r3, #4
 8003e00:	2102      	movs	r1, #2
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 f844 	bl	8003e90 <RCCEx_PLLSAI1_Config>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e0c:	7cfb      	ldrb	r3, [r7, #19]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d014      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003e12:	7cfb      	ldrb	r3, [r7, #19]
 8003e14:	74bb      	strb	r3, [r7, #18]
 8003e16:	e011      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e20:	d10c      	bne.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	3320      	adds	r3, #32
 8003e26:	2102      	movs	r1, #2
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 f925 	bl	8004078 <RCCEx_PLLSAI2_Config>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e32:	7cfb      	ldrb	r3, [r7, #19]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d001      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003e38:	7cfb      	ldrb	r3, [r7, #19]
 8003e3a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00a      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e48:	4b10      	ldr	r3, [pc, #64]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e4e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e56:	490d      	ldr	r1, [pc, #52]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00b      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e6a:	4b08      	ldr	r3, [pc, #32]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e70:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e7a:	4904      	ldr	r1, [pc, #16]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003e82:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3718      	adds	r7, #24
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	40021000 	.word	0x40021000

08003e90 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e9e:	4b75      	ldr	r3, [pc, #468]	; (8004074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	f003 0303 	and.w	r3, r3, #3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d018      	beq.n	8003edc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003eaa:	4b72      	ldr	r3, [pc, #456]	; (8004074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	f003 0203 	and.w	r2, r3, #3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d10d      	bne.n	8003ed6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
       ||
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d009      	beq.n	8003ed6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003ec2:	4b6c      	ldr	r3, [pc, #432]	; (8004074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	091b      	lsrs	r3, r3, #4
 8003ec8:	f003 0307 	and.w	r3, r3, #7
 8003ecc:	1c5a      	adds	r2, r3, #1
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
       ||
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d047      	beq.n	8003f66 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	73fb      	strb	r3, [r7, #15]
 8003eda:	e044      	b.n	8003f66 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2b03      	cmp	r3, #3
 8003ee2:	d018      	beq.n	8003f16 <RCCEx_PLLSAI1_Config+0x86>
 8003ee4:	2b03      	cmp	r3, #3
 8003ee6:	d825      	bhi.n	8003f34 <RCCEx_PLLSAI1_Config+0xa4>
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d002      	beq.n	8003ef2 <RCCEx_PLLSAI1_Config+0x62>
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d009      	beq.n	8003f04 <RCCEx_PLLSAI1_Config+0x74>
 8003ef0:	e020      	b.n	8003f34 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ef2:	4b60      	ldr	r3, [pc, #384]	; (8004074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d11d      	bne.n	8003f3a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f02:	e01a      	b.n	8003f3a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f04:	4b5b      	ldr	r3, [pc, #364]	; (8004074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d116      	bne.n	8003f3e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f14:	e013      	b.n	8003f3e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f16:	4b57      	ldr	r3, [pc, #348]	; (8004074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10f      	bne.n	8003f42 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f22:	4b54      	ldr	r3, [pc, #336]	; (8004074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d109      	bne.n	8003f42 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f32:	e006      	b.n	8003f42 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	73fb      	strb	r3, [r7, #15]
      break;
 8003f38:	e004      	b.n	8003f44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f3a:	bf00      	nop
 8003f3c:	e002      	b.n	8003f44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f3e:	bf00      	nop
 8003f40:	e000      	b.n	8003f44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f42:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f44:	7bfb      	ldrb	r3, [r7, #15]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10d      	bne.n	8003f66 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f4a:	4b4a      	ldr	r3, [pc, #296]	; (8004074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6819      	ldr	r1, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	011b      	lsls	r3, r3, #4
 8003f5e:	430b      	orrs	r3, r1
 8003f60:	4944      	ldr	r1, [pc, #272]	; (8004074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f66:	7bfb      	ldrb	r3, [r7, #15]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d17d      	bne.n	8004068 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003f6c:	4b41      	ldr	r3, [pc, #260]	; (8004074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a40      	ldr	r2, [pc, #256]	; (8004074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f78:	f7fd fbee 	bl	8001758 <HAL_GetTick>
 8003f7c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f7e:	e009      	b.n	8003f94 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f80:	f7fd fbea 	bl	8001758 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d902      	bls.n	8003f94 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	73fb      	strb	r3, [r7, #15]
        break;
 8003f92:	e005      	b.n	8003fa0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f94:	4b37      	ldr	r3, [pc, #220]	; (8004074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1ef      	bne.n	8003f80 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003fa0:	7bfb      	ldrb	r3, [r7, #15]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d160      	bne.n	8004068 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d111      	bne.n	8003fd0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fac:	4b31      	ldr	r3, [pc, #196]	; (8004074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003fb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	6892      	ldr	r2, [r2, #8]
 8003fbc:	0211      	lsls	r1, r2, #8
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	68d2      	ldr	r2, [r2, #12]
 8003fc2:	0912      	lsrs	r2, r2, #4
 8003fc4:	0452      	lsls	r2, r2, #17
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	492a      	ldr	r1, [pc, #168]	; (8004074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	610b      	str	r3, [r1, #16]
 8003fce:	e027      	b.n	8004020 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d112      	bne.n	8003ffc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fd6:	4b27      	ldr	r3, [pc, #156]	; (8004074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003fde:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	6892      	ldr	r2, [r2, #8]
 8003fe6:	0211      	lsls	r1, r2, #8
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	6912      	ldr	r2, [r2, #16]
 8003fec:	0852      	lsrs	r2, r2, #1
 8003fee:	3a01      	subs	r2, #1
 8003ff0:	0552      	lsls	r2, r2, #21
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	491f      	ldr	r1, [pc, #124]	; (8004074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	610b      	str	r3, [r1, #16]
 8003ffa:	e011      	b.n	8004020 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ffc:	4b1d      	ldr	r3, [pc, #116]	; (8004074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004004:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	6892      	ldr	r2, [r2, #8]
 800400c:	0211      	lsls	r1, r2, #8
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	6952      	ldr	r2, [r2, #20]
 8004012:	0852      	lsrs	r2, r2, #1
 8004014:	3a01      	subs	r2, #1
 8004016:	0652      	lsls	r2, r2, #25
 8004018:	430a      	orrs	r2, r1
 800401a:	4916      	ldr	r1, [pc, #88]	; (8004074 <RCCEx_PLLSAI1_Config+0x1e4>)
 800401c:	4313      	orrs	r3, r2
 800401e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004020:	4b14      	ldr	r3, [pc, #80]	; (8004074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a13      	ldr	r2, [pc, #76]	; (8004074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004026:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800402a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800402c:	f7fd fb94 	bl	8001758 <HAL_GetTick>
 8004030:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004032:	e009      	b.n	8004048 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004034:	f7fd fb90 	bl	8001758 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d902      	bls.n	8004048 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	73fb      	strb	r3, [r7, #15]
          break;
 8004046:	e005      	b.n	8004054 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004048:	4b0a      	ldr	r3, [pc, #40]	; (8004074 <RCCEx_PLLSAI1_Config+0x1e4>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d0ef      	beq.n	8004034 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004054:	7bfb      	ldrb	r3, [r7, #15]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d106      	bne.n	8004068 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800405a:	4b06      	ldr	r3, [pc, #24]	; (8004074 <RCCEx_PLLSAI1_Config+0x1e4>)
 800405c:	691a      	ldr	r2, [r3, #16]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	4904      	ldr	r1, [pc, #16]	; (8004074 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004064:	4313      	orrs	r3, r2
 8004066:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004068:	7bfb      	ldrb	r3, [r7, #15]
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	40021000 	.word	0x40021000

08004078 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004082:	2300      	movs	r3, #0
 8004084:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004086:	4b6a      	ldr	r3, [pc, #424]	; (8004230 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	f003 0303 	and.w	r3, r3, #3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d018      	beq.n	80040c4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004092:	4b67      	ldr	r3, [pc, #412]	; (8004230 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	f003 0203 	and.w	r2, r3, #3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d10d      	bne.n	80040be <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
       ||
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d009      	beq.n	80040be <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80040aa:	4b61      	ldr	r3, [pc, #388]	; (8004230 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	091b      	lsrs	r3, r3, #4
 80040b0:	f003 0307 	and.w	r3, r3, #7
 80040b4:	1c5a      	adds	r2, r3, #1
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
       ||
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d047      	beq.n	800414e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	73fb      	strb	r3, [r7, #15]
 80040c2:	e044      	b.n	800414e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2b03      	cmp	r3, #3
 80040ca:	d018      	beq.n	80040fe <RCCEx_PLLSAI2_Config+0x86>
 80040cc:	2b03      	cmp	r3, #3
 80040ce:	d825      	bhi.n	800411c <RCCEx_PLLSAI2_Config+0xa4>
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d002      	beq.n	80040da <RCCEx_PLLSAI2_Config+0x62>
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d009      	beq.n	80040ec <RCCEx_PLLSAI2_Config+0x74>
 80040d8:	e020      	b.n	800411c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80040da:	4b55      	ldr	r3, [pc, #340]	; (8004230 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d11d      	bne.n	8004122 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040ea:	e01a      	b.n	8004122 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80040ec:	4b50      	ldr	r3, [pc, #320]	; (8004230 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d116      	bne.n	8004126 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040fc:	e013      	b.n	8004126 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80040fe:	4b4c      	ldr	r3, [pc, #304]	; (8004230 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10f      	bne.n	800412a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800410a:	4b49      	ldr	r3, [pc, #292]	; (8004230 <RCCEx_PLLSAI2_Config+0x1b8>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d109      	bne.n	800412a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800411a:	e006      	b.n	800412a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	73fb      	strb	r3, [r7, #15]
      break;
 8004120:	e004      	b.n	800412c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004122:	bf00      	nop
 8004124:	e002      	b.n	800412c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004126:	bf00      	nop
 8004128:	e000      	b.n	800412c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800412a:	bf00      	nop
    }

    if(status == HAL_OK)
 800412c:	7bfb      	ldrb	r3, [r7, #15]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10d      	bne.n	800414e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004132:	4b3f      	ldr	r3, [pc, #252]	; (8004230 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6819      	ldr	r1, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	3b01      	subs	r3, #1
 8004144:	011b      	lsls	r3, r3, #4
 8004146:	430b      	orrs	r3, r1
 8004148:	4939      	ldr	r1, [pc, #228]	; (8004230 <RCCEx_PLLSAI2_Config+0x1b8>)
 800414a:	4313      	orrs	r3, r2
 800414c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800414e:	7bfb      	ldrb	r3, [r7, #15]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d167      	bne.n	8004224 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004154:	4b36      	ldr	r3, [pc, #216]	; (8004230 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a35      	ldr	r2, [pc, #212]	; (8004230 <RCCEx_PLLSAI2_Config+0x1b8>)
 800415a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800415e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004160:	f7fd fafa 	bl	8001758 <HAL_GetTick>
 8004164:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004166:	e009      	b.n	800417c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004168:	f7fd faf6 	bl	8001758 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b02      	cmp	r3, #2
 8004174:	d902      	bls.n	800417c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	73fb      	strb	r3, [r7, #15]
        break;
 800417a:	e005      	b.n	8004188 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800417c:	4b2c      	ldr	r3, [pc, #176]	; (8004230 <RCCEx_PLLSAI2_Config+0x1b8>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1ef      	bne.n	8004168 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004188:	7bfb      	ldrb	r3, [r7, #15]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d14a      	bne.n	8004224 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d111      	bne.n	80041b8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004194:	4b26      	ldr	r3, [pc, #152]	; (8004230 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800419c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6892      	ldr	r2, [r2, #8]
 80041a4:	0211      	lsls	r1, r2, #8
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	68d2      	ldr	r2, [r2, #12]
 80041aa:	0912      	lsrs	r2, r2, #4
 80041ac:	0452      	lsls	r2, r2, #17
 80041ae:	430a      	orrs	r2, r1
 80041b0:	491f      	ldr	r1, [pc, #124]	; (8004230 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	614b      	str	r3, [r1, #20]
 80041b6:	e011      	b.n	80041dc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80041b8:	4b1d      	ldr	r3, [pc, #116]	; (8004230 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80041c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	6892      	ldr	r2, [r2, #8]
 80041c8:	0211      	lsls	r1, r2, #8
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	6912      	ldr	r2, [r2, #16]
 80041ce:	0852      	lsrs	r2, r2, #1
 80041d0:	3a01      	subs	r2, #1
 80041d2:	0652      	lsls	r2, r2, #25
 80041d4:	430a      	orrs	r2, r1
 80041d6:	4916      	ldr	r1, [pc, #88]	; (8004230 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80041dc:	4b14      	ldr	r3, [pc, #80]	; (8004230 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a13      	ldr	r2, [pc, #76]	; (8004230 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e8:	f7fd fab6 	bl	8001758 <HAL_GetTick>
 80041ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80041ee:	e009      	b.n	8004204 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80041f0:	f7fd fab2 	bl	8001758 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d902      	bls.n	8004204 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	73fb      	strb	r3, [r7, #15]
          break;
 8004202:	e005      	b.n	8004210 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004204:	4b0a      	ldr	r3, [pc, #40]	; (8004230 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d0ef      	beq.n	80041f0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004210:	7bfb      	ldrb	r3, [r7, #15]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d106      	bne.n	8004224 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004216:	4b06      	ldr	r3, [pc, #24]	; (8004230 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004218:	695a      	ldr	r2, [r3, #20]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	4904      	ldr	r1, [pc, #16]	; (8004230 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004220:	4313      	orrs	r3, r2
 8004222:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004224:	7bfb      	ldrb	r3, [r7, #15]
}
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	40021000 	.word	0x40021000

08004234 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e042      	b.n	80042cc <HAL_RNG_Init+0x98>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	795b      	ldrb	r3, [r3, #5]
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b00      	cmp	r3, #0
 800424e:	d105      	bne.n	800425c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7fc f9fc 	bl	8000654 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2202      	movs	r2, #2
 8004260:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f042 0204 	orr.w	r2, r2, #4
 8004270:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800427c:	2b40      	cmp	r3, #64	; 0x40
 800427e:	d104      	bne.n	800428a <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2204      	movs	r2, #4
 8004284:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e020      	b.n	80042cc <HAL_RNG_Init+0x98>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800428a:	f7fd fa65 	bl	8001758 <HAL_GetTick>
 800428e:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004290:	e00e      	b.n	80042b0 <HAL_RNG_Init+0x7c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004292:	f7fd fa61 	bl	8001758 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	2b02      	cmp	r3, #2
 800429e:	d907      	bls.n	80042b0 <HAL_RNG_Init+0x7c>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2204      	movs	r2, #4
 80042a4:	715a      	strb	r2, [r3, #5]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2202      	movs	r2, #2
 80042aa:	609a      	str	r2, [r3, #8]
      return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e00d      	b.n	80042cc <HAL_RNG_Init+0x98>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f003 0304 	and.w	r3, r3, #4
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	d0e9      	beq.n	8004292 <HAL_RNG_Init+0x5e>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2201      	movs	r2, #1
 80042c2:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e049      	b.n	800437a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d106      	bne.n	8004300 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f841 	bl	8004382 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2202      	movs	r2, #2
 8004304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	3304      	adds	r3, #4
 8004310:	4619      	mov	r1, r3
 8004312:	4610      	mov	r0, r2
 8004314:	f000 fa02 	bl	800471c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004382:	b480      	push	{r7}
 8004384:	b083      	sub	sp, #12
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800438a:	bf00      	nop
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
	...

08004398 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d001      	beq.n	80043b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e04f      	b.n	8004450 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2202      	movs	r2, #2
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68da      	ldr	r2, [r3, #12]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f042 0201 	orr.w	r2, r2, #1
 80043c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a23      	ldr	r2, [pc, #140]	; (800445c <HAL_TIM_Base_Start_IT+0xc4>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d01d      	beq.n	800440e <HAL_TIM_Base_Start_IT+0x76>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043da:	d018      	beq.n	800440e <HAL_TIM_Base_Start_IT+0x76>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a1f      	ldr	r2, [pc, #124]	; (8004460 <HAL_TIM_Base_Start_IT+0xc8>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d013      	beq.n	800440e <HAL_TIM_Base_Start_IT+0x76>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a1e      	ldr	r2, [pc, #120]	; (8004464 <HAL_TIM_Base_Start_IT+0xcc>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d00e      	beq.n	800440e <HAL_TIM_Base_Start_IT+0x76>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a1c      	ldr	r2, [pc, #112]	; (8004468 <HAL_TIM_Base_Start_IT+0xd0>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d009      	beq.n	800440e <HAL_TIM_Base_Start_IT+0x76>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a1b      	ldr	r2, [pc, #108]	; (800446c <HAL_TIM_Base_Start_IT+0xd4>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d004      	beq.n	800440e <HAL_TIM_Base_Start_IT+0x76>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a19      	ldr	r2, [pc, #100]	; (8004470 <HAL_TIM_Base_Start_IT+0xd8>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d115      	bne.n	800443a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	689a      	ldr	r2, [r3, #8]
 8004414:	4b17      	ldr	r3, [pc, #92]	; (8004474 <HAL_TIM_Base_Start_IT+0xdc>)
 8004416:	4013      	ands	r3, r2
 8004418:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2b06      	cmp	r3, #6
 800441e:	d015      	beq.n	800444c <HAL_TIM_Base_Start_IT+0xb4>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004426:	d011      	beq.n	800444c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f042 0201 	orr.w	r2, r2, #1
 8004436:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004438:	e008      	b.n	800444c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f042 0201 	orr.w	r2, r2, #1
 8004448:	601a      	str	r2, [r3, #0]
 800444a:	e000      	b.n	800444e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800444c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3714      	adds	r7, #20
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr
 800445c:	40012c00 	.word	0x40012c00
 8004460:	40000400 	.word	0x40000400
 8004464:	40000800 	.word	0x40000800
 8004468:	40000c00 	.word	0x40000c00
 800446c:	40013400 	.word	0x40013400
 8004470:	40014000 	.word	0x40014000
 8004474:	00010007 	.word	0x00010007

08004478 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b02      	cmp	r3, #2
 800448c:	d122      	bne.n	80044d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b02      	cmp	r3, #2
 800449a:	d11b      	bne.n	80044d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f06f 0202 	mvn.w	r2, #2
 80044a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f90f 	bl	80046de <HAL_TIM_IC_CaptureCallback>
 80044c0:	e005      	b.n	80044ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f901 	bl	80046ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 f912 	bl	80046f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	f003 0304 	and.w	r3, r3, #4
 80044de:	2b04      	cmp	r3, #4
 80044e0:	d122      	bne.n	8004528 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b04      	cmp	r3, #4
 80044ee:	d11b      	bne.n	8004528 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f06f 0204 	mvn.w	r2, #4
 80044f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2202      	movs	r2, #2
 80044fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f8e5 	bl	80046de <HAL_TIM_IC_CaptureCallback>
 8004514:	e005      	b.n	8004522 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f8d7 	bl	80046ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f8e8 	bl	80046f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	f003 0308 	and.w	r3, r3, #8
 8004532:	2b08      	cmp	r3, #8
 8004534:	d122      	bne.n	800457c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	f003 0308 	and.w	r3, r3, #8
 8004540:	2b08      	cmp	r3, #8
 8004542:	d11b      	bne.n	800457c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f06f 0208 	mvn.w	r2, #8
 800454c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2204      	movs	r2, #4
 8004552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	f003 0303 	and.w	r3, r3, #3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f8bb 	bl	80046de <HAL_TIM_IC_CaptureCallback>
 8004568:	e005      	b.n	8004576 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f8ad 	bl	80046ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f8be 	bl	80046f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	f003 0310 	and.w	r3, r3, #16
 8004586:	2b10      	cmp	r3, #16
 8004588:	d122      	bne.n	80045d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	f003 0310 	and.w	r3, r3, #16
 8004594:	2b10      	cmp	r3, #16
 8004596:	d11b      	bne.n	80045d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f06f 0210 	mvn.w	r2, #16
 80045a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2208      	movs	r2, #8
 80045a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d003      	beq.n	80045be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f891 	bl	80046de <HAL_TIM_IC_CaptureCallback>
 80045bc:	e005      	b.n	80045ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 f883 	bl	80046ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 f894 	bl	80046f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d10e      	bne.n	80045fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d107      	bne.n	80045fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f06f 0201 	mvn.w	r2, #1
 80045f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f85d 	bl	80046b6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004606:	2b80      	cmp	r3, #128	; 0x80
 8004608:	d10e      	bne.n	8004628 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004614:	2b80      	cmp	r3, #128	; 0x80
 8004616:	d107      	bne.n	8004628 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f91e 	bl	8004864 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004632:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004636:	d10e      	bne.n	8004656 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004642:	2b80      	cmp	r3, #128	; 0x80
 8004644:	d107      	bne.n	8004656 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800464e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 f911 	bl	8004878 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004660:	2b40      	cmp	r3, #64	; 0x40
 8004662:	d10e      	bne.n	8004682 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800466e:	2b40      	cmp	r3, #64	; 0x40
 8004670:	d107      	bne.n	8004682 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800467a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 f842 	bl	8004706 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	f003 0320 	and.w	r3, r3, #32
 800468c:	2b20      	cmp	r3, #32
 800468e:	d10e      	bne.n	80046ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	f003 0320 	and.w	r3, r3, #32
 800469a:	2b20      	cmp	r3, #32
 800469c:	d107      	bne.n	80046ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f06f 0220 	mvn.w	r2, #32
 80046a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 f8d1 	bl	8004850 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046ae:	bf00      	nop
 80046b0:	3708      	adds	r7, #8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046b6:	b480      	push	{r7}
 80046b8:	b083      	sub	sp, #12
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80046be:	bf00      	nop
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr

080046ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046ca:	b480      	push	{r7}
 80046cc:	b083      	sub	sp, #12
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046d2:	bf00      	nop
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046de:	b480      	push	{r7}
 80046e0:	b083      	sub	sp, #12
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046e6:	bf00      	nop
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr

080046f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046f2:	b480      	push	{r7}
 80046f4:	b083      	sub	sp, #12
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046fa:	bf00      	nop
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr

08004706 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004706:	b480      	push	{r7}
 8004708:	b083      	sub	sp, #12
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800470e:	bf00      	nop
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
	...

0800471c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a40      	ldr	r2, [pc, #256]	; (8004830 <TIM_Base_SetConfig+0x114>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d013      	beq.n	800475c <TIM_Base_SetConfig+0x40>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800473a:	d00f      	beq.n	800475c <TIM_Base_SetConfig+0x40>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a3d      	ldr	r2, [pc, #244]	; (8004834 <TIM_Base_SetConfig+0x118>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d00b      	beq.n	800475c <TIM_Base_SetConfig+0x40>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a3c      	ldr	r2, [pc, #240]	; (8004838 <TIM_Base_SetConfig+0x11c>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d007      	beq.n	800475c <TIM_Base_SetConfig+0x40>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a3b      	ldr	r2, [pc, #236]	; (800483c <TIM_Base_SetConfig+0x120>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d003      	beq.n	800475c <TIM_Base_SetConfig+0x40>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a3a      	ldr	r2, [pc, #232]	; (8004840 <TIM_Base_SetConfig+0x124>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d108      	bne.n	800476e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004762:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	4313      	orrs	r3, r2
 800476c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a2f      	ldr	r2, [pc, #188]	; (8004830 <TIM_Base_SetConfig+0x114>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d01f      	beq.n	80047b6 <TIM_Base_SetConfig+0x9a>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800477c:	d01b      	beq.n	80047b6 <TIM_Base_SetConfig+0x9a>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a2c      	ldr	r2, [pc, #176]	; (8004834 <TIM_Base_SetConfig+0x118>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d017      	beq.n	80047b6 <TIM_Base_SetConfig+0x9a>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a2b      	ldr	r2, [pc, #172]	; (8004838 <TIM_Base_SetConfig+0x11c>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d013      	beq.n	80047b6 <TIM_Base_SetConfig+0x9a>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a2a      	ldr	r2, [pc, #168]	; (800483c <TIM_Base_SetConfig+0x120>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d00f      	beq.n	80047b6 <TIM_Base_SetConfig+0x9a>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a29      	ldr	r2, [pc, #164]	; (8004840 <TIM_Base_SetConfig+0x124>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d00b      	beq.n	80047b6 <TIM_Base_SetConfig+0x9a>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a28      	ldr	r2, [pc, #160]	; (8004844 <TIM_Base_SetConfig+0x128>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d007      	beq.n	80047b6 <TIM_Base_SetConfig+0x9a>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a27      	ldr	r2, [pc, #156]	; (8004848 <TIM_Base_SetConfig+0x12c>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d003      	beq.n	80047b6 <TIM_Base_SetConfig+0x9a>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a26      	ldr	r2, [pc, #152]	; (800484c <TIM_Base_SetConfig+0x130>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d108      	bne.n	80047c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	689a      	ldr	r2, [r3, #8]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a10      	ldr	r2, [pc, #64]	; (8004830 <TIM_Base_SetConfig+0x114>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d00f      	beq.n	8004814 <TIM_Base_SetConfig+0xf8>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a12      	ldr	r2, [pc, #72]	; (8004840 <TIM_Base_SetConfig+0x124>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d00b      	beq.n	8004814 <TIM_Base_SetConfig+0xf8>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a11      	ldr	r2, [pc, #68]	; (8004844 <TIM_Base_SetConfig+0x128>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d007      	beq.n	8004814 <TIM_Base_SetConfig+0xf8>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a10      	ldr	r2, [pc, #64]	; (8004848 <TIM_Base_SetConfig+0x12c>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d003      	beq.n	8004814 <TIM_Base_SetConfig+0xf8>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a0f      	ldr	r2, [pc, #60]	; (800484c <TIM_Base_SetConfig+0x130>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d103      	bne.n	800481c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	691a      	ldr	r2, [r3, #16]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	615a      	str	r2, [r3, #20]
}
 8004822:	bf00      	nop
 8004824:	3714      	adds	r7, #20
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	40012c00 	.word	0x40012c00
 8004834:	40000400 	.word	0x40000400
 8004838:	40000800 	.word	0x40000800
 800483c:	40000c00 	.word	0x40000c00
 8004840:	40013400 	.word	0x40013400
 8004844:	40014000 	.word	0x40014000
 8004848:	40014400 	.word	0x40014400
 800484c:	40014800 	.word	0x40014800

08004850 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800488c:	b480      	push	{r7}
 800488e:	b087      	sub	sp, #28
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	4613      	mov	r3, r2
 8004898:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800489a:	79fb      	ldrb	r3, [r7, #7]
 800489c:	2b02      	cmp	r3, #2
 800489e:	d165      	bne.n	800496c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	4a3e      	ldr	r2, [pc, #248]	; (800499c <USB_SetTurnaroundTime+0x110>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d906      	bls.n	80048b6 <USB_SetTurnaroundTime+0x2a>
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	4a3d      	ldr	r2, [pc, #244]	; (80049a0 <USB_SetTurnaroundTime+0x114>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d202      	bcs.n	80048b6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80048b0:	230f      	movs	r3, #15
 80048b2:	617b      	str	r3, [r7, #20]
 80048b4:	e05c      	b.n	8004970 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	4a39      	ldr	r2, [pc, #228]	; (80049a0 <USB_SetTurnaroundTime+0x114>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d306      	bcc.n	80048cc <USB_SetTurnaroundTime+0x40>
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	4a38      	ldr	r2, [pc, #224]	; (80049a4 <USB_SetTurnaroundTime+0x118>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d202      	bcs.n	80048cc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80048c6:	230e      	movs	r3, #14
 80048c8:	617b      	str	r3, [r7, #20]
 80048ca:	e051      	b.n	8004970 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	4a35      	ldr	r2, [pc, #212]	; (80049a4 <USB_SetTurnaroundTime+0x118>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d306      	bcc.n	80048e2 <USB_SetTurnaroundTime+0x56>
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	4a34      	ldr	r2, [pc, #208]	; (80049a8 <USB_SetTurnaroundTime+0x11c>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d202      	bcs.n	80048e2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80048dc:	230d      	movs	r3, #13
 80048de:	617b      	str	r3, [r7, #20]
 80048e0:	e046      	b.n	8004970 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	4a30      	ldr	r2, [pc, #192]	; (80049a8 <USB_SetTurnaroundTime+0x11c>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d306      	bcc.n	80048f8 <USB_SetTurnaroundTime+0x6c>
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	4a2f      	ldr	r2, [pc, #188]	; (80049ac <USB_SetTurnaroundTime+0x120>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d802      	bhi.n	80048f8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80048f2:	230c      	movs	r3, #12
 80048f4:	617b      	str	r3, [r7, #20]
 80048f6:	e03b      	b.n	8004970 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	4a2c      	ldr	r2, [pc, #176]	; (80049ac <USB_SetTurnaroundTime+0x120>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d906      	bls.n	800490e <USB_SetTurnaroundTime+0x82>
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	4a2b      	ldr	r2, [pc, #172]	; (80049b0 <USB_SetTurnaroundTime+0x124>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d802      	bhi.n	800490e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004908:	230b      	movs	r3, #11
 800490a:	617b      	str	r3, [r7, #20]
 800490c:	e030      	b.n	8004970 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	4a27      	ldr	r2, [pc, #156]	; (80049b0 <USB_SetTurnaroundTime+0x124>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d906      	bls.n	8004924 <USB_SetTurnaroundTime+0x98>
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	4a26      	ldr	r2, [pc, #152]	; (80049b4 <USB_SetTurnaroundTime+0x128>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d802      	bhi.n	8004924 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800491e:	230a      	movs	r3, #10
 8004920:	617b      	str	r3, [r7, #20]
 8004922:	e025      	b.n	8004970 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	4a23      	ldr	r2, [pc, #140]	; (80049b4 <USB_SetTurnaroundTime+0x128>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d906      	bls.n	800493a <USB_SetTurnaroundTime+0xae>
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	4a22      	ldr	r2, [pc, #136]	; (80049b8 <USB_SetTurnaroundTime+0x12c>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d202      	bcs.n	800493a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004934:	2309      	movs	r3, #9
 8004936:	617b      	str	r3, [r7, #20]
 8004938:	e01a      	b.n	8004970 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	4a1e      	ldr	r2, [pc, #120]	; (80049b8 <USB_SetTurnaroundTime+0x12c>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d306      	bcc.n	8004950 <USB_SetTurnaroundTime+0xc4>
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	4a1d      	ldr	r2, [pc, #116]	; (80049bc <USB_SetTurnaroundTime+0x130>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d802      	bhi.n	8004950 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800494a:	2308      	movs	r3, #8
 800494c:	617b      	str	r3, [r7, #20]
 800494e:	e00f      	b.n	8004970 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	4a1a      	ldr	r2, [pc, #104]	; (80049bc <USB_SetTurnaroundTime+0x130>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d906      	bls.n	8004966 <USB_SetTurnaroundTime+0xda>
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	4a19      	ldr	r2, [pc, #100]	; (80049c0 <USB_SetTurnaroundTime+0x134>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d202      	bcs.n	8004966 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004960:	2307      	movs	r3, #7
 8004962:	617b      	str	r3, [r7, #20]
 8004964:	e004      	b.n	8004970 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004966:	2306      	movs	r3, #6
 8004968:	617b      	str	r3, [r7, #20]
 800496a:	e001      	b.n	8004970 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800496c:	2309      	movs	r3, #9
 800496e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	68da      	ldr	r2, [r3, #12]
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	029b      	lsls	r3, r3, #10
 8004984:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004988:	431a      	orrs	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	371c      	adds	r7, #28
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr
 800499c:	00d8acbf 	.word	0x00d8acbf
 80049a0:	00e4e1c0 	.word	0x00e4e1c0
 80049a4:	00f42400 	.word	0x00f42400
 80049a8:	01067380 	.word	0x01067380
 80049ac:	011a499f 	.word	0x011a499f
 80049b0:	01312cff 	.word	0x01312cff
 80049b4:	014ca43f 	.word	0x014ca43f
 80049b8:	016e3600 	.word	0x016e3600
 80049bc:	01a6ab1f 	.word	0x01a6ab1f
 80049c0:	01e84800 	.word	0x01e84800

080049c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80049ce:	2300      	movs	r3, #0
 80049d0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	019b      	lsls	r3, r3, #6
 80049d6:	f043 0220 	orr.w	r2, r3, #32
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	3301      	adds	r3, #1
 80049e2:	60fb      	str	r3, [r7, #12]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	4a09      	ldr	r2, [pc, #36]	; (8004a0c <USB_FlushTxFifo+0x48>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d901      	bls.n	80049f0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e006      	b.n	80049fe <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	f003 0320 	and.w	r3, r3, #32
 80049f8:	2b20      	cmp	r3, #32
 80049fa:	d0f0      	beq.n	80049de <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3714      	adds	r7, #20
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	00030d40 	.word	0x00030d40

08004a10 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b087      	sub	sp, #28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f003 0306 	and.w	r3, r3, #6
 8004a28:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d002      	beq.n	8004a36 <USB_GetDevSpeed+0x26>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2b06      	cmp	r3, #6
 8004a34:	d102      	bne.n	8004a3c <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004a36:	2302      	movs	r3, #2
 8004a38:	75fb      	strb	r3, [r7, #23]
 8004a3a:	e001      	b.n	8004a40 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8004a3c:	230f      	movs	r3, #15
 8004a3e:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004a40:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	371c      	adds	r7, #28
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b085      	sub	sp, #20
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
 8004a56:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	785b      	ldrb	r3, [r3, #1]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d13a      	bne.n	8004ae0 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a70:	69da      	ldr	r2, [r3, #28]
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	f003 030f 	and.w	r3, r3, #15
 8004a7a:	2101      	movs	r1, #1
 8004a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	68f9      	ldr	r1, [r7, #12]
 8004a84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	015a      	lsls	r2, r3, #5
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4413      	add	r3, r2
 8004a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d155      	bne.n	8004b4e <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	015a      	lsls	r2, r3, #5
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	78db      	ldrb	r3, [r3, #3]
 8004abc:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004abe:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	059b      	lsls	r3, r3, #22
 8004ac4:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	0151      	lsls	r1, r2, #5
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	440a      	add	r2, r1
 8004ad0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004adc:	6013      	str	r3, [r2, #0]
 8004ade:	e036      	b.n	8004b4e <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ae6:	69da      	ldr	r2, [r3, #28]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	f003 030f 	and.w	r3, r3, #15
 8004af0:	2101      	movs	r1, #1
 8004af2:	fa01 f303 	lsl.w	r3, r1, r3
 8004af6:	041b      	lsls	r3, r3, #16
 8004af8:	68f9      	ldr	r1, [r7, #12]
 8004afa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004afe:	4313      	orrs	r3, r2
 8004b00:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	015a      	lsls	r2, r3, #5
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	4413      	add	r3, r2
 8004b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d11a      	bne.n	8004b4e <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	015a      	lsls	r2, r3, #5
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4413      	add	r3, r2
 8004b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	78db      	ldrb	r3, [r3, #3]
 8004b32:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004b34:	430b      	orrs	r3, r1
 8004b36:	4313      	orrs	r3, r2
 8004b38:	68ba      	ldr	r2, [r7, #8]
 8004b3a:	0151      	lsls	r1, r2, #5
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	440a      	add	r2, r1
 8004b40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b4c:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3714      	adds	r7, #20
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	785b      	ldrb	r3, [r3, #1]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	f040 810a 	bne.w	8004d8e <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d132      	bne.n	8004be8 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	015a      	lsls	r2, r3, #5
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	4413      	add	r3, r2
 8004b8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	0151      	lsls	r1, r2, #5
 8004b94:	697a      	ldr	r2, [r7, #20]
 8004b96:	440a      	add	r2, r1
 8004b98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b9c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ba0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ba4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	015a      	lsls	r2, r3, #5
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	4413      	add	r3, r2
 8004bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	0151      	lsls	r1, r2, #5
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	440a      	add	r2, r1
 8004bbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bc0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004bc4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	015a      	lsls	r2, r3, #5
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	4413      	add	r3, r2
 8004bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	0151      	lsls	r1, r2, #5
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	440a      	add	r2, r1
 8004bdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004be0:	0cdb      	lsrs	r3, r3, #19
 8004be2:	04db      	lsls	r3, r3, #19
 8004be4:	6113      	str	r3, [r2, #16]
 8004be6:	e074      	b.n	8004cd2 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	015a      	lsls	r2, r3, #5
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	4413      	add	r3, r2
 8004bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	0151      	lsls	r1, r2, #5
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	440a      	add	r2, r1
 8004bfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c02:	0cdb      	lsrs	r3, r3, #19
 8004c04:	04db      	lsls	r3, r3, #19
 8004c06:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	015a      	lsls	r2, r3, #5
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	4413      	add	r3, r2
 8004c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	0151      	lsls	r1, r2, #5
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	440a      	add	r2, r1
 8004c1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c22:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c26:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c38:	691a      	ldr	r2, [r3, #16]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	6959      	ldr	r1, [r3, #20]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	440b      	add	r3, r1
 8004c44:	1e59      	subs	r1, r3, #1
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c4e:	04d9      	lsls	r1, r3, #19
 8004c50:	4baf      	ldr	r3, [pc, #700]	; (8004f10 <USB_EPStartXfer+0x3b4>)
 8004c52:	400b      	ands	r3, r1
 8004c54:	6939      	ldr	r1, [r7, #16]
 8004c56:	0148      	lsls	r0, r1, #5
 8004c58:	6979      	ldr	r1, [r7, #20]
 8004c5a:	4401      	add	r1, r0
 8004c5c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004c60:	4313      	orrs	r3, r2
 8004c62:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	015a      	lsls	r2, r3, #5
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c70:	691a      	ldr	r2, [r3, #16]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c7a:	6939      	ldr	r1, [r7, #16]
 8004c7c:	0148      	lsls	r0, r1, #5
 8004c7e:	6979      	ldr	r1, [r7, #20]
 8004c80:	4401      	add	r1, r0
 8004c82:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004c86:	4313      	orrs	r3, r2
 8004c88:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	78db      	ldrb	r3, [r3, #3]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d11f      	bne.n	8004cd2 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	015a      	lsls	r2, r3, #5
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	4413      	add	r3, r2
 8004c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	0151      	lsls	r1, r2, #5
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	440a      	add	r2, r1
 8004ca8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cac:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004cb0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	015a      	lsls	r2, r3, #5
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	4413      	add	r3, r2
 8004cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	0151      	lsls	r1, r2, #5
 8004cc4:	697a      	ldr	r2, [r7, #20]
 8004cc6:	440a      	add	r2, r1
 8004cc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ccc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cd0:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	015a      	lsls	r2, r3, #5
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	0151      	lsls	r1, r2, #5
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	440a      	add	r2, r1
 8004ce8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004cf0:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	78db      	ldrb	r3, [r3, #3]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d015      	beq.n	8004d26 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	f000 8100 	beq.w	8004f04 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	f003 030f 	and.w	r3, r3, #15
 8004d14:	2101      	movs	r1, #1
 8004d16:	fa01 f303 	lsl.w	r3, r1, r3
 8004d1a:	6979      	ldr	r1, [r7, #20]
 8004d1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d20:	4313      	orrs	r3, r2
 8004d22:	634b      	str	r3, [r1, #52]	; 0x34
 8004d24:	e0ee      	b.n	8004f04 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d110      	bne.n	8004d58 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	015a      	lsls	r2, r3, #5
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	0151      	lsls	r1, r2, #5
 8004d48:	697a      	ldr	r2, [r7, #20]
 8004d4a:	440a      	add	r2, r1
 8004d4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d54:	6013      	str	r3, [r2, #0]
 8004d56:	e00f      	b.n	8004d78 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	0151      	lsls	r1, r2, #5
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	440a      	add	r2, r1
 8004d6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d76:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	68d9      	ldr	r1, [r3, #12]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	781a      	ldrb	r2, [r3, #0]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 f9e2 	bl	8005150 <USB_WritePacket>
 8004d8c:	e0ba      	b.n	8004f04 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	0151      	lsls	r1, r2, #5
 8004da0:	697a      	ldr	r2, [r7, #20]
 8004da2:	440a      	add	r2, r1
 8004da4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004da8:	0cdb      	lsrs	r3, r3, #19
 8004daa:	04db      	lsls	r3, r3, #19
 8004dac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	015a      	lsls	r2, r3, #5
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	4413      	add	r3, r2
 8004db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	0151      	lsls	r1, r2, #5
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	440a      	add	r2, r1
 8004dc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dc8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004dcc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004dd0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d123      	bne.n	8004e22 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	015a      	lsls	r2, r3, #5
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	4413      	add	r3, r2
 8004de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de6:	691a      	ldr	r2, [r3, #16]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004df0:	6939      	ldr	r1, [r7, #16]
 8004df2:	0148      	lsls	r0, r1, #5
 8004df4:	6979      	ldr	r1, [r7, #20]
 8004df6:	4401      	add	r1, r0
 8004df8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	015a      	lsls	r2, r3, #5
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	4413      	add	r3, r2
 8004e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	0151      	lsls	r1, r2, #5
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	440a      	add	r2, r1
 8004e16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e1e:	6113      	str	r3, [r2, #16]
 8004e20:	e033      	b.n	8004e8a <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	695a      	ldr	r2, [r3, #20]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	1e5a      	subs	r2, r3, #1
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e36:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e44:	691a      	ldr	r2, [r3, #16]
 8004e46:	89fb      	ldrh	r3, [r7, #14]
 8004e48:	04d9      	lsls	r1, r3, #19
 8004e4a:	4b31      	ldr	r3, [pc, #196]	; (8004f10 <USB_EPStartXfer+0x3b4>)
 8004e4c:	400b      	ands	r3, r1
 8004e4e:	6939      	ldr	r1, [r7, #16]
 8004e50:	0148      	lsls	r0, r1, #5
 8004e52:	6979      	ldr	r1, [r7, #20]
 8004e54:	4401      	add	r1, r0
 8004e56:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	015a      	lsls	r2, r3, #5
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e6a:	691a      	ldr	r2, [r3, #16]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	89f9      	ldrh	r1, [r7, #14]
 8004e72:	fb01 f303 	mul.w	r3, r1, r3
 8004e76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e7a:	6939      	ldr	r1, [r7, #16]
 8004e7c:	0148      	lsls	r0, r1, #5
 8004e7e:	6979      	ldr	r1, [r7, #20]
 8004e80:	4401      	add	r1, r0
 8004e82:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e86:	4313      	orrs	r3, r2
 8004e88:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	78db      	ldrb	r3, [r3, #3]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d128      	bne.n	8004ee4 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d110      	bne.n	8004ec4 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	015a      	lsls	r2, r3, #5
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	0151      	lsls	r1, r2, #5
 8004eb4:	697a      	ldr	r2, [r7, #20]
 8004eb6:	440a      	add	r2, r1
 8004eb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ebc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ec0:	6013      	str	r3, [r2, #0]
 8004ec2:	e00f      	b.n	8004ee4 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	015a      	lsls	r2, r3, #5
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	4413      	add	r3, r2
 8004ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	0151      	lsls	r1, r2, #5
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	440a      	add	r2, r1
 8004eda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ee2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	015a      	lsls	r2, r3, #5
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	0151      	lsls	r1, r2, #5
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	440a      	add	r2, r1
 8004efa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004efe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3718      	adds	r7, #24
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	1ff80000 	.word	0x1ff80000

08004f14 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	785b      	ldrb	r3, [r3, #1]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	f040 80ab 	bne.w	8005088 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d132      	bne.n	8004fa0 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	015a      	lsls	r2, r3, #5
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	4413      	add	r3, r2
 8004f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	68ba      	ldr	r2, [r7, #8]
 8004f4a:	0151      	lsls	r1, r2, #5
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	440a      	add	r2, r1
 8004f50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f54:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f58:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	015a      	lsls	r2, r3, #5
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	4413      	add	r3, r2
 8004f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	0151      	lsls	r1, r2, #5
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	440a      	add	r2, r1
 8004f74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	015a      	lsls	r2, r3, #5
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	4413      	add	r3, r2
 8004f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	68ba      	ldr	r2, [r7, #8]
 8004f8e:	0151      	lsls	r1, r2, #5
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	440a      	add	r2, r1
 8004f94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f98:	0cdb      	lsrs	r3, r3, #19
 8004f9a:	04db      	lsls	r3, r3, #19
 8004f9c:	6113      	str	r3, [r2, #16]
 8004f9e:	e04e      	b.n	800503e <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	015a      	lsls	r2, r3, #5
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	0151      	lsls	r1, r2, #5
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	440a      	add	r2, r1
 8004fb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fba:	0cdb      	lsrs	r3, r3, #19
 8004fbc:	04db      	lsls	r3, r3, #19
 8004fbe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	015a      	lsls	r2, r3, #5
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	68ba      	ldr	r2, [r7, #8]
 8004fd0:	0151      	lsls	r1, r2, #5
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	440a      	add	r2, r1
 8004fd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fda:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004fde:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004fe2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	695a      	ldr	r2, [r3, #20]
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d903      	bls.n	8004ff8 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	689a      	ldr	r2, [r3, #8]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	015a      	lsls	r2, r3, #5
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	4413      	add	r3, r2
 8005000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	68ba      	ldr	r2, [r7, #8]
 8005008:	0151      	lsls	r1, r2, #5
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	440a      	add	r2, r1
 800500e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005012:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005016:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	015a      	lsls	r2, r3, #5
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	4413      	add	r3, r2
 8005020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005024:	691a      	ldr	r2, [r3, #16]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800502e:	68b9      	ldr	r1, [r7, #8]
 8005030:	0148      	lsls	r0, r1, #5
 8005032:	68f9      	ldr	r1, [r7, #12]
 8005034:	4401      	add	r1, r0
 8005036:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800503a:	4313      	orrs	r3, r2
 800503c:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	015a      	lsls	r2, r3, #5
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	4413      	add	r3, r2
 8005046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68ba      	ldr	r2, [r7, #8]
 800504e:	0151      	lsls	r1, r2, #5
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	440a      	add	r2, r1
 8005054:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005058:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800505c:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d06d      	beq.n	8005142 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800506c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	f003 030f 	and.w	r3, r3, #15
 8005076:	2101      	movs	r1, #1
 8005078:	fa01 f303 	lsl.w	r3, r1, r3
 800507c:	68f9      	ldr	r1, [r7, #12]
 800507e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005082:	4313      	orrs	r3, r2
 8005084:	634b      	str	r3, [r1, #52]	; 0x34
 8005086:	e05c      	b.n	8005142 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	015a      	lsls	r2, r3, #5
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	4413      	add	r3, r2
 8005090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	68ba      	ldr	r2, [r7, #8]
 8005098:	0151      	lsls	r1, r2, #5
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	440a      	add	r2, r1
 800509e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050a2:	0cdb      	lsrs	r3, r3, #19
 80050a4:	04db      	lsls	r3, r3, #19
 80050a6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	015a      	lsls	r2, r3, #5
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	4413      	add	r3, r2
 80050b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	0151      	lsls	r1, r2, #5
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	440a      	add	r2, r1
 80050be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050c2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050c6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050ca:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	695b      	ldr	r3, [r3, #20]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d003      	beq.n	80050dc <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	689a      	ldr	r2, [r3, #8]
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	015a      	lsls	r2, r3, #5
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	4413      	add	r3, r2
 80050e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	0151      	lsls	r1, r2, #5
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	440a      	add	r2, r1
 80050f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050fa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	015a      	lsls	r2, r3, #5
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	4413      	add	r3, r2
 8005104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005108:	691a      	ldr	r2, [r3, #16]
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005112:	68b9      	ldr	r1, [r7, #8]
 8005114:	0148      	lsls	r0, r1, #5
 8005116:	68f9      	ldr	r1, [r7, #12]
 8005118:	4401      	add	r1, r0
 800511a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800511e:	4313      	orrs	r3, r2
 8005120:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	015a      	lsls	r2, r3, #5
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	4413      	add	r3, r2
 800512a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68ba      	ldr	r2, [r7, #8]
 8005132:	0151      	lsls	r1, r2, #5
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	440a      	add	r2, r1
 8005138:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800513c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005140:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3714      	adds	r7, #20
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8005150:	b480      	push	{r7}
 8005152:	b089      	sub	sp, #36	; 0x24
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	4611      	mov	r1, r2
 800515c:	461a      	mov	r2, r3
 800515e:	460b      	mov	r3, r1
 8005160:	71fb      	strb	r3, [r7, #7]
 8005162:	4613      	mov	r3, r2
 8005164:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800516e:	88bb      	ldrh	r3, [r7, #4]
 8005170:	3303      	adds	r3, #3
 8005172:	089b      	lsrs	r3, r3, #2
 8005174:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8005176:	2300      	movs	r3, #0
 8005178:	61bb      	str	r3, [r7, #24]
 800517a:	e00f      	b.n	800519c <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800517c:	79fb      	ldrb	r3, [r7, #7]
 800517e:	031a      	lsls	r2, r3, #12
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	4413      	add	r3, r2
 8005184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005188:	461a      	mov	r2, r3
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6013      	str	r3, [r2, #0]
    pSrc++;
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	3304      	adds	r3, #4
 8005194:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	3301      	adds	r3, #1
 800519a:	61bb      	str	r3, [r7, #24]
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d3eb      	bcc.n	800517c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3724      	adds	r7, #36	; 0x24
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b089      	sub	sp, #36	; 0x24
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	60f8      	str	r0, [r7, #12]
 80051ba:	60b9      	str	r1, [r7, #8]
 80051bc:	4613      	mov	r3, r2
 80051be:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80051c8:	88fb      	ldrh	r3, [r7, #6]
 80051ca:	3303      	adds	r3, #3
 80051cc:	089b      	lsrs	r3, r3, #2
 80051ce:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80051d0:	2300      	movs	r3, #0
 80051d2:	61bb      	str	r3, [r7, #24]
 80051d4:	e00b      	b.n	80051ee <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	601a      	str	r2, [r3, #0]
    pDest++;
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	3304      	adds	r3, #4
 80051e6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	3301      	adds	r3, #1
 80051ec:	61bb      	str	r3, [r7, #24]
 80051ee:	69ba      	ldr	r2, [r7, #24]
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d3ef      	bcc.n	80051d6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80051f6:	69fb      	ldr	r3, [r7, #28]
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3724      	adds	r7, #36	; 0x24
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	785b      	ldrb	r3, [r3, #1]
 800521c:	2b01      	cmp	r3, #1
 800521e:	d12c      	bne.n	800527a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	4413      	add	r3, r2
 8005228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	db12      	blt.n	8005258 <USB_EPSetStall+0x54>
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d00f      	beq.n	8005258 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	015a      	lsls	r2, r3, #5
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	4413      	add	r3, r2
 8005240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	0151      	lsls	r1, r2, #5
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	440a      	add	r2, r1
 800524e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005252:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005256:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	015a      	lsls	r2, r3, #5
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	4413      	add	r3, r2
 8005260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	0151      	lsls	r1, r2, #5
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	440a      	add	r2, r1
 800526e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005272:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005276:	6013      	str	r3, [r2, #0]
 8005278:	e02b      	b.n	80052d2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	015a      	lsls	r2, r3, #5
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	4413      	add	r3, r2
 8005282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	db12      	blt.n	80052b2 <USB_EPSetStall+0xae>
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00f      	beq.n	80052b2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	015a      	lsls	r2, r3, #5
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	4413      	add	r3, r2
 800529a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68ba      	ldr	r2, [r7, #8]
 80052a2:	0151      	lsls	r1, r2, #5
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	440a      	add	r2, r1
 80052a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052b0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	015a      	lsls	r2, r3, #5
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	4413      	add	r3, r2
 80052ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	0151      	lsls	r1, r2, #5
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	440a      	add	r2, r1
 80052c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80052d0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3714      	adds	r7, #20
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	785b      	ldrb	r3, [r3, #1]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d128      	bne.n	800534e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	015a      	lsls	r2, r3, #5
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	4413      	add	r3, r2
 8005304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	0151      	lsls	r1, r2, #5
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	440a      	add	r2, r1
 8005312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005316:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800531a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	78db      	ldrb	r3, [r3, #3]
 8005320:	2b03      	cmp	r3, #3
 8005322:	d003      	beq.n	800532c <USB_EPClearStall+0x4c>
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	78db      	ldrb	r3, [r3, #3]
 8005328:	2b02      	cmp	r3, #2
 800532a:	d138      	bne.n	800539e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	015a      	lsls	r2, r3, #5
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	4413      	add	r3, r2
 8005334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68ba      	ldr	r2, [r7, #8]
 800533c:	0151      	lsls	r1, r2, #5
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	440a      	add	r2, r1
 8005342:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800534a:	6013      	str	r3, [r2, #0]
 800534c:	e027      	b.n	800539e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	015a      	lsls	r2, r3, #5
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	4413      	add	r3, r2
 8005356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68ba      	ldr	r2, [r7, #8]
 800535e:	0151      	lsls	r1, r2, #5
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	440a      	add	r2, r1
 8005364:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005368:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800536c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	78db      	ldrb	r3, [r3, #3]
 8005372:	2b03      	cmp	r3, #3
 8005374:	d003      	beq.n	800537e <USB_EPClearStall+0x9e>
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	78db      	ldrb	r3, [r3, #3]
 800537a:	2b02      	cmp	r3, #2
 800537c:	d10f      	bne.n	800539e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	015a      	lsls	r2, r3, #5
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	4413      	add	r3, r2
 8005386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	0151      	lsls	r1, r2, #5
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	440a      	add	r2, r1
 8005394:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800539c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3714      	adds	r7, #20
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	460b      	mov	r3, r1
 80053b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053ca:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80053ce:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	78fb      	ldrb	r3, [r7, #3]
 80053da:	011b      	lsls	r3, r3, #4
 80053dc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80053e0:	68f9      	ldr	r1, [r7, #12]
 80053e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053e6:	4313      	orrs	r3, r2
 80053e8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3714      	adds	r7, #20
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	695b      	ldr	r3, [r3, #20]
 8005404:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	4013      	ands	r3, r2
 800540e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005410:	68fb      	ldr	r3, [r7, #12]
}
 8005412:	4618      	mov	r0, r3
 8005414:	3714      	adds	r7, #20
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr

0800541e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800541e:	b480      	push	{r7}
 8005420:	b085      	sub	sp, #20
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800543a:	69db      	ldr	r3, [r3, #28]
 800543c:	68ba      	ldr	r2, [r7, #8]
 800543e:	4013      	ands	r3, r2
 8005440:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	0c1b      	lsrs	r3, r3, #16
}
 8005446:	4618      	mov	r0, r3
 8005448:	3714      	adds	r7, #20
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005452:	b480      	push	{r7}
 8005454:	b085      	sub	sp, #20
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800546e:	69db      	ldr	r3, [r3, #28]
 8005470:	68ba      	ldr	r2, [r7, #8]
 8005472:	4013      	ands	r3, r2
 8005474:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	b29b      	uxth	r3, r3
}
 800547a:	4618      	mov	r0, r3
 800547c:	3714      	adds	r7, #20
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr

08005486 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005486:	b480      	push	{r7}
 8005488:	b085      	sub	sp, #20
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
 800548e:	460b      	mov	r3, r1
 8005490:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005496:	78fb      	ldrb	r3, [r7, #3]
 8005498:	015a      	lsls	r2, r3, #5
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	4413      	add	r3, r2
 800549e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	68ba      	ldr	r2, [r7, #8]
 80054b0:	4013      	ands	r3, r2
 80054b2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80054b4:	68bb      	ldr	r3, [r7, #8]
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3714      	adds	r7, #20
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b087      	sub	sp, #28
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
 80054ca:	460b      	mov	r3, r1
 80054cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054e4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80054e6:	78fb      	ldrb	r3, [r7, #3]
 80054e8:	f003 030f 	and.w	r3, r3, #15
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	fa22 f303 	lsr.w	r3, r2, r3
 80054f2:	01db      	lsls	r3, r3, #7
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80054fc:	78fb      	ldrb	r3, [r7, #3]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	4013      	ands	r3, r2
 800550e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005510:	68bb      	ldr	r3, [r7, #8]
}
 8005512:	4618      	mov	r0, r3
 8005514:	371c      	adds	r7, #28
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800551e:	b480      	push	{r7}
 8005520:	b083      	sub	sp, #12
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	f003 0301 	and.w	r3, r3, #1
}
 800552e:	4618      	mov	r0, r3
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800553a:	b480      	push	{r7}
 800553c:	b085      	sub	sp, #20
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005554:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005558:	f023 0307 	bic.w	r3, r3, #7
 800555c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800556c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005570:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	333c      	adds	r3, #60	; 0x3c
 8005592:	3304      	adds	r3, #4
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	4a1c      	ldr	r2, [pc, #112]	; (800560c <USB_EP0_OutStart+0x8c>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d90a      	bls.n	80055b6 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055b0:	d101      	bne.n	80055b6 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 80055b2:	2300      	movs	r3, #0
 80055b4:	e024      	b.n	8005600 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055bc:	461a      	mov	r2, r3
 80055be:	2300      	movs	r3, #0
 80055c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055e4:	f043 0318 	orr.w	r3, r3, #24
 80055e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055f8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80055fc:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3714      	adds	r7, #20
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr
 800560c:	4f54300a 	.word	0x4f54300a

08005610 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	370c      	adds	r7, #12
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr

08005626 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005626:	b580      	push	{r7, lr}
 8005628:	b084      	sub	sp, #16
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
 800562e:	460b      	mov	r3, r1
 8005630:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005632:	2303      	movs	r3, #3
 8005634:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800563c:	2b00      	cmp	r3, #0
 800563e:	d009      	beq.n	8005654 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	78fa      	ldrb	r2, [r7, #3]
 800564a:	4611      	mov	r1, r2
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	4798      	blx	r3
 8005650:	4603      	mov	r3, r0
 8005652:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005654:	7bfb      	ldrb	r3, [r7, #15]
}
 8005656:	4618      	mov	r0, r3
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b082      	sub	sp, #8
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
 8005666:	460b      	mov	r3, r1
 8005668:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005670:	2b00      	cmp	r3, #0
 8005672:	d007      	beq.n	8005684 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	78fa      	ldrb	r2, [r7, #3]
 800567e:	4611      	mov	r1, r2
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	4798      	blx	r3
  }

  return USBD_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3708      	adds	r7, #8
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}

0800568e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800568e:	b580      	push	{r7, lr}
 8005690:	b084      	sub	sp, #16
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
 8005696:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800569e:	6839      	ldr	r1, [r7, #0]
 80056a0:	4618      	mov	r0, r3
 80056a2:	f000 ffb9 	bl	8006618 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80056b4:	461a      	mov	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80056c2:	f003 031f 	and.w	r3, r3, #31
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d01a      	beq.n	8005700 <USBD_LL_SetupStage+0x72>
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d822      	bhi.n	8005714 <USBD_LL_SetupStage+0x86>
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d002      	beq.n	80056d8 <USBD_LL_SetupStage+0x4a>
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d00a      	beq.n	80056ec <USBD_LL_SetupStage+0x5e>
 80056d6:	e01d      	b.n	8005714 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80056de:	4619      	mov	r1, r3
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 fa61 	bl	8005ba8 <USBD_StdDevReq>
 80056e6:	4603      	mov	r3, r0
 80056e8:	73fb      	strb	r3, [r7, #15]
      break;
 80056ea:	e020      	b.n	800572e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80056f2:	4619      	mov	r1, r3
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 fac5 	bl	8005c84 <USBD_StdItfReq>
 80056fa:	4603      	mov	r3, r0
 80056fc:	73fb      	strb	r3, [r7, #15]
      break;
 80056fe:	e016      	b.n	800572e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005706:	4619      	mov	r1, r3
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 fb04 	bl	8005d16 <USBD_StdEPReq>
 800570e:	4603      	mov	r3, r0
 8005710:	73fb      	strb	r3, [r7, #15]
      break;
 8005712:	e00c      	b.n	800572e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800571a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800571e:	b2db      	uxtb	r3, r3
 8005720:	4619      	mov	r1, r3
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f001 f966 	bl	80069f4 <USBD_LL_StallEP>
 8005728:	4603      	mov	r3, r0
 800572a:	73fb      	strb	r3, [r7, #15]
      break;
 800572c:	bf00      	nop
  }

  return ret;
 800572e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005730:	4618      	mov	r0, r3
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b086      	sub	sp, #24
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	460b      	mov	r3, r1
 8005742:	607a      	str	r2, [r7, #4]
 8005744:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005746:	7afb      	ldrb	r3, [r7, #11]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d138      	bne.n	80057be <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005752:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800575a:	2b03      	cmp	r3, #3
 800575c:	d14a      	bne.n	80057f4 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	689a      	ldr	r2, [r3, #8]
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	429a      	cmp	r2, r3
 8005768:	d913      	bls.n	8005792 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	689a      	ldr	r2, [r3, #8]
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	1ad2      	subs	r2, r2, r3
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	68da      	ldr	r2, [r3, #12]
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	4293      	cmp	r3, r2
 8005782:	bf28      	it	cs
 8005784:	4613      	movcs	r3, r2
 8005786:	461a      	mov	r2, r3
 8005788:	6879      	ldr	r1, [r7, #4]
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	f000 ffbb 	bl	8006706 <USBD_CtlContinueRx>
 8005790:	e030      	b.n	80057f4 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b03      	cmp	r3, #3
 800579c:	d10b      	bne.n	80057b6 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d005      	beq.n	80057b6 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	f000 ffb6 	bl	8006728 <USBD_CtlSendStatus>
 80057bc:	e01a      	b.n	80057f4 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b03      	cmp	r3, #3
 80057c8:	d114      	bne.n	80057f4 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00e      	beq.n	80057f4 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	7afa      	ldrb	r2, [r7, #11]
 80057e0:	4611      	mov	r1, r2
 80057e2:	68f8      	ldr	r0, [r7, #12]
 80057e4:	4798      	blx	r3
 80057e6:	4603      	mov	r3, r0
 80057e8:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80057ea:	7dfb      	ldrb	r3, [r7, #23]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80057f0:	7dfb      	ldrb	r3, [r7, #23]
 80057f2:	e000      	b.n	80057f6 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3718      	adds	r7, #24
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b086      	sub	sp, #24
 8005802:	af00      	add	r7, sp, #0
 8005804:	60f8      	str	r0, [r7, #12]
 8005806:	460b      	mov	r3, r1
 8005808:	607a      	str	r2, [r7, #4]
 800580a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800580c:	7afb      	ldrb	r3, [r7, #11]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d16b      	bne.n	80058ea <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	3314      	adds	r3, #20
 8005816:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800581e:	2b02      	cmp	r3, #2
 8005820:	d156      	bne.n	80058d0 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	689a      	ldr	r2, [r3, #8]
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	429a      	cmp	r2, r3
 800582c:	d914      	bls.n	8005858 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	689a      	ldr	r2, [r3, #8]
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	1ad2      	subs	r2, r2, r3
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	461a      	mov	r2, r3
 8005842:	6879      	ldr	r1, [r7, #4]
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f000 ff4d 	bl	80066e4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800584a:	2300      	movs	r3, #0
 800584c:	2200      	movs	r2, #0
 800584e:	2100      	movs	r1, #0
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f001 f9d5 	bl	8006c00 <USBD_LL_PrepareReceive>
 8005856:	e03b      	b.n	80058d0 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	68da      	ldr	r2, [r3, #12]
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	429a      	cmp	r2, r3
 8005862:	d11c      	bne.n	800589e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800586c:	429a      	cmp	r2, r3
 800586e:	d316      	bcc.n	800589e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	685a      	ldr	r2, [r3, #4]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800587a:	429a      	cmp	r2, r3
 800587c:	d20f      	bcs.n	800589e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800587e:	2200      	movs	r2, #0
 8005880:	2100      	movs	r1, #0
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	f000 ff2e 	bl	80066e4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005890:	2300      	movs	r3, #0
 8005892:	2200      	movs	r2, #0
 8005894:	2100      	movs	r1, #0
 8005896:	68f8      	ldr	r0, [r7, #12]
 8005898:	f001 f9b2 	bl	8006c00 <USBD_LL_PrepareReceive>
 800589c:	e018      	b.n	80058d0 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b03      	cmp	r3, #3
 80058a8:	d10b      	bne.n	80058c2 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d005      	beq.n	80058c2 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80058c2:	2180      	movs	r1, #128	; 0x80
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f001 f895 	bl	80069f4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f000 ff3f 	bl	800674e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d122      	bne.n	8005920 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f7ff fe98 	bl	8005610 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80058e8:	e01a      	b.n	8005920 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b03      	cmp	r3, #3
 80058f4:	d114      	bne.n	8005920 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00e      	beq.n	8005920 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	7afa      	ldrb	r2, [r7, #11]
 800590c:	4611      	mov	r1, r2
 800590e:	68f8      	ldr	r0, [r7, #12]
 8005910:	4798      	blx	r3
 8005912:	4603      	mov	r3, r0
 8005914:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005916:	7dfb      	ldrb	r3, [r7, #23]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d001      	beq.n	8005920 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800591c:	7dfb      	ldrb	r3, [r7, #23]
 800591e:	e000      	b.n	8005922 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3718      	adds	r7, #24
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b082      	sub	sp, #8
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800595a:	2303      	movs	r3, #3
 800595c:	e02f      	b.n	80059be <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00f      	beq.n	8005988 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d009      	beq.n	8005988 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	6852      	ldr	r2, [r2, #4]
 8005980:	b2d2      	uxtb	r2, r2
 8005982:	4611      	mov	r1, r2
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005988:	2340      	movs	r3, #64	; 0x40
 800598a:	2200      	movs	r2, #0
 800598c:	2100      	movs	r1, #0
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 fff2 	bl	8006978 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2240      	movs	r2, #64	; 0x40
 80059a0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80059a4:	2340      	movs	r3, #64	; 0x40
 80059a6:	2200      	movs	r2, #0
 80059a8:	2180      	movs	r1, #128	; 0x80
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 ffe4 	bl	8006978 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2240      	movs	r2, #64	; 0x40
 80059ba:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3708      	adds	r7, #8
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80059c6:	b480      	push	{r7}
 80059c8:	b083      	sub	sp, #12
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
 80059ce:	460b      	mov	r3, r1
 80059d0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	78fa      	ldrb	r2, [r7, #3]
 80059d6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	370c      	adds	r7, #12
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr

080059e6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80059e6:	b480      	push	{r7}
 80059e8:	b083      	sub	sp, #12
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059f4:	b2da      	uxtb	r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2204      	movs	r2, #4
 8005a00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	370c      	adds	r7, #12
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr

08005a12 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005a12:	b480      	push	{r7}
 8005a14:	b083      	sub	sp, #12
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b04      	cmp	r3, #4
 8005a24:	d106      	bne.n	8005a34 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005a2c:	b2da      	uxtb	r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	370c      	adds	r7, #12
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b082      	sub	sp, #8
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d101      	bne.n	8005a58 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e012      	b.n	8005a7e <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	2b03      	cmp	r3, #3
 8005a62:	d10b      	bne.n	8005a7c <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a6a:	69db      	ldr	r3, [r3, #28]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d005      	beq.n	8005a7c <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a76:	69db      	ldr	r3, [r3, #28]
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3708      	adds	r7, #8
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b082      	sub	sp, #8
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
 8005a8e:	460b      	mov	r3, r1
 8005a90:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d101      	bne.n	8005aa0 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e014      	b.n	8005aca <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	2b03      	cmp	r3, #3
 8005aaa:	d10d      	bne.n	8005ac8 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ab2:	6a1b      	ldr	r3, [r3, #32]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d007      	beq.n	8005ac8 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005abe:	6a1b      	ldr	r3, [r3, #32]
 8005ac0:	78fa      	ldrb	r2, [r7, #3]
 8005ac2:	4611      	mov	r1, r2
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b082      	sub	sp, #8
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
 8005ada:	460b      	mov	r3, r1
 8005adc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d101      	bne.n	8005aec <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e014      	b.n	8005b16 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	2b03      	cmp	r3, #3
 8005af6:	d10d      	bne.n	8005b14 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d007      	beq.n	8005b14 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0c:	78fa      	ldrb	r2, [r7, #3]
 8005b0e:	4611      	mov	r1, r2
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3708      	adds	r7, #8
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b083      	sub	sp, #12
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b082      	sub	sp, #8
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d009      	beq.n	8005b62 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	6852      	ldr	r2, [r2, #4]
 8005b5a:	b2d2      	uxtb	r2, r2
 8005b5c:	4611      	mov	r1, r2
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	4798      	blx	r3
  }

  return USBD_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3708      	adds	r7, #8
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b087      	sub	sp, #28
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	3301      	adds	r3, #1
 8005b82:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005b8a:	8a3b      	ldrh	r3, [r7, #16]
 8005b8c:	021b      	lsls	r3, r3, #8
 8005b8e:	b21a      	sxth	r2, r3
 8005b90:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	b21b      	sxth	r3, r3
 8005b98:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005b9a:	89fb      	ldrh	r3, [r7, #14]
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	371c      	adds	r7, #28
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005bbe:	2b40      	cmp	r3, #64	; 0x40
 8005bc0:	d005      	beq.n	8005bce <USBD_StdDevReq+0x26>
 8005bc2:	2b40      	cmp	r3, #64	; 0x40
 8005bc4:	d853      	bhi.n	8005c6e <USBD_StdDevReq+0xc6>
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00b      	beq.n	8005be2 <USBD_StdDevReq+0x3a>
 8005bca:	2b20      	cmp	r3, #32
 8005bcc:	d14f      	bne.n	8005c6e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	6839      	ldr	r1, [r7, #0]
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	4798      	blx	r3
 8005bdc:	4603      	mov	r3, r0
 8005bde:	73fb      	strb	r3, [r7, #15]
      break;
 8005be0:	e04a      	b.n	8005c78 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	785b      	ldrb	r3, [r3, #1]
 8005be6:	2b09      	cmp	r3, #9
 8005be8:	d83b      	bhi.n	8005c62 <USBD_StdDevReq+0xba>
 8005bea:	a201      	add	r2, pc, #4	; (adr r2, 8005bf0 <USBD_StdDevReq+0x48>)
 8005bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf0:	08005c45 	.word	0x08005c45
 8005bf4:	08005c59 	.word	0x08005c59
 8005bf8:	08005c63 	.word	0x08005c63
 8005bfc:	08005c4f 	.word	0x08005c4f
 8005c00:	08005c63 	.word	0x08005c63
 8005c04:	08005c23 	.word	0x08005c23
 8005c08:	08005c19 	.word	0x08005c19
 8005c0c:	08005c63 	.word	0x08005c63
 8005c10:	08005c3b 	.word	0x08005c3b
 8005c14:	08005c2d 	.word	0x08005c2d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005c18:	6839      	ldr	r1, [r7, #0]
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f9de 	bl	8005fdc <USBD_GetDescriptor>
          break;
 8005c20:	e024      	b.n	8005c6c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005c22:	6839      	ldr	r1, [r7, #0]
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 fb6d 	bl	8006304 <USBD_SetAddress>
          break;
 8005c2a:	e01f      	b.n	8005c6c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005c2c:	6839      	ldr	r1, [r7, #0]
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 fbac 	bl	800638c <USBD_SetConfig>
 8005c34:	4603      	mov	r3, r0
 8005c36:	73fb      	strb	r3, [r7, #15]
          break;
 8005c38:	e018      	b.n	8005c6c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005c3a:	6839      	ldr	r1, [r7, #0]
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 fc4b 	bl	80064d8 <USBD_GetConfig>
          break;
 8005c42:	e013      	b.n	8005c6c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005c44:	6839      	ldr	r1, [r7, #0]
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 fc7c 	bl	8006544 <USBD_GetStatus>
          break;
 8005c4c:	e00e      	b.n	8005c6c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005c4e:	6839      	ldr	r1, [r7, #0]
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 fcab 	bl	80065ac <USBD_SetFeature>
          break;
 8005c56:	e009      	b.n	8005c6c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005c58:	6839      	ldr	r1, [r7, #0]
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 fcba 	bl	80065d4 <USBD_ClrFeature>
          break;
 8005c60:	e004      	b.n	8005c6c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005c62:	6839      	ldr	r1, [r7, #0]
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 fd11 	bl	800668c <USBD_CtlError>
          break;
 8005c6a:	bf00      	nop
      }
      break;
 8005c6c:	e004      	b.n	8005c78 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8005c6e:	6839      	ldr	r1, [r7, #0]
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 fd0b 	bl	800668c <USBD_CtlError>
      break;
 8005c76:	bf00      	nop
  }

  return ret;
 8005c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop

08005c84 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c9a:	2b40      	cmp	r3, #64	; 0x40
 8005c9c:	d005      	beq.n	8005caa <USBD_StdItfReq+0x26>
 8005c9e:	2b40      	cmp	r3, #64	; 0x40
 8005ca0:	d82f      	bhi.n	8005d02 <USBD_StdItfReq+0x7e>
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d001      	beq.n	8005caa <USBD_StdItfReq+0x26>
 8005ca6:	2b20      	cmp	r3, #32
 8005ca8:	d12b      	bne.n	8005d02 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d81d      	bhi.n	8005cf4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	889b      	ldrh	r3, [r3, #4]
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d813      	bhi.n	8005cea <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	6839      	ldr	r1, [r7, #0]
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	4798      	blx	r3
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	88db      	ldrh	r3, [r3, #6]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d110      	bne.n	8005cfe <USBD_StdItfReq+0x7a>
 8005cdc:	7bfb      	ldrb	r3, [r7, #15]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d10d      	bne.n	8005cfe <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 fd20 	bl	8006728 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005ce8:	e009      	b.n	8005cfe <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8005cea:	6839      	ldr	r1, [r7, #0]
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 fccd 	bl	800668c <USBD_CtlError>
          break;
 8005cf2:	e004      	b.n	8005cfe <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8005cf4:	6839      	ldr	r1, [r7, #0]
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 fcc8 	bl	800668c <USBD_CtlError>
          break;
 8005cfc:	e000      	b.n	8005d00 <USBD_StdItfReq+0x7c>
          break;
 8005cfe:	bf00      	nop
      }
      break;
 8005d00:	e004      	b.n	8005d0c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8005d02:	6839      	ldr	r1, [r7, #0]
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 fcc1 	bl	800668c <USBD_CtlError>
      break;
 8005d0a:	bf00      	nop
  }

  return ret;
 8005d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3710      	adds	r7, #16
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d16:	b580      	push	{r7, lr}
 8005d18:	b084      	sub	sp, #16
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
 8005d1e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005d20:	2300      	movs	r3, #0
 8005d22:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	889b      	ldrh	r3, [r3, #4]
 8005d28:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d32:	2b40      	cmp	r3, #64	; 0x40
 8005d34:	d007      	beq.n	8005d46 <USBD_StdEPReq+0x30>
 8005d36:	2b40      	cmp	r3, #64	; 0x40
 8005d38:	f200 8145 	bhi.w	8005fc6 <USBD_StdEPReq+0x2b0>
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00c      	beq.n	8005d5a <USBD_StdEPReq+0x44>
 8005d40:	2b20      	cmp	r3, #32
 8005d42:	f040 8140 	bne.w	8005fc6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	6839      	ldr	r1, [r7, #0]
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	4798      	blx	r3
 8005d54:	4603      	mov	r3, r0
 8005d56:	73fb      	strb	r3, [r7, #15]
      break;
 8005d58:	e13a      	b.n	8005fd0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	785b      	ldrb	r3, [r3, #1]
 8005d5e:	2b03      	cmp	r3, #3
 8005d60:	d007      	beq.n	8005d72 <USBD_StdEPReq+0x5c>
 8005d62:	2b03      	cmp	r3, #3
 8005d64:	f300 8129 	bgt.w	8005fba <USBD_StdEPReq+0x2a4>
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d07f      	beq.n	8005e6c <USBD_StdEPReq+0x156>
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d03c      	beq.n	8005dea <USBD_StdEPReq+0xd4>
 8005d70:	e123      	b.n	8005fba <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d002      	beq.n	8005d84 <USBD_StdEPReq+0x6e>
 8005d7e:	2b03      	cmp	r3, #3
 8005d80:	d016      	beq.n	8005db0 <USBD_StdEPReq+0x9a>
 8005d82:	e02c      	b.n	8005dde <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d84:	7bbb      	ldrb	r3, [r7, #14]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00d      	beq.n	8005da6 <USBD_StdEPReq+0x90>
 8005d8a:	7bbb      	ldrb	r3, [r7, #14]
 8005d8c:	2b80      	cmp	r3, #128	; 0x80
 8005d8e:	d00a      	beq.n	8005da6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005d90:	7bbb      	ldrb	r3, [r7, #14]
 8005d92:	4619      	mov	r1, r3
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 fe2d 	bl	80069f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005d9a:	2180      	movs	r1, #128	; 0x80
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 fe29 	bl	80069f4 <USBD_LL_StallEP>
 8005da2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005da4:	e020      	b.n	8005de8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8005da6:	6839      	ldr	r1, [r7, #0]
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 fc6f 	bl	800668c <USBD_CtlError>
              break;
 8005dae:	e01b      	b.n	8005de8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	885b      	ldrh	r3, [r3, #2]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10e      	bne.n	8005dd6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005db8:	7bbb      	ldrb	r3, [r7, #14]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00b      	beq.n	8005dd6 <USBD_StdEPReq+0xc0>
 8005dbe:	7bbb      	ldrb	r3, [r7, #14]
 8005dc0:	2b80      	cmp	r3, #128	; 0x80
 8005dc2:	d008      	beq.n	8005dd6 <USBD_StdEPReq+0xc0>
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	88db      	ldrh	r3, [r3, #6]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d104      	bne.n	8005dd6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005dcc:	7bbb      	ldrb	r3, [r7, #14]
 8005dce:	4619      	mov	r1, r3
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 fe0f 	bl	80069f4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 fca6 	bl	8006728 <USBD_CtlSendStatus>

              break;
 8005ddc:	e004      	b.n	8005de8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8005dde:	6839      	ldr	r1, [r7, #0]
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 fc53 	bl	800668c <USBD_CtlError>
              break;
 8005de6:	bf00      	nop
          }
          break;
 8005de8:	e0ec      	b.n	8005fc4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d002      	beq.n	8005dfc <USBD_StdEPReq+0xe6>
 8005df6:	2b03      	cmp	r3, #3
 8005df8:	d016      	beq.n	8005e28 <USBD_StdEPReq+0x112>
 8005dfa:	e030      	b.n	8005e5e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005dfc:	7bbb      	ldrb	r3, [r7, #14]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00d      	beq.n	8005e1e <USBD_StdEPReq+0x108>
 8005e02:	7bbb      	ldrb	r3, [r7, #14]
 8005e04:	2b80      	cmp	r3, #128	; 0x80
 8005e06:	d00a      	beq.n	8005e1e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005e08:	7bbb      	ldrb	r3, [r7, #14]
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 fdf1 	bl	80069f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e12:	2180      	movs	r1, #128	; 0x80
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 fded 	bl	80069f4 <USBD_LL_StallEP>
 8005e1a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005e1c:	e025      	b.n	8005e6a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8005e1e:	6839      	ldr	r1, [r7, #0]
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 fc33 	bl	800668c <USBD_CtlError>
              break;
 8005e26:	e020      	b.n	8005e6a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	885b      	ldrh	r3, [r3, #2]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d11b      	bne.n	8005e68 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005e30:	7bbb      	ldrb	r3, [r7, #14]
 8005e32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d004      	beq.n	8005e44 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005e3a:	7bbb      	ldrb	r3, [r7, #14]
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 fe0e 	bl	8006a60 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 fc6f 	bl	8006728 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	6839      	ldr	r1, [r7, #0]
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	4798      	blx	r3
 8005e58:	4603      	mov	r3, r0
 8005e5a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005e5c:	e004      	b.n	8005e68 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8005e5e:	6839      	ldr	r1, [r7, #0]
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 fc13 	bl	800668c <USBD_CtlError>
              break;
 8005e66:	e000      	b.n	8005e6a <USBD_StdEPReq+0x154>
              break;
 8005e68:	bf00      	nop
          }
          break;
 8005e6a:	e0ab      	b.n	8005fc4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d002      	beq.n	8005e7e <USBD_StdEPReq+0x168>
 8005e78:	2b03      	cmp	r3, #3
 8005e7a:	d032      	beq.n	8005ee2 <USBD_StdEPReq+0x1cc>
 8005e7c:	e097      	b.n	8005fae <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005e7e:	7bbb      	ldrb	r3, [r7, #14]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d007      	beq.n	8005e94 <USBD_StdEPReq+0x17e>
 8005e84:	7bbb      	ldrb	r3, [r7, #14]
 8005e86:	2b80      	cmp	r3, #128	; 0x80
 8005e88:	d004      	beq.n	8005e94 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8005e8a:	6839      	ldr	r1, [r7, #0]
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 fbfd 	bl	800668c <USBD_CtlError>
                break;
 8005e92:	e091      	b.n	8005fb8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	da0b      	bge.n	8005eb4 <USBD_StdEPReq+0x19e>
 8005e9c:	7bbb      	ldrb	r3, [r7, #14]
 8005e9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	4413      	add	r3, r2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	3310      	adds	r3, #16
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	4413      	add	r3, r2
 8005eb0:	3304      	adds	r3, #4
 8005eb2:	e00b      	b.n	8005ecc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005eb4:	7bbb      	ldrb	r3, [r7, #14]
 8005eb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005eba:	4613      	mov	r3, r2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	4413      	add	r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	4413      	add	r3, r2
 8005eca:	3304      	adds	r3, #4
 8005ecc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	4619      	mov	r1, r3
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 fbe7 	bl	80066ae <USBD_CtlSendData>
              break;
 8005ee0:	e06a      	b.n	8005fb8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005ee2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	da11      	bge.n	8005f0e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005eea:	7bbb      	ldrb	r3, [r7, #14]
 8005eec:	f003 020f 	and.w	r2, r3, #15
 8005ef0:	6879      	ldr	r1, [r7, #4]
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	4413      	add	r3, r2
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	440b      	add	r3, r1
 8005efc:	3324      	adds	r3, #36	; 0x24
 8005efe:	881b      	ldrh	r3, [r3, #0]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d117      	bne.n	8005f34 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005f04:	6839      	ldr	r1, [r7, #0]
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 fbc0 	bl	800668c <USBD_CtlError>
                  break;
 8005f0c:	e054      	b.n	8005fb8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005f0e:	7bbb      	ldrb	r3, [r7, #14]
 8005f10:	f003 020f 	and.w	r2, r3, #15
 8005f14:	6879      	ldr	r1, [r7, #4]
 8005f16:	4613      	mov	r3, r2
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	4413      	add	r3, r2
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	440b      	add	r3, r1
 8005f20:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005f24:	881b      	ldrh	r3, [r3, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d104      	bne.n	8005f34 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005f2a:	6839      	ldr	r1, [r7, #0]
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 fbad 	bl	800668c <USBD_CtlError>
                  break;
 8005f32:	e041      	b.n	8005fb8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	da0b      	bge.n	8005f54 <USBD_StdEPReq+0x23e>
 8005f3c:	7bbb      	ldrb	r3, [r7, #14]
 8005f3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f42:	4613      	mov	r3, r2
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	4413      	add	r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	3310      	adds	r3, #16
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	4413      	add	r3, r2
 8005f50:	3304      	adds	r3, #4
 8005f52:	e00b      	b.n	8005f6c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005f54:	7bbb      	ldrb	r3, [r7, #14]
 8005f56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	4413      	add	r3, r2
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	4413      	add	r3, r2
 8005f6a:	3304      	adds	r3, #4
 8005f6c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005f6e:	7bbb      	ldrb	r3, [r7, #14]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d002      	beq.n	8005f7a <USBD_StdEPReq+0x264>
 8005f74:	7bbb      	ldrb	r3, [r7, #14]
 8005f76:	2b80      	cmp	r3, #128	; 0x80
 8005f78:	d103      	bne.n	8005f82 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	601a      	str	r2, [r3, #0]
 8005f80:	e00e      	b.n	8005fa0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005f82:	7bbb      	ldrb	r3, [r7, #14]
 8005f84:	4619      	mov	r1, r3
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 fda0 	bl	8006acc <USBD_LL_IsStallEP>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d003      	beq.n	8005f9a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	2201      	movs	r2, #1
 8005f96:	601a      	str	r2, [r3, #0]
 8005f98:	e002      	b.n	8005fa0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	2202      	movs	r2, #2
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 fb81 	bl	80066ae <USBD_CtlSendData>
              break;
 8005fac:	e004      	b.n	8005fb8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8005fae:	6839      	ldr	r1, [r7, #0]
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 fb6b 	bl	800668c <USBD_CtlError>
              break;
 8005fb6:	bf00      	nop
          }
          break;
 8005fb8:	e004      	b.n	8005fc4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8005fba:	6839      	ldr	r1, [r7, #0]
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 fb65 	bl	800668c <USBD_CtlError>
          break;
 8005fc2:	bf00      	nop
      }
      break;
 8005fc4:	e004      	b.n	8005fd0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8005fc6:	6839      	ldr	r1, [r7, #0]
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 fb5f 	bl	800668c <USBD_CtlError>
      break;
 8005fce:	bf00      	nop
  }

  return ret;
 8005fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3710      	adds	r7, #16
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
	...

08005fdc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005fea:	2300      	movs	r3, #0
 8005fec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	885b      	ldrh	r3, [r3, #2]
 8005ff6:	0a1b      	lsrs	r3, r3, #8
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	2b0e      	cmp	r3, #14
 8005ffe:	f200 8152 	bhi.w	80062a6 <USBD_GetDescriptor+0x2ca>
 8006002:	a201      	add	r2, pc, #4	; (adr r2, 8006008 <USBD_GetDescriptor+0x2c>)
 8006004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006008:	08006079 	.word	0x08006079
 800600c:	08006091 	.word	0x08006091
 8006010:	080060d1 	.word	0x080060d1
 8006014:	080062a7 	.word	0x080062a7
 8006018:	080062a7 	.word	0x080062a7
 800601c:	08006247 	.word	0x08006247
 8006020:	08006273 	.word	0x08006273
 8006024:	080062a7 	.word	0x080062a7
 8006028:	080062a7 	.word	0x080062a7
 800602c:	080062a7 	.word	0x080062a7
 8006030:	080062a7 	.word	0x080062a7
 8006034:	080062a7 	.word	0x080062a7
 8006038:	080062a7 	.word	0x080062a7
 800603c:	080062a7 	.word	0x080062a7
 8006040:	08006045 	.word	0x08006045
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800604a:	69db      	ldr	r3, [r3, #28]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d00b      	beq.n	8006068 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006056:	69db      	ldr	r3, [r3, #28]
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	7c12      	ldrb	r2, [r2, #16]
 800605c:	f107 0108 	add.w	r1, r7, #8
 8006060:	4610      	mov	r0, r2
 8006062:	4798      	blx	r3
 8006064:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006066:	e126      	b.n	80062b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006068:	6839      	ldr	r1, [r7, #0]
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 fb0e 	bl	800668c <USBD_CtlError>
        err++;
 8006070:	7afb      	ldrb	r3, [r7, #11]
 8006072:	3301      	adds	r3, #1
 8006074:	72fb      	strb	r3, [r7, #11]
      break;
 8006076:	e11e      	b.n	80062b6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	7c12      	ldrb	r2, [r2, #16]
 8006084:	f107 0108 	add.w	r1, r7, #8
 8006088:	4610      	mov	r0, r2
 800608a:	4798      	blx	r3
 800608c:	60f8      	str	r0, [r7, #12]
      break;
 800608e:	e112      	b.n	80062b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	7c1b      	ldrb	r3, [r3, #16]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d10d      	bne.n	80060b4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800609e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a0:	f107 0208 	add.w	r2, r7, #8
 80060a4:	4610      	mov	r0, r2
 80060a6:	4798      	blx	r3
 80060a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	3301      	adds	r3, #1
 80060ae:	2202      	movs	r2, #2
 80060b0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80060b2:	e100      	b.n	80062b6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060bc:	f107 0208 	add.w	r2, r7, #8
 80060c0:	4610      	mov	r0, r2
 80060c2:	4798      	blx	r3
 80060c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	3301      	adds	r3, #1
 80060ca:	2202      	movs	r2, #2
 80060cc:	701a      	strb	r2, [r3, #0]
      break;
 80060ce:	e0f2      	b.n	80062b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	885b      	ldrh	r3, [r3, #2]
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b05      	cmp	r3, #5
 80060d8:	f200 80ac 	bhi.w	8006234 <USBD_GetDescriptor+0x258>
 80060dc:	a201      	add	r2, pc, #4	; (adr r2, 80060e4 <USBD_GetDescriptor+0x108>)
 80060de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e2:	bf00      	nop
 80060e4:	080060fd 	.word	0x080060fd
 80060e8:	08006131 	.word	0x08006131
 80060ec:	08006165 	.word	0x08006165
 80060f0:	08006199 	.word	0x08006199
 80060f4:	080061cd 	.word	0x080061cd
 80060f8:	08006201 	.word	0x08006201
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00b      	beq.n	8006120 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	7c12      	ldrb	r2, [r2, #16]
 8006114:	f107 0108 	add.w	r1, r7, #8
 8006118:	4610      	mov	r0, r2
 800611a:	4798      	blx	r3
 800611c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800611e:	e091      	b.n	8006244 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006120:	6839      	ldr	r1, [r7, #0]
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 fab2 	bl	800668c <USBD_CtlError>
            err++;
 8006128:	7afb      	ldrb	r3, [r7, #11]
 800612a:	3301      	adds	r3, #1
 800612c:	72fb      	strb	r3, [r7, #11]
          break;
 800612e:	e089      	b.n	8006244 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00b      	beq.n	8006154 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	7c12      	ldrb	r2, [r2, #16]
 8006148:	f107 0108 	add.w	r1, r7, #8
 800614c:	4610      	mov	r0, r2
 800614e:	4798      	blx	r3
 8006150:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006152:	e077      	b.n	8006244 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006154:	6839      	ldr	r1, [r7, #0]
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 fa98 	bl	800668c <USBD_CtlError>
            err++;
 800615c:	7afb      	ldrb	r3, [r7, #11]
 800615e:	3301      	adds	r3, #1
 8006160:	72fb      	strb	r3, [r7, #11]
          break;
 8006162:	e06f      	b.n	8006244 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d00b      	beq.n	8006188 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	7c12      	ldrb	r2, [r2, #16]
 800617c:	f107 0108 	add.w	r1, r7, #8
 8006180:	4610      	mov	r0, r2
 8006182:	4798      	blx	r3
 8006184:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006186:	e05d      	b.n	8006244 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006188:	6839      	ldr	r1, [r7, #0]
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 fa7e 	bl	800668c <USBD_CtlError>
            err++;
 8006190:	7afb      	ldrb	r3, [r7, #11]
 8006192:	3301      	adds	r3, #1
 8006194:	72fb      	strb	r3, [r7, #11]
          break;
 8006196:	e055      	b.n	8006244 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00b      	beq.n	80061bc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	7c12      	ldrb	r2, [r2, #16]
 80061b0:	f107 0108 	add.w	r1, r7, #8
 80061b4:	4610      	mov	r0, r2
 80061b6:	4798      	blx	r3
 80061b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80061ba:	e043      	b.n	8006244 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80061bc:	6839      	ldr	r1, [r7, #0]
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 fa64 	bl	800668c <USBD_CtlError>
            err++;
 80061c4:	7afb      	ldrb	r3, [r7, #11]
 80061c6:	3301      	adds	r3, #1
 80061c8:	72fb      	strb	r3, [r7, #11]
          break;
 80061ca:	e03b      	b.n	8006244 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061d2:	695b      	ldr	r3, [r3, #20]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00b      	beq.n	80061f0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061de:	695b      	ldr	r3, [r3, #20]
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	7c12      	ldrb	r2, [r2, #16]
 80061e4:	f107 0108 	add.w	r1, r7, #8
 80061e8:	4610      	mov	r0, r2
 80061ea:	4798      	blx	r3
 80061ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80061ee:	e029      	b.n	8006244 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80061f0:	6839      	ldr	r1, [r7, #0]
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 fa4a 	bl	800668c <USBD_CtlError>
            err++;
 80061f8:	7afb      	ldrb	r3, [r7, #11]
 80061fa:	3301      	adds	r3, #1
 80061fc:	72fb      	strb	r3, [r7, #11]
          break;
 80061fe:	e021      	b.n	8006244 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d00b      	beq.n	8006224 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006212:	699b      	ldr	r3, [r3, #24]
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	7c12      	ldrb	r2, [r2, #16]
 8006218:	f107 0108 	add.w	r1, r7, #8
 800621c:	4610      	mov	r0, r2
 800621e:	4798      	blx	r3
 8006220:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006222:	e00f      	b.n	8006244 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006224:	6839      	ldr	r1, [r7, #0]
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 fa30 	bl	800668c <USBD_CtlError>
            err++;
 800622c:	7afb      	ldrb	r3, [r7, #11]
 800622e:	3301      	adds	r3, #1
 8006230:	72fb      	strb	r3, [r7, #11]
          break;
 8006232:	e007      	b.n	8006244 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006234:	6839      	ldr	r1, [r7, #0]
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 fa28 	bl	800668c <USBD_CtlError>
          err++;
 800623c:	7afb      	ldrb	r3, [r7, #11]
 800623e:	3301      	adds	r3, #1
 8006240:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006242:	bf00      	nop
      }
      break;
 8006244:	e037      	b.n	80062b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	7c1b      	ldrb	r3, [r3, #16]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d109      	bne.n	8006262 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006256:	f107 0208 	add.w	r2, r7, #8
 800625a:	4610      	mov	r0, r2
 800625c:	4798      	blx	r3
 800625e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006260:	e029      	b.n	80062b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006262:	6839      	ldr	r1, [r7, #0]
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 fa11 	bl	800668c <USBD_CtlError>
        err++;
 800626a:	7afb      	ldrb	r3, [r7, #11]
 800626c:	3301      	adds	r3, #1
 800626e:	72fb      	strb	r3, [r7, #11]
      break;
 8006270:	e021      	b.n	80062b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	7c1b      	ldrb	r3, [r3, #16]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d10d      	bne.n	8006296 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006282:	f107 0208 	add.w	r2, r7, #8
 8006286:	4610      	mov	r0, r2
 8006288:	4798      	blx	r3
 800628a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	3301      	adds	r3, #1
 8006290:	2207      	movs	r2, #7
 8006292:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006294:	e00f      	b.n	80062b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006296:	6839      	ldr	r1, [r7, #0]
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 f9f7 	bl	800668c <USBD_CtlError>
        err++;
 800629e:	7afb      	ldrb	r3, [r7, #11]
 80062a0:	3301      	adds	r3, #1
 80062a2:	72fb      	strb	r3, [r7, #11]
      break;
 80062a4:	e007      	b.n	80062b6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80062a6:	6839      	ldr	r1, [r7, #0]
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 f9ef 	bl	800668c <USBD_CtlError>
      err++;
 80062ae:	7afb      	ldrb	r3, [r7, #11]
 80062b0:	3301      	adds	r3, #1
 80062b2:	72fb      	strb	r3, [r7, #11]
      break;
 80062b4:	bf00      	nop
  }

  if (err != 0U)
 80062b6:	7afb      	ldrb	r3, [r7, #11]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d11e      	bne.n	80062fa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	88db      	ldrh	r3, [r3, #6]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d016      	beq.n	80062f2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80062c4:	893b      	ldrh	r3, [r7, #8]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00e      	beq.n	80062e8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	88da      	ldrh	r2, [r3, #6]
 80062ce:	893b      	ldrh	r3, [r7, #8]
 80062d0:	4293      	cmp	r3, r2
 80062d2:	bf28      	it	cs
 80062d4:	4613      	movcs	r3, r2
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80062da:	893b      	ldrh	r3, [r7, #8]
 80062dc:	461a      	mov	r2, r3
 80062de:	68f9      	ldr	r1, [r7, #12]
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 f9e4 	bl	80066ae <USBD_CtlSendData>
 80062e6:	e009      	b.n	80062fc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80062e8:	6839      	ldr	r1, [r7, #0]
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 f9ce 	bl	800668c <USBD_CtlError>
 80062f0:	e004      	b.n	80062fc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 fa18 	bl	8006728 <USBD_CtlSendStatus>
 80062f8:	e000      	b.n	80062fc <USBD_GetDescriptor+0x320>
    return;
 80062fa:	bf00      	nop
  }
}
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop

08006304 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	889b      	ldrh	r3, [r3, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d131      	bne.n	800637a <USBD_SetAddress+0x76>
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	88db      	ldrh	r3, [r3, #6]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d12d      	bne.n	800637a <USBD_SetAddress+0x76>
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	885b      	ldrh	r3, [r3, #2]
 8006322:	2b7f      	cmp	r3, #127	; 0x7f
 8006324:	d829      	bhi.n	800637a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	885b      	ldrh	r3, [r3, #2]
 800632a:	b2db      	uxtb	r3, r3
 800632c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006330:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006338:	b2db      	uxtb	r3, r3
 800633a:	2b03      	cmp	r3, #3
 800633c:	d104      	bne.n	8006348 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800633e:	6839      	ldr	r1, [r7, #0]
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 f9a3 	bl	800668c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006346:	e01d      	b.n	8006384 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	7bfa      	ldrb	r2, [r7, #15]
 800634c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006350:	7bfb      	ldrb	r3, [r7, #15]
 8006352:	4619      	mov	r1, r3
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 fbe5 	bl	8006b24 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 f9e4 	bl	8006728 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006360:	7bfb      	ldrb	r3, [r7, #15]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d004      	beq.n	8006370 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2202      	movs	r2, #2
 800636a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800636e:	e009      	b.n	8006384 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006378:	e004      	b.n	8006384 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800637a:	6839      	ldr	r1, [r7, #0]
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 f985 	bl	800668c <USBD_CtlError>
  }
}
 8006382:	bf00      	nop
 8006384:	bf00      	nop
 8006386:	3710      	adds	r7, #16
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006396:	2300      	movs	r3, #0
 8006398:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	885b      	ldrh	r3, [r3, #2]
 800639e:	b2da      	uxtb	r2, r3
 80063a0:	4b4c      	ldr	r3, [pc, #304]	; (80064d4 <USBD_SetConfig+0x148>)
 80063a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80063a4:	4b4b      	ldr	r3, [pc, #300]	; (80064d4 <USBD_SetConfig+0x148>)
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d905      	bls.n	80063b8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80063ac:	6839      	ldr	r1, [r7, #0]
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f96c 	bl	800668c <USBD_CtlError>
    return USBD_FAIL;
 80063b4:	2303      	movs	r3, #3
 80063b6:	e088      	b.n	80064ca <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	d002      	beq.n	80063ca <USBD_SetConfig+0x3e>
 80063c4:	2b03      	cmp	r3, #3
 80063c6:	d025      	beq.n	8006414 <USBD_SetConfig+0x88>
 80063c8:	e071      	b.n	80064ae <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80063ca:	4b42      	ldr	r3, [pc, #264]	; (80064d4 <USBD_SetConfig+0x148>)
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d01c      	beq.n	800640c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80063d2:	4b40      	ldr	r3, [pc, #256]	; (80064d4 <USBD_SetConfig+0x148>)
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	461a      	mov	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80063dc:	4b3d      	ldr	r3, [pc, #244]	; (80064d4 <USBD_SetConfig+0x148>)
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	4619      	mov	r1, r3
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f7ff f91f 	bl	8005626 <USBD_SetClassConfig>
 80063e8:	4603      	mov	r3, r0
 80063ea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80063ec:	7bfb      	ldrb	r3, [r7, #15]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d004      	beq.n	80063fc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80063f2:	6839      	ldr	r1, [r7, #0]
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 f949 	bl	800668c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80063fa:	e065      	b.n	80064c8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 f993 	bl	8006728 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2203      	movs	r2, #3
 8006406:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800640a:	e05d      	b.n	80064c8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 f98b 	bl	8006728 <USBD_CtlSendStatus>
      break;
 8006412:	e059      	b.n	80064c8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006414:	4b2f      	ldr	r3, [pc, #188]	; (80064d4 <USBD_SetConfig+0x148>)
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d112      	bne.n	8006442 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2202      	movs	r2, #2
 8006420:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006424:	4b2b      	ldr	r3, [pc, #172]	; (80064d4 <USBD_SetConfig+0x148>)
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	461a      	mov	r2, r3
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800642e:	4b29      	ldr	r3, [pc, #164]	; (80064d4 <USBD_SetConfig+0x148>)
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	4619      	mov	r1, r3
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f7ff f912 	bl	800565e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 f974 	bl	8006728 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006440:	e042      	b.n	80064c8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006442:	4b24      	ldr	r3, [pc, #144]	; (80064d4 <USBD_SetConfig+0x148>)
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	461a      	mov	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	429a      	cmp	r2, r3
 800644e:	d02a      	beq.n	80064a6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	b2db      	uxtb	r3, r3
 8006456:	4619      	mov	r1, r3
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f7ff f900 	bl	800565e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800645e:	4b1d      	ldr	r3, [pc, #116]	; (80064d4 <USBD_SetConfig+0x148>)
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	461a      	mov	r2, r3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006468:	4b1a      	ldr	r3, [pc, #104]	; (80064d4 <USBD_SetConfig+0x148>)
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	4619      	mov	r1, r3
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f7ff f8d9 	bl	8005626 <USBD_SetClassConfig>
 8006474:	4603      	mov	r3, r0
 8006476:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006478:	7bfb      	ldrb	r3, [r7, #15]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00f      	beq.n	800649e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800647e:	6839      	ldr	r1, [r7, #0]
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 f903 	bl	800668c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	b2db      	uxtb	r3, r3
 800648c:	4619      	mov	r1, r3
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f7ff f8e5 	bl	800565e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2202      	movs	r2, #2
 8006498:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800649c:	e014      	b.n	80064c8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 f942 	bl	8006728 <USBD_CtlSendStatus>
      break;
 80064a4:	e010      	b.n	80064c8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 f93e 	bl	8006728 <USBD_CtlSendStatus>
      break;
 80064ac:	e00c      	b.n	80064c8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80064ae:	6839      	ldr	r1, [r7, #0]
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 f8eb 	bl	800668c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80064b6:	4b07      	ldr	r3, [pc, #28]	; (80064d4 <USBD_SetConfig+0x148>)
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	4619      	mov	r1, r3
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f7ff f8ce 	bl	800565e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80064c2:	2303      	movs	r3, #3
 80064c4:	73fb      	strb	r3, [r7, #15]
      break;
 80064c6:	bf00      	nop
  }

  return ret;
 80064c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	20000090 	.word	0x20000090

080064d8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	88db      	ldrh	r3, [r3, #6]
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d004      	beq.n	80064f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80064ea:	6839      	ldr	r1, [r7, #0]
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 f8cd 	bl	800668c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80064f2:	e023      	b.n	800653c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	dc02      	bgt.n	8006506 <USBD_GetConfig+0x2e>
 8006500:	2b00      	cmp	r3, #0
 8006502:	dc03      	bgt.n	800650c <USBD_GetConfig+0x34>
 8006504:	e015      	b.n	8006532 <USBD_GetConfig+0x5a>
 8006506:	2b03      	cmp	r3, #3
 8006508:	d00b      	beq.n	8006522 <USBD_GetConfig+0x4a>
 800650a:	e012      	b.n	8006532 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	3308      	adds	r3, #8
 8006516:	2201      	movs	r2, #1
 8006518:	4619      	mov	r1, r3
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f8c7 	bl	80066ae <USBD_CtlSendData>
        break;
 8006520:	e00c      	b.n	800653c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	3304      	adds	r3, #4
 8006526:	2201      	movs	r2, #1
 8006528:	4619      	mov	r1, r3
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f8bf 	bl	80066ae <USBD_CtlSendData>
        break;
 8006530:	e004      	b.n	800653c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006532:	6839      	ldr	r1, [r7, #0]
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 f8a9 	bl	800668c <USBD_CtlError>
        break;
 800653a:	bf00      	nop
}
 800653c:	bf00      	nop
 800653e:	3708      	adds	r7, #8
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006554:	b2db      	uxtb	r3, r3
 8006556:	3b01      	subs	r3, #1
 8006558:	2b02      	cmp	r3, #2
 800655a:	d81e      	bhi.n	800659a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	88db      	ldrh	r3, [r3, #6]
 8006560:	2b02      	cmp	r3, #2
 8006562:	d004      	beq.n	800656e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006564:	6839      	ldr	r1, [r7, #0]
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 f890 	bl	800668c <USBD_CtlError>
        break;
 800656c:	e01a      	b.n	80065a4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2201      	movs	r2, #1
 8006572:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800657a:	2b00      	cmp	r3, #0
 800657c:	d005      	beq.n	800658a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	f043 0202 	orr.w	r2, r3, #2
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	330c      	adds	r3, #12
 800658e:	2202      	movs	r2, #2
 8006590:	4619      	mov	r1, r3
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f88b 	bl	80066ae <USBD_CtlSendData>
      break;
 8006598:	e004      	b.n	80065a4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800659a:	6839      	ldr	r1, [r7, #0]
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 f875 	bl	800668c <USBD_CtlError>
      break;
 80065a2:	bf00      	nop
  }
}
 80065a4:	bf00      	nop
 80065a6:	3708      	adds	r7, #8
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	885b      	ldrh	r3, [r3, #2]
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d106      	bne.n	80065cc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 f8ae 	bl	8006728 <USBD_CtlSendStatus>
  }
}
 80065cc:	bf00      	nop
 80065ce:	3708      	adds	r7, #8
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	3b01      	subs	r3, #1
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d80b      	bhi.n	8006604 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	885b      	ldrh	r3, [r3, #2]
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d10c      	bne.n	800660e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 f893 	bl	8006728 <USBD_CtlSendStatus>
      }
      break;
 8006602:	e004      	b.n	800660e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006604:	6839      	ldr	r1, [r7, #0]
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f840 	bl	800668c <USBD_CtlError>
      break;
 800660c:	e000      	b.n	8006610 <USBD_ClrFeature+0x3c>
      break;
 800660e:	bf00      	nop
  }
}
 8006610:	bf00      	nop
 8006612:	3708      	adds	r7, #8
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	781a      	ldrb	r2, [r3, #0]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	3301      	adds	r3, #1
 8006632:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	781a      	ldrb	r2, [r3, #0]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	3301      	adds	r3, #1
 8006640:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006642:	68f8      	ldr	r0, [r7, #12]
 8006644:	f7ff fa92 	bl	8005b6c <SWAPBYTE>
 8006648:	4603      	mov	r3, r0
 800664a:	461a      	mov	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	3301      	adds	r3, #1
 8006654:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	3301      	adds	r3, #1
 800665a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f7ff fa85 	bl	8005b6c <SWAPBYTE>
 8006662:	4603      	mov	r3, r0
 8006664:	461a      	mov	r2, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	3301      	adds	r3, #1
 800666e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	3301      	adds	r3, #1
 8006674:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f7ff fa78 	bl	8005b6c <SWAPBYTE>
 800667c:	4603      	mov	r3, r0
 800667e:	461a      	mov	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	80da      	strh	r2, [r3, #6]
}
 8006684:	bf00      	nop
 8006686:	3710      	adds	r7, #16
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006696:	2180      	movs	r1, #128	; 0x80
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 f9ab 	bl	80069f4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800669e:	2100      	movs	r1, #0
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 f9a7 	bl	80069f4 <USBD_LL_StallEP>
}
 80066a6:	bf00      	nop
 80066a8:	3708      	adds	r7, #8
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}

080066ae <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b084      	sub	sp, #16
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	60f8      	str	r0, [r7, #12]
 80066b6:	60b9      	str	r1, [r7, #8]
 80066b8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2202      	movs	r2, #2
 80066be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	68ba      	ldr	r2, [r7, #8]
 80066d2:	2100      	movs	r1, #0
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	f000 fa5b 	bl	8006b90 <USBD_LL_Transmit>

  return USBD_OK;
 80066da:	2300      	movs	r3, #0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3710      	adds	r7, #16
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	68ba      	ldr	r2, [r7, #8]
 80066f4:	2100      	movs	r1, #0
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f000 fa4a 	bl	8006b90 <USBD_LL_Transmit>

  return USBD_OK;
 80066fc:	2300      	movs	r3, #0
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3710      	adds	r7, #16
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}

08006706 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006706:	b580      	push	{r7, lr}
 8006708:	b084      	sub	sp, #16
 800670a:	af00      	add	r7, sp, #0
 800670c:	60f8      	str	r0, [r7, #12]
 800670e:	60b9      	str	r1, [r7, #8]
 8006710:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	68ba      	ldr	r2, [r7, #8]
 8006716:	2100      	movs	r1, #0
 8006718:	68f8      	ldr	r0, [r7, #12]
 800671a:	f000 fa71 	bl	8006c00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	3710      	adds	r7, #16
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2204      	movs	r2, #4
 8006734:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006738:	2300      	movs	r3, #0
 800673a:	2200      	movs	r2, #0
 800673c:	2100      	movs	r1, #0
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 fa26 	bl	8006b90 <USBD_LL_Transmit>

  return USBD_OK;
 8006744:	2300      	movs	r3, #0
}
 8006746:	4618      	mov	r0, r3
 8006748:	3708      	adds	r7, #8
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}

0800674e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b082      	sub	sp, #8
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2205      	movs	r2, #5
 800675a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800675e:	2300      	movs	r3, #0
 8006760:	2200      	movs	r2, #0
 8006762:	2100      	movs	r1, #0
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 fa4b 	bl	8006c00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3708      	adds	r7, #8
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006788:	4619      	mov	r1, r3
 800678a:	4610      	mov	r0, r2
 800678c:	f7fe ff7f 	bl	800568e <USBD_LL_SetupStage>
}
 8006790:	bf00      	nop
 8006792:	3708      	adds	r7, #8
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	460b      	mov	r3, r1
 80067a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80067aa:	78fa      	ldrb	r2, [r7, #3]
 80067ac:	6879      	ldr	r1, [r7, #4]
 80067ae:	4613      	mov	r3, r2
 80067b0:	00db      	lsls	r3, r3, #3
 80067b2:	1a9b      	subs	r3, r3, r2
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	440b      	add	r3, r1
 80067b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	78fb      	ldrb	r3, [r7, #3]
 80067c0:	4619      	mov	r1, r3
 80067c2:	f7fe ffb9 	bl	8005738 <USBD_LL_DataOutStage>
}
 80067c6:	bf00      	nop
 80067c8:	3708      	adds	r7, #8
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}

080067ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067ce:	b580      	push	{r7, lr}
 80067d0:	b082      	sub	sp, #8
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
 80067d6:	460b      	mov	r3, r1
 80067d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80067e0:	78fa      	ldrb	r2, [r7, #3]
 80067e2:	6879      	ldr	r1, [r7, #4]
 80067e4:	4613      	mov	r3, r2
 80067e6:	00db      	lsls	r3, r3, #3
 80067e8:	1a9b      	subs	r3, r3, r2
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	440b      	add	r3, r1
 80067ee:	3348      	adds	r3, #72	; 0x48
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	78fb      	ldrb	r3, [r7, #3]
 80067f4:	4619      	mov	r1, r3
 80067f6:	f7ff f802 	bl	80057fe <USBD_LL_DataInStage>
}
 80067fa:	bf00      	nop
 80067fc:	3708      	adds	r7, #8
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b082      	sub	sp, #8
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006810:	4618      	mov	r0, r3
 8006812:	f7ff f916 	bl	8005a42 <USBD_LL_SOF>
}
 8006816:	bf00      	nop
 8006818:	3708      	adds	r7, #8
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}

0800681e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800681e:	b580      	push	{r7, lr}
 8006820:	b084      	sub	sp, #16
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006826:	2301      	movs	r3, #1
 8006828:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	2b02      	cmp	r3, #2
 8006830:	d001      	beq.n	8006836 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006832:	f7f9 fec5 	bl	80005c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800683c:	7bfa      	ldrb	r2, [r7, #15]
 800683e:	4611      	mov	r1, r2
 8006840:	4618      	mov	r0, r3
 8006842:	f7ff f8c0 	bl	80059c6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800684c:	4618      	mov	r0, r3
 800684e:	f7ff f86c 	bl	800592a <USBD_LL_Reset>
}
 8006852:	bf00      	nop
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
	...

0800685c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	6812      	ldr	r2, [r2, #0]
 8006872:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006876:	f043 0301 	orr.w	r3, r3, #1
 800687a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006882:	4618      	mov	r0, r3
 8006884:	f7ff f8af 	bl	80059e6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6a1b      	ldr	r3, [r3, #32]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d005      	beq.n	800689c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006890:	4b04      	ldr	r3, [pc, #16]	; (80068a4 <HAL_PCD_SuspendCallback+0x48>)
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	4a03      	ldr	r2, [pc, #12]	; (80068a4 <HAL_PCD_SuspendCallback+0x48>)
 8006896:	f043 0306 	orr.w	r3, r3, #6
 800689a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800689c:	bf00      	nop
 800689e:	3708      	adds	r7, #8
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	e000ed00 	.word	0xe000ed00

080068a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	6812      	ldr	r2, [r2, #0]
 80068be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80068c2:	f023 0301 	bic.w	r3, r3, #1
 80068c6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6a1b      	ldr	r3, [r3, #32]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d007      	beq.n	80068e0 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80068d0:	4b08      	ldr	r3, [pc, #32]	; (80068f4 <HAL_PCD_ResumeCallback+0x4c>)
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	4a07      	ldr	r2, [pc, #28]	; (80068f4 <HAL_PCD_ResumeCallback+0x4c>)
 80068d6:	f023 0306 	bic.w	r3, r3, #6
 80068da:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80068dc:	f000 fa16 	bl	8006d0c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7ff f893 	bl	8005a12 <USBD_LL_Resume>
}
 80068ec:	bf00      	nop
 80068ee:	3708      	adds	r7, #8
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	e000ed00 	.word	0xe000ed00

080068f8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	460b      	mov	r3, r1
 8006902:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800690a:	78fa      	ldrb	r2, [r7, #3]
 800690c:	4611      	mov	r1, r2
 800690e:	4618      	mov	r0, r3
 8006910:	f7ff f8df 	bl	8005ad2 <USBD_LL_IsoOUTIncomplete>
}
 8006914:	bf00      	nop
 8006916:	3708      	adds	r7, #8
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	460b      	mov	r3, r1
 8006926:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800692e:	78fa      	ldrb	r2, [r7, #3]
 8006930:	4611      	mov	r1, r2
 8006932:	4618      	mov	r0, r3
 8006934:	f7ff f8a7 	bl	8005a86 <USBD_LL_IsoINIncomplete>
}
 8006938:	bf00      	nop
 800693a:	3708      	adds	r7, #8
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800694e:	4618      	mov	r0, r3
 8006950:	f7ff f8e5 	bl	8005b1e <USBD_LL_DevConnected>
}
 8006954:	bf00      	nop
 8006956:	3708      	adds	r7, #8
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b082      	sub	sp, #8
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800696a:	4618      	mov	r0, r3
 800696c:	f7ff f8e2 	bl	8005b34 <USBD_LL_DevDisconnected>
}
 8006970:	bf00      	nop
 8006972:	3708      	adds	r7, #8
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	4608      	mov	r0, r1
 8006982:	4611      	mov	r1, r2
 8006984:	461a      	mov	r2, r3
 8006986:	4603      	mov	r3, r0
 8006988:	70fb      	strb	r3, [r7, #3]
 800698a:	460b      	mov	r3, r1
 800698c:	70bb      	strb	r3, [r7, #2]
 800698e:	4613      	mov	r3, r2
 8006990:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006992:	2300      	movs	r3, #0
 8006994:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006996:	2300      	movs	r3, #0
 8006998:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80069a0:	78bb      	ldrb	r3, [r7, #2]
 80069a2:	883a      	ldrh	r2, [r7, #0]
 80069a4:	78f9      	ldrb	r1, [r7, #3]
 80069a6:	f7fb fe78 	bl	800269a <HAL_PCD_EP_Open>
 80069aa:	4603      	mov	r3, r0
 80069ac:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80069ae:	7bbb      	ldrb	r3, [r7, #14]
 80069b0:	2b03      	cmp	r3, #3
 80069b2:	d817      	bhi.n	80069e4 <USBD_LL_OpenEP+0x6c>
 80069b4:	a201      	add	r2, pc, #4	; (adr r2, 80069bc <USBD_LL_OpenEP+0x44>)
 80069b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ba:	bf00      	nop
 80069bc:	080069cd 	.word	0x080069cd
 80069c0:	080069d3 	.word	0x080069d3
 80069c4:	080069d9 	.word	0x080069d9
 80069c8:	080069df 	.word	0x080069df
    case HAL_OK :
      usb_status = USBD_OK;
 80069cc:	2300      	movs	r3, #0
 80069ce:	73fb      	strb	r3, [r7, #15]
    break;
 80069d0:	e00b      	b.n	80069ea <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80069d2:	2303      	movs	r3, #3
 80069d4:	73fb      	strb	r3, [r7, #15]
    break;
 80069d6:	e008      	b.n	80069ea <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80069d8:	2301      	movs	r3, #1
 80069da:	73fb      	strb	r3, [r7, #15]
    break;
 80069dc:	e005      	b.n	80069ea <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80069de:	2303      	movs	r3, #3
 80069e0:	73fb      	strb	r3, [r7, #15]
    break;
 80069e2:	e002      	b.n	80069ea <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80069e4:	2303      	movs	r3, #3
 80069e6:	73fb      	strb	r3, [r7, #15]
    break;
 80069e8:	bf00      	nop
  }
  return usb_status;
 80069ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3710      	adds	r7, #16
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	460b      	mov	r3, r1
 80069fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a00:	2300      	movs	r3, #0
 8006a02:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a04:	2300      	movs	r3, #0
 8006a06:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006a0e:	78fa      	ldrb	r2, [r7, #3]
 8006a10:	4611      	mov	r1, r2
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7fb ff24 	bl	8002860 <HAL_PCD_EP_SetStall>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006a1c:	7bbb      	ldrb	r3, [r7, #14]
 8006a1e:	2b03      	cmp	r3, #3
 8006a20:	d816      	bhi.n	8006a50 <USBD_LL_StallEP+0x5c>
 8006a22:	a201      	add	r2, pc, #4	; (adr r2, 8006a28 <USBD_LL_StallEP+0x34>)
 8006a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a28:	08006a39 	.word	0x08006a39
 8006a2c:	08006a3f 	.word	0x08006a3f
 8006a30:	08006a45 	.word	0x08006a45
 8006a34:	08006a4b 	.word	0x08006a4b
    case HAL_OK :
      usb_status = USBD_OK;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	73fb      	strb	r3, [r7, #15]
    break;
 8006a3c:	e00b      	b.n	8006a56 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	73fb      	strb	r3, [r7, #15]
    break;
 8006a42:	e008      	b.n	8006a56 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006a44:	2301      	movs	r3, #1
 8006a46:	73fb      	strb	r3, [r7, #15]
    break;
 8006a48:	e005      	b.n	8006a56 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	73fb      	strb	r3, [r7, #15]
    break;
 8006a4e:	e002      	b.n	8006a56 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006a50:	2303      	movs	r3, #3
 8006a52:	73fb      	strb	r3, [r7, #15]
    break;
 8006a54:	bf00      	nop
  }
  return usb_status;
 8006a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3710      	adds	r7, #16
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	460b      	mov	r3, r1
 8006a6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a70:	2300      	movs	r3, #0
 8006a72:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006a7a:	78fa      	ldrb	r2, [r7, #3]
 8006a7c:	4611      	mov	r1, r2
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7fb ff50 	bl	8002924 <HAL_PCD_EP_ClrStall>
 8006a84:	4603      	mov	r3, r0
 8006a86:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006a88:	7bbb      	ldrb	r3, [r7, #14]
 8006a8a:	2b03      	cmp	r3, #3
 8006a8c:	d816      	bhi.n	8006abc <USBD_LL_ClearStallEP+0x5c>
 8006a8e:	a201      	add	r2, pc, #4	; (adr r2, 8006a94 <USBD_LL_ClearStallEP+0x34>)
 8006a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a94:	08006aa5 	.word	0x08006aa5
 8006a98:	08006aab 	.word	0x08006aab
 8006a9c:	08006ab1 	.word	0x08006ab1
 8006aa0:	08006ab7 	.word	0x08006ab7
    case HAL_OK :
      usb_status = USBD_OK;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	73fb      	strb	r3, [r7, #15]
    break;
 8006aa8:	e00b      	b.n	8006ac2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006aaa:	2303      	movs	r3, #3
 8006aac:	73fb      	strb	r3, [r7, #15]
    break;
 8006aae:	e008      	b.n	8006ac2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	73fb      	strb	r3, [r7, #15]
    break;
 8006ab4:	e005      	b.n	8006ac2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	73fb      	strb	r3, [r7, #15]
    break;
 8006aba:	e002      	b.n	8006ac2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006abc:	2303      	movs	r3, #3
 8006abe:	73fb      	strb	r3, [r7, #15]
    break;
 8006ac0:	bf00      	nop
  }
  return usb_status;
 8006ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b085      	sub	sp, #20
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006ade:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006ae0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	da0b      	bge.n	8006b00 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006ae8:	78fb      	ldrb	r3, [r7, #3]
 8006aea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006aee:	68f9      	ldr	r1, [r7, #12]
 8006af0:	4613      	mov	r3, r2
 8006af2:	00db      	lsls	r3, r3, #3
 8006af4:	1a9b      	subs	r3, r3, r2
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	440b      	add	r3, r1
 8006afa:	333e      	adds	r3, #62	; 0x3e
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	e00b      	b.n	8006b18 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006b00:	78fb      	ldrb	r3, [r7, #3]
 8006b02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b06:	68f9      	ldr	r1, [r7, #12]
 8006b08:	4613      	mov	r3, r2
 8006b0a:	00db      	lsls	r3, r3, #3
 8006b0c:	1a9b      	subs	r3, r3, r2
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	440b      	add	r3, r1
 8006b12:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006b16:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3714      	adds	r7, #20
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b30:	2300      	movs	r3, #0
 8006b32:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b34:	2300      	movs	r3, #0
 8006b36:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006b3e:	78fa      	ldrb	r2, [r7, #3]
 8006b40:	4611      	mov	r1, r2
 8006b42:	4618      	mov	r0, r3
 8006b44:	f7fb fd84 	bl	8002650 <HAL_PCD_SetAddress>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006b4c:	7bbb      	ldrb	r3, [r7, #14]
 8006b4e:	2b03      	cmp	r3, #3
 8006b50:	d816      	bhi.n	8006b80 <USBD_LL_SetUSBAddress+0x5c>
 8006b52:	a201      	add	r2, pc, #4	; (adr r2, 8006b58 <USBD_LL_SetUSBAddress+0x34>)
 8006b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b58:	08006b69 	.word	0x08006b69
 8006b5c:	08006b6f 	.word	0x08006b6f
 8006b60:	08006b75 	.word	0x08006b75
 8006b64:	08006b7b 	.word	0x08006b7b
    case HAL_OK :
      usb_status = USBD_OK;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	73fb      	strb	r3, [r7, #15]
    break;
 8006b6c:	e00b      	b.n	8006b86 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	73fb      	strb	r3, [r7, #15]
    break;
 8006b72:	e008      	b.n	8006b86 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006b74:	2301      	movs	r3, #1
 8006b76:	73fb      	strb	r3, [r7, #15]
    break;
 8006b78:	e005      	b.n	8006b86 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	73fb      	strb	r3, [r7, #15]
    break;
 8006b7e:	e002      	b.n	8006b86 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8006b80:	2303      	movs	r3, #3
 8006b82:	73fb      	strb	r3, [r7, #15]
    break;
 8006b84:	bf00      	nop
  }
  return usb_status;
 8006b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3710      	adds	r7, #16
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b086      	sub	sp, #24
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	607a      	str	r2, [r7, #4]
 8006b9a:	603b      	str	r3, [r7, #0]
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006bae:	7af9      	ldrb	r1, [r7, #11]
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	f7fb fe17 	bl	80027e6 <HAL_PCD_EP_Transmit>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8006bbc:	7dbb      	ldrb	r3, [r7, #22]
 8006bbe:	2b03      	cmp	r3, #3
 8006bc0:	d816      	bhi.n	8006bf0 <USBD_LL_Transmit+0x60>
 8006bc2:	a201      	add	r2, pc, #4	; (adr r2, 8006bc8 <USBD_LL_Transmit+0x38>)
 8006bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc8:	08006bd9 	.word	0x08006bd9
 8006bcc:	08006bdf 	.word	0x08006bdf
 8006bd0:	08006be5 	.word	0x08006be5
 8006bd4:	08006beb 	.word	0x08006beb
    case HAL_OK :
      usb_status = USBD_OK;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	75fb      	strb	r3, [r7, #23]
    break;
 8006bdc:	e00b      	b.n	8006bf6 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006bde:	2303      	movs	r3, #3
 8006be0:	75fb      	strb	r3, [r7, #23]
    break;
 8006be2:	e008      	b.n	8006bf6 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006be4:	2301      	movs	r3, #1
 8006be6:	75fb      	strb	r3, [r7, #23]
    break;
 8006be8:	e005      	b.n	8006bf6 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006bea:	2303      	movs	r3, #3
 8006bec:	75fb      	strb	r3, [r7, #23]
    break;
 8006bee:	e002      	b.n	8006bf6 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	75fb      	strb	r3, [r7, #23]
    break;
 8006bf4:	bf00      	nop
  }
  return usb_status;
 8006bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3718      	adds	r7, #24
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b086      	sub	sp, #24
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	607a      	str	r2, [r7, #4]
 8006c0a:	603b      	str	r3, [r7, #0]
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c10:	2300      	movs	r3, #0
 8006c12:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c14:	2300      	movs	r3, #0
 8006c16:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006c1e:	7af9      	ldrb	r1, [r7, #11]
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	f7fb fda1 	bl	800276a <HAL_PCD_EP_Receive>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8006c2c:	7dbb      	ldrb	r3, [r7, #22]
 8006c2e:	2b03      	cmp	r3, #3
 8006c30:	d816      	bhi.n	8006c60 <USBD_LL_PrepareReceive+0x60>
 8006c32:	a201      	add	r2, pc, #4	; (adr r2, 8006c38 <USBD_LL_PrepareReceive+0x38>)
 8006c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c38:	08006c49 	.word	0x08006c49
 8006c3c:	08006c4f 	.word	0x08006c4f
 8006c40:	08006c55 	.word	0x08006c55
 8006c44:	08006c5b 	.word	0x08006c5b
    case HAL_OK :
      usb_status = USBD_OK;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	75fb      	strb	r3, [r7, #23]
    break;
 8006c4c:	e00b      	b.n	8006c66 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006c4e:	2303      	movs	r3, #3
 8006c50:	75fb      	strb	r3, [r7, #23]
    break;
 8006c52:	e008      	b.n	8006c66 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006c54:	2301      	movs	r3, #1
 8006c56:	75fb      	strb	r3, [r7, #23]
    break;
 8006c58:	e005      	b.n	8006c66 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006c5a:	2303      	movs	r3, #3
 8006c5c:	75fb      	strb	r3, [r7, #23]
    break;
 8006c5e:	e002      	b.n	8006c66 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8006c60:	2303      	movs	r3, #3
 8006c62:	75fb      	strb	r3, [r7, #23]
    break;
 8006c64:	bf00      	nop
  }
  return usb_status;
 8006c66:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3718      	adds	r7, #24
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	460b      	mov	r3, r1
 8006c7a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8006c7c:	78fb      	ldrb	r3, [r7, #3]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d002      	beq.n	8006c88 <HAL_PCDEx_LPM_Callback+0x18>
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d01f      	beq.n	8006cc6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8006c86:	e03b      	b.n	8006d00 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6a1b      	ldr	r3, [r3, #32]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d007      	beq.n	8006ca0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8006c90:	f000 f83c 	bl	8006d0c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006c94:	4b1c      	ldr	r3, [pc, #112]	; (8006d08 <HAL_PCDEx_LPM_Callback+0x98>)
 8006c96:	691b      	ldr	r3, [r3, #16]
 8006c98:	4a1b      	ldr	r2, [pc, #108]	; (8006d08 <HAL_PCDEx_LPM_Callback+0x98>)
 8006c9a:	f023 0306 	bic.w	r3, r3, #6
 8006c9e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	6812      	ldr	r2, [r2, #0]
 8006cae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006cb2:	f023 0301 	bic.w	r3, r3, #1
 8006cb6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f7fe fea7 	bl	8005a12 <USBD_LL_Resume>
    break;
 8006cc4:	e01c      	b.n	8006d00 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	6812      	ldr	r2, [r2, #0]
 8006cd4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006cd8:	f043 0301 	orr.w	r3, r3, #1
 8006cdc:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f7fe fe7e 	bl	80059e6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d005      	beq.n	8006cfe <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006cf2:	4b05      	ldr	r3, [pc, #20]	; (8006d08 <HAL_PCDEx_LPM_Callback+0x98>)
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	4a04      	ldr	r2, [pc, #16]	; (8006d08 <HAL_PCDEx_LPM_Callback+0x98>)
 8006cf8:	f043 0306 	orr.w	r3, r3, #6
 8006cfc:	6113      	str	r3, [r2, #16]
    break;
 8006cfe:	bf00      	nop
}
 8006d00:	bf00      	nop
 8006d02:	3708      	adds	r7, #8
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	e000ed00 	.word	0xe000ed00

08006d0c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8006d10:	f7f9 fb34 	bl	800037c <SystemClock_Config>
}
 8006d14:	bf00      	nop
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <__errno>:
 8006d18:	4b01      	ldr	r3, [pc, #4]	; (8006d20 <__errno+0x8>)
 8006d1a:	6818      	ldr	r0, [r3, #0]
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop
 8006d20:	2000000c 	.word	0x2000000c

08006d24 <__libc_init_array>:
 8006d24:	b570      	push	{r4, r5, r6, lr}
 8006d26:	4d0d      	ldr	r5, [pc, #52]	; (8006d5c <__libc_init_array+0x38>)
 8006d28:	4c0d      	ldr	r4, [pc, #52]	; (8006d60 <__libc_init_array+0x3c>)
 8006d2a:	1b64      	subs	r4, r4, r5
 8006d2c:	10a4      	asrs	r4, r4, #2
 8006d2e:	2600      	movs	r6, #0
 8006d30:	42a6      	cmp	r6, r4
 8006d32:	d109      	bne.n	8006d48 <__libc_init_array+0x24>
 8006d34:	4d0b      	ldr	r5, [pc, #44]	; (8006d64 <__libc_init_array+0x40>)
 8006d36:	4c0c      	ldr	r4, [pc, #48]	; (8006d68 <__libc_init_array+0x44>)
 8006d38:	f001 f822 	bl	8007d80 <_init>
 8006d3c:	1b64      	subs	r4, r4, r5
 8006d3e:	10a4      	asrs	r4, r4, #2
 8006d40:	2600      	movs	r6, #0
 8006d42:	42a6      	cmp	r6, r4
 8006d44:	d105      	bne.n	8006d52 <__libc_init_array+0x2e>
 8006d46:	bd70      	pop	{r4, r5, r6, pc}
 8006d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d4c:	4798      	blx	r3
 8006d4e:	3601      	adds	r6, #1
 8006d50:	e7ee      	b.n	8006d30 <__libc_init_array+0xc>
 8006d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d56:	4798      	blx	r3
 8006d58:	3601      	adds	r6, #1
 8006d5a:	e7f2      	b.n	8006d42 <__libc_init_array+0x1e>
 8006d5c:	08008998 	.word	0x08008998
 8006d60:	08008998 	.word	0x08008998
 8006d64:	08008998 	.word	0x08008998
 8006d68:	0800899c 	.word	0x0800899c

08006d6c <memset>:
 8006d6c:	4402      	add	r2, r0
 8006d6e:	4603      	mov	r3, r0
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d100      	bne.n	8006d76 <memset+0xa>
 8006d74:	4770      	bx	lr
 8006d76:	f803 1b01 	strb.w	r1, [r3], #1
 8006d7a:	e7f9      	b.n	8006d70 <memset+0x4>

08006d7c <rand>:
 8006d7c:	4b17      	ldr	r3, [pc, #92]	; (8006ddc <rand+0x60>)
 8006d7e:	b510      	push	{r4, lr}
 8006d80:	681c      	ldr	r4, [r3, #0]
 8006d82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006d84:	b9b3      	cbnz	r3, 8006db4 <rand+0x38>
 8006d86:	2018      	movs	r0, #24
 8006d88:	f000 f868 	bl	8006e5c <malloc>
 8006d8c:	63a0      	str	r0, [r4, #56]	; 0x38
 8006d8e:	b928      	cbnz	r0, 8006d9c <rand+0x20>
 8006d90:	4602      	mov	r2, r0
 8006d92:	4b13      	ldr	r3, [pc, #76]	; (8006de0 <rand+0x64>)
 8006d94:	4813      	ldr	r0, [pc, #76]	; (8006de4 <rand+0x68>)
 8006d96:	214e      	movs	r1, #78	; 0x4e
 8006d98:	f000 f830 	bl	8006dfc <__assert_func>
 8006d9c:	4a12      	ldr	r2, [pc, #72]	; (8006de8 <rand+0x6c>)
 8006d9e:	4b13      	ldr	r3, [pc, #76]	; (8006dec <rand+0x70>)
 8006da0:	e9c0 2300 	strd	r2, r3, [r0]
 8006da4:	4b12      	ldr	r3, [pc, #72]	; (8006df0 <rand+0x74>)
 8006da6:	6083      	str	r3, [r0, #8]
 8006da8:	230b      	movs	r3, #11
 8006daa:	8183      	strh	r3, [r0, #12]
 8006dac:	2201      	movs	r2, #1
 8006dae:	2300      	movs	r3, #0
 8006db0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8006db4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006db6:	480f      	ldr	r0, [pc, #60]	; (8006df4 <rand+0x78>)
 8006db8:	690a      	ldr	r2, [r1, #16]
 8006dba:	694b      	ldr	r3, [r1, #20]
 8006dbc:	4c0e      	ldr	r4, [pc, #56]	; (8006df8 <rand+0x7c>)
 8006dbe:	4350      	muls	r0, r2
 8006dc0:	fb04 0003 	mla	r0, r4, r3, r0
 8006dc4:	fba2 3404 	umull	r3, r4, r2, r4
 8006dc8:	1c5a      	adds	r2, r3, #1
 8006dca:	4404      	add	r4, r0
 8006dcc:	f144 0000 	adc.w	r0, r4, #0
 8006dd0:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8006dd4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006dd8:	bd10      	pop	{r4, pc}
 8006dda:	bf00      	nop
 8006ddc:	2000000c 	.word	0x2000000c
 8006de0:	08008850 	.word	0x08008850
 8006de4:	08008867 	.word	0x08008867
 8006de8:	abcd330e 	.word	0xabcd330e
 8006dec:	e66d1234 	.word	0xe66d1234
 8006df0:	0005deec 	.word	0x0005deec
 8006df4:	5851f42d 	.word	0x5851f42d
 8006df8:	4c957f2d 	.word	0x4c957f2d

08006dfc <__assert_func>:
 8006dfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006dfe:	4614      	mov	r4, r2
 8006e00:	461a      	mov	r2, r3
 8006e02:	4b09      	ldr	r3, [pc, #36]	; (8006e28 <__assert_func+0x2c>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4605      	mov	r5, r0
 8006e08:	68d8      	ldr	r0, [r3, #12]
 8006e0a:	b14c      	cbz	r4, 8006e20 <__assert_func+0x24>
 8006e0c:	4b07      	ldr	r3, [pc, #28]	; (8006e2c <__assert_func+0x30>)
 8006e0e:	9100      	str	r1, [sp, #0]
 8006e10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006e14:	4906      	ldr	r1, [pc, #24]	; (8006e30 <__assert_func+0x34>)
 8006e16:	462b      	mov	r3, r5
 8006e18:	f000 f80e 	bl	8006e38 <fiprintf>
 8006e1c:	f000 fc8e 	bl	800773c <abort>
 8006e20:	4b04      	ldr	r3, [pc, #16]	; (8006e34 <__assert_func+0x38>)
 8006e22:	461c      	mov	r4, r3
 8006e24:	e7f3      	b.n	8006e0e <__assert_func+0x12>
 8006e26:	bf00      	nop
 8006e28:	2000000c 	.word	0x2000000c
 8006e2c:	080088c6 	.word	0x080088c6
 8006e30:	080088d3 	.word	0x080088d3
 8006e34:	08008901 	.word	0x08008901

08006e38 <fiprintf>:
 8006e38:	b40e      	push	{r1, r2, r3}
 8006e3a:	b503      	push	{r0, r1, lr}
 8006e3c:	4601      	mov	r1, r0
 8006e3e:	ab03      	add	r3, sp, #12
 8006e40:	4805      	ldr	r0, [pc, #20]	; (8006e58 <fiprintf+0x20>)
 8006e42:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e46:	6800      	ldr	r0, [r0, #0]
 8006e48:	9301      	str	r3, [sp, #4]
 8006e4a:	f000 f8e3 	bl	8007014 <_vfiprintf_r>
 8006e4e:	b002      	add	sp, #8
 8006e50:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e54:	b003      	add	sp, #12
 8006e56:	4770      	bx	lr
 8006e58:	2000000c 	.word	0x2000000c

08006e5c <malloc>:
 8006e5c:	4b02      	ldr	r3, [pc, #8]	; (8006e68 <malloc+0xc>)
 8006e5e:	4601      	mov	r1, r0
 8006e60:	6818      	ldr	r0, [r3, #0]
 8006e62:	f000 b853 	b.w	8006f0c <_malloc_r>
 8006e66:	bf00      	nop
 8006e68:	2000000c 	.word	0x2000000c

08006e6c <_free_r>:
 8006e6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e6e:	2900      	cmp	r1, #0
 8006e70:	d048      	beq.n	8006f04 <_free_r+0x98>
 8006e72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e76:	9001      	str	r0, [sp, #4]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	f1a1 0404 	sub.w	r4, r1, #4
 8006e7e:	bfb8      	it	lt
 8006e80:	18e4      	addlt	r4, r4, r3
 8006e82:	f000 fe81 	bl	8007b88 <__malloc_lock>
 8006e86:	4a20      	ldr	r2, [pc, #128]	; (8006f08 <_free_r+0x9c>)
 8006e88:	9801      	ldr	r0, [sp, #4]
 8006e8a:	6813      	ldr	r3, [r2, #0]
 8006e8c:	4615      	mov	r5, r2
 8006e8e:	b933      	cbnz	r3, 8006e9e <_free_r+0x32>
 8006e90:	6063      	str	r3, [r4, #4]
 8006e92:	6014      	str	r4, [r2, #0]
 8006e94:	b003      	add	sp, #12
 8006e96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e9a:	f000 be7b 	b.w	8007b94 <__malloc_unlock>
 8006e9e:	42a3      	cmp	r3, r4
 8006ea0:	d90b      	bls.n	8006eba <_free_r+0x4e>
 8006ea2:	6821      	ldr	r1, [r4, #0]
 8006ea4:	1862      	adds	r2, r4, r1
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	bf04      	itt	eq
 8006eaa:	681a      	ldreq	r2, [r3, #0]
 8006eac:	685b      	ldreq	r3, [r3, #4]
 8006eae:	6063      	str	r3, [r4, #4]
 8006eb0:	bf04      	itt	eq
 8006eb2:	1852      	addeq	r2, r2, r1
 8006eb4:	6022      	streq	r2, [r4, #0]
 8006eb6:	602c      	str	r4, [r5, #0]
 8006eb8:	e7ec      	b.n	8006e94 <_free_r+0x28>
 8006eba:	461a      	mov	r2, r3
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	b10b      	cbz	r3, 8006ec4 <_free_r+0x58>
 8006ec0:	42a3      	cmp	r3, r4
 8006ec2:	d9fa      	bls.n	8006eba <_free_r+0x4e>
 8006ec4:	6811      	ldr	r1, [r2, #0]
 8006ec6:	1855      	adds	r5, r2, r1
 8006ec8:	42a5      	cmp	r5, r4
 8006eca:	d10b      	bne.n	8006ee4 <_free_r+0x78>
 8006ecc:	6824      	ldr	r4, [r4, #0]
 8006ece:	4421      	add	r1, r4
 8006ed0:	1854      	adds	r4, r2, r1
 8006ed2:	42a3      	cmp	r3, r4
 8006ed4:	6011      	str	r1, [r2, #0]
 8006ed6:	d1dd      	bne.n	8006e94 <_free_r+0x28>
 8006ed8:	681c      	ldr	r4, [r3, #0]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	6053      	str	r3, [r2, #4]
 8006ede:	4421      	add	r1, r4
 8006ee0:	6011      	str	r1, [r2, #0]
 8006ee2:	e7d7      	b.n	8006e94 <_free_r+0x28>
 8006ee4:	d902      	bls.n	8006eec <_free_r+0x80>
 8006ee6:	230c      	movs	r3, #12
 8006ee8:	6003      	str	r3, [r0, #0]
 8006eea:	e7d3      	b.n	8006e94 <_free_r+0x28>
 8006eec:	6825      	ldr	r5, [r4, #0]
 8006eee:	1961      	adds	r1, r4, r5
 8006ef0:	428b      	cmp	r3, r1
 8006ef2:	bf04      	itt	eq
 8006ef4:	6819      	ldreq	r1, [r3, #0]
 8006ef6:	685b      	ldreq	r3, [r3, #4]
 8006ef8:	6063      	str	r3, [r4, #4]
 8006efa:	bf04      	itt	eq
 8006efc:	1949      	addeq	r1, r1, r5
 8006efe:	6021      	streq	r1, [r4, #0]
 8006f00:	6054      	str	r4, [r2, #4]
 8006f02:	e7c7      	b.n	8006e94 <_free_r+0x28>
 8006f04:	b003      	add	sp, #12
 8006f06:	bd30      	pop	{r4, r5, pc}
 8006f08:	20000094 	.word	0x20000094

08006f0c <_malloc_r>:
 8006f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f0e:	1ccd      	adds	r5, r1, #3
 8006f10:	f025 0503 	bic.w	r5, r5, #3
 8006f14:	3508      	adds	r5, #8
 8006f16:	2d0c      	cmp	r5, #12
 8006f18:	bf38      	it	cc
 8006f1a:	250c      	movcc	r5, #12
 8006f1c:	2d00      	cmp	r5, #0
 8006f1e:	4606      	mov	r6, r0
 8006f20:	db01      	blt.n	8006f26 <_malloc_r+0x1a>
 8006f22:	42a9      	cmp	r1, r5
 8006f24:	d903      	bls.n	8006f2e <_malloc_r+0x22>
 8006f26:	230c      	movs	r3, #12
 8006f28:	6033      	str	r3, [r6, #0]
 8006f2a:	2000      	movs	r0, #0
 8006f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f2e:	f000 fe2b 	bl	8007b88 <__malloc_lock>
 8006f32:	4921      	ldr	r1, [pc, #132]	; (8006fb8 <_malloc_r+0xac>)
 8006f34:	680a      	ldr	r2, [r1, #0]
 8006f36:	4614      	mov	r4, r2
 8006f38:	b99c      	cbnz	r4, 8006f62 <_malloc_r+0x56>
 8006f3a:	4f20      	ldr	r7, [pc, #128]	; (8006fbc <_malloc_r+0xb0>)
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	b923      	cbnz	r3, 8006f4a <_malloc_r+0x3e>
 8006f40:	4621      	mov	r1, r4
 8006f42:	4630      	mov	r0, r6
 8006f44:	f000 fb2a 	bl	800759c <_sbrk_r>
 8006f48:	6038      	str	r0, [r7, #0]
 8006f4a:	4629      	mov	r1, r5
 8006f4c:	4630      	mov	r0, r6
 8006f4e:	f000 fb25 	bl	800759c <_sbrk_r>
 8006f52:	1c43      	adds	r3, r0, #1
 8006f54:	d123      	bne.n	8006f9e <_malloc_r+0x92>
 8006f56:	230c      	movs	r3, #12
 8006f58:	6033      	str	r3, [r6, #0]
 8006f5a:	4630      	mov	r0, r6
 8006f5c:	f000 fe1a 	bl	8007b94 <__malloc_unlock>
 8006f60:	e7e3      	b.n	8006f2a <_malloc_r+0x1e>
 8006f62:	6823      	ldr	r3, [r4, #0]
 8006f64:	1b5b      	subs	r3, r3, r5
 8006f66:	d417      	bmi.n	8006f98 <_malloc_r+0x8c>
 8006f68:	2b0b      	cmp	r3, #11
 8006f6a:	d903      	bls.n	8006f74 <_malloc_r+0x68>
 8006f6c:	6023      	str	r3, [r4, #0]
 8006f6e:	441c      	add	r4, r3
 8006f70:	6025      	str	r5, [r4, #0]
 8006f72:	e004      	b.n	8006f7e <_malloc_r+0x72>
 8006f74:	6863      	ldr	r3, [r4, #4]
 8006f76:	42a2      	cmp	r2, r4
 8006f78:	bf0c      	ite	eq
 8006f7a:	600b      	streq	r3, [r1, #0]
 8006f7c:	6053      	strne	r3, [r2, #4]
 8006f7e:	4630      	mov	r0, r6
 8006f80:	f000 fe08 	bl	8007b94 <__malloc_unlock>
 8006f84:	f104 000b 	add.w	r0, r4, #11
 8006f88:	1d23      	adds	r3, r4, #4
 8006f8a:	f020 0007 	bic.w	r0, r0, #7
 8006f8e:	1ac2      	subs	r2, r0, r3
 8006f90:	d0cc      	beq.n	8006f2c <_malloc_r+0x20>
 8006f92:	1a1b      	subs	r3, r3, r0
 8006f94:	50a3      	str	r3, [r4, r2]
 8006f96:	e7c9      	b.n	8006f2c <_malloc_r+0x20>
 8006f98:	4622      	mov	r2, r4
 8006f9a:	6864      	ldr	r4, [r4, #4]
 8006f9c:	e7cc      	b.n	8006f38 <_malloc_r+0x2c>
 8006f9e:	1cc4      	adds	r4, r0, #3
 8006fa0:	f024 0403 	bic.w	r4, r4, #3
 8006fa4:	42a0      	cmp	r0, r4
 8006fa6:	d0e3      	beq.n	8006f70 <_malloc_r+0x64>
 8006fa8:	1a21      	subs	r1, r4, r0
 8006faa:	4630      	mov	r0, r6
 8006fac:	f000 faf6 	bl	800759c <_sbrk_r>
 8006fb0:	3001      	adds	r0, #1
 8006fb2:	d1dd      	bne.n	8006f70 <_malloc_r+0x64>
 8006fb4:	e7cf      	b.n	8006f56 <_malloc_r+0x4a>
 8006fb6:	bf00      	nop
 8006fb8:	20000094 	.word	0x20000094
 8006fbc:	20000098 	.word	0x20000098

08006fc0 <__sfputc_r>:
 8006fc0:	6893      	ldr	r3, [r2, #8]
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	b410      	push	{r4}
 8006fc8:	6093      	str	r3, [r2, #8]
 8006fca:	da08      	bge.n	8006fde <__sfputc_r+0x1e>
 8006fcc:	6994      	ldr	r4, [r2, #24]
 8006fce:	42a3      	cmp	r3, r4
 8006fd0:	db01      	blt.n	8006fd6 <__sfputc_r+0x16>
 8006fd2:	290a      	cmp	r1, #10
 8006fd4:	d103      	bne.n	8006fde <__sfputc_r+0x1e>
 8006fd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fda:	f000 baef 	b.w	80075bc <__swbuf_r>
 8006fde:	6813      	ldr	r3, [r2, #0]
 8006fe0:	1c58      	adds	r0, r3, #1
 8006fe2:	6010      	str	r0, [r2, #0]
 8006fe4:	7019      	strb	r1, [r3, #0]
 8006fe6:	4608      	mov	r0, r1
 8006fe8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fec:	4770      	bx	lr

08006fee <__sfputs_r>:
 8006fee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ff0:	4606      	mov	r6, r0
 8006ff2:	460f      	mov	r7, r1
 8006ff4:	4614      	mov	r4, r2
 8006ff6:	18d5      	adds	r5, r2, r3
 8006ff8:	42ac      	cmp	r4, r5
 8006ffa:	d101      	bne.n	8007000 <__sfputs_r+0x12>
 8006ffc:	2000      	movs	r0, #0
 8006ffe:	e007      	b.n	8007010 <__sfputs_r+0x22>
 8007000:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007004:	463a      	mov	r2, r7
 8007006:	4630      	mov	r0, r6
 8007008:	f7ff ffda 	bl	8006fc0 <__sfputc_r>
 800700c:	1c43      	adds	r3, r0, #1
 800700e:	d1f3      	bne.n	8006ff8 <__sfputs_r+0xa>
 8007010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007014 <_vfiprintf_r>:
 8007014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007018:	460d      	mov	r5, r1
 800701a:	b09d      	sub	sp, #116	; 0x74
 800701c:	4614      	mov	r4, r2
 800701e:	4698      	mov	r8, r3
 8007020:	4606      	mov	r6, r0
 8007022:	b118      	cbz	r0, 800702c <_vfiprintf_r+0x18>
 8007024:	6983      	ldr	r3, [r0, #24]
 8007026:	b90b      	cbnz	r3, 800702c <_vfiprintf_r+0x18>
 8007028:	f000 fcaa 	bl	8007980 <__sinit>
 800702c:	4b89      	ldr	r3, [pc, #548]	; (8007254 <_vfiprintf_r+0x240>)
 800702e:	429d      	cmp	r5, r3
 8007030:	d11b      	bne.n	800706a <_vfiprintf_r+0x56>
 8007032:	6875      	ldr	r5, [r6, #4]
 8007034:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007036:	07d9      	lsls	r1, r3, #31
 8007038:	d405      	bmi.n	8007046 <_vfiprintf_r+0x32>
 800703a:	89ab      	ldrh	r3, [r5, #12]
 800703c:	059a      	lsls	r2, r3, #22
 800703e:	d402      	bmi.n	8007046 <_vfiprintf_r+0x32>
 8007040:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007042:	f000 fd3b 	bl	8007abc <__retarget_lock_acquire_recursive>
 8007046:	89ab      	ldrh	r3, [r5, #12]
 8007048:	071b      	lsls	r3, r3, #28
 800704a:	d501      	bpl.n	8007050 <_vfiprintf_r+0x3c>
 800704c:	692b      	ldr	r3, [r5, #16]
 800704e:	b9eb      	cbnz	r3, 800708c <_vfiprintf_r+0x78>
 8007050:	4629      	mov	r1, r5
 8007052:	4630      	mov	r0, r6
 8007054:	f000 fb04 	bl	8007660 <__swsetup_r>
 8007058:	b1c0      	cbz	r0, 800708c <_vfiprintf_r+0x78>
 800705a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800705c:	07dc      	lsls	r4, r3, #31
 800705e:	d50e      	bpl.n	800707e <_vfiprintf_r+0x6a>
 8007060:	f04f 30ff 	mov.w	r0, #4294967295
 8007064:	b01d      	add	sp, #116	; 0x74
 8007066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800706a:	4b7b      	ldr	r3, [pc, #492]	; (8007258 <_vfiprintf_r+0x244>)
 800706c:	429d      	cmp	r5, r3
 800706e:	d101      	bne.n	8007074 <_vfiprintf_r+0x60>
 8007070:	68b5      	ldr	r5, [r6, #8]
 8007072:	e7df      	b.n	8007034 <_vfiprintf_r+0x20>
 8007074:	4b79      	ldr	r3, [pc, #484]	; (800725c <_vfiprintf_r+0x248>)
 8007076:	429d      	cmp	r5, r3
 8007078:	bf08      	it	eq
 800707a:	68f5      	ldreq	r5, [r6, #12]
 800707c:	e7da      	b.n	8007034 <_vfiprintf_r+0x20>
 800707e:	89ab      	ldrh	r3, [r5, #12]
 8007080:	0598      	lsls	r0, r3, #22
 8007082:	d4ed      	bmi.n	8007060 <_vfiprintf_r+0x4c>
 8007084:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007086:	f000 fd1a 	bl	8007abe <__retarget_lock_release_recursive>
 800708a:	e7e9      	b.n	8007060 <_vfiprintf_r+0x4c>
 800708c:	2300      	movs	r3, #0
 800708e:	9309      	str	r3, [sp, #36]	; 0x24
 8007090:	2320      	movs	r3, #32
 8007092:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007096:	f8cd 800c 	str.w	r8, [sp, #12]
 800709a:	2330      	movs	r3, #48	; 0x30
 800709c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007260 <_vfiprintf_r+0x24c>
 80070a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070a4:	f04f 0901 	mov.w	r9, #1
 80070a8:	4623      	mov	r3, r4
 80070aa:	469a      	mov	sl, r3
 80070ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070b0:	b10a      	cbz	r2, 80070b6 <_vfiprintf_r+0xa2>
 80070b2:	2a25      	cmp	r2, #37	; 0x25
 80070b4:	d1f9      	bne.n	80070aa <_vfiprintf_r+0x96>
 80070b6:	ebba 0b04 	subs.w	fp, sl, r4
 80070ba:	d00b      	beq.n	80070d4 <_vfiprintf_r+0xc0>
 80070bc:	465b      	mov	r3, fp
 80070be:	4622      	mov	r2, r4
 80070c0:	4629      	mov	r1, r5
 80070c2:	4630      	mov	r0, r6
 80070c4:	f7ff ff93 	bl	8006fee <__sfputs_r>
 80070c8:	3001      	adds	r0, #1
 80070ca:	f000 80aa 	beq.w	8007222 <_vfiprintf_r+0x20e>
 80070ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070d0:	445a      	add	r2, fp
 80070d2:	9209      	str	r2, [sp, #36]	; 0x24
 80070d4:	f89a 3000 	ldrb.w	r3, [sl]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f000 80a2 	beq.w	8007222 <_vfiprintf_r+0x20e>
 80070de:	2300      	movs	r3, #0
 80070e0:	f04f 32ff 	mov.w	r2, #4294967295
 80070e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070e8:	f10a 0a01 	add.w	sl, sl, #1
 80070ec:	9304      	str	r3, [sp, #16]
 80070ee:	9307      	str	r3, [sp, #28]
 80070f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070f4:	931a      	str	r3, [sp, #104]	; 0x68
 80070f6:	4654      	mov	r4, sl
 80070f8:	2205      	movs	r2, #5
 80070fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070fe:	4858      	ldr	r0, [pc, #352]	; (8007260 <_vfiprintf_r+0x24c>)
 8007100:	f7f9 f866 	bl	80001d0 <memchr>
 8007104:	9a04      	ldr	r2, [sp, #16]
 8007106:	b9d8      	cbnz	r0, 8007140 <_vfiprintf_r+0x12c>
 8007108:	06d1      	lsls	r1, r2, #27
 800710a:	bf44      	itt	mi
 800710c:	2320      	movmi	r3, #32
 800710e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007112:	0713      	lsls	r3, r2, #28
 8007114:	bf44      	itt	mi
 8007116:	232b      	movmi	r3, #43	; 0x2b
 8007118:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800711c:	f89a 3000 	ldrb.w	r3, [sl]
 8007120:	2b2a      	cmp	r3, #42	; 0x2a
 8007122:	d015      	beq.n	8007150 <_vfiprintf_r+0x13c>
 8007124:	9a07      	ldr	r2, [sp, #28]
 8007126:	4654      	mov	r4, sl
 8007128:	2000      	movs	r0, #0
 800712a:	f04f 0c0a 	mov.w	ip, #10
 800712e:	4621      	mov	r1, r4
 8007130:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007134:	3b30      	subs	r3, #48	; 0x30
 8007136:	2b09      	cmp	r3, #9
 8007138:	d94e      	bls.n	80071d8 <_vfiprintf_r+0x1c4>
 800713a:	b1b0      	cbz	r0, 800716a <_vfiprintf_r+0x156>
 800713c:	9207      	str	r2, [sp, #28]
 800713e:	e014      	b.n	800716a <_vfiprintf_r+0x156>
 8007140:	eba0 0308 	sub.w	r3, r0, r8
 8007144:	fa09 f303 	lsl.w	r3, r9, r3
 8007148:	4313      	orrs	r3, r2
 800714a:	9304      	str	r3, [sp, #16]
 800714c:	46a2      	mov	sl, r4
 800714e:	e7d2      	b.n	80070f6 <_vfiprintf_r+0xe2>
 8007150:	9b03      	ldr	r3, [sp, #12]
 8007152:	1d19      	adds	r1, r3, #4
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	9103      	str	r1, [sp, #12]
 8007158:	2b00      	cmp	r3, #0
 800715a:	bfbb      	ittet	lt
 800715c:	425b      	neglt	r3, r3
 800715e:	f042 0202 	orrlt.w	r2, r2, #2
 8007162:	9307      	strge	r3, [sp, #28]
 8007164:	9307      	strlt	r3, [sp, #28]
 8007166:	bfb8      	it	lt
 8007168:	9204      	strlt	r2, [sp, #16]
 800716a:	7823      	ldrb	r3, [r4, #0]
 800716c:	2b2e      	cmp	r3, #46	; 0x2e
 800716e:	d10c      	bne.n	800718a <_vfiprintf_r+0x176>
 8007170:	7863      	ldrb	r3, [r4, #1]
 8007172:	2b2a      	cmp	r3, #42	; 0x2a
 8007174:	d135      	bne.n	80071e2 <_vfiprintf_r+0x1ce>
 8007176:	9b03      	ldr	r3, [sp, #12]
 8007178:	1d1a      	adds	r2, r3, #4
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	9203      	str	r2, [sp, #12]
 800717e:	2b00      	cmp	r3, #0
 8007180:	bfb8      	it	lt
 8007182:	f04f 33ff 	movlt.w	r3, #4294967295
 8007186:	3402      	adds	r4, #2
 8007188:	9305      	str	r3, [sp, #20]
 800718a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007270 <_vfiprintf_r+0x25c>
 800718e:	7821      	ldrb	r1, [r4, #0]
 8007190:	2203      	movs	r2, #3
 8007192:	4650      	mov	r0, sl
 8007194:	f7f9 f81c 	bl	80001d0 <memchr>
 8007198:	b140      	cbz	r0, 80071ac <_vfiprintf_r+0x198>
 800719a:	2340      	movs	r3, #64	; 0x40
 800719c:	eba0 000a 	sub.w	r0, r0, sl
 80071a0:	fa03 f000 	lsl.w	r0, r3, r0
 80071a4:	9b04      	ldr	r3, [sp, #16]
 80071a6:	4303      	orrs	r3, r0
 80071a8:	3401      	adds	r4, #1
 80071aa:	9304      	str	r3, [sp, #16]
 80071ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071b0:	482c      	ldr	r0, [pc, #176]	; (8007264 <_vfiprintf_r+0x250>)
 80071b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071b6:	2206      	movs	r2, #6
 80071b8:	f7f9 f80a 	bl	80001d0 <memchr>
 80071bc:	2800      	cmp	r0, #0
 80071be:	d03f      	beq.n	8007240 <_vfiprintf_r+0x22c>
 80071c0:	4b29      	ldr	r3, [pc, #164]	; (8007268 <_vfiprintf_r+0x254>)
 80071c2:	bb1b      	cbnz	r3, 800720c <_vfiprintf_r+0x1f8>
 80071c4:	9b03      	ldr	r3, [sp, #12]
 80071c6:	3307      	adds	r3, #7
 80071c8:	f023 0307 	bic.w	r3, r3, #7
 80071cc:	3308      	adds	r3, #8
 80071ce:	9303      	str	r3, [sp, #12]
 80071d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071d2:	443b      	add	r3, r7
 80071d4:	9309      	str	r3, [sp, #36]	; 0x24
 80071d6:	e767      	b.n	80070a8 <_vfiprintf_r+0x94>
 80071d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80071dc:	460c      	mov	r4, r1
 80071de:	2001      	movs	r0, #1
 80071e0:	e7a5      	b.n	800712e <_vfiprintf_r+0x11a>
 80071e2:	2300      	movs	r3, #0
 80071e4:	3401      	adds	r4, #1
 80071e6:	9305      	str	r3, [sp, #20]
 80071e8:	4619      	mov	r1, r3
 80071ea:	f04f 0c0a 	mov.w	ip, #10
 80071ee:	4620      	mov	r0, r4
 80071f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071f4:	3a30      	subs	r2, #48	; 0x30
 80071f6:	2a09      	cmp	r2, #9
 80071f8:	d903      	bls.n	8007202 <_vfiprintf_r+0x1ee>
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d0c5      	beq.n	800718a <_vfiprintf_r+0x176>
 80071fe:	9105      	str	r1, [sp, #20]
 8007200:	e7c3      	b.n	800718a <_vfiprintf_r+0x176>
 8007202:	fb0c 2101 	mla	r1, ip, r1, r2
 8007206:	4604      	mov	r4, r0
 8007208:	2301      	movs	r3, #1
 800720a:	e7f0      	b.n	80071ee <_vfiprintf_r+0x1da>
 800720c:	ab03      	add	r3, sp, #12
 800720e:	9300      	str	r3, [sp, #0]
 8007210:	462a      	mov	r2, r5
 8007212:	4b16      	ldr	r3, [pc, #88]	; (800726c <_vfiprintf_r+0x258>)
 8007214:	a904      	add	r1, sp, #16
 8007216:	4630      	mov	r0, r6
 8007218:	f3af 8000 	nop.w
 800721c:	4607      	mov	r7, r0
 800721e:	1c78      	adds	r0, r7, #1
 8007220:	d1d6      	bne.n	80071d0 <_vfiprintf_r+0x1bc>
 8007222:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007224:	07d9      	lsls	r1, r3, #31
 8007226:	d405      	bmi.n	8007234 <_vfiprintf_r+0x220>
 8007228:	89ab      	ldrh	r3, [r5, #12]
 800722a:	059a      	lsls	r2, r3, #22
 800722c:	d402      	bmi.n	8007234 <_vfiprintf_r+0x220>
 800722e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007230:	f000 fc45 	bl	8007abe <__retarget_lock_release_recursive>
 8007234:	89ab      	ldrh	r3, [r5, #12]
 8007236:	065b      	lsls	r3, r3, #25
 8007238:	f53f af12 	bmi.w	8007060 <_vfiprintf_r+0x4c>
 800723c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800723e:	e711      	b.n	8007064 <_vfiprintf_r+0x50>
 8007240:	ab03      	add	r3, sp, #12
 8007242:	9300      	str	r3, [sp, #0]
 8007244:	462a      	mov	r2, r5
 8007246:	4b09      	ldr	r3, [pc, #36]	; (800726c <_vfiprintf_r+0x258>)
 8007248:	a904      	add	r1, sp, #16
 800724a:	4630      	mov	r0, r6
 800724c:	f000 f880 	bl	8007350 <_printf_i>
 8007250:	e7e4      	b.n	800721c <_vfiprintf_r+0x208>
 8007252:	bf00      	nop
 8007254:	08008958 	.word	0x08008958
 8007258:	08008978 	.word	0x08008978
 800725c:	08008938 	.word	0x08008938
 8007260:	08008902 	.word	0x08008902
 8007264:	0800890c 	.word	0x0800890c
 8007268:	00000000 	.word	0x00000000
 800726c:	08006fef 	.word	0x08006fef
 8007270:	08008908 	.word	0x08008908

08007274 <_printf_common>:
 8007274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007278:	4616      	mov	r6, r2
 800727a:	4699      	mov	r9, r3
 800727c:	688a      	ldr	r2, [r1, #8]
 800727e:	690b      	ldr	r3, [r1, #16]
 8007280:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007284:	4293      	cmp	r3, r2
 8007286:	bfb8      	it	lt
 8007288:	4613      	movlt	r3, r2
 800728a:	6033      	str	r3, [r6, #0]
 800728c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007290:	4607      	mov	r7, r0
 8007292:	460c      	mov	r4, r1
 8007294:	b10a      	cbz	r2, 800729a <_printf_common+0x26>
 8007296:	3301      	adds	r3, #1
 8007298:	6033      	str	r3, [r6, #0]
 800729a:	6823      	ldr	r3, [r4, #0]
 800729c:	0699      	lsls	r1, r3, #26
 800729e:	bf42      	ittt	mi
 80072a0:	6833      	ldrmi	r3, [r6, #0]
 80072a2:	3302      	addmi	r3, #2
 80072a4:	6033      	strmi	r3, [r6, #0]
 80072a6:	6825      	ldr	r5, [r4, #0]
 80072a8:	f015 0506 	ands.w	r5, r5, #6
 80072ac:	d106      	bne.n	80072bc <_printf_common+0x48>
 80072ae:	f104 0a19 	add.w	sl, r4, #25
 80072b2:	68e3      	ldr	r3, [r4, #12]
 80072b4:	6832      	ldr	r2, [r6, #0]
 80072b6:	1a9b      	subs	r3, r3, r2
 80072b8:	42ab      	cmp	r3, r5
 80072ba:	dc26      	bgt.n	800730a <_printf_common+0x96>
 80072bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80072c0:	1e13      	subs	r3, r2, #0
 80072c2:	6822      	ldr	r2, [r4, #0]
 80072c4:	bf18      	it	ne
 80072c6:	2301      	movne	r3, #1
 80072c8:	0692      	lsls	r2, r2, #26
 80072ca:	d42b      	bmi.n	8007324 <_printf_common+0xb0>
 80072cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072d0:	4649      	mov	r1, r9
 80072d2:	4638      	mov	r0, r7
 80072d4:	47c0      	blx	r8
 80072d6:	3001      	adds	r0, #1
 80072d8:	d01e      	beq.n	8007318 <_printf_common+0xa4>
 80072da:	6823      	ldr	r3, [r4, #0]
 80072dc:	68e5      	ldr	r5, [r4, #12]
 80072de:	6832      	ldr	r2, [r6, #0]
 80072e0:	f003 0306 	and.w	r3, r3, #6
 80072e4:	2b04      	cmp	r3, #4
 80072e6:	bf08      	it	eq
 80072e8:	1aad      	subeq	r5, r5, r2
 80072ea:	68a3      	ldr	r3, [r4, #8]
 80072ec:	6922      	ldr	r2, [r4, #16]
 80072ee:	bf0c      	ite	eq
 80072f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072f4:	2500      	movne	r5, #0
 80072f6:	4293      	cmp	r3, r2
 80072f8:	bfc4      	itt	gt
 80072fa:	1a9b      	subgt	r3, r3, r2
 80072fc:	18ed      	addgt	r5, r5, r3
 80072fe:	2600      	movs	r6, #0
 8007300:	341a      	adds	r4, #26
 8007302:	42b5      	cmp	r5, r6
 8007304:	d11a      	bne.n	800733c <_printf_common+0xc8>
 8007306:	2000      	movs	r0, #0
 8007308:	e008      	b.n	800731c <_printf_common+0xa8>
 800730a:	2301      	movs	r3, #1
 800730c:	4652      	mov	r2, sl
 800730e:	4649      	mov	r1, r9
 8007310:	4638      	mov	r0, r7
 8007312:	47c0      	blx	r8
 8007314:	3001      	adds	r0, #1
 8007316:	d103      	bne.n	8007320 <_printf_common+0xac>
 8007318:	f04f 30ff 	mov.w	r0, #4294967295
 800731c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007320:	3501      	adds	r5, #1
 8007322:	e7c6      	b.n	80072b2 <_printf_common+0x3e>
 8007324:	18e1      	adds	r1, r4, r3
 8007326:	1c5a      	adds	r2, r3, #1
 8007328:	2030      	movs	r0, #48	; 0x30
 800732a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800732e:	4422      	add	r2, r4
 8007330:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007334:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007338:	3302      	adds	r3, #2
 800733a:	e7c7      	b.n	80072cc <_printf_common+0x58>
 800733c:	2301      	movs	r3, #1
 800733e:	4622      	mov	r2, r4
 8007340:	4649      	mov	r1, r9
 8007342:	4638      	mov	r0, r7
 8007344:	47c0      	blx	r8
 8007346:	3001      	adds	r0, #1
 8007348:	d0e6      	beq.n	8007318 <_printf_common+0xa4>
 800734a:	3601      	adds	r6, #1
 800734c:	e7d9      	b.n	8007302 <_printf_common+0x8e>
	...

08007350 <_printf_i>:
 8007350:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007354:	460c      	mov	r4, r1
 8007356:	4691      	mov	r9, r2
 8007358:	7e27      	ldrb	r7, [r4, #24]
 800735a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800735c:	2f78      	cmp	r7, #120	; 0x78
 800735e:	4680      	mov	r8, r0
 8007360:	469a      	mov	sl, r3
 8007362:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007366:	d807      	bhi.n	8007378 <_printf_i+0x28>
 8007368:	2f62      	cmp	r7, #98	; 0x62
 800736a:	d80a      	bhi.n	8007382 <_printf_i+0x32>
 800736c:	2f00      	cmp	r7, #0
 800736e:	f000 80d8 	beq.w	8007522 <_printf_i+0x1d2>
 8007372:	2f58      	cmp	r7, #88	; 0x58
 8007374:	f000 80a3 	beq.w	80074be <_printf_i+0x16e>
 8007378:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800737c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007380:	e03a      	b.n	80073f8 <_printf_i+0xa8>
 8007382:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007386:	2b15      	cmp	r3, #21
 8007388:	d8f6      	bhi.n	8007378 <_printf_i+0x28>
 800738a:	a001      	add	r0, pc, #4	; (adr r0, 8007390 <_printf_i+0x40>)
 800738c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007390:	080073e9 	.word	0x080073e9
 8007394:	080073fd 	.word	0x080073fd
 8007398:	08007379 	.word	0x08007379
 800739c:	08007379 	.word	0x08007379
 80073a0:	08007379 	.word	0x08007379
 80073a4:	08007379 	.word	0x08007379
 80073a8:	080073fd 	.word	0x080073fd
 80073ac:	08007379 	.word	0x08007379
 80073b0:	08007379 	.word	0x08007379
 80073b4:	08007379 	.word	0x08007379
 80073b8:	08007379 	.word	0x08007379
 80073bc:	08007509 	.word	0x08007509
 80073c0:	0800742d 	.word	0x0800742d
 80073c4:	080074eb 	.word	0x080074eb
 80073c8:	08007379 	.word	0x08007379
 80073cc:	08007379 	.word	0x08007379
 80073d0:	0800752b 	.word	0x0800752b
 80073d4:	08007379 	.word	0x08007379
 80073d8:	0800742d 	.word	0x0800742d
 80073dc:	08007379 	.word	0x08007379
 80073e0:	08007379 	.word	0x08007379
 80073e4:	080074f3 	.word	0x080074f3
 80073e8:	680b      	ldr	r3, [r1, #0]
 80073ea:	1d1a      	adds	r2, r3, #4
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	600a      	str	r2, [r1, #0]
 80073f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80073f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073f8:	2301      	movs	r3, #1
 80073fa:	e0a3      	b.n	8007544 <_printf_i+0x1f4>
 80073fc:	6825      	ldr	r5, [r4, #0]
 80073fe:	6808      	ldr	r0, [r1, #0]
 8007400:	062e      	lsls	r6, r5, #24
 8007402:	f100 0304 	add.w	r3, r0, #4
 8007406:	d50a      	bpl.n	800741e <_printf_i+0xce>
 8007408:	6805      	ldr	r5, [r0, #0]
 800740a:	600b      	str	r3, [r1, #0]
 800740c:	2d00      	cmp	r5, #0
 800740e:	da03      	bge.n	8007418 <_printf_i+0xc8>
 8007410:	232d      	movs	r3, #45	; 0x2d
 8007412:	426d      	negs	r5, r5
 8007414:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007418:	485e      	ldr	r0, [pc, #376]	; (8007594 <_printf_i+0x244>)
 800741a:	230a      	movs	r3, #10
 800741c:	e019      	b.n	8007452 <_printf_i+0x102>
 800741e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007422:	6805      	ldr	r5, [r0, #0]
 8007424:	600b      	str	r3, [r1, #0]
 8007426:	bf18      	it	ne
 8007428:	b22d      	sxthne	r5, r5
 800742a:	e7ef      	b.n	800740c <_printf_i+0xbc>
 800742c:	680b      	ldr	r3, [r1, #0]
 800742e:	6825      	ldr	r5, [r4, #0]
 8007430:	1d18      	adds	r0, r3, #4
 8007432:	6008      	str	r0, [r1, #0]
 8007434:	0628      	lsls	r0, r5, #24
 8007436:	d501      	bpl.n	800743c <_printf_i+0xec>
 8007438:	681d      	ldr	r5, [r3, #0]
 800743a:	e002      	b.n	8007442 <_printf_i+0xf2>
 800743c:	0669      	lsls	r1, r5, #25
 800743e:	d5fb      	bpl.n	8007438 <_printf_i+0xe8>
 8007440:	881d      	ldrh	r5, [r3, #0]
 8007442:	4854      	ldr	r0, [pc, #336]	; (8007594 <_printf_i+0x244>)
 8007444:	2f6f      	cmp	r7, #111	; 0x6f
 8007446:	bf0c      	ite	eq
 8007448:	2308      	moveq	r3, #8
 800744a:	230a      	movne	r3, #10
 800744c:	2100      	movs	r1, #0
 800744e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007452:	6866      	ldr	r6, [r4, #4]
 8007454:	60a6      	str	r6, [r4, #8]
 8007456:	2e00      	cmp	r6, #0
 8007458:	bfa2      	ittt	ge
 800745a:	6821      	ldrge	r1, [r4, #0]
 800745c:	f021 0104 	bicge.w	r1, r1, #4
 8007460:	6021      	strge	r1, [r4, #0]
 8007462:	b90d      	cbnz	r5, 8007468 <_printf_i+0x118>
 8007464:	2e00      	cmp	r6, #0
 8007466:	d04d      	beq.n	8007504 <_printf_i+0x1b4>
 8007468:	4616      	mov	r6, r2
 800746a:	fbb5 f1f3 	udiv	r1, r5, r3
 800746e:	fb03 5711 	mls	r7, r3, r1, r5
 8007472:	5dc7      	ldrb	r7, [r0, r7]
 8007474:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007478:	462f      	mov	r7, r5
 800747a:	42bb      	cmp	r3, r7
 800747c:	460d      	mov	r5, r1
 800747e:	d9f4      	bls.n	800746a <_printf_i+0x11a>
 8007480:	2b08      	cmp	r3, #8
 8007482:	d10b      	bne.n	800749c <_printf_i+0x14c>
 8007484:	6823      	ldr	r3, [r4, #0]
 8007486:	07df      	lsls	r7, r3, #31
 8007488:	d508      	bpl.n	800749c <_printf_i+0x14c>
 800748a:	6923      	ldr	r3, [r4, #16]
 800748c:	6861      	ldr	r1, [r4, #4]
 800748e:	4299      	cmp	r1, r3
 8007490:	bfde      	ittt	le
 8007492:	2330      	movle	r3, #48	; 0x30
 8007494:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007498:	f106 36ff 	addle.w	r6, r6, #4294967295
 800749c:	1b92      	subs	r2, r2, r6
 800749e:	6122      	str	r2, [r4, #16]
 80074a0:	f8cd a000 	str.w	sl, [sp]
 80074a4:	464b      	mov	r3, r9
 80074a6:	aa03      	add	r2, sp, #12
 80074a8:	4621      	mov	r1, r4
 80074aa:	4640      	mov	r0, r8
 80074ac:	f7ff fee2 	bl	8007274 <_printf_common>
 80074b0:	3001      	adds	r0, #1
 80074b2:	d14c      	bne.n	800754e <_printf_i+0x1fe>
 80074b4:	f04f 30ff 	mov.w	r0, #4294967295
 80074b8:	b004      	add	sp, #16
 80074ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074be:	4835      	ldr	r0, [pc, #212]	; (8007594 <_printf_i+0x244>)
 80074c0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80074c4:	6823      	ldr	r3, [r4, #0]
 80074c6:	680e      	ldr	r6, [r1, #0]
 80074c8:	061f      	lsls	r7, r3, #24
 80074ca:	f856 5b04 	ldr.w	r5, [r6], #4
 80074ce:	600e      	str	r6, [r1, #0]
 80074d0:	d514      	bpl.n	80074fc <_printf_i+0x1ac>
 80074d2:	07d9      	lsls	r1, r3, #31
 80074d4:	bf44      	itt	mi
 80074d6:	f043 0320 	orrmi.w	r3, r3, #32
 80074da:	6023      	strmi	r3, [r4, #0]
 80074dc:	b91d      	cbnz	r5, 80074e6 <_printf_i+0x196>
 80074de:	6823      	ldr	r3, [r4, #0]
 80074e0:	f023 0320 	bic.w	r3, r3, #32
 80074e4:	6023      	str	r3, [r4, #0]
 80074e6:	2310      	movs	r3, #16
 80074e8:	e7b0      	b.n	800744c <_printf_i+0xfc>
 80074ea:	6823      	ldr	r3, [r4, #0]
 80074ec:	f043 0320 	orr.w	r3, r3, #32
 80074f0:	6023      	str	r3, [r4, #0]
 80074f2:	2378      	movs	r3, #120	; 0x78
 80074f4:	4828      	ldr	r0, [pc, #160]	; (8007598 <_printf_i+0x248>)
 80074f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074fa:	e7e3      	b.n	80074c4 <_printf_i+0x174>
 80074fc:	065e      	lsls	r6, r3, #25
 80074fe:	bf48      	it	mi
 8007500:	b2ad      	uxthmi	r5, r5
 8007502:	e7e6      	b.n	80074d2 <_printf_i+0x182>
 8007504:	4616      	mov	r6, r2
 8007506:	e7bb      	b.n	8007480 <_printf_i+0x130>
 8007508:	680b      	ldr	r3, [r1, #0]
 800750a:	6826      	ldr	r6, [r4, #0]
 800750c:	6960      	ldr	r0, [r4, #20]
 800750e:	1d1d      	adds	r5, r3, #4
 8007510:	600d      	str	r5, [r1, #0]
 8007512:	0635      	lsls	r5, r6, #24
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	d501      	bpl.n	800751c <_printf_i+0x1cc>
 8007518:	6018      	str	r0, [r3, #0]
 800751a:	e002      	b.n	8007522 <_printf_i+0x1d2>
 800751c:	0671      	lsls	r1, r6, #25
 800751e:	d5fb      	bpl.n	8007518 <_printf_i+0x1c8>
 8007520:	8018      	strh	r0, [r3, #0]
 8007522:	2300      	movs	r3, #0
 8007524:	6123      	str	r3, [r4, #16]
 8007526:	4616      	mov	r6, r2
 8007528:	e7ba      	b.n	80074a0 <_printf_i+0x150>
 800752a:	680b      	ldr	r3, [r1, #0]
 800752c:	1d1a      	adds	r2, r3, #4
 800752e:	600a      	str	r2, [r1, #0]
 8007530:	681e      	ldr	r6, [r3, #0]
 8007532:	6862      	ldr	r2, [r4, #4]
 8007534:	2100      	movs	r1, #0
 8007536:	4630      	mov	r0, r6
 8007538:	f7f8 fe4a 	bl	80001d0 <memchr>
 800753c:	b108      	cbz	r0, 8007542 <_printf_i+0x1f2>
 800753e:	1b80      	subs	r0, r0, r6
 8007540:	6060      	str	r0, [r4, #4]
 8007542:	6863      	ldr	r3, [r4, #4]
 8007544:	6123      	str	r3, [r4, #16]
 8007546:	2300      	movs	r3, #0
 8007548:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800754c:	e7a8      	b.n	80074a0 <_printf_i+0x150>
 800754e:	6923      	ldr	r3, [r4, #16]
 8007550:	4632      	mov	r2, r6
 8007552:	4649      	mov	r1, r9
 8007554:	4640      	mov	r0, r8
 8007556:	47d0      	blx	sl
 8007558:	3001      	adds	r0, #1
 800755a:	d0ab      	beq.n	80074b4 <_printf_i+0x164>
 800755c:	6823      	ldr	r3, [r4, #0]
 800755e:	079b      	lsls	r3, r3, #30
 8007560:	d413      	bmi.n	800758a <_printf_i+0x23a>
 8007562:	68e0      	ldr	r0, [r4, #12]
 8007564:	9b03      	ldr	r3, [sp, #12]
 8007566:	4298      	cmp	r0, r3
 8007568:	bfb8      	it	lt
 800756a:	4618      	movlt	r0, r3
 800756c:	e7a4      	b.n	80074b8 <_printf_i+0x168>
 800756e:	2301      	movs	r3, #1
 8007570:	4632      	mov	r2, r6
 8007572:	4649      	mov	r1, r9
 8007574:	4640      	mov	r0, r8
 8007576:	47d0      	blx	sl
 8007578:	3001      	adds	r0, #1
 800757a:	d09b      	beq.n	80074b4 <_printf_i+0x164>
 800757c:	3501      	adds	r5, #1
 800757e:	68e3      	ldr	r3, [r4, #12]
 8007580:	9903      	ldr	r1, [sp, #12]
 8007582:	1a5b      	subs	r3, r3, r1
 8007584:	42ab      	cmp	r3, r5
 8007586:	dcf2      	bgt.n	800756e <_printf_i+0x21e>
 8007588:	e7eb      	b.n	8007562 <_printf_i+0x212>
 800758a:	2500      	movs	r5, #0
 800758c:	f104 0619 	add.w	r6, r4, #25
 8007590:	e7f5      	b.n	800757e <_printf_i+0x22e>
 8007592:	bf00      	nop
 8007594:	08008913 	.word	0x08008913
 8007598:	08008924 	.word	0x08008924

0800759c <_sbrk_r>:
 800759c:	b538      	push	{r3, r4, r5, lr}
 800759e:	4d06      	ldr	r5, [pc, #24]	; (80075b8 <_sbrk_r+0x1c>)
 80075a0:	2300      	movs	r3, #0
 80075a2:	4604      	mov	r4, r0
 80075a4:	4608      	mov	r0, r1
 80075a6:	602b      	str	r3, [r5, #0]
 80075a8:	f7f9 f97e 	bl	80008a8 <_sbrk>
 80075ac:	1c43      	adds	r3, r0, #1
 80075ae:	d102      	bne.n	80075b6 <_sbrk_r+0x1a>
 80075b0:	682b      	ldr	r3, [r5, #0]
 80075b2:	b103      	cbz	r3, 80075b6 <_sbrk_r+0x1a>
 80075b4:	6023      	str	r3, [r4, #0]
 80075b6:	bd38      	pop	{r3, r4, r5, pc}
 80075b8:	2000054c 	.word	0x2000054c

080075bc <__swbuf_r>:
 80075bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075be:	460e      	mov	r6, r1
 80075c0:	4614      	mov	r4, r2
 80075c2:	4605      	mov	r5, r0
 80075c4:	b118      	cbz	r0, 80075ce <__swbuf_r+0x12>
 80075c6:	6983      	ldr	r3, [r0, #24]
 80075c8:	b90b      	cbnz	r3, 80075ce <__swbuf_r+0x12>
 80075ca:	f000 f9d9 	bl	8007980 <__sinit>
 80075ce:	4b21      	ldr	r3, [pc, #132]	; (8007654 <__swbuf_r+0x98>)
 80075d0:	429c      	cmp	r4, r3
 80075d2:	d12b      	bne.n	800762c <__swbuf_r+0x70>
 80075d4:	686c      	ldr	r4, [r5, #4]
 80075d6:	69a3      	ldr	r3, [r4, #24]
 80075d8:	60a3      	str	r3, [r4, #8]
 80075da:	89a3      	ldrh	r3, [r4, #12]
 80075dc:	071a      	lsls	r2, r3, #28
 80075de:	d52f      	bpl.n	8007640 <__swbuf_r+0x84>
 80075e0:	6923      	ldr	r3, [r4, #16]
 80075e2:	b36b      	cbz	r3, 8007640 <__swbuf_r+0x84>
 80075e4:	6923      	ldr	r3, [r4, #16]
 80075e6:	6820      	ldr	r0, [r4, #0]
 80075e8:	1ac0      	subs	r0, r0, r3
 80075ea:	6963      	ldr	r3, [r4, #20]
 80075ec:	b2f6      	uxtb	r6, r6
 80075ee:	4283      	cmp	r3, r0
 80075f0:	4637      	mov	r7, r6
 80075f2:	dc04      	bgt.n	80075fe <__swbuf_r+0x42>
 80075f4:	4621      	mov	r1, r4
 80075f6:	4628      	mov	r0, r5
 80075f8:	f000 f92e 	bl	8007858 <_fflush_r>
 80075fc:	bb30      	cbnz	r0, 800764c <__swbuf_r+0x90>
 80075fe:	68a3      	ldr	r3, [r4, #8]
 8007600:	3b01      	subs	r3, #1
 8007602:	60a3      	str	r3, [r4, #8]
 8007604:	6823      	ldr	r3, [r4, #0]
 8007606:	1c5a      	adds	r2, r3, #1
 8007608:	6022      	str	r2, [r4, #0]
 800760a:	701e      	strb	r6, [r3, #0]
 800760c:	6963      	ldr	r3, [r4, #20]
 800760e:	3001      	adds	r0, #1
 8007610:	4283      	cmp	r3, r0
 8007612:	d004      	beq.n	800761e <__swbuf_r+0x62>
 8007614:	89a3      	ldrh	r3, [r4, #12]
 8007616:	07db      	lsls	r3, r3, #31
 8007618:	d506      	bpl.n	8007628 <__swbuf_r+0x6c>
 800761a:	2e0a      	cmp	r6, #10
 800761c:	d104      	bne.n	8007628 <__swbuf_r+0x6c>
 800761e:	4621      	mov	r1, r4
 8007620:	4628      	mov	r0, r5
 8007622:	f000 f919 	bl	8007858 <_fflush_r>
 8007626:	b988      	cbnz	r0, 800764c <__swbuf_r+0x90>
 8007628:	4638      	mov	r0, r7
 800762a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800762c:	4b0a      	ldr	r3, [pc, #40]	; (8007658 <__swbuf_r+0x9c>)
 800762e:	429c      	cmp	r4, r3
 8007630:	d101      	bne.n	8007636 <__swbuf_r+0x7a>
 8007632:	68ac      	ldr	r4, [r5, #8]
 8007634:	e7cf      	b.n	80075d6 <__swbuf_r+0x1a>
 8007636:	4b09      	ldr	r3, [pc, #36]	; (800765c <__swbuf_r+0xa0>)
 8007638:	429c      	cmp	r4, r3
 800763a:	bf08      	it	eq
 800763c:	68ec      	ldreq	r4, [r5, #12]
 800763e:	e7ca      	b.n	80075d6 <__swbuf_r+0x1a>
 8007640:	4621      	mov	r1, r4
 8007642:	4628      	mov	r0, r5
 8007644:	f000 f80c 	bl	8007660 <__swsetup_r>
 8007648:	2800      	cmp	r0, #0
 800764a:	d0cb      	beq.n	80075e4 <__swbuf_r+0x28>
 800764c:	f04f 37ff 	mov.w	r7, #4294967295
 8007650:	e7ea      	b.n	8007628 <__swbuf_r+0x6c>
 8007652:	bf00      	nop
 8007654:	08008958 	.word	0x08008958
 8007658:	08008978 	.word	0x08008978
 800765c:	08008938 	.word	0x08008938

08007660 <__swsetup_r>:
 8007660:	4b32      	ldr	r3, [pc, #200]	; (800772c <__swsetup_r+0xcc>)
 8007662:	b570      	push	{r4, r5, r6, lr}
 8007664:	681d      	ldr	r5, [r3, #0]
 8007666:	4606      	mov	r6, r0
 8007668:	460c      	mov	r4, r1
 800766a:	b125      	cbz	r5, 8007676 <__swsetup_r+0x16>
 800766c:	69ab      	ldr	r3, [r5, #24]
 800766e:	b913      	cbnz	r3, 8007676 <__swsetup_r+0x16>
 8007670:	4628      	mov	r0, r5
 8007672:	f000 f985 	bl	8007980 <__sinit>
 8007676:	4b2e      	ldr	r3, [pc, #184]	; (8007730 <__swsetup_r+0xd0>)
 8007678:	429c      	cmp	r4, r3
 800767a:	d10f      	bne.n	800769c <__swsetup_r+0x3c>
 800767c:	686c      	ldr	r4, [r5, #4]
 800767e:	89a3      	ldrh	r3, [r4, #12]
 8007680:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007684:	0719      	lsls	r1, r3, #28
 8007686:	d42c      	bmi.n	80076e2 <__swsetup_r+0x82>
 8007688:	06dd      	lsls	r5, r3, #27
 800768a:	d411      	bmi.n	80076b0 <__swsetup_r+0x50>
 800768c:	2309      	movs	r3, #9
 800768e:	6033      	str	r3, [r6, #0]
 8007690:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007694:	81a3      	strh	r3, [r4, #12]
 8007696:	f04f 30ff 	mov.w	r0, #4294967295
 800769a:	e03e      	b.n	800771a <__swsetup_r+0xba>
 800769c:	4b25      	ldr	r3, [pc, #148]	; (8007734 <__swsetup_r+0xd4>)
 800769e:	429c      	cmp	r4, r3
 80076a0:	d101      	bne.n	80076a6 <__swsetup_r+0x46>
 80076a2:	68ac      	ldr	r4, [r5, #8]
 80076a4:	e7eb      	b.n	800767e <__swsetup_r+0x1e>
 80076a6:	4b24      	ldr	r3, [pc, #144]	; (8007738 <__swsetup_r+0xd8>)
 80076a8:	429c      	cmp	r4, r3
 80076aa:	bf08      	it	eq
 80076ac:	68ec      	ldreq	r4, [r5, #12]
 80076ae:	e7e6      	b.n	800767e <__swsetup_r+0x1e>
 80076b0:	0758      	lsls	r0, r3, #29
 80076b2:	d512      	bpl.n	80076da <__swsetup_r+0x7a>
 80076b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076b6:	b141      	cbz	r1, 80076ca <__swsetup_r+0x6a>
 80076b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80076bc:	4299      	cmp	r1, r3
 80076be:	d002      	beq.n	80076c6 <__swsetup_r+0x66>
 80076c0:	4630      	mov	r0, r6
 80076c2:	f7ff fbd3 	bl	8006e6c <_free_r>
 80076c6:	2300      	movs	r3, #0
 80076c8:	6363      	str	r3, [r4, #52]	; 0x34
 80076ca:	89a3      	ldrh	r3, [r4, #12]
 80076cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80076d0:	81a3      	strh	r3, [r4, #12]
 80076d2:	2300      	movs	r3, #0
 80076d4:	6063      	str	r3, [r4, #4]
 80076d6:	6923      	ldr	r3, [r4, #16]
 80076d8:	6023      	str	r3, [r4, #0]
 80076da:	89a3      	ldrh	r3, [r4, #12]
 80076dc:	f043 0308 	orr.w	r3, r3, #8
 80076e0:	81a3      	strh	r3, [r4, #12]
 80076e2:	6923      	ldr	r3, [r4, #16]
 80076e4:	b94b      	cbnz	r3, 80076fa <__swsetup_r+0x9a>
 80076e6:	89a3      	ldrh	r3, [r4, #12]
 80076e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80076ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076f0:	d003      	beq.n	80076fa <__swsetup_r+0x9a>
 80076f2:	4621      	mov	r1, r4
 80076f4:	4630      	mov	r0, r6
 80076f6:	f000 fa07 	bl	8007b08 <__smakebuf_r>
 80076fa:	89a0      	ldrh	r0, [r4, #12]
 80076fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007700:	f010 0301 	ands.w	r3, r0, #1
 8007704:	d00a      	beq.n	800771c <__swsetup_r+0xbc>
 8007706:	2300      	movs	r3, #0
 8007708:	60a3      	str	r3, [r4, #8]
 800770a:	6963      	ldr	r3, [r4, #20]
 800770c:	425b      	negs	r3, r3
 800770e:	61a3      	str	r3, [r4, #24]
 8007710:	6923      	ldr	r3, [r4, #16]
 8007712:	b943      	cbnz	r3, 8007726 <__swsetup_r+0xc6>
 8007714:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007718:	d1ba      	bne.n	8007690 <__swsetup_r+0x30>
 800771a:	bd70      	pop	{r4, r5, r6, pc}
 800771c:	0781      	lsls	r1, r0, #30
 800771e:	bf58      	it	pl
 8007720:	6963      	ldrpl	r3, [r4, #20]
 8007722:	60a3      	str	r3, [r4, #8]
 8007724:	e7f4      	b.n	8007710 <__swsetup_r+0xb0>
 8007726:	2000      	movs	r0, #0
 8007728:	e7f7      	b.n	800771a <__swsetup_r+0xba>
 800772a:	bf00      	nop
 800772c:	2000000c 	.word	0x2000000c
 8007730:	08008958 	.word	0x08008958
 8007734:	08008978 	.word	0x08008978
 8007738:	08008938 	.word	0x08008938

0800773c <abort>:
 800773c:	b508      	push	{r3, lr}
 800773e:	2006      	movs	r0, #6
 8007740:	f000 fa56 	bl	8007bf0 <raise>
 8007744:	2001      	movs	r0, #1
 8007746:	f7f9 f853 	bl	80007f0 <_exit>
	...

0800774c <__sflush_r>:
 800774c:	898a      	ldrh	r2, [r1, #12]
 800774e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007752:	4605      	mov	r5, r0
 8007754:	0710      	lsls	r0, r2, #28
 8007756:	460c      	mov	r4, r1
 8007758:	d458      	bmi.n	800780c <__sflush_r+0xc0>
 800775a:	684b      	ldr	r3, [r1, #4]
 800775c:	2b00      	cmp	r3, #0
 800775e:	dc05      	bgt.n	800776c <__sflush_r+0x20>
 8007760:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007762:	2b00      	cmp	r3, #0
 8007764:	dc02      	bgt.n	800776c <__sflush_r+0x20>
 8007766:	2000      	movs	r0, #0
 8007768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800776c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800776e:	2e00      	cmp	r6, #0
 8007770:	d0f9      	beq.n	8007766 <__sflush_r+0x1a>
 8007772:	2300      	movs	r3, #0
 8007774:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007778:	682f      	ldr	r7, [r5, #0]
 800777a:	602b      	str	r3, [r5, #0]
 800777c:	d032      	beq.n	80077e4 <__sflush_r+0x98>
 800777e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007780:	89a3      	ldrh	r3, [r4, #12]
 8007782:	075a      	lsls	r2, r3, #29
 8007784:	d505      	bpl.n	8007792 <__sflush_r+0x46>
 8007786:	6863      	ldr	r3, [r4, #4]
 8007788:	1ac0      	subs	r0, r0, r3
 800778a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800778c:	b10b      	cbz	r3, 8007792 <__sflush_r+0x46>
 800778e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007790:	1ac0      	subs	r0, r0, r3
 8007792:	2300      	movs	r3, #0
 8007794:	4602      	mov	r2, r0
 8007796:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007798:	6a21      	ldr	r1, [r4, #32]
 800779a:	4628      	mov	r0, r5
 800779c:	47b0      	blx	r6
 800779e:	1c43      	adds	r3, r0, #1
 80077a0:	89a3      	ldrh	r3, [r4, #12]
 80077a2:	d106      	bne.n	80077b2 <__sflush_r+0x66>
 80077a4:	6829      	ldr	r1, [r5, #0]
 80077a6:	291d      	cmp	r1, #29
 80077a8:	d82c      	bhi.n	8007804 <__sflush_r+0xb8>
 80077aa:	4a2a      	ldr	r2, [pc, #168]	; (8007854 <__sflush_r+0x108>)
 80077ac:	40ca      	lsrs	r2, r1
 80077ae:	07d6      	lsls	r6, r2, #31
 80077b0:	d528      	bpl.n	8007804 <__sflush_r+0xb8>
 80077b2:	2200      	movs	r2, #0
 80077b4:	6062      	str	r2, [r4, #4]
 80077b6:	04d9      	lsls	r1, r3, #19
 80077b8:	6922      	ldr	r2, [r4, #16]
 80077ba:	6022      	str	r2, [r4, #0]
 80077bc:	d504      	bpl.n	80077c8 <__sflush_r+0x7c>
 80077be:	1c42      	adds	r2, r0, #1
 80077c0:	d101      	bne.n	80077c6 <__sflush_r+0x7a>
 80077c2:	682b      	ldr	r3, [r5, #0]
 80077c4:	b903      	cbnz	r3, 80077c8 <__sflush_r+0x7c>
 80077c6:	6560      	str	r0, [r4, #84]	; 0x54
 80077c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077ca:	602f      	str	r7, [r5, #0]
 80077cc:	2900      	cmp	r1, #0
 80077ce:	d0ca      	beq.n	8007766 <__sflush_r+0x1a>
 80077d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077d4:	4299      	cmp	r1, r3
 80077d6:	d002      	beq.n	80077de <__sflush_r+0x92>
 80077d8:	4628      	mov	r0, r5
 80077da:	f7ff fb47 	bl	8006e6c <_free_r>
 80077de:	2000      	movs	r0, #0
 80077e0:	6360      	str	r0, [r4, #52]	; 0x34
 80077e2:	e7c1      	b.n	8007768 <__sflush_r+0x1c>
 80077e4:	6a21      	ldr	r1, [r4, #32]
 80077e6:	2301      	movs	r3, #1
 80077e8:	4628      	mov	r0, r5
 80077ea:	47b0      	blx	r6
 80077ec:	1c41      	adds	r1, r0, #1
 80077ee:	d1c7      	bne.n	8007780 <__sflush_r+0x34>
 80077f0:	682b      	ldr	r3, [r5, #0]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d0c4      	beq.n	8007780 <__sflush_r+0x34>
 80077f6:	2b1d      	cmp	r3, #29
 80077f8:	d001      	beq.n	80077fe <__sflush_r+0xb2>
 80077fa:	2b16      	cmp	r3, #22
 80077fc:	d101      	bne.n	8007802 <__sflush_r+0xb6>
 80077fe:	602f      	str	r7, [r5, #0]
 8007800:	e7b1      	b.n	8007766 <__sflush_r+0x1a>
 8007802:	89a3      	ldrh	r3, [r4, #12]
 8007804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007808:	81a3      	strh	r3, [r4, #12]
 800780a:	e7ad      	b.n	8007768 <__sflush_r+0x1c>
 800780c:	690f      	ldr	r7, [r1, #16]
 800780e:	2f00      	cmp	r7, #0
 8007810:	d0a9      	beq.n	8007766 <__sflush_r+0x1a>
 8007812:	0793      	lsls	r3, r2, #30
 8007814:	680e      	ldr	r6, [r1, #0]
 8007816:	bf08      	it	eq
 8007818:	694b      	ldreq	r3, [r1, #20]
 800781a:	600f      	str	r7, [r1, #0]
 800781c:	bf18      	it	ne
 800781e:	2300      	movne	r3, #0
 8007820:	eba6 0807 	sub.w	r8, r6, r7
 8007824:	608b      	str	r3, [r1, #8]
 8007826:	f1b8 0f00 	cmp.w	r8, #0
 800782a:	dd9c      	ble.n	8007766 <__sflush_r+0x1a>
 800782c:	6a21      	ldr	r1, [r4, #32]
 800782e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007830:	4643      	mov	r3, r8
 8007832:	463a      	mov	r2, r7
 8007834:	4628      	mov	r0, r5
 8007836:	47b0      	blx	r6
 8007838:	2800      	cmp	r0, #0
 800783a:	dc06      	bgt.n	800784a <__sflush_r+0xfe>
 800783c:	89a3      	ldrh	r3, [r4, #12]
 800783e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007842:	81a3      	strh	r3, [r4, #12]
 8007844:	f04f 30ff 	mov.w	r0, #4294967295
 8007848:	e78e      	b.n	8007768 <__sflush_r+0x1c>
 800784a:	4407      	add	r7, r0
 800784c:	eba8 0800 	sub.w	r8, r8, r0
 8007850:	e7e9      	b.n	8007826 <__sflush_r+0xda>
 8007852:	bf00      	nop
 8007854:	20400001 	.word	0x20400001

08007858 <_fflush_r>:
 8007858:	b538      	push	{r3, r4, r5, lr}
 800785a:	690b      	ldr	r3, [r1, #16]
 800785c:	4605      	mov	r5, r0
 800785e:	460c      	mov	r4, r1
 8007860:	b913      	cbnz	r3, 8007868 <_fflush_r+0x10>
 8007862:	2500      	movs	r5, #0
 8007864:	4628      	mov	r0, r5
 8007866:	bd38      	pop	{r3, r4, r5, pc}
 8007868:	b118      	cbz	r0, 8007872 <_fflush_r+0x1a>
 800786a:	6983      	ldr	r3, [r0, #24]
 800786c:	b90b      	cbnz	r3, 8007872 <_fflush_r+0x1a>
 800786e:	f000 f887 	bl	8007980 <__sinit>
 8007872:	4b14      	ldr	r3, [pc, #80]	; (80078c4 <_fflush_r+0x6c>)
 8007874:	429c      	cmp	r4, r3
 8007876:	d11b      	bne.n	80078b0 <_fflush_r+0x58>
 8007878:	686c      	ldr	r4, [r5, #4]
 800787a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d0ef      	beq.n	8007862 <_fflush_r+0xa>
 8007882:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007884:	07d0      	lsls	r0, r2, #31
 8007886:	d404      	bmi.n	8007892 <_fflush_r+0x3a>
 8007888:	0599      	lsls	r1, r3, #22
 800788a:	d402      	bmi.n	8007892 <_fflush_r+0x3a>
 800788c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800788e:	f000 f915 	bl	8007abc <__retarget_lock_acquire_recursive>
 8007892:	4628      	mov	r0, r5
 8007894:	4621      	mov	r1, r4
 8007896:	f7ff ff59 	bl	800774c <__sflush_r>
 800789a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800789c:	07da      	lsls	r2, r3, #31
 800789e:	4605      	mov	r5, r0
 80078a0:	d4e0      	bmi.n	8007864 <_fflush_r+0xc>
 80078a2:	89a3      	ldrh	r3, [r4, #12]
 80078a4:	059b      	lsls	r3, r3, #22
 80078a6:	d4dd      	bmi.n	8007864 <_fflush_r+0xc>
 80078a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078aa:	f000 f908 	bl	8007abe <__retarget_lock_release_recursive>
 80078ae:	e7d9      	b.n	8007864 <_fflush_r+0xc>
 80078b0:	4b05      	ldr	r3, [pc, #20]	; (80078c8 <_fflush_r+0x70>)
 80078b2:	429c      	cmp	r4, r3
 80078b4:	d101      	bne.n	80078ba <_fflush_r+0x62>
 80078b6:	68ac      	ldr	r4, [r5, #8]
 80078b8:	e7df      	b.n	800787a <_fflush_r+0x22>
 80078ba:	4b04      	ldr	r3, [pc, #16]	; (80078cc <_fflush_r+0x74>)
 80078bc:	429c      	cmp	r4, r3
 80078be:	bf08      	it	eq
 80078c0:	68ec      	ldreq	r4, [r5, #12]
 80078c2:	e7da      	b.n	800787a <_fflush_r+0x22>
 80078c4:	08008958 	.word	0x08008958
 80078c8:	08008978 	.word	0x08008978
 80078cc:	08008938 	.word	0x08008938

080078d0 <std>:
 80078d0:	2300      	movs	r3, #0
 80078d2:	b510      	push	{r4, lr}
 80078d4:	4604      	mov	r4, r0
 80078d6:	e9c0 3300 	strd	r3, r3, [r0]
 80078da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80078de:	6083      	str	r3, [r0, #8]
 80078e0:	8181      	strh	r1, [r0, #12]
 80078e2:	6643      	str	r3, [r0, #100]	; 0x64
 80078e4:	81c2      	strh	r2, [r0, #14]
 80078e6:	6183      	str	r3, [r0, #24]
 80078e8:	4619      	mov	r1, r3
 80078ea:	2208      	movs	r2, #8
 80078ec:	305c      	adds	r0, #92	; 0x5c
 80078ee:	f7ff fa3d 	bl	8006d6c <memset>
 80078f2:	4b05      	ldr	r3, [pc, #20]	; (8007908 <std+0x38>)
 80078f4:	6263      	str	r3, [r4, #36]	; 0x24
 80078f6:	4b05      	ldr	r3, [pc, #20]	; (800790c <std+0x3c>)
 80078f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80078fa:	4b05      	ldr	r3, [pc, #20]	; (8007910 <std+0x40>)
 80078fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80078fe:	4b05      	ldr	r3, [pc, #20]	; (8007914 <std+0x44>)
 8007900:	6224      	str	r4, [r4, #32]
 8007902:	6323      	str	r3, [r4, #48]	; 0x30
 8007904:	bd10      	pop	{r4, pc}
 8007906:	bf00      	nop
 8007908:	08007c29 	.word	0x08007c29
 800790c:	08007c4b 	.word	0x08007c4b
 8007910:	08007c83 	.word	0x08007c83
 8007914:	08007ca7 	.word	0x08007ca7

08007918 <_cleanup_r>:
 8007918:	4901      	ldr	r1, [pc, #4]	; (8007920 <_cleanup_r+0x8>)
 800791a:	f000 b8af 	b.w	8007a7c <_fwalk_reent>
 800791e:	bf00      	nop
 8007920:	08007859 	.word	0x08007859

08007924 <__sfmoreglue>:
 8007924:	b570      	push	{r4, r5, r6, lr}
 8007926:	1e4a      	subs	r2, r1, #1
 8007928:	2568      	movs	r5, #104	; 0x68
 800792a:	4355      	muls	r5, r2
 800792c:	460e      	mov	r6, r1
 800792e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007932:	f7ff faeb 	bl	8006f0c <_malloc_r>
 8007936:	4604      	mov	r4, r0
 8007938:	b140      	cbz	r0, 800794c <__sfmoreglue+0x28>
 800793a:	2100      	movs	r1, #0
 800793c:	e9c0 1600 	strd	r1, r6, [r0]
 8007940:	300c      	adds	r0, #12
 8007942:	60a0      	str	r0, [r4, #8]
 8007944:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007948:	f7ff fa10 	bl	8006d6c <memset>
 800794c:	4620      	mov	r0, r4
 800794e:	bd70      	pop	{r4, r5, r6, pc}

08007950 <__sfp_lock_acquire>:
 8007950:	4801      	ldr	r0, [pc, #4]	; (8007958 <__sfp_lock_acquire+0x8>)
 8007952:	f000 b8b3 	b.w	8007abc <__retarget_lock_acquire_recursive>
 8007956:	bf00      	nop
 8007958:	20000548 	.word	0x20000548

0800795c <__sfp_lock_release>:
 800795c:	4801      	ldr	r0, [pc, #4]	; (8007964 <__sfp_lock_release+0x8>)
 800795e:	f000 b8ae 	b.w	8007abe <__retarget_lock_release_recursive>
 8007962:	bf00      	nop
 8007964:	20000548 	.word	0x20000548

08007968 <__sinit_lock_acquire>:
 8007968:	4801      	ldr	r0, [pc, #4]	; (8007970 <__sinit_lock_acquire+0x8>)
 800796a:	f000 b8a7 	b.w	8007abc <__retarget_lock_acquire_recursive>
 800796e:	bf00      	nop
 8007970:	20000543 	.word	0x20000543

08007974 <__sinit_lock_release>:
 8007974:	4801      	ldr	r0, [pc, #4]	; (800797c <__sinit_lock_release+0x8>)
 8007976:	f000 b8a2 	b.w	8007abe <__retarget_lock_release_recursive>
 800797a:	bf00      	nop
 800797c:	20000543 	.word	0x20000543

08007980 <__sinit>:
 8007980:	b510      	push	{r4, lr}
 8007982:	4604      	mov	r4, r0
 8007984:	f7ff fff0 	bl	8007968 <__sinit_lock_acquire>
 8007988:	69a3      	ldr	r3, [r4, #24]
 800798a:	b11b      	cbz	r3, 8007994 <__sinit+0x14>
 800798c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007990:	f7ff bff0 	b.w	8007974 <__sinit_lock_release>
 8007994:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007998:	6523      	str	r3, [r4, #80]	; 0x50
 800799a:	4b13      	ldr	r3, [pc, #76]	; (80079e8 <__sinit+0x68>)
 800799c:	4a13      	ldr	r2, [pc, #76]	; (80079ec <__sinit+0x6c>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80079a2:	42a3      	cmp	r3, r4
 80079a4:	bf04      	itt	eq
 80079a6:	2301      	moveq	r3, #1
 80079a8:	61a3      	streq	r3, [r4, #24]
 80079aa:	4620      	mov	r0, r4
 80079ac:	f000 f820 	bl	80079f0 <__sfp>
 80079b0:	6060      	str	r0, [r4, #4]
 80079b2:	4620      	mov	r0, r4
 80079b4:	f000 f81c 	bl	80079f0 <__sfp>
 80079b8:	60a0      	str	r0, [r4, #8]
 80079ba:	4620      	mov	r0, r4
 80079bc:	f000 f818 	bl	80079f0 <__sfp>
 80079c0:	2200      	movs	r2, #0
 80079c2:	60e0      	str	r0, [r4, #12]
 80079c4:	2104      	movs	r1, #4
 80079c6:	6860      	ldr	r0, [r4, #4]
 80079c8:	f7ff ff82 	bl	80078d0 <std>
 80079cc:	68a0      	ldr	r0, [r4, #8]
 80079ce:	2201      	movs	r2, #1
 80079d0:	2109      	movs	r1, #9
 80079d2:	f7ff ff7d 	bl	80078d0 <std>
 80079d6:	68e0      	ldr	r0, [r4, #12]
 80079d8:	2202      	movs	r2, #2
 80079da:	2112      	movs	r1, #18
 80079dc:	f7ff ff78 	bl	80078d0 <std>
 80079e0:	2301      	movs	r3, #1
 80079e2:	61a3      	str	r3, [r4, #24]
 80079e4:	e7d2      	b.n	800798c <__sinit+0xc>
 80079e6:	bf00      	nop
 80079e8:	0800884c 	.word	0x0800884c
 80079ec:	08007919 	.word	0x08007919

080079f0 <__sfp>:
 80079f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079f2:	4607      	mov	r7, r0
 80079f4:	f7ff ffac 	bl	8007950 <__sfp_lock_acquire>
 80079f8:	4b1e      	ldr	r3, [pc, #120]	; (8007a74 <__sfp+0x84>)
 80079fa:	681e      	ldr	r6, [r3, #0]
 80079fc:	69b3      	ldr	r3, [r6, #24]
 80079fe:	b913      	cbnz	r3, 8007a06 <__sfp+0x16>
 8007a00:	4630      	mov	r0, r6
 8007a02:	f7ff ffbd 	bl	8007980 <__sinit>
 8007a06:	3648      	adds	r6, #72	; 0x48
 8007a08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007a0c:	3b01      	subs	r3, #1
 8007a0e:	d503      	bpl.n	8007a18 <__sfp+0x28>
 8007a10:	6833      	ldr	r3, [r6, #0]
 8007a12:	b30b      	cbz	r3, 8007a58 <__sfp+0x68>
 8007a14:	6836      	ldr	r6, [r6, #0]
 8007a16:	e7f7      	b.n	8007a08 <__sfp+0x18>
 8007a18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007a1c:	b9d5      	cbnz	r5, 8007a54 <__sfp+0x64>
 8007a1e:	4b16      	ldr	r3, [pc, #88]	; (8007a78 <__sfp+0x88>)
 8007a20:	60e3      	str	r3, [r4, #12]
 8007a22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007a26:	6665      	str	r5, [r4, #100]	; 0x64
 8007a28:	f000 f847 	bl	8007aba <__retarget_lock_init_recursive>
 8007a2c:	f7ff ff96 	bl	800795c <__sfp_lock_release>
 8007a30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007a34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007a38:	6025      	str	r5, [r4, #0]
 8007a3a:	61a5      	str	r5, [r4, #24]
 8007a3c:	2208      	movs	r2, #8
 8007a3e:	4629      	mov	r1, r5
 8007a40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007a44:	f7ff f992 	bl	8006d6c <memset>
 8007a48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007a4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007a50:	4620      	mov	r0, r4
 8007a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a54:	3468      	adds	r4, #104	; 0x68
 8007a56:	e7d9      	b.n	8007a0c <__sfp+0x1c>
 8007a58:	2104      	movs	r1, #4
 8007a5a:	4638      	mov	r0, r7
 8007a5c:	f7ff ff62 	bl	8007924 <__sfmoreglue>
 8007a60:	4604      	mov	r4, r0
 8007a62:	6030      	str	r0, [r6, #0]
 8007a64:	2800      	cmp	r0, #0
 8007a66:	d1d5      	bne.n	8007a14 <__sfp+0x24>
 8007a68:	f7ff ff78 	bl	800795c <__sfp_lock_release>
 8007a6c:	230c      	movs	r3, #12
 8007a6e:	603b      	str	r3, [r7, #0]
 8007a70:	e7ee      	b.n	8007a50 <__sfp+0x60>
 8007a72:	bf00      	nop
 8007a74:	0800884c 	.word	0x0800884c
 8007a78:	ffff0001 	.word	0xffff0001

08007a7c <_fwalk_reent>:
 8007a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a80:	4606      	mov	r6, r0
 8007a82:	4688      	mov	r8, r1
 8007a84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007a88:	2700      	movs	r7, #0
 8007a8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a8e:	f1b9 0901 	subs.w	r9, r9, #1
 8007a92:	d505      	bpl.n	8007aa0 <_fwalk_reent+0x24>
 8007a94:	6824      	ldr	r4, [r4, #0]
 8007a96:	2c00      	cmp	r4, #0
 8007a98:	d1f7      	bne.n	8007a8a <_fwalk_reent+0xe>
 8007a9a:	4638      	mov	r0, r7
 8007a9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007aa0:	89ab      	ldrh	r3, [r5, #12]
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d907      	bls.n	8007ab6 <_fwalk_reent+0x3a>
 8007aa6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007aaa:	3301      	adds	r3, #1
 8007aac:	d003      	beq.n	8007ab6 <_fwalk_reent+0x3a>
 8007aae:	4629      	mov	r1, r5
 8007ab0:	4630      	mov	r0, r6
 8007ab2:	47c0      	blx	r8
 8007ab4:	4307      	orrs	r7, r0
 8007ab6:	3568      	adds	r5, #104	; 0x68
 8007ab8:	e7e9      	b.n	8007a8e <_fwalk_reent+0x12>

08007aba <__retarget_lock_init_recursive>:
 8007aba:	4770      	bx	lr

08007abc <__retarget_lock_acquire_recursive>:
 8007abc:	4770      	bx	lr

08007abe <__retarget_lock_release_recursive>:
 8007abe:	4770      	bx	lr

08007ac0 <__swhatbuf_r>:
 8007ac0:	b570      	push	{r4, r5, r6, lr}
 8007ac2:	460e      	mov	r6, r1
 8007ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ac8:	2900      	cmp	r1, #0
 8007aca:	b096      	sub	sp, #88	; 0x58
 8007acc:	4614      	mov	r4, r2
 8007ace:	461d      	mov	r5, r3
 8007ad0:	da07      	bge.n	8007ae2 <__swhatbuf_r+0x22>
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	602b      	str	r3, [r5, #0]
 8007ad6:	89b3      	ldrh	r3, [r6, #12]
 8007ad8:	061a      	lsls	r2, r3, #24
 8007ada:	d410      	bmi.n	8007afe <__swhatbuf_r+0x3e>
 8007adc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ae0:	e00e      	b.n	8007b00 <__swhatbuf_r+0x40>
 8007ae2:	466a      	mov	r2, sp
 8007ae4:	f000 f906 	bl	8007cf4 <_fstat_r>
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	dbf2      	blt.n	8007ad2 <__swhatbuf_r+0x12>
 8007aec:	9a01      	ldr	r2, [sp, #4]
 8007aee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007af2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007af6:	425a      	negs	r2, r3
 8007af8:	415a      	adcs	r2, r3
 8007afa:	602a      	str	r2, [r5, #0]
 8007afc:	e7ee      	b.n	8007adc <__swhatbuf_r+0x1c>
 8007afe:	2340      	movs	r3, #64	; 0x40
 8007b00:	2000      	movs	r0, #0
 8007b02:	6023      	str	r3, [r4, #0]
 8007b04:	b016      	add	sp, #88	; 0x58
 8007b06:	bd70      	pop	{r4, r5, r6, pc}

08007b08 <__smakebuf_r>:
 8007b08:	898b      	ldrh	r3, [r1, #12]
 8007b0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b0c:	079d      	lsls	r5, r3, #30
 8007b0e:	4606      	mov	r6, r0
 8007b10:	460c      	mov	r4, r1
 8007b12:	d507      	bpl.n	8007b24 <__smakebuf_r+0x1c>
 8007b14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b18:	6023      	str	r3, [r4, #0]
 8007b1a:	6123      	str	r3, [r4, #16]
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	6163      	str	r3, [r4, #20]
 8007b20:	b002      	add	sp, #8
 8007b22:	bd70      	pop	{r4, r5, r6, pc}
 8007b24:	ab01      	add	r3, sp, #4
 8007b26:	466a      	mov	r2, sp
 8007b28:	f7ff ffca 	bl	8007ac0 <__swhatbuf_r>
 8007b2c:	9900      	ldr	r1, [sp, #0]
 8007b2e:	4605      	mov	r5, r0
 8007b30:	4630      	mov	r0, r6
 8007b32:	f7ff f9eb 	bl	8006f0c <_malloc_r>
 8007b36:	b948      	cbnz	r0, 8007b4c <__smakebuf_r+0x44>
 8007b38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b3c:	059a      	lsls	r2, r3, #22
 8007b3e:	d4ef      	bmi.n	8007b20 <__smakebuf_r+0x18>
 8007b40:	f023 0303 	bic.w	r3, r3, #3
 8007b44:	f043 0302 	orr.w	r3, r3, #2
 8007b48:	81a3      	strh	r3, [r4, #12]
 8007b4a:	e7e3      	b.n	8007b14 <__smakebuf_r+0xc>
 8007b4c:	4b0d      	ldr	r3, [pc, #52]	; (8007b84 <__smakebuf_r+0x7c>)
 8007b4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007b50:	89a3      	ldrh	r3, [r4, #12]
 8007b52:	6020      	str	r0, [r4, #0]
 8007b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b58:	81a3      	strh	r3, [r4, #12]
 8007b5a:	9b00      	ldr	r3, [sp, #0]
 8007b5c:	6163      	str	r3, [r4, #20]
 8007b5e:	9b01      	ldr	r3, [sp, #4]
 8007b60:	6120      	str	r0, [r4, #16]
 8007b62:	b15b      	cbz	r3, 8007b7c <__smakebuf_r+0x74>
 8007b64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b68:	4630      	mov	r0, r6
 8007b6a:	f000 f8d5 	bl	8007d18 <_isatty_r>
 8007b6e:	b128      	cbz	r0, 8007b7c <__smakebuf_r+0x74>
 8007b70:	89a3      	ldrh	r3, [r4, #12]
 8007b72:	f023 0303 	bic.w	r3, r3, #3
 8007b76:	f043 0301 	orr.w	r3, r3, #1
 8007b7a:	81a3      	strh	r3, [r4, #12]
 8007b7c:	89a0      	ldrh	r0, [r4, #12]
 8007b7e:	4305      	orrs	r5, r0
 8007b80:	81a5      	strh	r5, [r4, #12]
 8007b82:	e7cd      	b.n	8007b20 <__smakebuf_r+0x18>
 8007b84:	08007919 	.word	0x08007919

08007b88 <__malloc_lock>:
 8007b88:	4801      	ldr	r0, [pc, #4]	; (8007b90 <__malloc_lock+0x8>)
 8007b8a:	f7ff bf97 	b.w	8007abc <__retarget_lock_acquire_recursive>
 8007b8e:	bf00      	nop
 8007b90:	20000544 	.word	0x20000544

08007b94 <__malloc_unlock>:
 8007b94:	4801      	ldr	r0, [pc, #4]	; (8007b9c <__malloc_unlock+0x8>)
 8007b96:	f7ff bf92 	b.w	8007abe <__retarget_lock_release_recursive>
 8007b9a:	bf00      	nop
 8007b9c:	20000544 	.word	0x20000544

08007ba0 <_raise_r>:
 8007ba0:	291f      	cmp	r1, #31
 8007ba2:	b538      	push	{r3, r4, r5, lr}
 8007ba4:	4604      	mov	r4, r0
 8007ba6:	460d      	mov	r5, r1
 8007ba8:	d904      	bls.n	8007bb4 <_raise_r+0x14>
 8007baa:	2316      	movs	r3, #22
 8007bac:	6003      	str	r3, [r0, #0]
 8007bae:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb2:	bd38      	pop	{r3, r4, r5, pc}
 8007bb4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007bb6:	b112      	cbz	r2, 8007bbe <_raise_r+0x1e>
 8007bb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007bbc:	b94b      	cbnz	r3, 8007bd2 <_raise_r+0x32>
 8007bbe:	4620      	mov	r0, r4
 8007bc0:	f000 f830 	bl	8007c24 <_getpid_r>
 8007bc4:	462a      	mov	r2, r5
 8007bc6:	4601      	mov	r1, r0
 8007bc8:	4620      	mov	r0, r4
 8007bca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bce:	f000 b817 	b.w	8007c00 <_kill_r>
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d00a      	beq.n	8007bec <_raise_r+0x4c>
 8007bd6:	1c59      	adds	r1, r3, #1
 8007bd8:	d103      	bne.n	8007be2 <_raise_r+0x42>
 8007bda:	2316      	movs	r3, #22
 8007bdc:	6003      	str	r3, [r0, #0]
 8007bde:	2001      	movs	r0, #1
 8007be0:	e7e7      	b.n	8007bb2 <_raise_r+0x12>
 8007be2:	2400      	movs	r4, #0
 8007be4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007be8:	4628      	mov	r0, r5
 8007bea:	4798      	blx	r3
 8007bec:	2000      	movs	r0, #0
 8007bee:	e7e0      	b.n	8007bb2 <_raise_r+0x12>

08007bf0 <raise>:
 8007bf0:	4b02      	ldr	r3, [pc, #8]	; (8007bfc <raise+0xc>)
 8007bf2:	4601      	mov	r1, r0
 8007bf4:	6818      	ldr	r0, [r3, #0]
 8007bf6:	f7ff bfd3 	b.w	8007ba0 <_raise_r>
 8007bfa:	bf00      	nop
 8007bfc:	2000000c 	.word	0x2000000c

08007c00 <_kill_r>:
 8007c00:	b538      	push	{r3, r4, r5, lr}
 8007c02:	4d07      	ldr	r5, [pc, #28]	; (8007c20 <_kill_r+0x20>)
 8007c04:	2300      	movs	r3, #0
 8007c06:	4604      	mov	r4, r0
 8007c08:	4608      	mov	r0, r1
 8007c0a:	4611      	mov	r1, r2
 8007c0c:	602b      	str	r3, [r5, #0]
 8007c0e:	f7f8 fddf 	bl	80007d0 <_kill>
 8007c12:	1c43      	adds	r3, r0, #1
 8007c14:	d102      	bne.n	8007c1c <_kill_r+0x1c>
 8007c16:	682b      	ldr	r3, [r5, #0]
 8007c18:	b103      	cbz	r3, 8007c1c <_kill_r+0x1c>
 8007c1a:	6023      	str	r3, [r4, #0]
 8007c1c:	bd38      	pop	{r3, r4, r5, pc}
 8007c1e:	bf00      	nop
 8007c20:	2000054c 	.word	0x2000054c

08007c24 <_getpid_r>:
 8007c24:	f7f8 bdcc 	b.w	80007c0 <_getpid>

08007c28 <__sread>:
 8007c28:	b510      	push	{r4, lr}
 8007c2a:	460c      	mov	r4, r1
 8007c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c30:	f000 f894 	bl	8007d5c <_read_r>
 8007c34:	2800      	cmp	r0, #0
 8007c36:	bfab      	itete	ge
 8007c38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007c3a:	89a3      	ldrhlt	r3, [r4, #12]
 8007c3c:	181b      	addge	r3, r3, r0
 8007c3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007c42:	bfac      	ite	ge
 8007c44:	6563      	strge	r3, [r4, #84]	; 0x54
 8007c46:	81a3      	strhlt	r3, [r4, #12]
 8007c48:	bd10      	pop	{r4, pc}

08007c4a <__swrite>:
 8007c4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c4e:	461f      	mov	r7, r3
 8007c50:	898b      	ldrh	r3, [r1, #12]
 8007c52:	05db      	lsls	r3, r3, #23
 8007c54:	4605      	mov	r5, r0
 8007c56:	460c      	mov	r4, r1
 8007c58:	4616      	mov	r6, r2
 8007c5a:	d505      	bpl.n	8007c68 <__swrite+0x1e>
 8007c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c60:	2302      	movs	r3, #2
 8007c62:	2200      	movs	r2, #0
 8007c64:	f000 f868 	bl	8007d38 <_lseek_r>
 8007c68:	89a3      	ldrh	r3, [r4, #12]
 8007c6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c72:	81a3      	strh	r3, [r4, #12]
 8007c74:	4632      	mov	r2, r6
 8007c76:	463b      	mov	r3, r7
 8007c78:	4628      	mov	r0, r5
 8007c7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c7e:	f000 b817 	b.w	8007cb0 <_write_r>

08007c82 <__sseek>:
 8007c82:	b510      	push	{r4, lr}
 8007c84:	460c      	mov	r4, r1
 8007c86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c8a:	f000 f855 	bl	8007d38 <_lseek_r>
 8007c8e:	1c43      	adds	r3, r0, #1
 8007c90:	89a3      	ldrh	r3, [r4, #12]
 8007c92:	bf15      	itete	ne
 8007c94:	6560      	strne	r0, [r4, #84]	; 0x54
 8007c96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007c9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007c9e:	81a3      	strheq	r3, [r4, #12]
 8007ca0:	bf18      	it	ne
 8007ca2:	81a3      	strhne	r3, [r4, #12]
 8007ca4:	bd10      	pop	{r4, pc}

08007ca6 <__sclose>:
 8007ca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007caa:	f000 b813 	b.w	8007cd4 <_close_r>
	...

08007cb0 <_write_r>:
 8007cb0:	b538      	push	{r3, r4, r5, lr}
 8007cb2:	4d07      	ldr	r5, [pc, #28]	; (8007cd0 <_write_r+0x20>)
 8007cb4:	4604      	mov	r4, r0
 8007cb6:	4608      	mov	r0, r1
 8007cb8:	4611      	mov	r1, r2
 8007cba:	2200      	movs	r2, #0
 8007cbc:	602a      	str	r2, [r5, #0]
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	f7f8 fafd 	bl	80002be <_write>
 8007cc4:	1c43      	adds	r3, r0, #1
 8007cc6:	d102      	bne.n	8007cce <_write_r+0x1e>
 8007cc8:	682b      	ldr	r3, [r5, #0]
 8007cca:	b103      	cbz	r3, 8007cce <_write_r+0x1e>
 8007ccc:	6023      	str	r3, [r4, #0]
 8007cce:	bd38      	pop	{r3, r4, r5, pc}
 8007cd0:	2000054c 	.word	0x2000054c

08007cd4 <_close_r>:
 8007cd4:	b538      	push	{r3, r4, r5, lr}
 8007cd6:	4d06      	ldr	r5, [pc, #24]	; (8007cf0 <_close_r+0x1c>)
 8007cd8:	2300      	movs	r3, #0
 8007cda:	4604      	mov	r4, r0
 8007cdc:	4608      	mov	r0, r1
 8007cde:	602b      	str	r3, [r5, #0]
 8007ce0:	f7f8 fdad 	bl	800083e <_close>
 8007ce4:	1c43      	adds	r3, r0, #1
 8007ce6:	d102      	bne.n	8007cee <_close_r+0x1a>
 8007ce8:	682b      	ldr	r3, [r5, #0]
 8007cea:	b103      	cbz	r3, 8007cee <_close_r+0x1a>
 8007cec:	6023      	str	r3, [r4, #0]
 8007cee:	bd38      	pop	{r3, r4, r5, pc}
 8007cf0:	2000054c 	.word	0x2000054c

08007cf4 <_fstat_r>:
 8007cf4:	b538      	push	{r3, r4, r5, lr}
 8007cf6:	4d07      	ldr	r5, [pc, #28]	; (8007d14 <_fstat_r+0x20>)
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	4604      	mov	r4, r0
 8007cfc:	4608      	mov	r0, r1
 8007cfe:	4611      	mov	r1, r2
 8007d00:	602b      	str	r3, [r5, #0]
 8007d02:	f7f8 fda8 	bl	8000856 <_fstat>
 8007d06:	1c43      	adds	r3, r0, #1
 8007d08:	d102      	bne.n	8007d10 <_fstat_r+0x1c>
 8007d0a:	682b      	ldr	r3, [r5, #0]
 8007d0c:	b103      	cbz	r3, 8007d10 <_fstat_r+0x1c>
 8007d0e:	6023      	str	r3, [r4, #0]
 8007d10:	bd38      	pop	{r3, r4, r5, pc}
 8007d12:	bf00      	nop
 8007d14:	2000054c 	.word	0x2000054c

08007d18 <_isatty_r>:
 8007d18:	b538      	push	{r3, r4, r5, lr}
 8007d1a:	4d06      	ldr	r5, [pc, #24]	; (8007d34 <_isatty_r+0x1c>)
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	4604      	mov	r4, r0
 8007d20:	4608      	mov	r0, r1
 8007d22:	602b      	str	r3, [r5, #0]
 8007d24:	f7f8 fda7 	bl	8000876 <_isatty>
 8007d28:	1c43      	adds	r3, r0, #1
 8007d2a:	d102      	bne.n	8007d32 <_isatty_r+0x1a>
 8007d2c:	682b      	ldr	r3, [r5, #0]
 8007d2e:	b103      	cbz	r3, 8007d32 <_isatty_r+0x1a>
 8007d30:	6023      	str	r3, [r4, #0]
 8007d32:	bd38      	pop	{r3, r4, r5, pc}
 8007d34:	2000054c 	.word	0x2000054c

08007d38 <_lseek_r>:
 8007d38:	b538      	push	{r3, r4, r5, lr}
 8007d3a:	4d07      	ldr	r5, [pc, #28]	; (8007d58 <_lseek_r+0x20>)
 8007d3c:	4604      	mov	r4, r0
 8007d3e:	4608      	mov	r0, r1
 8007d40:	4611      	mov	r1, r2
 8007d42:	2200      	movs	r2, #0
 8007d44:	602a      	str	r2, [r5, #0]
 8007d46:	461a      	mov	r2, r3
 8007d48:	f7f8 fda0 	bl	800088c <_lseek>
 8007d4c:	1c43      	adds	r3, r0, #1
 8007d4e:	d102      	bne.n	8007d56 <_lseek_r+0x1e>
 8007d50:	682b      	ldr	r3, [r5, #0]
 8007d52:	b103      	cbz	r3, 8007d56 <_lseek_r+0x1e>
 8007d54:	6023      	str	r3, [r4, #0]
 8007d56:	bd38      	pop	{r3, r4, r5, pc}
 8007d58:	2000054c 	.word	0x2000054c

08007d5c <_read_r>:
 8007d5c:	b538      	push	{r3, r4, r5, lr}
 8007d5e:	4d07      	ldr	r5, [pc, #28]	; (8007d7c <_read_r+0x20>)
 8007d60:	4604      	mov	r4, r0
 8007d62:	4608      	mov	r0, r1
 8007d64:	4611      	mov	r1, r2
 8007d66:	2200      	movs	r2, #0
 8007d68:	602a      	str	r2, [r5, #0]
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	f7f8 fd4a 	bl	8000804 <_read>
 8007d70:	1c43      	adds	r3, r0, #1
 8007d72:	d102      	bne.n	8007d7a <_read_r+0x1e>
 8007d74:	682b      	ldr	r3, [r5, #0]
 8007d76:	b103      	cbz	r3, 8007d7a <_read_r+0x1e>
 8007d78:	6023      	str	r3, [r4, #0]
 8007d7a:	bd38      	pop	{r3, r4, r5, pc}
 8007d7c:	2000054c 	.word	0x2000054c

08007d80 <_init>:
 8007d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d82:	bf00      	nop
 8007d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d86:	bc08      	pop	{r3}
 8007d88:	469e      	mov	lr, r3
 8007d8a:	4770      	bx	lr

08007d8c <_fini>:
 8007d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d8e:	bf00      	nop
 8007d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d92:	bc08      	pop	{r3}
 8007d94:	469e      	mov	lr, r3
 8007d96:	4770      	bx	lr
