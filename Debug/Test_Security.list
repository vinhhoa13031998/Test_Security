
Test_Security.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a9c  08008984  08008984  00018984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009420  08009420  0002021c  2**0
                  CONTENTS
  4 .ARM          00000000  08009420  08009420  0002021c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009420  08009420  0002021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009420  08009420  00019420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009424  08009424  00019424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000021c  20000000  08009428  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b6c  2000021c  08009644  0002021c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d88  08009644  00021d88  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019224  00000000  00000000  0002024a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039cb  00000000  00000000  0003946e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  0003ce40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d90  00000000  00000000  0003dd58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000059b6  00000000  00000000  0003eae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013401  00000000  00000000  0004449e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e95b4  00000000  00000000  0005789f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000d5  00000000  00000000  00140e53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004394  00000000  00000000  00140f28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000021c 	.word	0x2000021c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800896c 	.word	0x0800896c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000220 	.word	0x20000220
 80001cc:	0800896c 	.word	0x0800896c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000278:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800027c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000280:	f003 0301 	and.w	r3, r3, #1
 8000284:	2b00      	cmp	r3, #0
 8000286:	d013      	beq.n	80002b0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000288:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800028c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000290:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000294:	2b00      	cmp	r3, #0
 8000296:	d00b      	beq.n	80002b0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000298:	e000      	b.n	800029c <ITM_SendChar+0x2c>
    {
      __NOP();
 800029a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800029c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d0f9      	beq.n	800029a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002a6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002aa:	687a      	ldr	r2, [r7, #4]
 80002ac:	b2d2      	uxtb	r2, r2
 80002ae:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80002b0:	687b      	ldr	r3, [r7, #4]
}
 80002b2:	4618      	mov	r0, r3
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr

080002be <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80002be:	b580      	push	{r7, lr}
 80002c0:	b086      	sub	sp, #24
 80002c2:	af00      	add	r7, sp, #0
 80002c4:	60f8      	str	r0, [r7, #12]
 80002c6:	60b9      	str	r1, [r7, #8]
 80002c8:	607a      	str	r2, [r7, #4]
	int i=0;
 80002ca:	2300      	movs	r3, #0
 80002cc:	617b      	str	r3, [r7, #20]
	for (i = 0; i<len; i++)
 80002ce:	2300      	movs	r3, #0
 80002d0:	617b      	str	r3, [r7, #20]
 80002d2:	e009      	b.n	80002e8 <_write+0x2a>
		ITM_SendChar((*ptr++));
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	1c5a      	adds	r2, r3, #1
 80002d8:	60ba      	str	r2, [r7, #8]
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	4618      	mov	r0, r3
 80002de:	f7ff ffc7 	bl	8000270 <ITM_SendChar>
	for (i = 0; i<len; i++)
 80002e2:	697b      	ldr	r3, [r7, #20]
 80002e4:	3301      	adds	r3, #1
 80002e6:	617b      	str	r3, [r7, #20]
 80002e8:	697a      	ldr	r2, [r7, #20]
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	429a      	cmp	r2, r3
 80002ee:	dbf1      	blt.n	80002d4 <_write+0x16>
	return len;
 80002f0:	687b      	ldr	r3, [r7, #4]
}
 80002f2:	4618      	mov	r0, r3
 80002f4:	3718      	adds	r7, #24
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
	...

080002fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b098      	sub	sp, #96	; 0x60
 8000300:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000302:	f000 fae8 	bl	80008d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000306:	f000 f851 	bl	80003ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800030a:	f000 f8ef 	bl	80004ec <MX_GPIO_Init>
  MX_RNG_Init();
 800030e:	f000 f8d9 	bl	80004c4 <MX_RNG_Init>
  MX_USB_DEVICE_Init();
 8000312:	f006 f8e5 	bl	80064e0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  /* Encrypt data */


  //Enable CRC clock
  SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_CRCEN);
 8000316:	4b1f      	ldr	r3, [pc, #124]	; (8000394 <main+0x98>)
 8000318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800031a:	4a1e      	ldr	r2, [pc, #120]	; (8000394 <main+0x98>)
 800031c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000320:	6493      	str	r3, [r2, #72]	; 0x48

  if (__HAL_RCC_CRC_IS_CLK_ENABLED())
 8000322:	4b1c      	ldr	r3, [pc, #112]	; (8000394 <main+0x98>)
 8000324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000326:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800032a:	2b00      	cmp	r3, #0
 800032c:	d002      	beq.n	8000334 <main+0x38>
  {
	  printf("Hello World!\n");
 800032e:	481a      	ldr	r0, [pc, #104]	; (8000398 <main+0x9c>)
 8000330:	f007 fbd6 	bl	8007ae0 <puts>

  /* Buffer to store the output data */
  uint8_t OutputMessage[PLAINTEXT_LENGTH];

  /* Size of the output data */
  uint32_t OutputMessageLength = 0;
 8000334:	2300      	movs	r3, #0
 8000336:	607b      	str	r3, [r7, #4]

  int32_t status;

  status = STM32_AES_CBC_Encrypt( (uint8_t *) Plaintext, PLAINTEXT_LENGTH, Sym_Key, IV, sizeof(IV), OutputMessage,
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	9302      	str	r3, [sp, #8]
 800033c:	f107 0308 	add.w	r3, r7, #8
 8000340:	9301      	str	r3, [sp, #4]
 8000342:	2310      	movs	r3, #16
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	4b15      	ldr	r3, [pc, #84]	; (800039c <main+0xa0>)
 8000348:	4a15      	ldr	r2, [pc, #84]	; (80003a0 <main+0xa4>)
 800034a:	2140      	movs	r1, #64	; 0x40
 800034c:	4815      	ldr	r0, [pc, #84]	; (80003a4 <main+0xa8>)
 800034e:	f000 f90b 	bl	8000568 <STM32_AES_CBC_Encrypt>
 8000352:	64b8      	str	r0, [r7, #72]	; 0x48
                                  &OutputMessageLength);
  if(status == AES_SUCCESS)
 8000354:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000356:	2b00      	cmp	r3, #0
 8000358:	d112      	bne.n	8000380 <main+0x84>
  {
	  for (int i = 0; i<OutputMessageLength ; i++)
 800035a:	2300      	movs	r3, #0
 800035c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800035e:	e00b      	b.n	8000378 <main+0x7c>
	  {
		  printf("%d",OutputMessage[i]);
 8000360:	f107 0208 	add.w	r2, r7, #8
 8000364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000366:	4413      	add	r3, r2
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	4619      	mov	r1, r3
 800036c:	480e      	ldr	r0, [pc, #56]	; (80003a8 <main+0xac>)
 800036e:	f007 fb31 	bl	80079d4 <iprintf>
	  for (int i = 0; i<OutputMessageLength ; i++)
 8000372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000374:	3301      	adds	r3, #1
 8000376:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000378:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	429a      	cmp	r2, r3
 800037e:	d3ef      	bcc.n	8000360 <main+0x64>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000380:	2120      	movs	r1, #32
 8000382:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000386:	f000 fe13 	bl	8000fb0 <HAL_GPIO_TogglePin>
	  HAL_Delay(2000);
 800038a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800038e:	f000 fb17 	bl	80009c0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000392:	e7f5      	b.n	8000380 <main+0x84>
 8000394:	40021000 	.word	0x40021000
 8000398:	08008984 	.word	0x08008984
 800039c:	20000018 	.word	0x20000018
 80003a0:	20000000 	.word	0x20000000
 80003a4:	080089e0 	.word	0x080089e0
 80003a8:	08008994 	.word	0x08008994

080003ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b0b8      	sub	sp, #224	; 0xe0
 80003b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003b2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80003b6:	2244      	movs	r2, #68	; 0x44
 80003b8:	2100      	movs	r1, #0
 80003ba:	4618      	mov	r0, r3
 80003bc:	f007 fb02 	bl	80079c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003c0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80003c4:	2200      	movs	r2, #0
 80003c6:	601a      	str	r2, [r3, #0]
 80003c8:	605a      	str	r2, [r3, #4]
 80003ca:	609a      	str	r2, [r3, #8]
 80003cc:	60da      	str	r2, [r3, #12]
 80003ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003d0:	463b      	mov	r3, r7
 80003d2:	2288      	movs	r2, #136	; 0x88
 80003d4:	2100      	movs	r1, #0
 80003d6:	4618      	mov	r0, r3
 80003d8:	f007 faf4 	bl	80079c4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80003dc:	2310      	movs	r3, #16
 80003de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80003e2:	2301      	movs	r3, #1
 80003e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80003e8:	2300      	movs	r3, #0
 80003ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80003ee:	2360      	movs	r3, #96	; 0x60
 80003f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003f4:	2302      	movs	r3, #2
 80003f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80003fa:	2301      	movs	r3, #1
 80003fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000400:	2301      	movs	r3, #1
 8000402:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000406:	2328      	movs	r3, #40	; 0x28
 8000408:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800040c:	2307      	movs	r3, #7
 800040e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000412:	2302      	movs	r3, #2
 8000414:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000418:	2302      	movs	r3, #2
 800041a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800041e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000422:	4618      	mov	r0, r3
 8000424:	f001 fef2 	bl	800220c <HAL_RCC_OscConfig>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800042e:	f000 f8f2 	bl	8000616 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000432:	230f      	movs	r3, #15
 8000434:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000438:	2303      	movs	r3, #3
 800043a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800043e:	2300      	movs	r3, #0
 8000440:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000444:	2300      	movs	r3, #0
 8000446:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800044a:	2300      	movs	r3, #0
 800044c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000450:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000454:	2104      	movs	r1, #4
 8000456:	4618      	mov	r0, r3
 8000458:	f002 fabe 	bl	80029d8 <HAL_RCC_ClockConfig>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000462:	f000 f8d8 	bl	8000616 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_RNG;
 8000466:	f44f 2384 	mov.w	r3, #270336	; 0x42000
 800046a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800046c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000470:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8000472:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000476:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000478:	2301      	movs	r3, #1
 800047a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800047c:	2301      	movs	r3, #1
 800047e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000480:	2318      	movs	r3, #24
 8000482:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000484:	2307      	movs	r3, #7
 8000486:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000488:	2302      	movs	r3, #2
 800048a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800048c:	2302      	movs	r3, #2
 800048e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000490:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000494:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000496:	463b      	mov	r3, r7
 8000498:	4618      	mov	r0, r3
 800049a:	f002 fc77 	bl	8002d8c <HAL_RCCEx_PeriphCLKConfig>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80004a4:	f000 f8b7 	bl	8000616 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80004a8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80004ac:	f001 fe48 	bl	8002140 <HAL_PWREx_ControlVoltageScaling>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <SystemClock_Config+0x10e>
  {
    Error_Handler();
 80004b6:	f000 f8ae 	bl	8000616 <Error_Handler>
  }
}
 80004ba:	bf00      	nop
 80004bc:	37e0      	adds	r7, #224	; 0xe0
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
	...

080004c4 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80004c8:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <MX_RNG_Init+0x20>)
 80004ca:	4a07      	ldr	r2, [pc, #28]	; (80004e8 <MX_RNG_Init+0x24>)
 80004cc:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80004ce:	4805      	ldr	r0, [pc, #20]	; (80004e4 <MX_RNG_Init+0x20>)
 80004d0:	f003 f918 	bl	8003704 <HAL_RNG_Init>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80004da:	f000 f89c 	bl	8000616 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	2000048c 	.word	0x2000048c
 80004e8:	50060800 	.word	0x50060800

080004ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b088      	sub	sp, #32
 80004f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f2:	f107 030c 	add.w	r3, r7, #12
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
 80004fa:	605a      	str	r2, [r3, #4]
 80004fc:	609a      	str	r2, [r3, #8]
 80004fe:	60da      	str	r2, [r3, #12]
 8000500:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000502:	4b18      	ldr	r3, [pc, #96]	; (8000564 <MX_GPIO_Init+0x78>)
 8000504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000506:	4a17      	ldr	r2, [pc, #92]	; (8000564 <MX_GPIO_Init+0x78>)
 8000508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800050c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800050e:	4b15      	ldr	r3, [pc, #84]	; (8000564 <MX_GPIO_Init+0x78>)
 8000510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000516:	60bb      	str	r3, [r7, #8]
 8000518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051a:	4b12      	ldr	r3, [pc, #72]	; (8000564 <MX_GPIO_Init+0x78>)
 800051c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051e:	4a11      	ldr	r2, [pc, #68]	; (8000564 <MX_GPIO_Init+0x78>)
 8000520:	f043 0301 	orr.w	r3, r3, #1
 8000524:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000526:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <MX_GPIO_Init+0x78>)
 8000528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000532:	2200      	movs	r2, #0
 8000534:	2120      	movs	r1, #32
 8000536:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800053a:	f000 fd21 	bl	8000f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800053e:	2320      	movs	r3, #32
 8000540:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000542:	2301      	movs	r3, #1
 8000544:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000546:	2300      	movs	r3, #0
 8000548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054a:	2300      	movs	r3, #0
 800054c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054e:	f107 030c 	add.w	r3, r7, #12
 8000552:	4619      	mov	r1, r3
 8000554:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000558:	f000 fb68 	bl	8000c2c <HAL_GPIO_Init>

}
 800055c:	bf00      	nop
 800055e:	3720      	adds	r7, #32
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	40021000 	.word	0x40021000

08000568 <STM32_AES_CBC_Encrypt>:
                              uint8_t  *AES192_Key,
                              uint8_t  *InitializationVector,
                              uint32_t  IvLength,
                              uint8_t  *OutputMessage,
                              uint32_t *OutputMessageLength)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b0be      	sub	sp, #248	; 0xf8
 800056c:	af02      	add	r7, sp, #8
 800056e:	60f8      	str	r0, [r7, #12]
 8000570:	60b9      	str	r1, [r7, #8]
 8000572:	607a      	str	r2, [r7, #4]
 8000574:	603b      	str	r3, [r7, #0]
	AESCBCctx_stt AESctx;

	  uint32_t error_status = AES_ERR_BAD_PARAMETER;
 8000576:	f44f 6342 	mov.w	r3, #3104	; 0xc20
 800057a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

	  int32_t outputLength = 0;
 800057e:	2300      	movs	r3, #0
 8000580:	613b      	str	r3, [r7, #16]

	  /* Set flag field to default value */
	  AESctx.mFlags = E_SK_DEFAULT;
 8000582:	2300      	movs	r3, #0
 8000584:	763b      	strb	r3, [r7, #24]

	  /* Set key size to 24 (corresponding to AES-192) */
	  AESctx.mKeySize = 24;
 8000586:	2318      	movs	r3, #24
 8000588:	63bb      	str	r3, [r7, #56]	; 0x38

	  /* Set iv size field to IvLength*/
	  AESctx.mIvSize = IvLength;
 800058a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800058e:	627b      	str	r3, [r7, #36]	; 0x24

	  /* Initialize the operation, by passing the key.
	   * Third parameter is NULL because CBC doesn't use any IV */
	  error_status = AES_CBC_Encrypt_Init(&AESctx, AES192_Key, InitializationVector );
 8000590:	f107 0314 	add.w	r3, r7, #20
 8000594:	683a      	ldr	r2, [r7, #0]
 8000596:	6879      	ldr	r1, [r7, #4]
 8000598:	4618      	mov	r0, r3
 800059a:	f007 f8c9 	bl	8007730 <AES_CBC_Encrypt_Init>
 800059e:	4603      	mov	r3, r0
 80005a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

	  /* check for initialization errors */
	  if (error_status == AES_SUCCESS)
 80005a4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d12e      	bne.n	800060a <STM32_AES_CBC_Encrypt+0xa2>
	  {
	    /* Encrypt Data */
	    error_status = AES_CBC_Encrypt_Append(&AESctx,
 80005ac:	f107 0014 	add.w	r0, r7, #20
 80005b0:	f107 0310 	add.w	r3, r7, #16
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80005ba:	68ba      	ldr	r2, [r7, #8]
 80005bc:	68f9      	ldr	r1, [r7, #12]
 80005be:	f007 f8ba 	bl	8007736 <AES_CBC_Encrypt_Append>
 80005c2:	4603      	mov	r3, r0
 80005c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	                                          InputMessage,
	                                          InputMessageLength,
	                                          OutputMessage,
	                                          &outputLength);

	    if (error_status == AES_SUCCESS)
 80005c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d11c      	bne.n	800060a <STM32_AES_CBC_Encrypt+0xa2>
	    {
	      /* Write the number of data written*/
	      *OutputMessageLength = outputLength;
 80005d0:	693b      	ldr	r3, [r7, #16]
 80005d2:	461a      	mov	r2, r3
 80005d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80005d8:	601a      	str	r2, [r3, #0]
	      /* Do the Finalization */
	      error_status = AES_CBC_Encrypt_Finish(&AESctx, OutputMessage + *OutputMessageLength, &outputLength);
 80005da:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80005e4:	18d1      	adds	r1, r2, r3
 80005e6:	f107 0210 	add.w	r2, r7, #16
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	4618      	mov	r0, r3
 80005f0:	f007 f9b2 	bl	8007958 <AES_CBC_Encrypt_Finish>
 80005f4:	4603      	mov	r3, r0
 80005f6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	      /* Add data written to the information to be returned */
	      *OutputMessageLength += outputLength;
 80005fa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	693a      	ldr	r2, [r7, #16]
 8000602:	441a      	add	r2, r3
 8000604:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000608:	601a      	str	r2, [r3, #0]
	    }
	  }

	  return error_status;
 800060a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
}
 800060e:	4618      	mov	r0, r3
 8000610:	37f0      	adds	r7, #240	; 0xf0
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}

08000616 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000616:	b480      	push	{r7}
 8000618:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800061a:	b672      	cpsid	i
}
 800061c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800061e:	e7fe      	b.n	800061e <Error_Handler+0x8>

08000620 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000626:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <HAL_MspInit+0x44>)
 8000628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800062a:	4a0e      	ldr	r2, [pc, #56]	; (8000664 <HAL_MspInit+0x44>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6613      	str	r3, [r2, #96]	; 0x60
 8000632:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <HAL_MspInit+0x44>)
 8000634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <HAL_MspInit+0x44>)
 8000640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000642:	4a08      	ldr	r2, [pc, #32]	; (8000664 <HAL_MspInit+0x44>)
 8000644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000648:	6593      	str	r3, [r2, #88]	; 0x58
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <HAL_MspInit+0x44>)
 800064c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800064e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000652:	603b      	str	r3, [r7, #0]
 8000654:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000656:	bf00      	nop
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	40021000 	.word	0x40021000

08000668 <HAL_RNG_MspInit>:
* @retval None
*/


void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a0a      	ldr	r2, [pc, #40]	; (80006a0 <HAL_RNG_MspInit+0x38>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d10b      	bne.n	8000692 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800067a:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <HAL_RNG_MspInit+0x3c>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067e:	4a09      	ldr	r2, [pc, #36]	; (80006a4 <HAL_RNG_MspInit+0x3c>)
 8000680:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000686:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <HAL_RNG_MspInit+0x3c>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000692:	bf00      	nop
 8000694:	3714      	adds	r7, #20
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	50060800 	.word	0x50060800
 80006a4:	40021000 	.word	0x40021000

080006a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006ac:	e7fe      	b.n	80006ac <NMI_Handler+0x4>

080006ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ae:	b480      	push	{r7}
 80006b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006b2:	e7fe      	b.n	80006b2 <HardFault_Handler+0x4>

080006b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <MemManage_Handler+0x4>

080006ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ba:	b480      	push	{r7}
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006be:	e7fe      	b.n	80006be <BusFault_Handler+0x4>

080006c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <UsageFault_Handler+0x4>

080006c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006c6:	b480      	push	{r7}
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr

080006d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr

080006e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006e6:	bf00      	nop
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr

080006f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006f4:	f000 f944 	bl	8000980 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}

080006fc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000700:	4802      	ldr	r0, [pc, #8]	; (800070c <OTG_FS_IRQHandler+0x10>)
 8000702:	f000 fdc2 	bl	800128a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20001970 	.word	0x20001970

08000710 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]
 8000720:	e00a      	b.n	8000738 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000722:	f3af 8000 	nop.w
 8000726:	4601      	mov	r1, r0
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	1c5a      	adds	r2, r3, #1
 800072c:	60ba      	str	r2, [r7, #8]
 800072e:	b2ca      	uxtb	r2, r1
 8000730:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000732:	697b      	ldr	r3, [r7, #20]
 8000734:	3301      	adds	r3, #1
 8000736:	617b      	str	r3, [r7, #20]
 8000738:	697a      	ldr	r2, [r7, #20]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	429a      	cmp	r2, r3
 800073e:	dbf0      	blt.n	8000722 <_read+0x12>
	}

return len;
 8000740:	687b      	ldr	r3, [r7, #4]
}
 8000742:	4618      	mov	r0, r3
 8000744:	3718      	adds	r7, #24
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}

0800074a <_close>:
	}
	return len;
}

int _close(int file)
{
 800074a:	b480      	push	{r7}
 800074c:	b083      	sub	sp, #12
 800074e:	af00      	add	r7, sp, #0
 8000750:	6078      	str	r0, [r7, #4]
	return -1;
 8000752:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000756:	4618      	mov	r0, r3
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr

08000762 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000762:	b480      	push	{r7}
 8000764:	b083      	sub	sp, #12
 8000766:	af00      	add	r7, sp, #0
 8000768:	6078      	str	r0, [r7, #4]
 800076a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000772:	605a      	str	r2, [r3, #4]
	return 0;
 8000774:	2300      	movs	r3, #0
}
 8000776:	4618      	mov	r0, r3
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr

08000782 <_isatty>:

int _isatty(int file)
{
 8000782:	b480      	push	{r7}
 8000784:	b083      	sub	sp, #12
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
	return 1;
 800078a:	2301      	movs	r3, #1
}
 800078c:	4618      	mov	r0, r3
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr

08000798 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	607a      	str	r2, [r7, #4]
	return 0;
 80007a4:	2300      	movs	r3, #0
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3714      	adds	r7, #20
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
	...

080007b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007bc:	4a14      	ldr	r2, [pc, #80]	; (8000810 <_sbrk+0x5c>)
 80007be:	4b15      	ldr	r3, [pc, #84]	; (8000814 <_sbrk+0x60>)
 80007c0:	1ad3      	subs	r3, r2, r3
 80007c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007c8:	4b13      	ldr	r3, [pc, #76]	; (8000818 <_sbrk+0x64>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d102      	bne.n	80007d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <_sbrk+0x64>)
 80007d2:	4a12      	ldr	r2, [pc, #72]	; (800081c <_sbrk+0x68>)
 80007d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <_sbrk+0x64>)
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4413      	add	r3, r2
 80007de:	693a      	ldr	r2, [r7, #16]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d207      	bcs.n	80007f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007e4:	f007 f8c4 	bl	8007970 <__errno>
 80007e8:	4603      	mov	r3, r0
 80007ea:	220c      	movs	r2, #12
 80007ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007ee:	f04f 33ff 	mov.w	r3, #4294967295
 80007f2:	e009      	b.n	8000808 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007f4:	4b08      	ldr	r3, [pc, #32]	; (8000818 <_sbrk+0x64>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007fa:	4b07      	ldr	r3, [pc, #28]	; (8000818 <_sbrk+0x64>)
 80007fc:	681a      	ldr	r2, [r3, #0]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4413      	add	r3, r2
 8000802:	4a05      	ldr	r2, [pc, #20]	; (8000818 <_sbrk+0x64>)
 8000804:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000806:	68fb      	ldr	r3, [r7, #12]
}
 8000808:	4618      	mov	r0, r3
 800080a:	3718      	adds	r7, #24
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20018000 	.word	0x20018000
 8000814:	00000400 	.word	0x00000400
 8000818:	20000238 	.word	0x20000238
 800081c:	20001d88 	.word	0x20001d88

08000820 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000824:	4b15      	ldr	r3, [pc, #84]	; (800087c <SystemInit+0x5c>)
 8000826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800082a:	4a14      	ldr	r2, [pc, #80]	; (800087c <SystemInit+0x5c>)
 800082c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000830:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <SystemInit+0x60>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a11      	ldr	r2, [pc, #68]	; (8000880 <SystemInit+0x60>)
 800083a:	f043 0301 	orr.w	r3, r3, #1
 800083e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000840:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <SystemInit+0x60>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <SystemInit+0x60>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a0d      	ldr	r2, [pc, #52]	; (8000880 <SystemInit+0x60>)
 800084c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000850:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000854:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000856:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <SystemInit+0x60>)
 8000858:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800085c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <SystemInit+0x60>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a07      	ldr	r2, [pc, #28]	; (8000880 <SystemInit+0x60>)
 8000864:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000868:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800086a:	4b05      	ldr	r3, [pc, #20]	; (8000880 <SystemInit+0x60>)
 800086c:	2200      	movs	r2, #0
 800086e:	619a      	str	r2, [r3, #24]
}
 8000870:	bf00      	nop
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	e000ed00 	.word	0xe000ed00
 8000880:	40021000 	.word	0x40021000

08000884 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000884:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000888:	f7ff ffca 	bl	8000820 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800088c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800088e:	e003      	b.n	8000898 <LoopCopyDataInit>

08000890 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000890:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000892:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000894:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000896:	3104      	adds	r1, #4

08000898 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000898:	480a      	ldr	r0, [pc, #40]	; (80008c4 <LoopForever+0xa>)
	ldr	r3, =_edata
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <LoopForever+0xe>)
	adds	r2, r0, r1
 800089c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800089e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80008a0:	d3f6      	bcc.n	8000890 <CopyDataInit>
	ldr	r2, =_sbss
 80008a2:	4a0a      	ldr	r2, [pc, #40]	; (80008cc <LoopForever+0x12>)
	b	LoopFillZerobss
 80008a4:	e002      	b.n	80008ac <LoopFillZerobss>

080008a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80008a6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80008a8:	f842 3b04 	str.w	r3, [r2], #4

080008ac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80008ac:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <LoopForever+0x16>)
	cmp	r2, r3
 80008ae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80008b0:	d3f9      	bcc.n	80008a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008b2:	f007 f863 	bl	800797c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008b6:	f7ff fd21 	bl	80002fc <main>

080008ba <LoopForever>:

LoopForever:
    b LoopForever
 80008ba:	e7fe      	b.n	80008ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80008bc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80008c0:	08009428 	.word	0x08009428
	ldr	r0, =_sdata
 80008c4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80008c8:	2000021c 	.word	0x2000021c
	ldr	r2, =_sbss
 80008cc:	2000021c 	.word	0x2000021c
	ldr	r3, = _ebss
 80008d0:	20001d88 	.word	0x20001d88

080008d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008d4:	e7fe      	b.n	80008d4 <ADC1_2_IRQHandler>

080008d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b082      	sub	sp, #8
 80008da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008dc:	2300      	movs	r3, #0
 80008de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008e0:	2003      	movs	r0, #3
 80008e2:	f000 f961 	bl	8000ba8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008e6:	2000      	movs	r0, #0
 80008e8:	f000 f80e 	bl	8000908 <HAL_InitTick>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d002      	beq.n	80008f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
 80008f4:	71fb      	strb	r3, [r7, #7]
 80008f6:	e001      	b.n	80008fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008f8:	f7ff fe92 	bl	8000620 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008fc:	79fb      	ldrb	r3, [r7, #7]
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
	...

08000908 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000910:	2300      	movs	r3, #0
 8000912:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000914:	4b17      	ldr	r3, [pc, #92]	; (8000974 <HAL_InitTick+0x6c>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d023      	beq.n	8000964 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800091c:	4b16      	ldr	r3, [pc, #88]	; (8000978 <HAL_InitTick+0x70>)
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	4b14      	ldr	r3, [pc, #80]	; (8000974 <HAL_InitTick+0x6c>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	4619      	mov	r1, r3
 8000926:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800092a:	fbb3 f3f1 	udiv	r3, r3, r1
 800092e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000932:	4618      	mov	r0, r3
 8000934:	f000 f96d 	bl	8000c12 <HAL_SYSTICK_Config>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d10f      	bne.n	800095e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2b0f      	cmp	r3, #15
 8000942:	d809      	bhi.n	8000958 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000944:	2200      	movs	r2, #0
 8000946:	6879      	ldr	r1, [r7, #4]
 8000948:	f04f 30ff 	mov.w	r0, #4294967295
 800094c:	f000 f937 	bl	8000bbe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000950:	4a0a      	ldr	r2, [pc, #40]	; (800097c <HAL_InitTick+0x74>)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	6013      	str	r3, [r2, #0]
 8000956:	e007      	b.n	8000968 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000958:	2301      	movs	r3, #1
 800095a:	73fb      	strb	r3, [r7, #15]
 800095c:	e004      	b.n	8000968 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800095e:	2301      	movs	r3, #1
 8000960:	73fb      	strb	r3, [r7, #15]
 8000962:	e001      	b.n	8000968 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000964:	2301      	movs	r3, #1
 8000966:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000968:	7bfb      	ldrb	r3, [r7, #15]
}
 800096a:	4618      	mov	r0, r3
 800096c:	3710      	adds	r7, #16
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000030 	.word	0x20000030
 8000978:	20000028 	.word	0x20000028
 800097c:	2000002c 	.word	0x2000002c

08000980 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <HAL_IncTick+0x20>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	461a      	mov	r2, r3
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_IncTick+0x24>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4413      	add	r3, r2
 8000990:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <HAL_IncTick+0x24>)
 8000992:	6013      	str	r3, [r2, #0]
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	20000030 	.word	0x20000030
 80009a4:	2000049c 	.word	0x2000049c

080009a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  return uwTick;
 80009ac:	4b03      	ldr	r3, [pc, #12]	; (80009bc <HAL_GetTick+0x14>)
 80009ae:	681b      	ldr	r3, [r3, #0]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	2000049c 	.word	0x2000049c

080009c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009c8:	f7ff ffee 	bl	80009a8 <HAL_GetTick>
 80009cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009d8:	d005      	beq.n	80009e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80009da:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <HAL_Delay+0x44>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	461a      	mov	r2, r3
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	4413      	add	r3, r2
 80009e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009e6:	bf00      	nop
 80009e8:	f7ff ffde 	bl	80009a8 <HAL_GetTick>
 80009ec:	4602      	mov	r2, r0
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	68fa      	ldr	r2, [r7, #12]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d8f7      	bhi.n	80009e8 <HAL_Delay+0x28>
  {
  }
}
 80009f8:	bf00      	nop
 80009fa:	bf00      	nop
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000030 	.word	0x20000030

08000a08 <__NVIC_SetPriorityGrouping>:
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	f003 0307 	and.w	r3, r3, #7
 8000a16:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <__NVIC_SetPriorityGrouping+0x44>)
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a1e:	68ba      	ldr	r2, [r7, #8]
 8000a20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a24:	4013      	ands	r3, r2
 8000a26:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a3a:	4a04      	ldr	r2, [pc, #16]	; (8000a4c <__NVIC_SetPriorityGrouping+0x44>)
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	60d3      	str	r3, [r2, #12]
}
 8000a40:	bf00      	nop
 8000a42:	3714      	adds	r7, #20
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <__NVIC_GetPriorityGrouping>:
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a54:	4b04      	ldr	r3, [pc, #16]	; (8000a68 <__NVIC_GetPriorityGrouping+0x18>)
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	0a1b      	lsrs	r3, r3, #8
 8000a5a:	f003 0307 	and.w	r3, r3, #7
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <__NVIC_EnableIRQ>:
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	db0b      	blt.n	8000a96 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	f003 021f 	and.w	r2, r3, #31
 8000a84:	4907      	ldr	r1, [pc, #28]	; (8000aa4 <__NVIC_EnableIRQ+0x38>)
 8000a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8a:	095b      	lsrs	r3, r3, #5
 8000a8c:	2001      	movs	r0, #1
 8000a8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a96:	bf00      	nop
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	e000e100 	.word	0xe000e100

08000aa8 <__NVIC_SetPriority>:
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	6039      	str	r1, [r7, #0]
 8000ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	db0a      	blt.n	8000ad2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	b2da      	uxtb	r2, r3
 8000ac0:	490c      	ldr	r1, [pc, #48]	; (8000af4 <__NVIC_SetPriority+0x4c>)
 8000ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac6:	0112      	lsls	r2, r2, #4
 8000ac8:	b2d2      	uxtb	r2, r2
 8000aca:	440b      	add	r3, r1
 8000acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ad0:	e00a      	b.n	8000ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	4908      	ldr	r1, [pc, #32]	; (8000af8 <__NVIC_SetPriority+0x50>)
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	f003 030f 	and.w	r3, r3, #15
 8000ade:	3b04      	subs	r3, #4
 8000ae0:	0112      	lsls	r2, r2, #4
 8000ae2:	b2d2      	uxtb	r2, r2
 8000ae4:	440b      	add	r3, r1
 8000ae6:	761a      	strb	r2, [r3, #24]
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	e000e100 	.word	0xe000e100
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <NVIC_EncodePriority>:
{
 8000afc:	b480      	push	{r7}
 8000afe:	b089      	sub	sp, #36	; 0x24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	f003 0307 	and.w	r3, r3, #7
 8000b0e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	f1c3 0307 	rsb	r3, r3, #7
 8000b16:	2b04      	cmp	r3, #4
 8000b18:	bf28      	it	cs
 8000b1a:	2304      	movcs	r3, #4
 8000b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	3304      	adds	r3, #4
 8000b22:	2b06      	cmp	r3, #6
 8000b24:	d902      	bls.n	8000b2c <NVIC_EncodePriority+0x30>
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	3b03      	subs	r3, #3
 8000b2a:	e000      	b.n	8000b2e <NVIC_EncodePriority+0x32>
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b30:	f04f 32ff 	mov.w	r2, #4294967295
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3a:	43da      	mvns	r2, r3
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	401a      	ands	r2, r3
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b44:	f04f 31ff 	mov.w	r1, #4294967295
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4e:	43d9      	mvns	r1, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b54:	4313      	orrs	r3, r2
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3724      	adds	r7, #36	; 0x24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
	...

08000b64 <SysTick_Config>:
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b74:	d301      	bcc.n	8000b7a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000b76:	2301      	movs	r3, #1
 8000b78:	e00f      	b.n	8000b9a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ba4 <SysTick_Config+0x40>)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b82:	210f      	movs	r1, #15
 8000b84:	f04f 30ff 	mov.w	r0, #4294967295
 8000b88:	f7ff ff8e 	bl	8000aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <SysTick_Config+0x40>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b92:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <SysTick_Config+0x40>)
 8000b94:	2207      	movs	r2, #7
 8000b96:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	e000e010 	.word	0xe000e010

08000ba8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f7ff ff29 	bl	8000a08 <__NVIC_SetPriorityGrouping>
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b086      	sub	sp, #24
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	60b9      	str	r1, [r7, #8]
 8000bc8:	607a      	str	r2, [r7, #4]
 8000bca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bd0:	f7ff ff3e 	bl	8000a50 <__NVIC_GetPriorityGrouping>
 8000bd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	68b9      	ldr	r1, [r7, #8]
 8000bda:	6978      	ldr	r0, [r7, #20]
 8000bdc:	f7ff ff8e 	bl	8000afc <NVIC_EncodePriority>
 8000be0:	4602      	mov	r2, r0
 8000be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000be6:	4611      	mov	r1, r2
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff ff5d 	bl	8000aa8 <__NVIC_SetPriority>
}
 8000bee:	bf00      	nop
 8000bf0:	3718      	adds	r7, #24
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff ff31 	bl	8000a6c <__NVIC_EnableIRQ>
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b082      	sub	sp, #8
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff ffa2 	bl	8000b64 <SysTick_Config>
 8000c20:	4603      	mov	r3, r0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b087      	sub	sp, #28
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c36:	2300      	movs	r3, #0
 8000c38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c3a:	e17f      	b.n	8000f3c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	2101      	movs	r1, #1
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	fa01 f303 	lsl.w	r3, r1, r3
 8000c48:	4013      	ands	r3, r2
 8000c4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	f000 8171 	beq.w	8000f36 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d00b      	beq.n	8000c74 <HAL_GPIO_Init+0x48>
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d007      	beq.n	8000c74 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c68:	2b11      	cmp	r3, #17
 8000c6a:	d003      	beq.n	8000c74 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	2b12      	cmp	r3, #18
 8000c72:	d130      	bne.n	8000cd6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	2203      	movs	r2, #3
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	43db      	mvns	r3, r3
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	68da      	ldr	r2, [r3, #12]
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000caa:	2201      	movs	r2, #1
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	091b      	lsrs	r3, r3, #4
 8000cc0:	f003 0201 	and.w	r2, r3, #1
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f003 0303 	and.w	r3, r3, #3
 8000cde:	2b03      	cmp	r3, #3
 8000ce0:	d118      	bne.n	8000d14 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ce8:	2201      	movs	r2, #1
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	08db      	lsrs	r3, r3, #3
 8000cfe:	f003 0201 	and.w	r2, r3, #1
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	2203      	movs	r2, #3
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	689a      	ldr	r2, [r3, #8]
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	d003      	beq.n	8000d54 <HAL_GPIO_Init+0x128>
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	2b12      	cmp	r3, #18
 8000d52:	d123      	bne.n	8000d9c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	08da      	lsrs	r2, r3, #3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3208      	adds	r2, #8
 8000d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d60:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	f003 0307 	and.w	r3, r3, #7
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	220f      	movs	r2, #15
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	43db      	mvns	r3, r3
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	4013      	ands	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	691a      	ldr	r2, [r3, #16]
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	08da      	lsrs	r2, r3, #3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	3208      	adds	r2, #8
 8000d96:	6939      	ldr	r1, [r7, #16]
 8000d98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	2203      	movs	r2, #3
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	43db      	mvns	r3, r3
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	4013      	ands	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f003 0203 	and.w	r2, r3, #3
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	f000 80ac 	beq.w	8000f36 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dde:	4b5f      	ldr	r3, [pc, #380]	; (8000f5c <HAL_GPIO_Init+0x330>)
 8000de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000de2:	4a5e      	ldr	r2, [pc, #376]	; (8000f5c <HAL_GPIO_Init+0x330>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	6613      	str	r3, [r2, #96]	; 0x60
 8000dea:	4b5c      	ldr	r3, [pc, #368]	; (8000f5c <HAL_GPIO_Init+0x330>)
 8000dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000df6:	4a5a      	ldr	r2, [pc, #360]	; (8000f60 <HAL_GPIO_Init+0x334>)
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	089b      	lsrs	r3, r3, #2
 8000dfc:	3302      	adds	r3, #2
 8000dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e02:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	f003 0303 	and.w	r3, r3, #3
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	220f      	movs	r2, #15
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43db      	mvns	r3, r3
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	4013      	ands	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e20:	d025      	beq.n	8000e6e <HAL_GPIO_Init+0x242>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a4f      	ldr	r2, [pc, #316]	; (8000f64 <HAL_GPIO_Init+0x338>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d01f      	beq.n	8000e6a <HAL_GPIO_Init+0x23e>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a4e      	ldr	r2, [pc, #312]	; (8000f68 <HAL_GPIO_Init+0x33c>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d019      	beq.n	8000e66 <HAL_GPIO_Init+0x23a>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a4d      	ldr	r2, [pc, #308]	; (8000f6c <HAL_GPIO_Init+0x340>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d013      	beq.n	8000e62 <HAL_GPIO_Init+0x236>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a4c      	ldr	r2, [pc, #304]	; (8000f70 <HAL_GPIO_Init+0x344>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d00d      	beq.n	8000e5e <HAL_GPIO_Init+0x232>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a4b      	ldr	r2, [pc, #300]	; (8000f74 <HAL_GPIO_Init+0x348>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d007      	beq.n	8000e5a <HAL_GPIO_Init+0x22e>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a4a      	ldr	r2, [pc, #296]	; (8000f78 <HAL_GPIO_Init+0x34c>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d101      	bne.n	8000e56 <HAL_GPIO_Init+0x22a>
 8000e52:	2306      	movs	r3, #6
 8000e54:	e00c      	b.n	8000e70 <HAL_GPIO_Init+0x244>
 8000e56:	2307      	movs	r3, #7
 8000e58:	e00a      	b.n	8000e70 <HAL_GPIO_Init+0x244>
 8000e5a:	2305      	movs	r3, #5
 8000e5c:	e008      	b.n	8000e70 <HAL_GPIO_Init+0x244>
 8000e5e:	2304      	movs	r3, #4
 8000e60:	e006      	b.n	8000e70 <HAL_GPIO_Init+0x244>
 8000e62:	2303      	movs	r3, #3
 8000e64:	e004      	b.n	8000e70 <HAL_GPIO_Init+0x244>
 8000e66:	2302      	movs	r3, #2
 8000e68:	e002      	b.n	8000e70 <HAL_GPIO_Init+0x244>
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e000      	b.n	8000e70 <HAL_GPIO_Init+0x244>
 8000e6e:	2300      	movs	r3, #0
 8000e70:	697a      	ldr	r2, [r7, #20]
 8000e72:	f002 0203 	and.w	r2, r2, #3
 8000e76:	0092      	lsls	r2, r2, #2
 8000e78:	4093      	lsls	r3, r2
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e80:	4937      	ldr	r1, [pc, #220]	; (8000f60 <HAL_GPIO_Init+0x334>)
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	089b      	lsrs	r3, r3, #2
 8000e86:	3302      	adds	r3, #2
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e8e:	4b3b      	ldr	r3, [pc, #236]	; (8000f7c <HAL_GPIO_Init+0x350>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	43db      	mvns	r3, r3
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d003      	beq.n	8000eb2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000eb2:	4a32      	ldr	r2, [pc, #200]	; (8000f7c <HAL_GPIO_Init+0x350>)
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000eb8:	4b30      	ldr	r3, [pc, #192]	; (8000f7c <HAL_GPIO_Init+0x350>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d003      	beq.n	8000edc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000edc:	4a27      	ldr	r2, [pc, #156]	; (8000f7c <HAL_GPIO_Init+0x350>)
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ee2:	4b26      	ldr	r3, [pc, #152]	; (8000f7c <HAL_GPIO_Init+0x350>)
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	43db      	mvns	r3, r3
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d003      	beq.n	8000f06 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f06:	4a1d      	ldr	r2, [pc, #116]	; (8000f7c <HAL_GPIO_Init+0x350>)
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f0c:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <HAL_GPIO_Init+0x350>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	43db      	mvns	r3, r3
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d003      	beq.n	8000f30 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f30:	4a12      	ldr	r2, [pc, #72]	; (8000f7c <HAL_GPIO_Init+0x350>)
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	fa22 f303 	lsr.w	r3, r2, r3
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	f47f ae78 	bne.w	8000c3c <HAL_GPIO_Init+0x10>
  }
}
 8000f4c:	bf00      	nop
 8000f4e:	bf00      	nop
 8000f50:	371c      	adds	r7, #28
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	40010000 	.word	0x40010000
 8000f64:	48000400 	.word	0x48000400
 8000f68:	48000800 	.word	0x48000800
 8000f6c:	48000c00 	.word	0x48000c00
 8000f70:	48001000 	.word	0x48001000
 8000f74:	48001400 	.word	0x48001400
 8000f78:	48001800 	.word	0x48001800
 8000f7c:	40010400 	.word	0x40010400

08000f80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	807b      	strh	r3, [r7, #2]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f90:	787b      	ldrb	r3, [r7, #1]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f96:	887a      	ldrh	r2, [r7, #2]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f9c:	e002      	b.n	8000fa4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f9e:	887a      	ldrh	r2, [r7, #2]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	460b      	mov	r3, r1
 8000fba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	695b      	ldr	r3, [r3, #20]
 8000fc0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fc2:	887a      	ldrh	r2, [r7, #2]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	041a      	lsls	r2, r3, #16
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	43d9      	mvns	r1, r3
 8000fce:	887b      	ldrh	r3, [r7, #2]
 8000fd0:	400b      	ands	r3, r1
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	619a      	str	r2, [r3, #24]
}
 8000fd8:	bf00      	nop
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fe6:	b08f      	sub	sp, #60	; 0x3c
 8000fe8:	af0a      	add	r7, sp, #40	; 0x28
 8000fea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d101      	bne.n	8000ff6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e116      	b.n	8001224 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001002:	b2db      	uxtb	r3, r3
 8001004:	2b00      	cmp	r3, #0
 8001006:	d106      	bne.n	8001016 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f005 fc57 	bl	80068c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2203      	movs	r2, #3
 800101a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001026:	2b00      	cmp	r3, #0
 8001028:	d102      	bne.n	8001030 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4618      	mov	r0, r3
 8001036:	f002 fc8e 	bl	8003956 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	687e      	ldr	r6, [r7, #4]
 8001042:	466d      	mov	r5, sp
 8001044:	f106 0410 	add.w	r4, r6, #16
 8001048:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800104a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800104c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800104e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001050:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001054:	e885 0003 	stmia.w	r5, {r0, r1}
 8001058:	1d33      	adds	r3, r6, #4
 800105a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800105c:	6838      	ldr	r0, [r7, #0]
 800105e:	f002 fba1 	bl	80037a4 <USB_CoreInit>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d005      	beq.n	8001074 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2202      	movs	r2, #2
 800106c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e0d7      	b.n	8001224 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f002 fc7c 	bl	8003978 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001080:	2300      	movs	r3, #0
 8001082:	73fb      	strb	r3, [r7, #15]
 8001084:	e04a      	b.n	800111c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001086:	7bfa      	ldrb	r2, [r7, #15]
 8001088:	6879      	ldr	r1, [r7, #4]
 800108a:	4613      	mov	r3, r2
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	1a9b      	subs	r3, r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	440b      	add	r3, r1
 8001094:	333d      	adds	r3, #61	; 0x3d
 8001096:	2201      	movs	r2, #1
 8001098:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800109a:	7bfa      	ldrb	r2, [r7, #15]
 800109c:	6879      	ldr	r1, [r7, #4]
 800109e:	4613      	mov	r3, r2
 80010a0:	00db      	lsls	r3, r3, #3
 80010a2:	1a9b      	subs	r3, r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	440b      	add	r3, r1
 80010a8:	333c      	adds	r3, #60	; 0x3c
 80010aa:	7bfa      	ldrb	r2, [r7, #15]
 80010ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010ae:	7bfa      	ldrb	r2, [r7, #15]
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	b298      	uxth	r0, r3
 80010b4:	6879      	ldr	r1, [r7, #4]
 80010b6:	4613      	mov	r3, r2
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	1a9b      	subs	r3, r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	440b      	add	r3, r1
 80010c0:	3342      	adds	r3, #66	; 0x42
 80010c2:	4602      	mov	r2, r0
 80010c4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010c6:	7bfa      	ldrb	r2, [r7, #15]
 80010c8:	6879      	ldr	r1, [r7, #4]
 80010ca:	4613      	mov	r3, r2
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	1a9b      	subs	r3, r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	440b      	add	r3, r1
 80010d4:	333f      	adds	r3, #63	; 0x3f
 80010d6:	2200      	movs	r2, #0
 80010d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010da:	7bfa      	ldrb	r2, [r7, #15]
 80010dc:	6879      	ldr	r1, [r7, #4]
 80010de:	4613      	mov	r3, r2
 80010e0:	00db      	lsls	r3, r3, #3
 80010e2:	1a9b      	subs	r3, r3, r2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	440b      	add	r3, r1
 80010e8:	3344      	adds	r3, #68	; 0x44
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010ee:	7bfa      	ldrb	r2, [r7, #15]
 80010f0:	6879      	ldr	r1, [r7, #4]
 80010f2:	4613      	mov	r3, r2
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	1a9b      	subs	r3, r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	440b      	add	r3, r1
 80010fc:	3348      	adds	r3, #72	; 0x48
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001102:	7bfa      	ldrb	r2, [r7, #15]
 8001104:	6879      	ldr	r1, [r7, #4]
 8001106:	4613      	mov	r3, r2
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	1a9b      	subs	r3, r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	440b      	add	r3, r1
 8001110:	3350      	adds	r3, #80	; 0x50
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001116:	7bfb      	ldrb	r3, [r7, #15]
 8001118:	3301      	adds	r3, #1
 800111a:	73fb      	strb	r3, [r7, #15]
 800111c:	7bfa      	ldrb	r2, [r7, #15]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	429a      	cmp	r2, r3
 8001124:	d3af      	bcc.n	8001086 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001126:	2300      	movs	r3, #0
 8001128:	73fb      	strb	r3, [r7, #15]
 800112a:	e044      	b.n	80011b6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800112c:	7bfa      	ldrb	r2, [r7, #15]
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	4613      	mov	r3, r2
 8001132:	00db      	lsls	r3, r3, #3
 8001134:	1a9b      	subs	r3, r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	440b      	add	r3, r1
 800113a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001142:	7bfa      	ldrb	r2, [r7, #15]
 8001144:	6879      	ldr	r1, [r7, #4]
 8001146:	4613      	mov	r3, r2
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	1a9b      	subs	r3, r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	440b      	add	r3, r1
 8001150:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001154:	7bfa      	ldrb	r2, [r7, #15]
 8001156:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001158:	7bfa      	ldrb	r2, [r7, #15]
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	4613      	mov	r3, r2
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	1a9b      	subs	r3, r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	440b      	add	r3, r1
 8001166:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800116a:	2200      	movs	r2, #0
 800116c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800116e:	7bfa      	ldrb	r2, [r7, #15]
 8001170:	6879      	ldr	r1, [r7, #4]
 8001172:	4613      	mov	r3, r2
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	1a9b      	subs	r3, r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	440b      	add	r3, r1
 800117c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001184:	7bfa      	ldrb	r2, [r7, #15]
 8001186:	6879      	ldr	r1, [r7, #4]
 8001188:	4613      	mov	r3, r2
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	1a9b      	subs	r3, r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	440b      	add	r3, r1
 8001192:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800119a:	7bfa      	ldrb	r2, [r7, #15]
 800119c:	6879      	ldr	r1, [r7, #4]
 800119e:	4613      	mov	r3, r2
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	1a9b      	subs	r3, r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	440b      	add	r3, r1
 80011a8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
 80011b2:	3301      	adds	r3, #1
 80011b4:	73fb      	strb	r3, [r7, #15]
 80011b6:	7bfa      	ldrb	r2, [r7, #15]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d3b5      	bcc.n	800112c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	603b      	str	r3, [r7, #0]
 80011c6:	687e      	ldr	r6, [r7, #4]
 80011c8:	466d      	mov	r5, sp
 80011ca:	f106 0410 	add.w	r4, r6, #16
 80011ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011da:	e885 0003 	stmia.w	r5, {r0, r1}
 80011de:	1d33      	adds	r3, r6, #4
 80011e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011e2:	6838      	ldr	r0, [r7, #0]
 80011e4:	f002 fbf2 	bl	80039cc <USB_DevInit>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d005      	beq.n	80011fa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2202      	movs	r2, #2
 80011f2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e014      	b.n	8001224 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2201      	movs	r2, #1
 8001206:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120e:	2b01      	cmp	r3, #1
 8001210:	d102      	bne.n	8001218 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f000 ff62 	bl	80020dc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	f003 fb74 	bl	800490a <USB_DevDisconnect>

  return HAL_OK;
 8001222:	2300      	movs	r3, #0
}
 8001224:	4618      	mov	r0, r3
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800122c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001240:	2b01      	cmp	r3, #1
 8001242:	d101      	bne.n	8001248 <HAL_PCD_Start+0x1c>
 8001244:	2302      	movs	r3, #2
 8001246:	e01c      	b.n	8001282 <HAL_PCD_Start+0x56>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2201      	movs	r2, #1
 800124c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001254:	2b01      	cmp	r3, #1
 8001256:	d105      	bne.n	8001264 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800125c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4618      	mov	r0, r3
 800126a:	f002 fb63 	bl	8003934 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f003 fb28 	bl	80048c8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800128a:	b590      	push	{r4, r7, lr}
 800128c:	b08d      	sub	sp, #52	; 0x34
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001298:	6a3b      	ldr	r3, [r7, #32]
 800129a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f003 fbe6 	bl	8004a72 <USB_GetMode>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f040 838f 	bne.w	80019cc <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f003 fb4a 	bl	800494c <USB_ReadInterrupts>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f000 8385 	beq.w	80019ca <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f003 fb41 	bl	800494c <USB_ReadInterrupts>
 80012ca:	4603      	mov	r3, r0
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d107      	bne.n	80012e4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	695a      	ldr	r2, [r3, #20]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f002 0202 	and.w	r2, r2, #2
 80012e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f003 fb2f 	bl	800494c <USB_ReadInterrupts>
 80012ee:	4603      	mov	r3, r0
 80012f0:	f003 0310 	and.w	r3, r3, #16
 80012f4:	2b10      	cmp	r3, #16
 80012f6:	d161      	bne.n	80013bc <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	699a      	ldr	r2, [r3, #24]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f022 0210 	bic.w	r2, r2, #16
 8001306:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001308:	6a3b      	ldr	r3, [r7, #32]
 800130a:	6a1b      	ldr	r3, [r3, #32]
 800130c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	f003 020f 	and.w	r2, r3, #15
 8001314:	4613      	mov	r3, r2
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	1a9b      	subs	r3, r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	4413      	add	r3, r2
 8001324:	3304      	adds	r3, #4
 8001326:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	0c5b      	lsrs	r3, r3, #17
 800132c:	f003 030f 	and.w	r3, r3, #15
 8001330:	2b02      	cmp	r3, #2
 8001332:	d124      	bne.n	800137e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800133a:	4013      	ands	r3, r2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d035      	beq.n	80013ac <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	091b      	lsrs	r3, r3, #4
 8001348:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800134a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800134e:	b29b      	uxth	r3, r3
 8001350:	461a      	mov	r2, r3
 8001352:	6a38      	ldr	r0, [r7, #32]
 8001354:	f003 f995 	bl	8004682 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	68da      	ldr	r2, [r3, #12]
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	091b      	lsrs	r3, r3, #4
 8001360:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001364:	441a      	add	r2, r3
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	699a      	ldr	r2, [r3, #24]
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	091b      	lsrs	r3, r3, #4
 8001372:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001376:	441a      	add	r2, r3
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	619a      	str	r2, [r3, #24]
 800137c:	e016      	b.n	80013ac <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	0c5b      	lsrs	r3, r3, #17
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	2b06      	cmp	r3, #6
 8001388:	d110      	bne.n	80013ac <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001390:	2208      	movs	r2, #8
 8001392:	4619      	mov	r1, r3
 8001394:	6a38      	ldr	r0, [r7, #32]
 8001396:	f003 f974 	bl	8004682 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	699a      	ldr	r2, [r3, #24]
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	091b      	lsrs	r3, r3, #4
 80013a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013a6:	441a      	add	r2, r3
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	699a      	ldr	r2, [r3, #24]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f042 0210 	orr.w	r2, r2, #16
 80013ba:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f003 fac3 	bl	800494c <USB_ReadInterrupts>
 80013c6:	4603      	mov	r3, r0
 80013c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013cc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80013d0:	d16e      	bne.n	80014b0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80013d2:	2300      	movs	r3, #0
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f003 fac9 	bl	8004972 <USB_ReadDevAllOutEpInterrupt>
 80013e0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80013e2:	e062      	b.n	80014aa <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80013e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d057      	beq.n	800149e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	4611      	mov	r1, r2
 80013f8:	4618      	mov	r0, r3
 80013fa:	f003 faee 	bl	80049da <USB_ReadDevOutEPInterrupt>
 80013fe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	2b00      	cmp	r3, #0
 8001408:	d00c      	beq.n	8001424 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140c:	015a      	lsls	r2, r3, #5
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	4413      	add	r3, r2
 8001412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001416:	461a      	mov	r2, r3
 8001418:	2301      	movs	r3, #1
 800141a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800141c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f000 fd82 	bl	8001f28 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	f003 0308 	and.w	r3, r3, #8
 800142a:	2b00      	cmp	r3, #0
 800142c:	d00c      	beq.n	8001448 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001430:	015a      	lsls	r2, r3, #5
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	4413      	add	r3, r2
 8001436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800143a:	461a      	mov	r2, r3
 800143c:	2308      	movs	r3, #8
 800143e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001440:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f000 fdbe 	bl	8001fc4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	f003 0310 	and.w	r3, r3, #16
 800144e:	2b00      	cmp	r3, #0
 8001450:	d008      	beq.n	8001464 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001454:	015a      	lsls	r2, r3, #5
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	4413      	add	r3, r2
 800145a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800145e:	461a      	mov	r2, r3
 8001460:	2310      	movs	r3, #16
 8001462:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	f003 0320 	and.w	r3, r3, #32
 800146a:	2b00      	cmp	r3, #0
 800146c:	d008      	beq.n	8001480 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	015a      	lsls	r2, r3, #5
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	4413      	add	r3, r2
 8001476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800147a:	461a      	mov	r2, r3
 800147c:	2320      	movs	r3, #32
 800147e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d009      	beq.n	800149e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148c:	015a      	lsls	r2, r3, #5
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	4413      	add	r3, r2
 8001492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001496:	461a      	mov	r2, r3
 8001498:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800149c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800149e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a0:	3301      	adds	r3, #1
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80014a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a6:	085b      	lsrs	r3, r3, #1
 80014a8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80014aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d199      	bne.n	80013e4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f003 fa49 	bl	800494c <USB_ReadInterrupts>
 80014ba:	4603      	mov	r3, r0
 80014bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80014c4:	f040 8087 	bne.w	80015d6 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f003 fa6a 	bl	80049a6 <USB_ReadDevAllInEpInterrupt>
 80014d2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80014d4:	2300      	movs	r3, #0
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80014d8:	e07a      	b.n	80015d0 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80014da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d06f      	beq.n	80015c4 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ea:	b2d2      	uxtb	r2, r2
 80014ec:	4611      	mov	r1, r2
 80014ee:	4618      	mov	r0, r3
 80014f0:	f003 fa91 	bl	8004a16 <USB_ReadDevInEPInterrupt>
 80014f4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d020      	beq.n	8001542 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001502:	f003 030f 	and.w	r3, r3, #15
 8001506:	2201      	movs	r2, #1
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001514:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	43db      	mvns	r3, r3
 800151a:	69f9      	ldr	r1, [r7, #28]
 800151c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001520:	4013      	ands	r3, r2
 8001522:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001526:	015a      	lsls	r2, r3, #5
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	4413      	add	r3, r2
 800152c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001530:	461a      	mov	r2, r3
 8001532:	2301      	movs	r3, #1
 8001534:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001538:	b2db      	uxtb	r3, r3
 800153a:	4619      	mov	r1, r3
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f005 fa54 	bl	80069ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	f003 0308 	and.w	r3, r3, #8
 8001548:	2b00      	cmp	r3, #0
 800154a:	d008      	beq.n	800155e <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800154c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154e:	015a      	lsls	r2, r3, #5
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	4413      	add	r3, r2
 8001554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001558:	461a      	mov	r2, r3
 800155a:	2308      	movs	r3, #8
 800155c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	f003 0310 	and.w	r3, r3, #16
 8001564:	2b00      	cmp	r3, #0
 8001566:	d008      	beq.n	800157a <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156a:	015a      	lsls	r2, r3, #5
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	4413      	add	r3, r2
 8001570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001574:	461a      	mov	r2, r3
 8001576:	2310      	movs	r3, #16
 8001578:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001580:	2b00      	cmp	r3, #0
 8001582:	d008      	beq.n	8001596 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001586:	015a      	lsls	r2, r3, #5
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	4413      	add	r3, r2
 800158c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001590:	461a      	mov	r2, r3
 8001592:	2340      	movs	r3, #64	; 0x40
 8001594:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d008      	beq.n	80015b2 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80015a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a2:	015a      	lsls	r2, r3, #5
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	4413      	add	r3, r2
 80015a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015ac:	461a      	mov	r2, r3
 80015ae:	2302      	movs	r3, #2
 80015b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d003      	beq.n	80015c4 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80015bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f000 fc29 	bl	8001e16 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80015c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c6:	3301      	adds	r3, #1
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80015ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015cc:	085b      	lsrs	r3, r3, #1
 80015ce:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80015d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d181      	bne.n	80014da <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f003 f9b6 	bl	800494c <USB_ReadInterrupts>
 80015e0:	4603      	mov	r3, r0
 80015e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80015e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80015ea:	d122      	bne.n	8001632 <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	69fa      	ldr	r2, [r7, #28]
 80015f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015fa:	f023 0301 	bic.w	r3, r3, #1
 80015fe:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001606:	2b01      	cmp	r3, #1
 8001608:	d108      	bne.n	800161c <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001612:	2100      	movs	r1, #0
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f005 fd01 	bl	800701c <HAL_PCDEx_LPM_Callback>
 800161a:	e002      	b.n	8001622 <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f005 fa51 	bl	8006ac4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	695a      	ldr	r2, [r3, #20]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001630:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f003 f988 	bl	800494c <USB_ReadInterrupts>
 800163c:	4603      	mov	r3, r0
 800163e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001642:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001646:	d112      	bne.n	800166e <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	2b01      	cmp	r3, #1
 8001656:	d102      	bne.n	800165e <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f005 fa0d 	bl	8006a78 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	695a      	ldr	r2, [r3, #20]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800166c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f003 f96a 	bl	800494c <USB_ReadInterrupts>
 8001678:	4603      	mov	r3, r0
 800167a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800167e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001682:	d121      	bne.n	80016c8 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	695a      	ldr	r2, [r3, #20]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001692:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800169a:	2b00      	cmp	r3, #0
 800169c:	d111      	bne.n	80016c2 <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2201      	movs	r2, #1
 80016a2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ac:	089b      	lsrs	r3, r3, #2
 80016ae:	f003 020f 	and.w	r2, r3, #15
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80016b8:	2101      	movs	r1, #1
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f005 fcae 	bl	800701c <HAL_PCDEx_LPM_Callback>
 80016c0:	e002      	b.n	80016c8 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f005 f9d8 	bl	8006a78 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f003 f93d 	bl	800494c <USB_ReadInterrupts>
 80016d2:	4603      	mov	r3, r0
 80016d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016dc:	f040 80c5 	bne.w	800186a <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	69fa      	ldr	r2, [r7, #28]
 80016ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016ee:	f023 0301 	bic.w	r3, r3, #1
 80016f2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2110      	movs	r1, #16
 80016fa:	4618      	mov	r0, r3
 80016fc:	f002 fab2 	bl	8003c64 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001700:	2300      	movs	r3, #0
 8001702:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001704:	e056      	b.n	80017b4 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001708:	015a      	lsls	r2, r3, #5
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	4413      	add	r3, r2
 800170e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001712:	461a      	mov	r2, r3
 8001714:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001718:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800171a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800171c:	015a      	lsls	r2, r3, #5
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	4413      	add	r3, r2
 8001722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800172a:	0151      	lsls	r1, r2, #5
 800172c:	69fa      	ldr	r2, [r7, #28]
 800172e:	440a      	add	r2, r1
 8001730:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001734:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001738:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800173a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800173c:	015a      	lsls	r2, r3, #5
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	4413      	add	r3, r2
 8001742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800174a:	0151      	lsls	r1, r2, #5
 800174c:	69fa      	ldr	r2, [r7, #28]
 800174e:	440a      	add	r2, r1
 8001750:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001754:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001758:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800175a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800175c:	015a      	lsls	r2, r3, #5
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	4413      	add	r3, r2
 8001762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001766:	461a      	mov	r2, r3
 8001768:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800176c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800176e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001770:	015a      	lsls	r2, r3, #5
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	4413      	add	r3, r2
 8001776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800177e:	0151      	lsls	r1, r2, #5
 8001780:	69fa      	ldr	r2, [r7, #28]
 8001782:	440a      	add	r2, r1
 8001784:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001788:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800178c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800178e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001790:	015a      	lsls	r2, r3, #5
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	4413      	add	r3, r2
 8001796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800179e:	0151      	lsls	r1, r2, #5
 80017a0:	69fa      	ldr	r2, [r7, #28]
 80017a2:	440a      	add	r2, r1
 80017a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80017a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80017ac:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b0:	3301      	adds	r3, #1
 80017b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d3a3      	bcc.n	8001706 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	69fa      	ldr	r2, [r7, #28]
 80017c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017cc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80017d0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d016      	beq.n	8001808 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017e4:	69fa      	ldr	r2, [r7, #28]
 80017e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017ea:	f043 030b 	orr.w	r3, r3, #11
 80017ee:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fa:	69fa      	ldr	r2, [r7, #28]
 80017fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001800:	f043 030b 	orr.w	r3, r3, #11
 8001804:	6453      	str	r3, [r2, #68]	; 0x44
 8001806:	e015      	b.n	8001834 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	69fa      	ldr	r2, [r7, #28]
 8001812:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001816:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800181a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800181e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001826:	691b      	ldr	r3, [r3, #16]
 8001828:	69fa      	ldr	r2, [r7, #28]
 800182a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800182e:	f043 030b 	orr.w	r3, r3, #11
 8001832:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	69fa      	ldr	r2, [r7, #28]
 800183e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001842:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001846:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001852:	4619      	mov	r1, r3
 8001854:	4610      	mov	r0, r2
 8001856:	f003 f93d 	bl	8004ad4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	695a      	ldr	r2, [r3, #20]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001868:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f003 f86c 	bl	800494c <USB_ReadInterrupts>
 8001874:	4603      	mov	r3, r0
 8001876:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800187a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800187e:	d124      	bne.n	80018ca <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f003 f902 	bl	8004a8e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f002 fa49 	bl	8003d26 <USB_GetDevSpeed>
 8001894:	4603      	mov	r3, r0
 8001896:	461a      	mov	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681c      	ldr	r4, [r3, #0]
 80018a0:	f001 fa08 	bl	8002cb4 <HAL_RCC_GetHCLKFreq>
 80018a4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	461a      	mov	r2, r3
 80018ae:	4620      	mov	r0, r4
 80018b0:	f001 ffa4 	bl	80037fc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f005 f8c0 	bl	8006a3a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	695a      	ldr	r2, [r3, #20]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80018c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f003 f83c 	bl	800494c <USB_ReadInterrupts>
 80018d4:	4603      	mov	r3, r0
 80018d6:	f003 0308 	and.w	r3, r3, #8
 80018da:	2b08      	cmp	r3, #8
 80018dc:	d10a      	bne.n	80018f4 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f005 f89d 	bl	8006a1e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	695a      	ldr	r2, [r3, #20]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f002 0208 	and.w	r2, r2, #8
 80018f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f003 f827 	bl	800494c <USB_ReadInterrupts>
 80018fe:	4603      	mov	r3, r0
 8001900:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001904:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001908:	d10f      	bne.n	800192a <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800190a:	2300      	movs	r3, #0
 800190c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	b2db      	uxtb	r3, r3
 8001912:	4619      	mov	r1, r3
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f005 f90f 	bl	8006b38 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	695a      	ldr	r2, [r3, #20]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001928:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f003 f80c 	bl	800494c <USB_ReadInterrupts>
 8001934:	4603      	mov	r3, r0
 8001936:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800193a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800193e:	d10f      	bne.n	8001960 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001940:	2300      	movs	r3, #0
 8001942:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	b2db      	uxtb	r3, r3
 8001948:	4619      	mov	r1, r3
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f005 f8e2 	bl	8006b14 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	695a      	ldr	r2, [r3, #20]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800195e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f002 fff1 	bl	800494c <USB_ReadInterrupts>
 800196a:	4603      	mov	r3, r0
 800196c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001974:	d10a      	bne.n	800198c <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f005 f8f0 	bl	8006b5c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	695a      	ldr	r2, [r3, #20]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800198a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4618      	mov	r0, r3
 8001992:	f002 ffdb 	bl	800494c <USB_ReadInterrupts>
 8001996:	4603      	mov	r3, r0
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	2b04      	cmp	r3, #4
 800199e:	d115      	bne.n	80019cc <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	f003 0304 	and.w	r3, r3, #4
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d002      	beq.n	80019b8 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f005 f8e0 	bl	8006b78 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6859      	ldr	r1, [r3, #4]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	e000      	b.n	80019cc <HAL_PCD_IRQHandler+0x742>
      return;
 80019ca:	bf00      	nop
    }
  }
}
 80019cc:	3734      	adds	r7, #52	; 0x34
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd90      	pop	{r4, r7, pc}

080019d2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
 80019da:	460b      	mov	r3, r1
 80019dc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d101      	bne.n	80019ec <HAL_PCD_SetAddress+0x1a>
 80019e8:	2302      	movs	r3, #2
 80019ea:	e013      	b.n	8001a14 <HAL_PCD_SetAddress+0x42>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	78fa      	ldrb	r2, [r7, #3]
 80019f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	78fa      	ldrb	r2, [r7, #3]
 8001a02:	4611      	mov	r1, r2
 8001a04:	4618      	mov	r0, r3
 8001a06:	f002 ff39 	bl	800487c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	4608      	mov	r0, r1
 8001a26:	4611      	mov	r1, r2
 8001a28:	461a      	mov	r2, r3
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	70fb      	strb	r3, [r7, #3]
 8001a2e:	460b      	mov	r3, r1
 8001a30:	803b      	strh	r3, [r7, #0]
 8001a32:	4613      	mov	r3, r2
 8001a34:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001a36:	2300      	movs	r3, #0
 8001a38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	da0f      	bge.n	8001a62 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a42:	78fb      	ldrb	r3, [r7, #3]
 8001a44:	f003 020f 	and.w	r2, r3, #15
 8001a48:	4613      	mov	r3, r2
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	1a9b      	subs	r3, r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	3338      	adds	r3, #56	; 0x38
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	4413      	add	r3, r2
 8001a56:	3304      	adds	r3, #4
 8001a58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	705a      	strb	r2, [r3, #1]
 8001a60:	e00f      	b.n	8001a82 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a62:	78fb      	ldrb	r3, [r7, #3]
 8001a64:	f003 020f 	and.w	r2, r3, #15
 8001a68:	4613      	mov	r3, r2
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	1a9b      	subs	r3, r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	4413      	add	r3, r2
 8001a78:	3304      	adds	r3, #4
 8001a7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a82:	78fb      	ldrb	r3, [r7, #3]
 8001a84:	f003 030f 	and.w	r3, r3, #15
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a8e:	883a      	ldrh	r2, [r7, #0]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	78ba      	ldrb	r2, [r7, #2]
 8001a98:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	785b      	ldrb	r3, [r3, #1]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d004      	beq.n	8001aac <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001aac:	78bb      	ldrb	r3, [r7, #2]
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d102      	bne.n	8001ab8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d101      	bne.n	8001ac6 <HAL_PCD_EP_Open+0xaa>
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	e00e      	b.n	8001ae4 <HAL_PCD_EP_Open+0xc8>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68f9      	ldr	r1, [r7, #12]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f002 f945 	bl	8003d64 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001ae2:	7afb      	ldrb	r3, [r7, #11]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001af8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	da0f      	bge.n	8001b20 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b00:	78fb      	ldrb	r3, [r7, #3]
 8001b02:	f003 020f 	and.w	r2, r3, #15
 8001b06:	4613      	mov	r3, r2
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	1a9b      	subs	r3, r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	3338      	adds	r3, #56	; 0x38
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	4413      	add	r3, r2
 8001b14:	3304      	adds	r3, #4
 8001b16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	705a      	strb	r2, [r3, #1]
 8001b1e:	e00f      	b.n	8001b40 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b20:	78fb      	ldrb	r3, [r7, #3]
 8001b22:	f003 020f 	and.w	r2, r3, #15
 8001b26:	4613      	mov	r3, r2
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	1a9b      	subs	r3, r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	4413      	add	r3, r2
 8001b36:	3304      	adds	r3, #4
 8001b38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001b40:	78fb      	ldrb	r3, [r7, #3]
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d101      	bne.n	8001b5a <HAL_PCD_EP_Close+0x6e>
 8001b56:	2302      	movs	r3, #2
 8001b58:	e00e      	b.n	8001b78 <HAL_PCD_EP_Close+0x8c>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	68f9      	ldr	r1, [r7, #12]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f002 f983 	bl	8003e74 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	607a      	str	r2, [r7, #4]
 8001b8a:	603b      	str	r3, [r7, #0]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b90:	7afb      	ldrb	r3, [r7, #11]
 8001b92:	f003 020f 	and.w	r2, r3, #15
 8001b96:	4613      	mov	r3, r2
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	1a9b      	subs	r3, r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	3304      	adds	r3, #4
 8001ba8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bc2:	7afb      	ldrb	r3, [r7, #11]
 8001bc4:	f003 030f 	and.w	r3, r3, #15
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bce:	7afb      	ldrb	r3, [r7, #11]
 8001bd0:	f003 030f 	and.w	r3, r3, #15
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d106      	bne.n	8001be6 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6979      	ldr	r1, [r7, #20]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f002 fc00 	bl	80043e4 <USB_EP0StartXfer>
 8001be4:	e005      	b.n	8001bf2 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6979      	ldr	r1, [r7, #20]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f002 fa1d 	bl	800402c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3718      	adds	r7, #24
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	460b      	mov	r3, r1
 8001c06:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001c08:	78fb      	ldrb	r3, [r7, #3]
 8001c0a:	f003 020f 	and.w	r2, r3, #15
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	4613      	mov	r3, r2
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	1a9b      	subs	r3, r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	440b      	add	r3, r1
 8001c1a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001c1e:	681b      	ldr	r3, [r3, #0]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	607a      	str	r2, [r7, #4]
 8001c36:	603b      	str	r3, [r7, #0]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c3c:	7afb      	ldrb	r3, [r7, #11]
 8001c3e:	f003 020f 	and.w	r2, r3, #15
 8001c42:	4613      	mov	r3, r2
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	1a9b      	subs	r3, r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	3338      	adds	r3, #56	; 0x38
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	4413      	add	r3, r2
 8001c50:	3304      	adds	r3, #4
 8001c52:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	2200      	movs	r2, #0
 8001c64:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c6c:	7afb      	ldrb	r3, [r7, #11]
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c78:	7afb      	ldrb	r3, [r7, #11]
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d106      	bne.n	8001c90 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6979      	ldr	r1, [r7, #20]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f002 fbab 	bl	80043e4 <USB_EP0StartXfer>
 8001c8e:	e005      	b.n	8001c9c <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6979      	ldr	r1, [r7, #20]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f002 f9c8 	bl	800402c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b084      	sub	sp, #16
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
 8001cae:	460b      	mov	r3, r1
 8001cb0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001cb2:	78fb      	ldrb	r3, [r7, #3]
 8001cb4:	f003 020f 	and.w	r2, r3, #15
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d901      	bls.n	8001cc4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e04e      	b.n	8001d62 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001cc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	da0f      	bge.n	8001cec <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ccc:	78fb      	ldrb	r3, [r7, #3]
 8001cce:	f003 020f 	and.w	r2, r3, #15
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	1a9b      	subs	r3, r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	3338      	adds	r3, #56	; 0x38
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	4413      	add	r3, r2
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	705a      	strb	r2, [r3, #1]
 8001cea:	e00d      	b.n	8001d08 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001cec:	78fa      	ldrb	r2, [r7, #3]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	1a9b      	subs	r3, r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	3304      	adds	r3, #4
 8001d00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2200      	movs	r2, #0
 8001d06:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d0e:	78fb      	ldrb	r3, [r7, #3]
 8001d10:	f003 030f 	and.w	r3, r3, #15
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d101      	bne.n	8001d28 <HAL_PCD_EP_SetStall+0x82>
 8001d24:	2302      	movs	r3, #2
 8001d26:	e01c      	b.n	8001d62 <HAL_PCD_EP_SetStall+0xbc>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68f9      	ldr	r1, [r7, #12]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f002 fccc 	bl	80046d4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d3c:	78fb      	ldrb	r3, [r7, #3]
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d108      	bne.n	8001d58 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d50:	4619      	mov	r1, r3
 8001d52:	4610      	mov	r0, r2
 8001d54:	f002 febe 	bl	8004ad4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b084      	sub	sp, #16
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
 8001d72:	460b      	mov	r3, r1
 8001d74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d76:	78fb      	ldrb	r3, [r7, #3]
 8001d78:	f003 020f 	and.w	r2, r3, #15
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d901      	bls.n	8001d88 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e042      	b.n	8001e0e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	da0f      	bge.n	8001db0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d90:	78fb      	ldrb	r3, [r7, #3]
 8001d92:	f003 020f 	and.w	r2, r3, #15
 8001d96:	4613      	mov	r3, r2
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	1a9b      	subs	r3, r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	3338      	adds	r3, #56	; 0x38
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	4413      	add	r3, r2
 8001da4:	3304      	adds	r3, #4
 8001da6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2201      	movs	r2, #1
 8001dac:	705a      	strb	r2, [r3, #1]
 8001dae:	e00f      	b.n	8001dd0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001db0:	78fb      	ldrb	r3, [r7, #3]
 8001db2:	f003 020f 	and.w	r2, r3, #15
 8001db6:	4613      	mov	r3, r2
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	1a9b      	subs	r3, r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	3304      	adds	r3, #4
 8001dc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dd6:	78fb      	ldrb	r3, [r7, #3]
 8001dd8:	f003 030f 	and.w	r3, r3, #15
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d101      	bne.n	8001df0 <HAL_PCD_EP_ClrStall+0x86>
 8001dec:	2302      	movs	r3, #2
 8001dee:	e00e      	b.n	8001e0e <HAL_PCD_EP_ClrStall+0xa4>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68f9      	ldr	r1, [r7, #12]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f002 fcd6 	bl	80047b0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b088      	sub	sp, #32
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
 8001e1e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	1a9b      	subs	r3, r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	3338      	adds	r3, #56	; 0x38
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	4413      	add	r3, r2
 8001e3a:	3304      	adds	r3, #4
 8001e3c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	699a      	ldr	r2, [r3, #24]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d901      	bls.n	8001e4e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e067      	b.n	8001f1e <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	695a      	ldr	r2, [r3, #20]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	69fa      	ldr	r2, [r7, #28]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d902      	bls.n	8001e6a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	3303      	adds	r3, #3
 8001e6e:	089b      	lsrs	r3, r3, #2
 8001e70:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e72:	e026      	b.n	8001ec2 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	695a      	ldr	r2, [r3, #20]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	69fa      	ldr	r2, [r7, #28]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d902      	bls.n	8001e90 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	3303      	adds	r3, #3
 8001e94:	089b      	lsrs	r3, r3, #2
 8001e96:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	68d9      	ldr	r1, [r3, #12]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	6978      	ldr	r0, [r7, #20]
 8001ea6:	f002 fbbb 	bl	8004620 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	68da      	ldr	r2, [r3, #12]
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	441a      	add	r2, r3
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	699a      	ldr	r2, [r3, #24]
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	441a      	add	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	015a      	lsls	r2, r3, #5
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	4413      	add	r3, r2
 8001eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d809      	bhi.n	8001eec <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	699a      	ldr	r2, [r3, #24]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d203      	bcs.n	8001eec <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	695b      	ldr	r3, [r3, #20]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1c3      	bne.n	8001e74 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	695a      	ldr	r2, [r3, #20]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d811      	bhi.n	8001f1c <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	2201      	movs	r2, #1
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	43db      	mvns	r3, r3
 8001f12:	6939      	ldr	r1, [r7, #16]
 8001f14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001f18:	4013      	ands	r3, r2
 8001f1a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3720      	adds	r7, #32
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
	...

08001f28 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	333c      	adds	r3, #60	; 0x3c
 8001f40:	3304      	adds	r3, #4
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	015a      	lsls	r2, r3, #5
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	4a19      	ldr	r2, [pc, #100]	; (8001fc0 <PCD_EP_OutXfrComplete_int+0x98>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d124      	bne.n	8001fa8 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00a      	beq.n	8001f7e <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	015a      	lsls	r2, r3, #5
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	4413      	add	r3, r2
 8001f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f74:	461a      	mov	r2, r3
 8001f76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f7a:	6093      	str	r3, [r2, #8]
 8001f7c:	e01a      	b.n	8001fb4 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	f003 0320 	and.w	r3, r3, #32
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d008      	beq.n	8001f9a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	015a      	lsls	r2, r3, #5
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	4413      	add	r3, r2
 8001f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f94:	461a      	mov	r2, r3
 8001f96:	2320      	movs	r3, #32
 8001f98:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f004 fd07 	bl	80069b4 <HAL_PCD_DataOutStageCallback>
 8001fa6:	e005      	b.n	8001fb4 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	4619      	mov	r1, r3
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f004 fd00 	bl	80069b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3718      	adds	r7, #24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	4f54310a 	.word	0x4f54310a

08001fc4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	333c      	adds	r3, #60	; 0x3c
 8001fdc:	3304      	adds	r3, #4
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	015a      	lsls	r2, r3, #5
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	4413      	add	r3, r2
 8001fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	4a0c      	ldr	r2, [pc, #48]	; (8002028 <PCD_EP_OutSetupPacket_int+0x64>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d90e      	bls.n	8002018 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002000:	2b00      	cmp	r3, #0
 8002002:	d009      	beq.n	8002018 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	015a      	lsls	r2, r3, #5
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	4413      	add	r3, r2
 800200c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002010:	461a      	mov	r2, r3
 8002012:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002016:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f004 fcb9 	bl	8006990 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	4f54300a 	.word	0x4f54300a

0800202c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	460b      	mov	r3, r1
 8002036:	70fb      	strb	r3, [r7, #3]
 8002038:	4613      	mov	r3, r2
 800203a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002042:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002044:	78fb      	ldrb	r3, [r7, #3]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d107      	bne.n	800205a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800204a:	883b      	ldrh	r3, [r7, #0]
 800204c:	0419      	lsls	r1, r3, #16
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	430a      	orrs	r2, r1
 8002056:	629a      	str	r2, [r3, #40]	; 0x28
 8002058:	e028      	b.n	80020ac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002060:	0c1b      	lsrs	r3, r3, #16
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	4413      	add	r3, r2
 8002066:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002068:	2300      	movs	r3, #0
 800206a:	73fb      	strb	r3, [r7, #15]
 800206c:	e00d      	b.n	800208a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	7bfb      	ldrb	r3, [r7, #15]
 8002074:	3340      	adds	r3, #64	; 0x40
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4413      	add	r3, r2
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	0c1b      	lsrs	r3, r3, #16
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	4413      	add	r3, r2
 8002082:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002084:	7bfb      	ldrb	r3, [r7, #15]
 8002086:	3301      	adds	r3, #1
 8002088:	73fb      	strb	r3, [r7, #15]
 800208a:	7bfa      	ldrb	r2, [r7, #15]
 800208c:	78fb      	ldrb	r3, [r7, #3]
 800208e:	3b01      	subs	r3, #1
 8002090:	429a      	cmp	r2, r3
 8002092:	d3ec      	bcc.n	800206e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002094:	883b      	ldrh	r3, [r7, #0]
 8002096:	0418      	lsls	r0, r3, #16
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6819      	ldr	r1, [r3, #0]
 800209c:	78fb      	ldrb	r3, [r7, #3]
 800209e:	3b01      	subs	r3, #1
 80020a0:	68ba      	ldr	r2, [r7, #8]
 80020a2:	4302      	orrs	r2, r0
 80020a4:	3340      	adds	r3, #64	; 0x40
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
 80020c2:	460b      	mov	r3, r1
 80020c4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	887a      	ldrh	r2, [r7, #2]
 80020cc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800210a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800210e:	f043 0303 	orr.w	r3, r3, #3
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002128:	4b04      	ldr	r3, [pc, #16]	; (800213c <HAL_PWREx_GetVoltageRange+0x18>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002130:	4618      	mov	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	40007000 	.word	0x40007000

08002140 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800214e:	d130      	bne.n	80021b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002150:	4b23      	ldr	r3, [pc, #140]	; (80021e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002158:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800215c:	d038      	beq.n	80021d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800215e:	4b20      	ldr	r3, [pc, #128]	; (80021e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002166:	4a1e      	ldr	r2, [pc, #120]	; (80021e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002168:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800216c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800216e:	4b1d      	ldr	r3, [pc, #116]	; (80021e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2232      	movs	r2, #50	; 0x32
 8002174:	fb02 f303 	mul.w	r3, r2, r3
 8002178:	4a1b      	ldr	r2, [pc, #108]	; (80021e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800217a:	fba2 2303 	umull	r2, r3, r2, r3
 800217e:	0c9b      	lsrs	r3, r3, #18
 8002180:	3301      	adds	r3, #1
 8002182:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002184:	e002      	b.n	800218c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	3b01      	subs	r3, #1
 800218a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800218c:	4b14      	ldr	r3, [pc, #80]	; (80021e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002194:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002198:	d102      	bne.n	80021a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1f2      	bne.n	8002186 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021a0:	4b0f      	ldr	r3, [pc, #60]	; (80021e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ac:	d110      	bne.n	80021d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e00f      	b.n	80021d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80021b2:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021be:	d007      	beq.n	80021d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021c0:	4b07      	ldr	r3, [pc, #28]	; (80021e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021c8:	4a05      	ldr	r2, [pc, #20]	; (80021e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3714      	adds	r7, #20
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	40007000 	.word	0x40007000
 80021e4:	20000028 	.word	0x20000028
 80021e8:	431bde83 	.word	0x431bde83

080021ec <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80021f0:	4b05      	ldr	r3, [pc, #20]	; (8002208 <HAL_PWREx_EnableVddUSB+0x1c>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	4a04      	ldr	r2, [pc, #16]	; (8002208 <HAL_PWREx_EnableVddUSB+0x1c>)
 80021f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021fa:	6053      	str	r3, [r2, #4]
}
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	40007000 	.word	0x40007000

0800220c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b088      	sub	sp, #32
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e3d4      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800221e:	4ba1      	ldr	r3, [pc, #644]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002228:	4b9e      	ldr	r3, [pc, #632]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	f003 0303 	and.w	r3, r3, #3
 8002230:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0310 	and.w	r3, r3, #16
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 80e4 	beq.w	8002408 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d007      	beq.n	8002256 <HAL_RCC_OscConfig+0x4a>
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	2b0c      	cmp	r3, #12
 800224a:	f040 808b 	bne.w	8002364 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	2b01      	cmp	r3, #1
 8002252:	f040 8087 	bne.w	8002364 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002256:	4b93      	ldr	r3, [pc, #588]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d005      	beq.n	800226e <HAL_RCC_OscConfig+0x62>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e3ac      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a1a      	ldr	r2, [r3, #32]
 8002272:	4b8c      	ldr	r3, [pc, #560]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	2b00      	cmp	r3, #0
 800227c:	d004      	beq.n	8002288 <HAL_RCC_OscConfig+0x7c>
 800227e:	4b89      	ldr	r3, [pc, #548]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002286:	e005      	b.n	8002294 <HAL_RCC_OscConfig+0x88>
 8002288:	4b86      	ldr	r3, [pc, #536]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 800228a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800228e:	091b      	lsrs	r3, r3, #4
 8002290:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002294:	4293      	cmp	r3, r2
 8002296:	d223      	bcs.n	80022e0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	4618      	mov	r0, r3
 800229e:	f000 fd15 	bl	8002ccc <RCC_SetFlashLatencyFromMSIRange>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e38d      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022ac:	4b7d      	ldr	r3, [pc, #500]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a7c      	ldr	r2, [pc, #496]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80022b2:	f043 0308 	orr.w	r3, r3, #8
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	4b7a      	ldr	r3, [pc, #488]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	4977      	ldr	r1, [pc, #476]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022ca:	4b76      	ldr	r3, [pc, #472]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	021b      	lsls	r3, r3, #8
 80022d8:	4972      	ldr	r1, [pc, #456]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	604b      	str	r3, [r1, #4]
 80022de:	e025      	b.n	800232c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022e0:	4b70      	ldr	r3, [pc, #448]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a6f      	ldr	r2, [pc, #444]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80022e6:	f043 0308 	orr.w	r3, r3, #8
 80022ea:	6013      	str	r3, [r2, #0]
 80022ec:	4b6d      	ldr	r3, [pc, #436]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	496a      	ldr	r1, [pc, #424]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022fe:	4b69      	ldr	r3, [pc, #420]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	021b      	lsls	r3, r3, #8
 800230c:	4965      	ldr	r1, [pc, #404]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 800230e:	4313      	orrs	r3, r2
 8002310:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d109      	bne.n	800232c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	4618      	mov	r0, r3
 800231e:	f000 fcd5 	bl	8002ccc <RCC_SetFlashLatencyFromMSIRange>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e34d      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800232c:	f000 fc36 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 8002330:	4602      	mov	r2, r0
 8002332:	4b5c      	ldr	r3, [pc, #368]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	091b      	lsrs	r3, r3, #4
 8002338:	f003 030f 	and.w	r3, r3, #15
 800233c:	495a      	ldr	r1, [pc, #360]	; (80024a8 <HAL_RCC_OscConfig+0x29c>)
 800233e:	5ccb      	ldrb	r3, [r1, r3]
 8002340:	f003 031f 	and.w	r3, r3, #31
 8002344:	fa22 f303 	lsr.w	r3, r2, r3
 8002348:	4a58      	ldr	r2, [pc, #352]	; (80024ac <HAL_RCC_OscConfig+0x2a0>)
 800234a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800234c:	4b58      	ldr	r3, [pc, #352]	; (80024b0 <HAL_RCC_OscConfig+0x2a4>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4618      	mov	r0, r3
 8002352:	f7fe fad9 	bl	8000908 <HAL_InitTick>
 8002356:	4603      	mov	r3, r0
 8002358:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800235a:	7bfb      	ldrb	r3, [r7, #15]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d052      	beq.n	8002406 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002360:	7bfb      	ldrb	r3, [r7, #15]
 8002362:	e331      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d032      	beq.n	80023d2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800236c:	4b4d      	ldr	r3, [pc, #308]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a4c      	ldr	r2, [pc, #304]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 8002372:	f043 0301 	orr.w	r3, r3, #1
 8002376:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002378:	f7fe fb16 	bl	80009a8 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002380:	f7fe fb12 	bl	80009a8 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e31a      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002392:	4b44      	ldr	r3, [pc, #272]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0f0      	beq.n	8002380 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800239e:	4b41      	ldr	r3, [pc, #260]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a40      	ldr	r2, [pc, #256]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80023a4:	f043 0308 	orr.w	r3, r3, #8
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	4b3e      	ldr	r3, [pc, #248]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	493b      	ldr	r1, [pc, #236]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023bc:	4b39      	ldr	r3, [pc, #228]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69db      	ldr	r3, [r3, #28]
 80023c8:	021b      	lsls	r3, r3, #8
 80023ca:	4936      	ldr	r1, [pc, #216]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	604b      	str	r3, [r1, #4]
 80023d0:	e01a      	b.n	8002408 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023d2:	4b34      	ldr	r3, [pc, #208]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a33      	ldr	r2, [pc, #204]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80023d8:	f023 0301 	bic.w	r3, r3, #1
 80023dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023de:	f7fe fae3 	bl	80009a8 <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023e4:	e008      	b.n	80023f8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023e6:	f7fe fadf 	bl	80009a8 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e2e7      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023f8:	4b2a      	ldr	r3, [pc, #168]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1f0      	bne.n	80023e6 <HAL_RCC_OscConfig+0x1da>
 8002404:	e000      	b.n	8002408 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002406:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	2b00      	cmp	r3, #0
 8002412:	d074      	beq.n	80024fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	2b08      	cmp	r3, #8
 8002418:	d005      	beq.n	8002426 <HAL_RCC_OscConfig+0x21a>
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	2b0c      	cmp	r3, #12
 800241e:	d10e      	bne.n	800243e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	2b03      	cmp	r3, #3
 8002424:	d10b      	bne.n	800243e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002426:	4b1f      	ldr	r3, [pc, #124]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d064      	beq.n	80024fc <HAL_RCC_OscConfig+0x2f0>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d160      	bne.n	80024fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e2c4      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002446:	d106      	bne.n	8002456 <HAL_RCC_OscConfig+0x24a>
 8002448:	4b16      	ldr	r3, [pc, #88]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a15      	ldr	r2, [pc, #84]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 800244e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002452:	6013      	str	r3, [r2, #0]
 8002454:	e01d      	b.n	8002492 <HAL_RCC_OscConfig+0x286>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800245e:	d10c      	bne.n	800247a <HAL_RCC_OscConfig+0x26e>
 8002460:	4b10      	ldr	r3, [pc, #64]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a0f      	ldr	r2, [pc, #60]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 8002466:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800246a:	6013      	str	r3, [r2, #0]
 800246c:	4b0d      	ldr	r3, [pc, #52]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a0c      	ldr	r2, [pc, #48]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 8002472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002476:	6013      	str	r3, [r2, #0]
 8002478:	e00b      	b.n	8002492 <HAL_RCC_OscConfig+0x286>
 800247a:	4b0a      	ldr	r3, [pc, #40]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a09      	ldr	r2, [pc, #36]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 8002480:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	4b07      	ldr	r3, [pc, #28]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a06      	ldr	r2, [pc, #24]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 800248c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002490:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d01c      	beq.n	80024d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249a:	f7fe fa85 	bl	80009a8 <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024a0:	e011      	b.n	80024c6 <HAL_RCC_OscConfig+0x2ba>
 80024a2:	bf00      	nop
 80024a4:	40021000 	.word	0x40021000
 80024a8:	08008a20 	.word	0x08008a20
 80024ac:	20000028 	.word	0x20000028
 80024b0:	2000002c 	.word	0x2000002c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b4:	f7fe fa78 	bl	80009a8 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b64      	cmp	r3, #100	; 0x64
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e280      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024c6:	4baf      	ldr	r3, [pc, #700]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d0f0      	beq.n	80024b4 <HAL_RCC_OscConfig+0x2a8>
 80024d2:	e014      	b.n	80024fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d4:	f7fe fa68 	bl	80009a8 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024dc:	f7fe fa64 	bl	80009a8 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b64      	cmp	r3, #100	; 0x64
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e26c      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024ee:	4ba5      	ldr	r3, [pc, #660]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1f0      	bne.n	80024dc <HAL_RCC_OscConfig+0x2d0>
 80024fa:	e000      	b.n	80024fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d060      	beq.n	80025cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	2b04      	cmp	r3, #4
 800250e:	d005      	beq.n	800251c <HAL_RCC_OscConfig+0x310>
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	2b0c      	cmp	r3, #12
 8002514:	d119      	bne.n	800254a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	2b02      	cmp	r3, #2
 800251a:	d116      	bne.n	800254a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800251c:	4b99      	ldr	r3, [pc, #612]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <HAL_RCC_OscConfig+0x328>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e249      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002534:	4b93      	ldr	r3, [pc, #588]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	061b      	lsls	r3, r3, #24
 8002542:	4990      	ldr	r1, [pc, #576]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002544:	4313      	orrs	r3, r2
 8002546:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002548:	e040      	b.n	80025cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d023      	beq.n	800259a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002552:	4b8c      	ldr	r3, [pc, #560]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a8b      	ldr	r2, [pc, #556]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800255c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255e:	f7fe fa23 	bl	80009a8 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002566:	f7fe fa1f 	bl	80009a8 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e227      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002578:	4b82      	ldr	r3, [pc, #520]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0f0      	beq.n	8002566 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002584:	4b7f      	ldr	r3, [pc, #508]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	061b      	lsls	r3, r3, #24
 8002592:	497c      	ldr	r1, [pc, #496]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002594:	4313      	orrs	r3, r2
 8002596:	604b      	str	r3, [r1, #4]
 8002598:	e018      	b.n	80025cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800259a:	4b7a      	ldr	r3, [pc, #488]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a79      	ldr	r2, [pc, #484]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 80025a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a6:	f7fe f9ff 	bl	80009a8 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ae:	f7fe f9fb 	bl	80009a8 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e203      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025c0:	4b70      	ldr	r3, [pc, #448]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1f0      	bne.n	80025ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0308 	and.w	r3, r3, #8
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d03c      	beq.n	8002652 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d01c      	beq.n	800261a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025e0:	4b68      	ldr	r3, [pc, #416]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 80025e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025e6:	4a67      	ldr	r2, [pc, #412]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f0:	f7fe f9da 	bl	80009a8 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025f8:	f7fe f9d6 	bl	80009a8 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e1de      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800260a:	4b5e      	ldr	r3, [pc, #376]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 800260c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0ef      	beq.n	80025f8 <HAL_RCC_OscConfig+0x3ec>
 8002618:	e01b      	b.n	8002652 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800261a:	4b5a      	ldr	r3, [pc, #360]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 800261c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002620:	4a58      	ldr	r2, [pc, #352]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002622:	f023 0301 	bic.w	r3, r3, #1
 8002626:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262a:	f7fe f9bd 	bl	80009a8 <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002632:	f7fe f9b9 	bl	80009a8 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e1c1      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002644:	4b4f      	ldr	r3, [pc, #316]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002646:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1ef      	bne.n	8002632 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0304 	and.w	r3, r3, #4
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 80a6 	beq.w	80027ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002660:	2300      	movs	r3, #0
 8002662:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002664:	4b47      	ldr	r3, [pc, #284]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d10d      	bne.n	800268c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002670:	4b44      	ldr	r3, [pc, #272]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002674:	4a43      	ldr	r2, [pc, #268]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800267a:	6593      	str	r3, [r2, #88]	; 0x58
 800267c:	4b41      	ldr	r3, [pc, #260]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 800267e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002684:	60bb      	str	r3, [r7, #8]
 8002686:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002688:	2301      	movs	r3, #1
 800268a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800268c:	4b3e      	ldr	r3, [pc, #248]	; (8002788 <HAL_RCC_OscConfig+0x57c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002694:	2b00      	cmp	r3, #0
 8002696:	d118      	bne.n	80026ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002698:	4b3b      	ldr	r3, [pc, #236]	; (8002788 <HAL_RCC_OscConfig+0x57c>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a3a      	ldr	r2, [pc, #232]	; (8002788 <HAL_RCC_OscConfig+0x57c>)
 800269e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026a4:	f7fe f980 	bl	80009a8 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ac:	f7fe f97c 	bl	80009a8 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e184      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026be:	4b32      	ldr	r3, [pc, #200]	; (8002788 <HAL_RCC_OscConfig+0x57c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f0      	beq.n	80026ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d108      	bne.n	80026e4 <HAL_RCC_OscConfig+0x4d8>
 80026d2:	4b2c      	ldr	r3, [pc, #176]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 80026d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d8:	4a2a      	ldr	r2, [pc, #168]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026e2:	e024      	b.n	800272e <HAL_RCC_OscConfig+0x522>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	2b05      	cmp	r3, #5
 80026ea:	d110      	bne.n	800270e <HAL_RCC_OscConfig+0x502>
 80026ec:	4b25      	ldr	r3, [pc, #148]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 80026ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f2:	4a24      	ldr	r2, [pc, #144]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 80026f4:	f043 0304 	orr.w	r3, r3, #4
 80026f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026fc:	4b21      	ldr	r3, [pc, #132]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 80026fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002702:	4a20      	ldr	r2, [pc, #128]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002704:	f043 0301 	orr.w	r3, r3, #1
 8002708:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800270c:	e00f      	b.n	800272e <HAL_RCC_OscConfig+0x522>
 800270e:	4b1d      	ldr	r3, [pc, #116]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002714:	4a1b      	ldr	r2, [pc, #108]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002716:	f023 0301 	bic.w	r3, r3, #1
 800271a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800271e:	4b19      	ldr	r3, [pc, #100]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002724:	4a17      	ldr	r2, [pc, #92]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002726:	f023 0304 	bic.w	r3, r3, #4
 800272a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d016      	beq.n	8002764 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002736:	f7fe f937 	bl	80009a8 <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800273c:	e00a      	b.n	8002754 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800273e:	f7fe f933 	bl	80009a8 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	f241 3288 	movw	r2, #5000	; 0x1388
 800274c:	4293      	cmp	r3, r2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e139      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002754:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d0ed      	beq.n	800273e <HAL_RCC_OscConfig+0x532>
 8002762:	e01a      	b.n	800279a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002764:	f7fe f920 	bl	80009a8 <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800276a:	e00f      	b.n	800278c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800276c:	f7fe f91c 	bl	80009a8 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	f241 3288 	movw	r2, #5000	; 0x1388
 800277a:	4293      	cmp	r3, r2
 800277c:	d906      	bls.n	800278c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e122      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
 8002782:	bf00      	nop
 8002784:	40021000 	.word	0x40021000
 8002788:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800278c:	4b90      	ldr	r3, [pc, #576]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 800278e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1e8      	bne.n	800276c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800279a:	7ffb      	ldrb	r3, [r7, #31]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d105      	bne.n	80027ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a0:	4b8b      	ldr	r3, [pc, #556]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 80027a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a4:	4a8a      	ldr	r2, [pc, #552]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 80027a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027aa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 8108 	beq.w	80029c6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	f040 80d0 	bne.w	8002960 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027c0:	4b83      	ldr	r3, [pc, #524]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f003 0203 	and.w	r2, r3, #3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d130      	bne.n	8002836 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	3b01      	subs	r3, #1
 80027e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d127      	bne.n	8002836 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d11f      	bne.n	8002836 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002800:	2a07      	cmp	r2, #7
 8002802:	bf14      	ite	ne
 8002804:	2201      	movne	r2, #1
 8002806:	2200      	moveq	r2, #0
 8002808:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800280a:	4293      	cmp	r3, r2
 800280c:	d113      	bne.n	8002836 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002818:	085b      	lsrs	r3, r3, #1
 800281a:	3b01      	subs	r3, #1
 800281c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800281e:	429a      	cmp	r2, r3
 8002820:	d109      	bne.n	8002836 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282c:	085b      	lsrs	r3, r3, #1
 800282e:	3b01      	subs	r3, #1
 8002830:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002832:	429a      	cmp	r2, r3
 8002834:	d06e      	beq.n	8002914 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	2b0c      	cmp	r3, #12
 800283a:	d069      	beq.n	8002910 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800283c:	4b64      	ldr	r3, [pc, #400]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d105      	bne.n	8002854 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002848:	4b61      	ldr	r3, [pc, #388]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e0b7      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002858:	4b5d      	ldr	r3, [pc, #372]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a5c      	ldr	r2, [pc, #368]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 800285e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002862:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002864:	f7fe f8a0 	bl	80009a8 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800286c:	f7fe f89c 	bl	80009a8 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e0a4      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800287e:	4b54      	ldr	r3, [pc, #336]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f0      	bne.n	800286c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800288a:	4b51      	ldr	r3, [pc, #324]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 800288c:	68da      	ldr	r2, [r3, #12]
 800288e:	4b51      	ldr	r3, [pc, #324]	; (80029d4 <HAL_RCC_OscConfig+0x7c8>)
 8002890:	4013      	ands	r3, r2
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800289a:	3a01      	subs	r2, #1
 800289c:	0112      	lsls	r2, r2, #4
 800289e:	4311      	orrs	r1, r2
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028a4:	0212      	lsls	r2, r2, #8
 80028a6:	4311      	orrs	r1, r2
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028ac:	0852      	lsrs	r2, r2, #1
 80028ae:	3a01      	subs	r2, #1
 80028b0:	0552      	lsls	r2, r2, #21
 80028b2:	4311      	orrs	r1, r2
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028b8:	0852      	lsrs	r2, r2, #1
 80028ba:	3a01      	subs	r2, #1
 80028bc:	0652      	lsls	r2, r2, #25
 80028be:	4311      	orrs	r1, r2
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028c4:	0912      	lsrs	r2, r2, #4
 80028c6:	0452      	lsls	r2, r2, #17
 80028c8:	430a      	orrs	r2, r1
 80028ca:	4941      	ldr	r1, [pc, #260]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028d0:	4b3f      	ldr	r3, [pc, #252]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a3e      	ldr	r2, [pc, #248]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 80028d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028dc:	4b3c      	ldr	r3, [pc, #240]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	4a3b      	ldr	r2, [pc, #236]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 80028e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028e8:	f7fe f85e 	bl	80009a8 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f0:	f7fe f85a 	bl	80009a8 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e062      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002902:	4b33      	ldr	r3, [pc, #204]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d0f0      	beq.n	80028f0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800290e:	e05a      	b.n	80029c6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e059      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002914:	4b2e      	ldr	r3, [pc, #184]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d152      	bne.n	80029c6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002920:	4b2b      	ldr	r3, [pc, #172]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a2a      	ldr	r2, [pc, #168]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 8002926:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800292a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800292c:	4b28      	ldr	r3, [pc, #160]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	4a27      	ldr	r2, [pc, #156]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 8002932:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002936:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002938:	f7fe f836 	bl	80009a8 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002940:	f7fe f832 	bl	80009a8 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e03a      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002952:	4b1f      	ldr	r3, [pc, #124]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f0      	beq.n	8002940 <HAL_RCC_OscConfig+0x734>
 800295e:	e032      	b.n	80029c6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	2b0c      	cmp	r3, #12
 8002964:	d02d      	beq.n	80029c2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002966:	4b1a      	ldr	r3, [pc, #104]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a19      	ldr	r2, [pc, #100]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 800296c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002970:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002972:	4b17      	ldr	r3, [pc, #92]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d105      	bne.n	800298a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800297e:	4b14      	ldr	r3, [pc, #80]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	4a13      	ldr	r2, [pc, #76]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 8002984:	f023 0303 	bic.w	r3, r3, #3
 8002988:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800298a:	4b11      	ldr	r3, [pc, #68]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	4a10      	ldr	r2, [pc, #64]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 8002990:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002994:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002998:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299a:	f7fe f805 	bl	80009a8 <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029a0:	e008      	b.n	80029b4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a2:	f7fe f801 	bl	80009a8 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e009      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029b4:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1f0      	bne.n	80029a2 <HAL_RCC_OscConfig+0x796>
 80029c0:	e001      	b.n	80029c6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e000      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3720      	adds	r7, #32
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40021000 	.word	0x40021000
 80029d4:	f99d808c 	.word	0xf99d808c

080029d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d101      	bne.n	80029ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e0c8      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029ec:	4b66      	ldr	r3, [pc, #408]	; (8002b88 <HAL_RCC_ClockConfig+0x1b0>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d910      	bls.n	8002a1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fa:	4b63      	ldr	r3, [pc, #396]	; (8002b88 <HAL_RCC_ClockConfig+0x1b0>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f023 0207 	bic.w	r2, r3, #7
 8002a02:	4961      	ldr	r1, [pc, #388]	; (8002b88 <HAL_RCC_ClockConfig+0x1b0>)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0a:	4b5f      	ldr	r3, [pc, #380]	; (8002b88 <HAL_RCC_ClockConfig+0x1b0>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d001      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e0b0      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d04c      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	2b03      	cmp	r3, #3
 8002a2e:	d107      	bne.n	8002a40 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a30:	4b56      	ldr	r3, [pc, #344]	; (8002b8c <HAL_RCC_ClockConfig+0x1b4>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d121      	bne.n	8002a80 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e09e      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d107      	bne.n	8002a58 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a48:	4b50      	ldr	r3, [pc, #320]	; (8002b8c <HAL_RCC_ClockConfig+0x1b4>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d115      	bne.n	8002a80 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e092      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d107      	bne.n	8002a70 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a60:	4b4a      	ldr	r3, [pc, #296]	; (8002b8c <HAL_RCC_ClockConfig+0x1b4>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d109      	bne.n	8002a80 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e086      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a70:	4b46      	ldr	r3, [pc, #280]	; (8002b8c <HAL_RCC_ClockConfig+0x1b4>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d101      	bne.n	8002a80 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e07e      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a80:	4b42      	ldr	r3, [pc, #264]	; (8002b8c <HAL_RCC_ClockConfig+0x1b4>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f023 0203 	bic.w	r2, r3, #3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	493f      	ldr	r1, [pc, #252]	; (8002b8c <HAL_RCC_ClockConfig+0x1b4>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a92:	f7fd ff89 	bl	80009a8 <HAL_GetTick>
 8002a96:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a98:	e00a      	b.n	8002ab0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a9a:	f7fd ff85 	bl	80009a8 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e066      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab0:	4b36      	ldr	r3, [pc, #216]	; (8002b8c <HAL_RCC_ClockConfig+0x1b4>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 020c 	and.w	r2, r3, #12
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d1eb      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d008      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ace:	4b2f      	ldr	r3, [pc, #188]	; (8002b8c <HAL_RCC_ClockConfig+0x1b4>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	492c      	ldr	r1, [pc, #176]	; (8002b8c <HAL_RCC_ClockConfig+0x1b4>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ae0:	4b29      	ldr	r3, [pc, #164]	; (8002b88 <HAL_RCC_ClockConfig+0x1b0>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d210      	bcs.n	8002b10 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aee:	4b26      	ldr	r3, [pc, #152]	; (8002b88 <HAL_RCC_ClockConfig+0x1b0>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f023 0207 	bic.w	r2, r3, #7
 8002af6:	4924      	ldr	r1, [pc, #144]	; (8002b88 <HAL_RCC_ClockConfig+0x1b0>)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afe:	4b22      	ldr	r3, [pc, #136]	; (8002b88 <HAL_RCC_ClockConfig+0x1b0>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d001      	beq.n	8002b10 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e036      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d008      	beq.n	8002b2e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b1c:	4b1b      	ldr	r3, [pc, #108]	; (8002b8c <HAL_RCC_ClockConfig+0x1b4>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	4918      	ldr	r1, [pc, #96]	; (8002b8c <HAL_RCC_ClockConfig+0x1b4>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d009      	beq.n	8002b4e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b3a:	4b14      	ldr	r3, [pc, #80]	; (8002b8c <HAL_RCC_ClockConfig+0x1b4>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	4910      	ldr	r1, [pc, #64]	; (8002b8c <HAL_RCC_ClockConfig+0x1b4>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b4e:	f000 f825 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 8002b52:	4602      	mov	r2, r0
 8002b54:	4b0d      	ldr	r3, [pc, #52]	; (8002b8c <HAL_RCC_ClockConfig+0x1b4>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	091b      	lsrs	r3, r3, #4
 8002b5a:	f003 030f 	and.w	r3, r3, #15
 8002b5e:	490c      	ldr	r1, [pc, #48]	; (8002b90 <HAL_RCC_ClockConfig+0x1b8>)
 8002b60:	5ccb      	ldrb	r3, [r1, r3]
 8002b62:	f003 031f 	and.w	r3, r3, #31
 8002b66:	fa22 f303 	lsr.w	r3, r2, r3
 8002b6a:	4a0a      	ldr	r2, [pc, #40]	; (8002b94 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b6e:	4b0a      	ldr	r3, [pc, #40]	; (8002b98 <HAL_RCC_ClockConfig+0x1c0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fd fec8 	bl	8000908 <HAL_InitTick>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b7c:	7afb      	ldrb	r3, [r7, #11]
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40022000 	.word	0x40022000
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	08008a20 	.word	0x08008a20
 8002b94:	20000028 	.word	0x20000028
 8002b98:	2000002c 	.word	0x2000002c

08002b9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b089      	sub	sp, #36	; 0x24
 8002ba0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61fb      	str	r3, [r7, #28]
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002baa:	4b3e      	ldr	r3, [pc, #248]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 030c 	and.w	r3, r3, #12
 8002bb2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bb4:	4b3b      	ldr	r3, [pc, #236]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	f003 0303 	and.w	r3, r3, #3
 8002bbc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d005      	beq.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x34>
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	2b0c      	cmp	r3, #12
 8002bc8:	d121      	bne.n	8002c0e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d11e      	bne.n	8002c0e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002bd0:	4b34      	ldr	r3, [pc, #208]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0308 	and.w	r3, r3, #8
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d107      	bne.n	8002bec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002bdc:	4b31      	ldr	r3, [pc, #196]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002be2:	0a1b      	lsrs	r3, r3, #8
 8002be4:	f003 030f 	and.w	r3, r3, #15
 8002be8:	61fb      	str	r3, [r7, #28]
 8002bea:	e005      	b.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002bec:	4b2d      	ldr	r3, [pc, #180]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	091b      	lsrs	r3, r3, #4
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002bf8:	4a2b      	ldr	r2, [pc, #172]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c00:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10d      	bne.n	8002c24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c0c:	e00a      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	d102      	bne.n	8002c1a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c14:	4b25      	ldr	r3, [pc, #148]	; (8002cac <HAL_RCC_GetSysClockFreq+0x110>)
 8002c16:	61bb      	str	r3, [r7, #24]
 8002c18:	e004      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d101      	bne.n	8002c24 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c20:	4b23      	ldr	r3, [pc, #140]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c22:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	2b0c      	cmp	r3, #12
 8002c28:	d134      	bne.n	8002c94 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c2a:	4b1e      	ldr	r3, [pc, #120]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	f003 0303 	and.w	r3, r3, #3
 8002c32:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d003      	beq.n	8002c42 <HAL_RCC_GetSysClockFreq+0xa6>
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	2b03      	cmp	r3, #3
 8002c3e:	d003      	beq.n	8002c48 <HAL_RCC_GetSysClockFreq+0xac>
 8002c40:	e005      	b.n	8002c4e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c42:	4b1a      	ldr	r3, [pc, #104]	; (8002cac <HAL_RCC_GetSysClockFreq+0x110>)
 8002c44:	617b      	str	r3, [r7, #20]
      break;
 8002c46:	e005      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c48:	4b19      	ldr	r3, [pc, #100]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c4a:	617b      	str	r3, [r7, #20]
      break;
 8002c4c:	e002      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	617b      	str	r3, [r7, #20]
      break;
 8002c52:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c54:	4b13      	ldr	r3, [pc, #76]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	091b      	lsrs	r3, r3, #4
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	3301      	adds	r3, #1
 8002c60:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c62:	4b10      	ldr	r3, [pc, #64]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	0a1b      	lsrs	r3, r3, #8
 8002c68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	fb02 f203 	mul.w	r2, r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c78:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	0e5b      	lsrs	r3, r3, #25
 8002c80:	f003 0303 	and.w	r3, r3, #3
 8002c84:	3301      	adds	r3, #1
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c92:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c94:	69bb      	ldr	r3, [r7, #24]
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3724      	adds	r7, #36	; 0x24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	08008a30 	.word	0x08008a30
 8002cac:	00f42400 	.word	0x00f42400
 8002cb0:	007a1200 	.word	0x007a1200

08002cb4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cb8:	4b03      	ldr	r3, [pc, #12]	; (8002cc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cba:	681b      	ldr	r3, [r3, #0]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	20000028 	.word	0x20000028

08002ccc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002cd8:	4b2a      	ldr	r3, [pc, #168]	; (8002d84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d003      	beq.n	8002cec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ce4:	f7ff fa1e 	bl	8002124 <HAL_PWREx_GetVoltageRange>
 8002ce8:	6178      	str	r0, [r7, #20]
 8002cea:	e014      	b.n	8002d16 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cec:	4b25      	ldr	r3, [pc, #148]	; (8002d84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf0:	4a24      	ldr	r2, [pc, #144]	; (8002d84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cf6:	6593      	str	r3, [r2, #88]	; 0x58
 8002cf8:	4b22      	ldr	r3, [pc, #136]	; (8002d84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d04:	f7ff fa0e 	bl	8002124 <HAL_PWREx_GetVoltageRange>
 8002d08:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d0a:	4b1e      	ldr	r3, [pc, #120]	; (8002d84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0e:	4a1d      	ldr	r2, [pc, #116]	; (8002d84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d14:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d1c:	d10b      	bne.n	8002d36 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b80      	cmp	r3, #128	; 0x80
 8002d22:	d919      	bls.n	8002d58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2ba0      	cmp	r3, #160	; 0xa0
 8002d28:	d902      	bls.n	8002d30 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	613b      	str	r3, [r7, #16]
 8002d2e:	e013      	b.n	8002d58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d30:	2301      	movs	r3, #1
 8002d32:	613b      	str	r3, [r7, #16]
 8002d34:	e010      	b.n	8002d58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b80      	cmp	r3, #128	; 0x80
 8002d3a:	d902      	bls.n	8002d42 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	613b      	str	r3, [r7, #16]
 8002d40:	e00a      	b.n	8002d58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b80      	cmp	r3, #128	; 0x80
 8002d46:	d102      	bne.n	8002d4e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d48:	2302      	movs	r3, #2
 8002d4a:	613b      	str	r3, [r7, #16]
 8002d4c:	e004      	b.n	8002d58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b70      	cmp	r3, #112	; 0x70
 8002d52:	d101      	bne.n	8002d58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d54:	2301      	movs	r3, #1
 8002d56:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d58:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f023 0207 	bic.w	r2, r3, #7
 8002d60:	4909      	ldr	r1, [pc, #36]	; (8002d88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d68:	4b07      	ldr	r3, [pc, #28]	; (8002d88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0307 	and.w	r3, r3, #7
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d001      	beq.n	8002d7a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e000      	b.n	8002d7c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3718      	adds	r7, #24
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40021000 	.word	0x40021000
 8002d88:	40022000 	.word	0x40022000

08002d8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d94:	2300      	movs	r3, #0
 8002d96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d98:	2300      	movs	r3, #0
 8002d9a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d041      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002db0:	d02a      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002db2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002db6:	d824      	bhi.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002db8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002dbc:	d008      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002dbe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002dc2:	d81e      	bhi.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00a      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002dc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dcc:	d010      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002dce:	e018      	b.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002dd0:	4b86      	ldr	r3, [pc, #536]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	4a85      	ldr	r2, [pc, #532]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dda:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ddc:	e015      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	3304      	adds	r3, #4
 8002de2:	2100      	movs	r1, #0
 8002de4:	4618      	mov	r0, r3
 8002de6:	f000 fabb 	bl	8003360 <RCCEx_PLLSAI1_Config>
 8002dea:	4603      	mov	r3, r0
 8002dec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dee:	e00c      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	3320      	adds	r3, #32
 8002df4:	2100      	movs	r1, #0
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 fba6 	bl	8003548 <RCCEx_PLLSAI2_Config>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e00:	e003      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	74fb      	strb	r3, [r7, #19]
      break;
 8002e06:	e000      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002e08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e0a:	7cfb      	ldrb	r3, [r7, #19]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10b      	bne.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e10:	4b76      	ldr	r3, [pc, #472]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e16:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e1e:	4973      	ldr	r1, [pc, #460]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002e26:	e001      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e28:	7cfb      	ldrb	r3, [r7, #19]
 8002e2a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d041      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e3c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002e40:	d02a      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002e42:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002e46:	d824      	bhi.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002e48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e4c:	d008      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002e4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e52:	d81e      	bhi.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00a      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002e58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e5c:	d010      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002e5e:	e018      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e60:	4b62      	ldr	r3, [pc, #392]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	4a61      	ldr	r2, [pc, #388]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e6a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e6c:	e015      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	3304      	adds	r3, #4
 8002e72:	2100      	movs	r1, #0
 8002e74:	4618      	mov	r0, r3
 8002e76:	f000 fa73 	bl	8003360 <RCCEx_PLLSAI1_Config>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e7e:	e00c      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	3320      	adds	r3, #32
 8002e84:	2100      	movs	r1, #0
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 fb5e 	bl	8003548 <RCCEx_PLLSAI2_Config>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e90:	e003      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	74fb      	strb	r3, [r7, #19]
      break;
 8002e96:	e000      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002e98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e9a:	7cfb      	ldrb	r3, [r7, #19]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10b      	bne.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ea0:	4b52      	ldr	r3, [pc, #328]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002eae:	494f      	ldr	r1, [pc, #316]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002eb6:	e001      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eb8:	7cfb      	ldrb	r3, [r7, #19]
 8002eba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f000 80a0 	beq.w	800300a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ece:	4b47      	ldr	r3, [pc, #284]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002eda:	2301      	movs	r3, #1
 8002edc:	e000      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002ede:	2300      	movs	r3, #0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00d      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ee4:	4b41      	ldr	r3, [pc, #260]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee8:	4a40      	ldr	r2, [pc, #256]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eee:	6593      	str	r3, [r2, #88]	; 0x58
 8002ef0:	4b3e      	ldr	r3, [pc, #248]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef8:	60bb      	str	r3, [r7, #8]
 8002efa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002efc:	2301      	movs	r3, #1
 8002efe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f00:	4b3b      	ldr	r3, [pc, #236]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a3a      	ldr	r2, [pc, #232]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f0c:	f7fd fd4c 	bl	80009a8 <HAL_GetTick>
 8002f10:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f12:	e009      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f14:	f7fd fd48 	bl	80009a8 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d902      	bls.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	74fb      	strb	r3, [r7, #19]
        break;
 8002f26:	e005      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f28:	4b31      	ldr	r3, [pc, #196]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0ef      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002f34:	7cfb      	ldrb	r3, [r7, #19]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d15c      	bne.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f3a:	4b2c      	ldr	r3, [pc, #176]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f44:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d01f      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d019      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f58:	4b24      	ldr	r3, [pc, #144]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f64:	4b21      	ldr	r3, [pc, #132]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6a:	4a20      	ldr	r2, [pc, #128]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f74:	4b1d      	ldr	r3, [pc, #116]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f7a:	4a1c      	ldr	r2, [pc, #112]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f84:	4a19      	ldr	r2, [pc, #100]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d016      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f96:	f7fd fd07 	bl	80009a8 <HAL_GetTick>
 8002f9a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f9c:	e00b      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f9e:	f7fd fd03 	bl	80009a8 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d902      	bls.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	74fb      	strb	r3, [r7, #19]
            break;
 8002fb4:	e006      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fb6:	4b0d      	ldr	r3, [pc, #52]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0ec      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002fc4:	7cfb      	ldrb	r3, [r7, #19]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10c      	bne.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fca:	4b08      	ldr	r3, [pc, #32]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fda:	4904      	ldr	r1, [pc, #16]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002fe2:	e009      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fe4:	7cfb      	ldrb	r3, [r7, #19]
 8002fe6:	74bb      	strb	r3, [r7, #18]
 8002fe8:	e006      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002fea:	bf00      	nop
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff4:	7cfb      	ldrb	r3, [r7, #19]
 8002ff6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ff8:	7c7b      	ldrb	r3, [r7, #17]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d105      	bne.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ffe:	4b9e      	ldr	r3, [pc, #632]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003002:	4a9d      	ldr	r2, [pc, #628]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003004:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003008:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00a      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003016:	4b98      	ldr	r3, [pc, #608]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301c:	f023 0203 	bic.w	r2, r3, #3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003024:	4994      	ldr	r1, [pc, #592]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003026:	4313      	orrs	r3, r2
 8003028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00a      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003038:	4b8f      	ldr	r3, [pc, #572]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800303a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303e:	f023 020c 	bic.w	r2, r3, #12
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003046:	498c      	ldr	r1, [pc, #560]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003048:	4313      	orrs	r3, r2
 800304a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0304 	and.w	r3, r3, #4
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00a      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800305a:	4b87      	ldr	r3, [pc, #540]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800305c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003060:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003068:	4983      	ldr	r1, [pc, #524]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800306a:	4313      	orrs	r3, r2
 800306c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0308 	and.w	r3, r3, #8
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00a      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800307c:	4b7e      	ldr	r3, [pc, #504]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800307e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003082:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308a:	497b      	ldr	r1, [pc, #492]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800308c:	4313      	orrs	r3, r2
 800308e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0310 	and.w	r3, r3, #16
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00a      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800309e:	4b76      	ldr	r3, [pc, #472]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ac:	4972      	ldr	r1, [pc, #456]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0320 	and.w	r3, r3, #32
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00a      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030c0:	4b6d      	ldr	r3, [pc, #436]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ce:	496a      	ldr	r1, [pc, #424]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00a      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030e2:	4b65      	ldr	r3, [pc, #404]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f0:	4961      	ldr	r1, [pc, #388]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00a      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003104:	4b5c      	ldr	r3, [pc, #368]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003112:	4959      	ldr	r1, [pc, #356]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003114:	4313      	orrs	r3, r2
 8003116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00a      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003126:	4b54      	ldr	r3, [pc, #336]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800312c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003134:	4950      	ldr	r1, [pc, #320]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003136:	4313      	orrs	r3, r2
 8003138:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00a      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003148:	4b4b      	ldr	r3, [pc, #300]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800314a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003156:	4948      	ldr	r1, [pc, #288]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003158:	4313      	orrs	r3, r2
 800315a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00a      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800316a:	4b43      	ldr	r3, [pc, #268]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800316c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003170:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003178:	493f      	ldr	r1, [pc, #252]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800317a:	4313      	orrs	r3, r2
 800317c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d028      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800318c:	4b3a      	ldr	r3, [pc, #232]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800318e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003192:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800319a:	4937      	ldr	r1, [pc, #220]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800319c:	4313      	orrs	r3, r2
 800319e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031aa:	d106      	bne.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031ac:	4b32      	ldr	r3, [pc, #200]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	4a31      	ldr	r2, [pc, #196]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031b6:	60d3      	str	r3, [r2, #12]
 80031b8:	e011      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031c2:	d10c      	bne.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3304      	adds	r3, #4
 80031c8:	2101      	movs	r1, #1
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 f8c8 	bl	8003360 <RCCEx_PLLSAI1_Config>
 80031d0:	4603      	mov	r3, r0
 80031d2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80031d4:	7cfb      	ldrb	r3, [r7, #19]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80031da:	7cfb      	ldrb	r3, [r7, #19]
 80031dc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d028      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80031ea:	4b23      	ldr	r3, [pc, #140]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f8:	491f      	ldr	r1, [pc, #124]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003204:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003208:	d106      	bne.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800320a:	4b1b      	ldr	r3, [pc, #108]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	4a1a      	ldr	r2, [pc, #104]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003210:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003214:	60d3      	str	r3, [r2, #12]
 8003216:	e011      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003220:	d10c      	bne.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3304      	adds	r3, #4
 8003226:	2101      	movs	r1, #1
 8003228:	4618      	mov	r0, r3
 800322a:	f000 f899 	bl	8003360 <RCCEx_PLLSAI1_Config>
 800322e:	4603      	mov	r3, r0
 8003230:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003232:	7cfb      	ldrb	r3, [r7, #19]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003238:	7cfb      	ldrb	r3, [r7, #19]
 800323a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d02b      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003248:	4b0b      	ldr	r3, [pc, #44]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800324a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003256:	4908      	ldr	r1, [pc, #32]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003258:	4313      	orrs	r3, r2
 800325a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003262:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003266:	d109      	bne.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003268:	4b03      	ldr	r3, [pc, #12]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	4a02      	ldr	r2, [pc, #8]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800326e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003272:	60d3      	str	r3, [r2, #12]
 8003274:	e014      	b.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003276:	bf00      	nop
 8003278:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003280:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003284:	d10c      	bne.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	3304      	adds	r3, #4
 800328a:	2101      	movs	r1, #1
 800328c:	4618      	mov	r0, r3
 800328e:	f000 f867 	bl	8003360 <RCCEx_PLLSAI1_Config>
 8003292:	4603      	mov	r3, r0
 8003294:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003296:	7cfb      	ldrb	r3, [r7, #19]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800329c:	7cfb      	ldrb	r3, [r7, #19]
 800329e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d02f      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032ac:	4b2b      	ldr	r3, [pc, #172]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032ba:	4928      	ldr	r1, [pc, #160]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032ca:	d10d      	bne.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3304      	adds	r3, #4
 80032d0:	2102      	movs	r1, #2
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 f844 	bl	8003360 <RCCEx_PLLSAI1_Config>
 80032d8:	4603      	mov	r3, r0
 80032da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032dc:	7cfb      	ldrb	r3, [r7, #19]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d014      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80032e2:	7cfb      	ldrb	r3, [r7, #19]
 80032e4:	74bb      	strb	r3, [r7, #18]
 80032e6:	e011      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032f0:	d10c      	bne.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	3320      	adds	r3, #32
 80032f6:	2102      	movs	r1, #2
 80032f8:	4618      	mov	r0, r3
 80032fa:	f000 f925 	bl	8003548 <RCCEx_PLLSAI2_Config>
 80032fe:	4603      	mov	r3, r0
 8003300:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003302:	7cfb      	ldrb	r3, [r7, #19]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003308:	7cfb      	ldrb	r3, [r7, #19]
 800330a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00a      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003318:	4b10      	ldr	r3, [pc, #64]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800331a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003326:	490d      	ldr	r1, [pc, #52]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003328:	4313      	orrs	r3, r2
 800332a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00b      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800333a:	4b08      	ldr	r3, [pc, #32]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800333c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003340:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800334a:	4904      	ldr	r1, [pc, #16]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800334c:	4313      	orrs	r3, r2
 800334e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003352:	7cbb      	ldrb	r3, [r7, #18]
}
 8003354:	4618      	mov	r0, r3
 8003356:	3718      	adds	r7, #24
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	40021000 	.word	0x40021000

08003360 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800336a:	2300      	movs	r3, #0
 800336c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800336e:	4b75      	ldr	r3, [pc, #468]	; (8003544 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d018      	beq.n	80033ac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800337a:	4b72      	ldr	r3, [pc, #456]	; (8003544 <RCCEx_PLLSAI1_Config+0x1e4>)
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	f003 0203 	and.w	r2, r3, #3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	429a      	cmp	r2, r3
 8003388:	d10d      	bne.n	80033a6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
       ||
 800338e:	2b00      	cmp	r3, #0
 8003390:	d009      	beq.n	80033a6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003392:	4b6c      	ldr	r3, [pc, #432]	; (8003544 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	091b      	lsrs	r3, r3, #4
 8003398:	f003 0307 	and.w	r3, r3, #7
 800339c:	1c5a      	adds	r2, r3, #1
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
       ||
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d047      	beq.n	8003436 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	73fb      	strb	r3, [r7, #15]
 80033aa:	e044      	b.n	8003436 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2b03      	cmp	r3, #3
 80033b2:	d018      	beq.n	80033e6 <RCCEx_PLLSAI1_Config+0x86>
 80033b4:	2b03      	cmp	r3, #3
 80033b6:	d825      	bhi.n	8003404 <RCCEx_PLLSAI1_Config+0xa4>
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d002      	beq.n	80033c2 <RCCEx_PLLSAI1_Config+0x62>
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d009      	beq.n	80033d4 <RCCEx_PLLSAI1_Config+0x74>
 80033c0:	e020      	b.n	8003404 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80033c2:	4b60      	ldr	r3, [pc, #384]	; (8003544 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d11d      	bne.n	800340a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033d2:	e01a      	b.n	800340a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80033d4:	4b5b      	ldr	r3, [pc, #364]	; (8003544 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d116      	bne.n	800340e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033e4:	e013      	b.n	800340e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033e6:	4b57      	ldr	r3, [pc, #348]	; (8003544 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10f      	bne.n	8003412 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80033f2:	4b54      	ldr	r3, [pc, #336]	; (8003544 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d109      	bne.n	8003412 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003402:	e006      	b.n	8003412 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	73fb      	strb	r3, [r7, #15]
      break;
 8003408:	e004      	b.n	8003414 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800340a:	bf00      	nop
 800340c:	e002      	b.n	8003414 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800340e:	bf00      	nop
 8003410:	e000      	b.n	8003414 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003412:	bf00      	nop
    }

    if(status == HAL_OK)
 8003414:	7bfb      	ldrb	r3, [r7, #15]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10d      	bne.n	8003436 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800341a:	4b4a      	ldr	r3, [pc, #296]	; (8003544 <RCCEx_PLLSAI1_Config+0x1e4>)
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6819      	ldr	r1, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	3b01      	subs	r3, #1
 800342c:	011b      	lsls	r3, r3, #4
 800342e:	430b      	orrs	r3, r1
 8003430:	4944      	ldr	r1, [pc, #272]	; (8003544 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003432:	4313      	orrs	r3, r2
 8003434:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003436:	7bfb      	ldrb	r3, [r7, #15]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d17d      	bne.n	8003538 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800343c:	4b41      	ldr	r3, [pc, #260]	; (8003544 <RCCEx_PLLSAI1_Config+0x1e4>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a40      	ldr	r2, [pc, #256]	; (8003544 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003442:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003446:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003448:	f7fd faae 	bl	80009a8 <HAL_GetTick>
 800344c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800344e:	e009      	b.n	8003464 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003450:	f7fd faaa 	bl	80009a8 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d902      	bls.n	8003464 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	73fb      	strb	r3, [r7, #15]
        break;
 8003462:	e005      	b.n	8003470 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003464:	4b37      	ldr	r3, [pc, #220]	; (8003544 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1ef      	bne.n	8003450 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003470:	7bfb      	ldrb	r3, [r7, #15]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d160      	bne.n	8003538 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d111      	bne.n	80034a0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800347c:	4b31      	ldr	r3, [pc, #196]	; (8003544 <RCCEx_PLLSAI1_Config+0x1e4>)
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003484:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	6892      	ldr	r2, [r2, #8]
 800348c:	0211      	lsls	r1, r2, #8
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	68d2      	ldr	r2, [r2, #12]
 8003492:	0912      	lsrs	r2, r2, #4
 8003494:	0452      	lsls	r2, r2, #17
 8003496:	430a      	orrs	r2, r1
 8003498:	492a      	ldr	r1, [pc, #168]	; (8003544 <RCCEx_PLLSAI1_Config+0x1e4>)
 800349a:	4313      	orrs	r3, r2
 800349c:	610b      	str	r3, [r1, #16]
 800349e:	e027      	b.n	80034f0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d112      	bne.n	80034cc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034a6:	4b27      	ldr	r3, [pc, #156]	; (8003544 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80034ae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6892      	ldr	r2, [r2, #8]
 80034b6:	0211      	lsls	r1, r2, #8
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	6912      	ldr	r2, [r2, #16]
 80034bc:	0852      	lsrs	r2, r2, #1
 80034be:	3a01      	subs	r2, #1
 80034c0:	0552      	lsls	r2, r2, #21
 80034c2:	430a      	orrs	r2, r1
 80034c4:	491f      	ldr	r1, [pc, #124]	; (8003544 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	610b      	str	r3, [r1, #16]
 80034ca:	e011      	b.n	80034f0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034cc:	4b1d      	ldr	r3, [pc, #116]	; (8003544 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80034d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6892      	ldr	r2, [r2, #8]
 80034dc:	0211      	lsls	r1, r2, #8
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	6952      	ldr	r2, [r2, #20]
 80034e2:	0852      	lsrs	r2, r2, #1
 80034e4:	3a01      	subs	r2, #1
 80034e6:	0652      	lsls	r2, r2, #25
 80034e8:	430a      	orrs	r2, r1
 80034ea:	4916      	ldr	r1, [pc, #88]	; (8003544 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80034f0:	4b14      	ldr	r3, [pc, #80]	; (8003544 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a13      	ldr	r2, [pc, #76]	; (8003544 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034fc:	f7fd fa54 	bl	80009a8 <HAL_GetTick>
 8003500:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003502:	e009      	b.n	8003518 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003504:	f7fd fa50 	bl	80009a8 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d902      	bls.n	8003518 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	73fb      	strb	r3, [r7, #15]
          break;
 8003516:	e005      	b.n	8003524 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003518:	4b0a      	ldr	r3, [pc, #40]	; (8003544 <RCCEx_PLLSAI1_Config+0x1e4>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0ef      	beq.n	8003504 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003524:	7bfb      	ldrb	r3, [r7, #15]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d106      	bne.n	8003538 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800352a:	4b06      	ldr	r3, [pc, #24]	; (8003544 <RCCEx_PLLSAI1_Config+0x1e4>)
 800352c:	691a      	ldr	r2, [r3, #16]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	4904      	ldr	r1, [pc, #16]	; (8003544 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003534:	4313      	orrs	r3, r2
 8003536:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003538:	7bfb      	ldrb	r3, [r7, #15]
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	40021000 	.word	0x40021000

08003548 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003552:	2300      	movs	r3, #0
 8003554:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003556:	4b6a      	ldr	r3, [pc, #424]	; (8003700 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	f003 0303 	and.w	r3, r3, #3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d018      	beq.n	8003594 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003562:	4b67      	ldr	r3, [pc, #412]	; (8003700 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	f003 0203 	and.w	r2, r3, #3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	429a      	cmp	r2, r3
 8003570:	d10d      	bne.n	800358e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
       ||
 8003576:	2b00      	cmp	r3, #0
 8003578:	d009      	beq.n	800358e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800357a:	4b61      	ldr	r3, [pc, #388]	; (8003700 <RCCEx_PLLSAI2_Config+0x1b8>)
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	091b      	lsrs	r3, r3, #4
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	1c5a      	adds	r2, r3, #1
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
       ||
 800358a:	429a      	cmp	r2, r3
 800358c:	d047      	beq.n	800361e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	73fb      	strb	r3, [r7, #15]
 8003592:	e044      	b.n	800361e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2b03      	cmp	r3, #3
 800359a:	d018      	beq.n	80035ce <RCCEx_PLLSAI2_Config+0x86>
 800359c:	2b03      	cmp	r3, #3
 800359e:	d825      	bhi.n	80035ec <RCCEx_PLLSAI2_Config+0xa4>
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d002      	beq.n	80035aa <RCCEx_PLLSAI2_Config+0x62>
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d009      	beq.n	80035bc <RCCEx_PLLSAI2_Config+0x74>
 80035a8:	e020      	b.n	80035ec <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035aa:	4b55      	ldr	r3, [pc, #340]	; (8003700 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d11d      	bne.n	80035f2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035ba:	e01a      	b.n	80035f2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035bc:	4b50      	ldr	r3, [pc, #320]	; (8003700 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d116      	bne.n	80035f6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035cc:	e013      	b.n	80035f6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035ce:	4b4c      	ldr	r3, [pc, #304]	; (8003700 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10f      	bne.n	80035fa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035da:	4b49      	ldr	r3, [pc, #292]	; (8003700 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d109      	bne.n	80035fa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035ea:	e006      	b.n	80035fa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	73fb      	strb	r3, [r7, #15]
      break;
 80035f0:	e004      	b.n	80035fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80035f2:	bf00      	nop
 80035f4:	e002      	b.n	80035fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80035f6:	bf00      	nop
 80035f8:	e000      	b.n	80035fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80035fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80035fc:	7bfb      	ldrb	r3, [r7, #15]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10d      	bne.n	800361e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003602:	4b3f      	ldr	r3, [pc, #252]	; (8003700 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6819      	ldr	r1, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	3b01      	subs	r3, #1
 8003614:	011b      	lsls	r3, r3, #4
 8003616:	430b      	orrs	r3, r1
 8003618:	4939      	ldr	r1, [pc, #228]	; (8003700 <RCCEx_PLLSAI2_Config+0x1b8>)
 800361a:	4313      	orrs	r3, r2
 800361c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800361e:	7bfb      	ldrb	r3, [r7, #15]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d167      	bne.n	80036f4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003624:	4b36      	ldr	r3, [pc, #216]	; (8003700 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a35      	ldr	r2, [pc, #212]	; (8003700 <RCCEx_PLLSAI2_Config+0x1b8>)
 800362a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800362e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003630:	f7fd f9ba 	bl	80009a8 <HAL_GetTick>
 8003634:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003636:	e009      	b.n	800364c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003638:	f7fd f9b6 	bl	80009a8 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b02      	cmp	r3, #2
 8003644:	d902      	bls.n	800364c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	73fb      	strb	r3, [r7, #15]
        break;
 800364a:	e005      	b.n	8003658 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800364c:	4b2c      	ldr	r3, [pc, #176]	; (8003700 <RCCEx_PLLSAI2_Config+0x1b8>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1ef      	bne.n	8003638 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003658:	7bfb      	ldrb	r3, [r7, #15]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d14a      	bne.n	80036f4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d111      	bne.n	8003688 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003664:	4b26      	ldr	r3, [pc, #152]	; (8003700 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800366c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6892      	ldr	r2, [r2, #8]
 8003674:	0211      	lsls	r1, r2, #8
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	68d2      	ldr	r2, [r2, #12]
 800367a:	0912      	lsrs	r2, r2, #4
 800367c:	0452      	lsls	r2, r2, #17
 800367e:	430a      	orrs	r2, r1
 8003680:	491f      	ldr	r1, [pc, #124]	; (8003700 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003682:	4313      	orrs	r3, r2
 8003684:	614b      	str	r3, [r1, #20]
 8003686:	e011      	b.n	80036ac <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003688:	4b1d      	ldr	r3, [pc, #116]	; (8003700 <RCCEx_PLLSAI2_Config+0x1b8>)
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003690:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	6892      	ldr	r2, [r2, #8]
 8003698:	0211      	lsls	r1, r2, #8
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	6912      	ldr	r2, [r2, #16]
 800369e:	0852      	lsrs	r2, r2, #1
 80036a0:	3a01      	subs	r2, #1
 80036a2:	0652      	lsls	r2, r2, #25
 80036a4:	430a      	orrs	r2, r1
 80036a6:	4916      	ldr	r1, [pc, #88]	; (8003700 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80036ac:	4b14      	ldr	r3, [pc, #80]	; (8003700 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a13      	ldr	r2, [pc, #76]	; (8003700 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b8:	f7fd f976 	bl	80009a8 <HAL_GetTick>
 80036bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80036be:	e009      	b.n	80036d4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036c0:	f7fd f972 	bl	80009a8 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d902      	bls.n	80036d4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	73fb      	strb	r3, [r7, #15]
          break;
 80036d2:	e005      	b.n	80036e0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80036d4:	4b0a      	ldr	r3, [pc, #40]	; (8003700 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0ef      	beq.n	80036c0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80036e0:	7bfb      	ldrb	r3, [r7, #15]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d106      	bne.n	80036f4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80036e6:	4b06      	ldr	r3, [pc, #24]	; (8003700 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036e8:	695a      	ldr	r2, [r3, #20]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	4904      	ldr	r1, [pc, #16]	; (8003700 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80036f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	40021000 	.word	0x40021000

08003704 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e042      	b.n	800379c <HAL_RNG_Init+0x98>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	795b      	ldrb	r3, [r3, #5]
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b00      	cmp	r3, #0
 800371e:	d105      	bne.n	800372c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7fc ff9e 	bl	8000668 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2202      	movs	r2, #2
 8003730:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f042 0204 	orr.w	r2, r2, #4
 8003740:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800374c:	2b40      	cmp	r3, #64	; 0x40
 800374e:	d104      	bne.n	800375a <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2204      	movs	r2, #4
 8003754:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e020      	b.n	800379c <HAL_RNG_Init+0x98>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800375a:	f7fd f925 	bl	80009a8 <HAL_GetTick>
 800375e:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8003760:	e00e      	b.n	8003780 <HAL_RNG_Init+0x7c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8003762:	f7fd f921 	bl	80009a8 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d907      	bls.n	8003780 <HAL_RNG_Init+0x7c>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2204      	movs	r2, #4
 8003774:	715a      	strb	r2, [r3, #5]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2202      	movs	r2, #2
 800377a:	609a      	str	r2, [r3, #8]
      return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e00d      	b.n	800379c <HAL_RNG_Init+0x98>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f003 0304 	and.w	r3, r3, #4
 800378a:	2b04      	cmp	r3, #4
 800378c:	d0e9      	beq.n	8003762 <HAL_RNG_Init+0x5e>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80037a4:	b084      	sub	sp, #16
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b084      	sub	sp, #16
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
 80037ae:	f107 001c 	add.w	r0, r7, #28
 80037b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f001 f9ce 	bl	8004b64 <USB_CoreReset>
 80037c8:	4603      	mov	r3, r0
 80037ca:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80037cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d106      	bne.n	80037e0 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	639a      	str	r2, [r3, #56]	; 0x38
 80037de:	e005      	b.n	80037ec <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80037ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80037f8:	b004      	add	sp, #16
 80037fa:	4770      	bx	lr

080037fc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b087      	sub	sp, #28
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	4613      	mov	r3, r2
 8003808:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800380a:	79fb      	ldrb	r3, [r7, #7]
 800380c:	2b02      	cmp	r3, #2
 800380e:	d165      	bne.n	80038dc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	4a3e      	ldr	r2, [pc, #248]	; (800390c <USB_SetTurnaroundTime+0x110>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d906      	bls.n	8003826 <USB_SetTurnaroundTime+0x2a>
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	4a3d      	ldr	r2, [pc, #244]	; (8003910 <USB_SetTurnaroundTime+0x114>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d202      	bcs.n	8003826 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003820:	230f      	movs	r3, #15
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	e05c      	b.n	80038e0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	4a39      	ldr	r2, [pc, #228]	; (8003910 <USB_SetTurnaroundTime+0x114>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d306      	bcc.n	800383c <USB_SetTurnaroundTime+0x40>
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	4a38      	ldr	r2, [pc, #224]	; (8003914 <USB_SetTurnaroundTime+0x118>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d202      	bcs.n	800383c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003836:	230e      	movs	r3, #14
 8003838:	617b      	str	r3, [r7, #20]
 800383a:	e051      	b.n	80038e0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	4a35      	ldr	r2, [pc, #212]	; (8003914 <USB_SetTurnaroundTime+0x118>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d306      	bcc.n	8003852 <USB_SetTurnaroundTime+0x56>
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	4a34      	ldr	r2, [pc, #208]	; (8003918 <USB_SetTurnaroundTime+0x11c>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d202      	bcs.n	8003852 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800384c:	230d      	movs	r3, #13
 800384e:	617b      	str	r3, [r7, #20]
 8003850:	e046      	b.n	80038e0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	4a30      	ldr	r2, [pc, #192]	; (8003918 <USB_SetTurnaroundTime+0x11c>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d306      	bcc.n	8003868 <USB_SetTurnaroundTime+0x6c>
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	4a2f      	ldr	r2, [pc, #188]	; (800391c <USB_SetTurnaroundTime+0x120>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d802      	bhi.n	8003868 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003862:	230c      	movs	r3, #12
 8003864:	617b      	str	r3, [r7, #20]
 8003866:	e03b      	b.n	80038e0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	4a2c      	ldr	r2, [pc, #176]	; (800391c <USB_SetTurnaroundTime+0x120>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d906      	bls.n	800387e <USB_SetTurnaroundTime+0x82>
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	4a2b      	ldr	r2, [pc, #172]	; (8003920 <USB_SetTurnaroundTime+0x124>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d802      	bhi.n	800387e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003878:	230b      	movs	r3, #11
 800387a:	617b      	str	r3, [r7, #20]
 800387c:	e030      	b.n	80038e0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	4a27      	ldr	r2, [pc, #156]	; (8003920 <USB_SetTurnaroundTime+0x124>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d906      	bls.n	8003894 <USB_SetTurnaroundTime+0x98>
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	4a26      	ldr	r2, [pc, #152]	; (8003924 <USB_SetTurnaroundTime+0x128>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d802      	bhi.n	8003894 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800388e:	230a      	movs	r3, #10
 8003890:	617b      	str	r3, [r7, #20]
 8003892:	e025      	b.n	80038e0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	4a23      	ldr	r2, [pc, #140]	; (8003924 <USB_SetTurnaroundTime+0x128>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d906      	bls.n	80038aa <USB_SetTurnaroundTime+0xae>
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	4a22      	ldr	r2, [pc, #136]	; (8003928 <USB_SetTurnaroundTime+0x12c>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d202      	bcs.n	80038aa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80038a4:	2309      	movs	r3, #9
 80038a6:	617b      	str	r3, [r7, #20]
 80038a8:	e01a      	b.n	80038e0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	4a1e      	ldr	r2, [pc, #120]	; (8003928 <USB_SetTurnaroundTime+0x12c>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d306      	bcc.n	80038c0 <USB_SetTurnaroundTime+0xc4>
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	4a1d      	ldr	r2, [pc, #116]	; (800392c <USB_SetTurnaroundTime+0x130>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d802      	bhi.n	80038c0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80038ba:	2308      	movs	r3, #8
 80038bc:	617b      	str	r3, [r7, #20]
 80038be:	e00f      	b.n	80038e0 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	4a1a      	ldr	r2, [pc, #104]	; (800392c <USB_SetTurnaroundTime+0x130>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d906      	bls.n	80038d6 <USB_SetTurnaroundTime+0xda>
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	4a19      	ldr	r2, [pc, #100]	; (8003930 <USB_SetTurnaroundTime+0x134>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d202      	bcs.n	80038d6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80038d0:	2307      	movs	r3, #7
 80038d2:	617b      	str	r3, [r7, #20]
 80038d4:	e004      	b.n	80038e0 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80038d6:	2306      	movs	r3, #6
 80038d8:	617b      	str	r3, [r7, #20]
 80038da:	e001      	b.n	80038e0 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80038dc:	2309      	movs	r3, #9
 80038de:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	68da      	ldr	r2, [r3, #12]
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	029b      	lsls	r3, r3, #10
 80038f4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80038f8:	431a      	orrs	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	371c      	adds	r7, #28
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	00d8acbf 	.word	0x00d8acbf
 8003910:	00e4e1c0 	.word	0x00e4e1c0
 8003914:	00f42400 	.word	0x00f42400
 8003918:	01067380 	.word	0x01067380
 800391c:	011a499f 	.word	0x011a499f
 8003920:	01312cff 	.word	0x01312cff
 8003924:	014ca43f 	.word	0x014ca43f
 8003928:	016e3600 	.word	0x016e3600
 800392c:	01a6ab1f 	.word	0x01a6ab1f
 8003930:	01e84800 	.word	0x01e84800

08003934 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f043 0201 	orr.w	r2, r3, #1
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003956:	b480      	push	{r7}
 8003958:	b083      	sub	sp, #12
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f023 0201 	bic.w	r2, r3, #1
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	460b      	mov	r3, r1
 8003982:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003990:	78fb      	ldrb	r3, [r7, #3]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d106      	bne.n	80039a4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	60da      	str	r2, [r3, #12]
 80039a2:	e00b      	b.n	80039bc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80039a4:	78fb      	ldrb	r3, [r7, #3]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d106      	bne.n	80039b8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	60da      	str	r2, [r3, #12]
 80039b6:	e001      	b.n	80039bc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e003      	b.n	80039c4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80039bc:	2032      	movs	r0, #50	; 0x32
 80039be:	f7fc ffff 	bl	80009c0 <HAL_Delay>

  return HAL_OK;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3708      	adds	r7, #8
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80039cc:	b084      	sub	sp, #16
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b086      	sub	sp, #24
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
 80039d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80039da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80039de:	2300      	movs	r3, #0
 80039e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80039e6:	2300      	movs	r3, #0
 80039e8:	613b      	str	r3, [r7, #16]
 80039ea:	e009      	b.n	8003a00 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	3340      	adds	r3, #64	; 0x40
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	4413      	add	r3, r2
 80039f6:	2200      	movs	r2, #0
 80039f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	3301      	adds	r3, #1
 80039fe:	613b      	str	r3, [r7, #16]
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	2b0e      	cmp	r3, #14
 8003a04:	d9f2      	bls.n	80039ec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d11c      	bne.n	8003a46 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a1a:	f043 0302 	orr.w	r3, r3, #2
 8003a1e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a24:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	601a      	str	r2, [r3, #0]
 8003a44:	e005      	b.n	8003a52 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003a58:	461a      	mov	r2, r3
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a64:	4619      	mov	r1, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	680b      	ldr	r3, [r1, #0]
 8003a70:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003a72:	2103      	movs	r1, #3
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 f93d 	bl	8003cf4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003a7a:	2110      	movs	r1, #16
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f8f1 	bl	8003c64 <USB_FlushTxFifo>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d001      	beq.n	8003a8c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f90f 	bl	8003cb0 <USB_FlushRxFifo>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aae:	461a      	mov	r2, r3
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aba:	461a      	mov	r2, r3
 8003abc:	2300      	movs	r3, #0
 8003abe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	613b      	str	r3, [r7, #16]
 8003ac4:	e043      	b.n	8003b4e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	015a      	lsls	r2, r3, #5
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	4413      	add	r3, r2
 8003ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ad8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003adc:	d118      	bne.n	8003b10 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10a      	bne.n	8003afa <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	015a      	lsls	r2, r3, #5
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	4413      	add	r3, r2
 8003aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003af0:	461a      	mov	r2, r3
 8003af2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003af6:	6013      	str	r3, [r2, #0]
 8003af8:	e013      	b.n	8003b22 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	015a      	lsls	r2, r3, #5
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	4413      	add	r3, r2
 8003b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b06:	461a      	mov	r2, r3
 8003b08:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b0c:	6013      	str	r3, [r2, #0]
 8003b0e:	e008      	b.n	8003b22 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	015a      	lsls	r2, r3, #5
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4413      	add	r3, r2
 8003b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	2300      	movs	r3, #0
 8003b20:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	015a      	lsls	r2, r3, #5
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	4413      	add	r3, r2
 8003b2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b2e:	461a      	mov	r2, r3
 8003b30:	2300      	movs	r3, #0
 8003b32:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	015a      	lsls	r2, r3, #5
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b40:	461a      	mov	r2, r3
 8003b42:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b46:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	613b      	str	r3, [r7, #16]
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d3b7      	bcc.n	8003ac6 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b56:	2300      	movs	r3, #0
 8003b58:	613b      	str	r3, [r7, #16]
 8003b5a:	e043      	b.n	8003be4 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	015a      	lsls	r2, r3, #5
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b72:	d118      	bne.n	8003ba6 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10a      	bne.n	8003b90 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	015a      	lsls	r2, r3, #5
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	4413      	add	r3, r2
 8003b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b86:	461a      	mov	r2, r3
 8003b88:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b8c:	6013      	str	r3, [r2, #0]
 8003b8e:	e013      	b.n	8003bb8 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	015a      	lsls	r2, r3, #5
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	4413      	add	r3, r2
 8003b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ba2:	6013      	str	r3, [r2, #0]
 8003ba4:	e008      	b.n	8003bb8 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	015a      	lsls	r2, r3, #5
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	4413      	add	r3, r2
 8003bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	015a      	lsls	r2, r3, #5
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	015a      	lsls	r2, r3, #5
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003bdc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	3301      	adds	r3, #1
 8003be2:	613b      	str	r3, [r7, #16]
 8003be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d3b7      	bcc.n	8003b5c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bfa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bfe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003c0c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	f043 0210 	orr.w	r2, r3, #16
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	699a      	ldr	r2, [r3, #24]
 8003c1e:	4b10      	ldr	r3, [pc, #64]	; (8003c60 <USB_DevInit+0x294>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d005      	beq.n	8003c38 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	f043 0208 	orr.w	r2, r3, #8
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d107      	bne.n	8003c4e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c46:	f043 0304 	orr.w	r3, r3, #4
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3718      	adds	r7, #24
 8003c54:	46bd      	mov	sp, r7
 8003c56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c5a:	b004      	add	sp, #16
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	803c3800 	.word	0x803c3800

08003c64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	019b      	lsls	r3, r3, #6
 8003c76:	f043 0220 	orr.w	r2, r3, #32
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	3301      	adds	r3, #1
 8003c82:	60fb      	str	r3, [r7, #12]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4a09      	ldr	r2, [pc, #36]	; (8003cac <USB_FlushTxFifo+0x48>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d901      	bls.n	8003c90 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e006      	b.n	8003c9e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	f003 0320 	and.w	r3, r3, #32
 8003c98:	2b20      	cmp	r3, #32
 8003c9a:	d0f0      	beq.n	8003c7e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3714      	adds	r7, #20
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	00030d40 	.word	0x00030d40

08003cb0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2210      	movs	r2, #16
 8003cc0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	60fb      	str	r3, [r7, #12]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	4a09      	ldr	r2, [pc, #36]	; (8003cf0 <USB_FlushRxFifo+0x40>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d901      	bls.n	8003cd4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e006      	b.n	8003ce2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	f003 0310 	and.w	r3, r3, #16
 8003cdc:	2b10      	cmp	r3, #16
 8003cde:	d0f0      	beq.n	8003cc2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	00030d40 	.word	0x00030d40

08003cf4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	78fb      	ldrb	r3, [r7, #3]
 8003d0e:	68f9      	ldr	r1, [r7, #12]
 8003d10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d14:	4313      	orrs	r3, r2
 8003d16:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3714      	adds	r7, #20
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b087      	sub	sp, #28
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f003 0306 	and.w	r3, r3, #6
 8003d3e:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d002      	beq.n	8003d4c <USB_GetDevSpeed+0x26>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2b06      	cmp	r3, #6
 8003d4a:	d102      	bne.n	8003d52 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	75fb      	strb	r3, [r7, #23]
 8003d50:	e001      	b.n	8003d56 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8003d52:	230f      	movs	r3, #15
 8003d54:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	371c      	adds	r7, #28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	785b      	ldrb	r3, [r3, #1]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d13a      	bne.n	8003df6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d86:	69da      	ldr	r2, [r3, #28]
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	f003 030f 	and.w	r3, r3, #15
 8003d90:	2101      	movs	r1, #1
 8003d92:	fa01 f303 	lsl.w	r3, r1, r3
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	68f9      	ldr	r1, [r7, #12]
 8003d9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	015a      	lsls	r2, r3, #5
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	4413      	add	r3, r2
 8003daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d155      	bne.n	8003e64 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	015a      	lsls	r2, r3, #5
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	78db      	ldrb	r3, [r3, #3]
 8003dd2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003dd4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	059b      	lsls	r3, r3, #22
 8003dda:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	0151      	lsls	r1, r2, #5
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	440a      	add	r2, r1
 8003de6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003df2:	6013      	str	r3, [r2, #0]
 8003df4:	e036      	b.n	8003e64 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dfc:	69da      	ldr	r2, [r3, #28]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	f003 030f 	and.w	r3, r3, #15
 8003e06:	2101      	movs	r1, #1
 8003e08:	fa01 f303 	lsl.w	r3, r1, r3
 8003e0c:	041b      	lsls	r3, r3, #16
 8003e0e:	68f9      	ldr	r1, [r7, #12]
 8003e10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e14:	4313      	orrs	r3, r2
 8003e16:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	015a      	lsls	r2, r3, #5
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d11a      	bne.n	8003e64 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	015a      	lsls	r2, r3, #5
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	4413      	add	r3, r2
 8003e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	78db      	ldrb	r3, [r3, #3]
 8003e48:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003e4a:	430b      	orrs	r3, r1
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	68ba      	ldr	r2, [r7, #8]
 8003e50:	0151      	lsls	r1, r2, #5
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	440a      	add	r2, r1
 8003e56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e62:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3714      	adds	r7, #20
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
	...

08003e74 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	785b      	ldrb	r3, [r3, #1]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d161      	bne.n	8003f54 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	015a      	lsls	r2, r3, #5
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4413      	add	r3, r2
 8003e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ea2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ea6:	d11f      	bne.n	8003ee8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	015a      	lsls	r2, r3, #5
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	4413      	add	r3, r2
 8003eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	0151      	lsls	r1, r2, #5
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	440a      	add	r2, r1
 8003ebe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ec2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ec6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	015a      	lsls	r2, r3, #5
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	4413      	add	r3, r2
 8003ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68ba      	ldr	r2, [r7, #8]
 8003ed8:	0151      	lsls	r1, r2, #5
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	440a      	add	r2, r1
 8003ede:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ee2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ee6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	f003 030f 	and.w	r3, r3, #15
 8003ef8:	2101      	movs	r1, #1
 8003efa:	fa01 f303 	lsl.w	r3, r1, r3
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	43db      	mvns	r3, r3
 8003f02:	68f9      	ldr	r1, [r7, #12]
 8003f04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f08:	4013      	ands	r3, r2
 8003f0a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f12:	69da      	ldr	r2, [r3, #28]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	f003 030f 	and.w	r3, r3, #15
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	43db      	mvns	r3, r3
 8003f26:	68f9      	ldr	r1, [r7, #12]
 8003f28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	015a      	lsls	r2, r3, #5
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	4413      	add	r3, r2
 8003f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	0159      	lsls	r1, r3, #5
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	440b      	add	r3, r1
 8003f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	4b35      	ldr	r3, [pc, #212]	; (8004024 <USB_DeactivateEndpoint+0x1b0>)
 8003f4e:	4013      	ands	r3, r2
 8003f50:	600b      	str	r3, [r1, #0]
 8003f52:	e060      	b.n	8004016 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	015a      	lsls	r2, r3, #5
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f6a:	d11f      	bne.n	8003fac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	015a      	lsls	r2, r3, #5
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	4413      	add	r3, r2
 8003f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	0151      	lsls	r1, r2, #5
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	440a      	add	r2, r1
 8003f82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f8a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	015a      	lsls	r2, r3, #5
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4413      	add	r3, r2
 8003f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	0151      	lsls	r1, r2, #5
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	440a      	add	r2, r1
 8003fa2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fa6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003faa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	f003 030f 	and.w	r3, r3, #15
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc2:	041b      	lsls	r3, r3, #16
 8003fc4:	43db      	mvns	r3, r3
 8003fc6:	68f9      	ldr	r1, [r7, #12]
 8003fc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fcc:	4013      	ands	r3, r2
 8003fce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fd6:	69da      	ldr	r2, [r3, #28]
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	f003 030f 	and.w	r3, r3, #15
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe6:	041b      	lsls	r3, r3, #16
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	68f9      	ldr	r1, [r7, #12]
 8003fec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	015a      	lsls	r2, r3, #5
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	0159      	lsls	r1, r3, #5
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	440b      	add	r3, r1
 800400a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800400e:	4619      	mov	r1, r3
 8004010:	4b05      	ldr	r3, [pc, #20]	; (8004028 <USB_DeactivateEndpoint+0x1b4>)
 8004012:	4013      	ands	r3, r2
 8004014:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3714      	adds	r7, #20
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr
 8004024:	ec337800 	.word	0xec337800
 8004028:	eff37800 	.word	0xeff37800

0800402c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	785b      	ldrb	r3, [r3, #1]
 8004044:	2b01      	cmp	r3, #1
 8004046:	f040 810a 	bne.w	800425e <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d132      	bne.n	80040b8 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	015a      	lsls	r2, r3, #5
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	4413      	add	r3, r2
 800405a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	0151      	lsls	r1, r2, #5
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	440a      	add	r2, r1
 8004068:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800406c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004070:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004074:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	015a      	lsls	r2, r3, #5
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	4413      	add	r3, r2
 800407e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	0151      	lsls	r1, r2, #5
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	440a      	add	r2, r1
 800408c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004090:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004094:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	015a      	lsls	r2, r3, #5
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	4413      	add	r3, r2
 800409e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	0151      	lsls	r1, r2, #5
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	440a      	add	r2, r1
 80040ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040b0:	0cdb      	lsrs	r3, r3, #19
 80040b2:	04db      	lsls	r3, r3, #19
 80040b4:	6113      	str	r3, [r2, #16]
 80040b6:	e074      	b.n	80041a2 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	015a      	lsls	r2, r3, #5
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	4413      	add	r3, r2
 80040c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	0151      	lsls	r1, r2, #5
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	440a      	add	r2, r1
 80040ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040d2:	0cdb      	lsrs	r3, r3, #19
 80040d4:	04db      	lsls	r3, r3, #19
 80040d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	015a      	lsls	r2, r3, #5
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	4413      	add	r3, r2
 80040e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	0151      	lsls	r1, r2, #5
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	440a      	add	r2, r1
 80040ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80040f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80040fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	015a      	lsls	r2, r3, #5
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	4413      	add	r3, r2
 8004104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004108:	691a      	ldr	r2, [r3, #16]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	6959      	ldr	r1, [r3, #20]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	440b      	add	r3, r1
 8004114:	1e59      	subs	r1, r3, #1
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	fbb1 f3f3 	udiv	r3, r1, r3
 800411e:	04d9      	lsls	r1, r3, #19
 8004120:	4baf      	ldr	r3, [pc, #700]	; (80043e0 <USB_EPStartXfer+0x3b4>)
 8004122:	400b      	ands	r3, r1
 8004124:	6939      	ldr	r1, [r7, #16]
 8004126:	0148      	lsls	r0, r1, #5
 8004128:	6979      	ldr	r1, [r7, #20]
 800412a:	4401      	add	r1, r0
 800412c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004130:	4313      	orrs	r3, r2
 8004132:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	015a      	lsls	r2, r3, #5
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	4413      	add	r3, r2
 800413c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004140:	691a      	ldr	r2, [r3, #16]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800414a:	6939      	ldr	r1, [r7, #16]
 800414c:	0148      	lsls	r0, r1, #5
 800414e:	6979      	ldr	r1, [r7, #20]
 8004150:	4401      	add	r1, r0
 8004152:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004156:	4313      	orrs	r3, r2
 8004158:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	78db      	ldrb	r3, [r3, #3]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d11f      	bne.n	80041a2 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	015a      	lsls	r2, r3, #5
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	4413      	add	r3, r2
 800416a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	0151      	lsls	r1, r2, #5
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	440a      	add	r2, r1
 8004178:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800417c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004180:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	015a      	lsls	r2, r3, #5
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	4413      	add	r3, r2
 800418a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	0151      	lsls	r1, r2, #5
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	440a      	add	r2, r1
 8004198:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800419c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80041a0:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	015a      	lsls	r2, r3, #5
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	4413      	add	r3, r2
 80041aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	0151      	lsls	r1, r2, #5
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	440a      	add	r2, r1
 80041b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80041c0:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	78db      	ldrb	r3, [r3, #3]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d015      	beq.n	80041f6 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f000 8100 	beq.w	80043d4 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	f003 030f 	and.w	r3, r3, #15
 80041e4:	2101      	movs	r1, #1
 80041e6:	fa01 f303 	lsl.w	r3, r1, r3
 80041ea:	6979      	ldr	r1, [r7, #20]
 80041ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041f0:	4313      	orrs	r3, r2
 80041f2:	634b      	str	r3, [r1, #52]	; 0x34
 80041f4:	e0ee      	b.n	80043d4 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004202:	2b00      	cmp	r3, #0
 8004204:	d110      	bne.n	8004228 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	015a      	lsls	r2, r3, #5
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	4413      	add	r3, r2
 800420e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	0151      	lsls	r1, r2, #5
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	440a      	add	r2, r1
 800421c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004220:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	e00f      	b.n	8004248 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	015a      	lsls	r2, r3, #5
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	4413      	add	r3, r2
 8004230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	0151      	lsls	r1, r2, #5
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	440a      	add	r2, r1
 800423e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004246:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	68d9      	ldr	r1, [r3, #12]
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	781a      	ldrb	r2, [r3, #0]
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	695b      	ldr	r3, [r3, #20]
 8004254:	b29b      	uxth	r3, r3
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f9e2 	bl	8004620 <USB_WritePacket>
 800425c:	e0ba      	b.n	80043d4 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	015a      	lsls	r2, r3, #5
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	4413      	add	r3, r2
 8004266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	0151      	lsls	r1, r2, #5
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	440a      	add	r2, r1
 8004274:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004278:	0cdb      	lsrs	r3, r3, #19
 800427a:	04db      	lsls	r3, r3, #19
 800427c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	015a      	lsls	r2, r3, #5
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	4413      	add	r3, r2
 8004286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	0151      	lsls	r1, r2, #5
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	440a      	add	r2, r1
 8004294:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004298:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800429c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80042a0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d123      	bne.n	80042f2 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	015a      	lsls	r2, r3, #5
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	4413      	add	r3, r2
 80042b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042c0:	6939      	ldr	r1, [r7, #16]
 80042c2:	0148      	lsls	r0, r1, #5
 80042c4:	6979      	ldr	r1, [r7, #20]
 80042c6:	4401      	add	r1, r0
 80042c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80042cc:	4313      	orrs	r3, r2
 80042ce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	015a      	lsls	r2, r3, #5
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	4413      	add	r3, r2
 80042d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	0151      	lsls	r1, r2, #5
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	440a      	add	r2, r1
 80042e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042ee:	6113      	str	r3, [r2, #16]
 80042f0:	e033      	b.n	800435a <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	695a      	ldr	r2, [r3, #20]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	4413      	add	r3, r2
 80042fc:	1e5a      	subs	r2, r3, #1
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	fbb2 f3f3 	udiv	r3, r2, r3
 8004306:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	015a      	lsls	r2, r3, #5
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	4413      	add	r3, r2
 8004310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004314:	691a      	ldr	r2, [r3, #16]
 8004316:	89fb      	ldrh	r3, [r7, #14]
 8004318:	04d9      	lsls	r1, r3, #19
 800431a:	4b31      	ldr	r3, [pc, #196]	; (80043e0 <USB_EPStartXfer+0x3b4>)
 800431c:	400b      	ands	r3, r1
 800431e:	6939      	ldr	r1, [r7, #16]
 8004320:	0148      	lsls	r0, r1, #5
 8004322:	6979      	ldr	r1, [r7, #20]
 8004324:	4401      	add	r1, r0
 8004326:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800432a:	4313      	orrs	r3, r2
 800432c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	015a      	lsls	r2, r3, #5
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	4413      	add	r3, r2
 8004336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800433a:	691a      	ldr	r2, [r3, #16]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	89f9      	ldrh	r1, [r7, #14]
 8004342:	fb01 f303 	mul.w	r3, r1, r3
 8004346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800434a:	6939      	ldr	r1, [r7, #16]
 800434c:	0148      	lsls	r0, r1, #5
 800434e:	6979      	ldr	r1, [r7, #20]
 8004350:	4401      	add	r1, r0
 8004352:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004356:	4313      	orrs	r3, r2
 8004358:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	78db      	ldrb	r3, [r3, #3]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d128      	bne.n	80043b4 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436e:	2b00      	cmp	r3, #0
 8004370:	d110      	bne.n	8004394 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	015a      	lsls	r2, r3, #5
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	4413      	add	r3, r2
 800437a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	0151      	lsls	r1, r2, #5
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	440a      	add	r2, r1
 8004388:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800438c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	e00f      	b.n	80043b4 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	015a      	lsls	r2, r3, #5
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	4413      	add	r3, r2
 800439c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	0151      	lsls	r1, r2, #5
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	440a      	add	r2, r1
 80043aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043b2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	015a      	lsls	r2, r3, #5
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	4413      	add	r3, r2
 80043bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	0151      	lsls	r1, r2, #5
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	440a      	add	r2, r1
 80043ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3718      	adds	r7, #24
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	1ff80000 	.word	0x1ff80000

080043e4 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	785b      	ldrb	r3, [r3, #1]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	f040 80ab 	bne.w	8004558 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d132      	bne.n	8004470 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	015a      	lsls	r2, r3, #5
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	4413      	add	r3, r2
 8004412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	68ba      	ldr	r2, [r7, #8]
 800441a:	0151      	lsls	r1, r2, #5
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	440a      	add	r2, r1
 8004420:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004424:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004428:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800442c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	015a      	lsls	r2, r3, #5
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	4413      	add	r3, r2
 8004436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	0151      	lsls	r1, r2, #5
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	440a      	add	r2, r1
 8004444:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004448:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800444c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	015a      	lsls	r2, r3, #5
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	4413      	add	r3, r2
 8004456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	68ba      	ldr	r2, [r7, #8]
 800445e:	0151      	lsls	r1, r2, #5
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	440a      	add	r2, r1
 8004464:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004468:	0cdb      	lsrs	r3, r3, #19
 800446a:	04db      	lsls	r3, r3, #19
 800446c:	6113      	str	r3, [r2, #16]
 800446e:	e04e      	b.n	800450e <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	015a      	lsls	r2, r3, #5
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	4413      	add	r3, r2
 8004478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	0151      	lsls	r1, r2, #5
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	440a      	add	r2, r1
 8004486:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800448a:	0cdb      	lsrs	r3, r3, #19
 800448c:	04db      	lsls	r3, r3, #19
 800448e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	015a      	lsls	r2, r3, #5
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4413      	add	r3, r2
 8004498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	0151      	lsls	r1, r2, #5
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	440a      	add	r2, r1
 80044a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044b2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	695a      	ldr	r2, [r3, #20]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d903      	bls.n	80044c8 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	689a      	ldr	r2, [r3, #8]
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	015a      	lsls	r2, r3, #5
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	4413      	add	r3, r2
 80044d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	0151      	lsls	r1, r2, #5
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	440a      	add	r2, r1
 80044de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f4:	691a      	ldr	r2, [r3, #16]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044fe:	68b9      	ldr	r1, [r7, #8]
 8004500:	0148      	lsls	r0, r1, #5
 8004502:	68f9      	ldr	r1, [r7, #12]
 8004504:	4401      	add	r1, r0
 8004506:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800450a:	4313      	orrs	r3, r2
 800450c:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	015a      	lsls	r2, r3, #5
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	4413      	add	r3, r2
 8004516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	0151      	lsls	r1, r2, #5
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	440a      	add	r2, r1
 8004524:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004528:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800452c:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d06d      	beq.n	8004612 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800453c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	f003 030f 	and.w	r3, r3, #15
 8004546:	2101      	movs	r1, #1
 8004548:	fa01 f303 	lsl.w	r3, r1, r3
 800454c:	68f9      	ldr	r1, [r7, #12]
 800454e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004552:	4313      	orrs	r3, r2
 8004554:	634b      	str	r3, [r1, #52]	; 0x34
 8004556:	e05c      	b.n	8004612 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	015a      	lsls	r2, r3, #5
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4413      	add	r3, r2
 8004560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	0151      	lsls	r1, r2, #5
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	440a      	add	r2, r1
 800456e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004572:	0cdb      	lsrs	r3, r3, #19
 8004574:	04db      	lsls	r3, r3, #19
 8004576:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	015a      	lsls	r2, r3, #5
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	4413      	add	r3, r2
 8004580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	0151      	lsls	r1, r2, #5
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	440a      	add	r2, r1
 800458e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004592:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004596:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800459a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d003      	beq.n	80045ac <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	689a      	ldr	r2, [r3, #8]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	015a      	lsls	r2, r3, #5
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	4413      	add	r3, r2
 80045b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	0151      	lsls	r1, r2, #5
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	440a      	add	r2, r1
 80045c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045ca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	015a      	lsls	r2, r3, #5
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	4413      	add	r3, r2
 80045d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d8:	691a      	ldr	r2, [r3, #16]
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045e2:	68b9      	ldr	r1, [r7, #8]
 80045e4:	0148      	lsls	r0, r1, #5
 80045e6:	68f9      	ldr	r1, [r7, #12]
 80045e8:	4401      	add	r1, r0
 80045ea:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80045ee:	4313      	orrs	r3, r2
 80045f0:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	015a      	lsls	r2, r3, #5
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	4413      	add	r3, r2
 80045fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	0151      	lsls	r1, r2, #5
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	440a      	add	r2, r1
 8004608:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800460c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004610:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3714      	adds	r7, #20
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8004620:	b480      	push	{r7}
 8004622:	b089      	sub	sp, #36	; 0x24
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	4611      	mov	r1, r2
 800462c:	461a      	mov	r2, r3
 800462e:	460b      	mov	r3, r1
 8004630:	71fb      	strb	r3, [r7, #7]
 8004632:	4613      	mov	r3, r2
 8004634:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800463e:	88bb      	ldrh	r3, [r7, #4]
 8004640:	3303      	adds	r3, #3
 8004642:	089b      	lsrs	r3, r3, #2
 8004644:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8004646:	2300      	movs	r3, #0
 8004648:	61bb      	str	r3, [r7, #24]
 800464a:	e00f      	b.n	800466c <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800464c:	79fb      	ldrb	r3, [r7, #7]
 800464e:	031a      	lsls	r2, r3, #12
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	4413      	add	r3, r2
 8004654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004658:	461a      	mov	r2, r3
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6013      	str	r3, [r2, #0]
    pSrc++;
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	3304      	adds	r3, #4
 8004664:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	3301      	adds	r3, #1
 800466a:	61bb      	str	r3, [r7, #24]
 800466c:	69ba      	ldr	r2, [r7, #24]
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	429a      	cmp	r2, r3
 8004672:	d3eb      	bcc.n	800464c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3724      	adds	r7, #36	; 0x24
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr

08004682 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004682:	b480      	push	{r7}
 8004684:	b089      	sub	sp, #36	; 0x24
 8004686:	af00      	add	r7, sp, #0
 8004688:	60f8      	str	r0, [r7, #12]
 800468a:	60b9      	str	r1, [r7, #8]
 800468c:	4613      	mov	r3, r2
 800468e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004698:	88fb      	ldrh	r3, [r7, #6]
 800469a:	3303      	adds	r3, #3
 800469c:	089b      	lsrs	r3, r3, #2
 800469e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80046a0:	2300      	movs	r3, #0
 80046a2:	61bb      	str	r3, [r7, #24]
 80046a4:	e00b      	b.n	80046be <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	601a      	str	r2, [r3, #0]
    pDest++;
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	3304      	adds	r3, #4
 80046b6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	3301      	adds	r3, #1
 80046bc:	61bb      	str	r3, [r7, #24]
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d3ef      	bcc.n	80046a6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80046c6:	69fb      	ldr	r3, [r7, #28]
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3724      	adds	r7, #36	; 0x24
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	785b      	ldrb	r3, [r3, #1]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d12c      	bne.n	800474a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	015a      	lsls	r2, r3, #5
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	4413      	add	r3, r2
 80046f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	db12      	blt.n	8004728 <USB_EPSetStall+0x54>
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00f      	beq.n	8004728 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	015a      	lsls	r2, r3, #5
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4413      	add	r3, r2
 8004710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	0151      	lsls	r1, r2, #5
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	440a      	add	r2, r1
 800471e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004722:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004726:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	015a      	lsls	r2, r3, #5
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	4413      	add	r3, r2
 8004730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	0151      	lsls	r1, r2, #5
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	440a      	add	r2, r1
 800473e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004742:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004746:	6013      	str	r3, [r2, #0]
 8004748:	e02b      	b.n	80047a2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	015a      	lsls	r2, r3, #5
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	4413      	add	r3, r2
 8004752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	db12      	blt.n	8004782 <USB_EPSetStall+0xae>
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00f      	beq.n	8004782 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	015a      	lsls	r2, r3, #5
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	4413      	add	r3, r2
 800476a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	0151      	lsls	r1, r2, #5
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	440a      	add	r2, r1
 8004778:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800477c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004780:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	015a      	lsls	r2, r3, #5
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	4413      	add	r3, r2
 800478a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	0151      	lsls	r1, r2, #5
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	440a      	add	r2, r1
 8004798:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800479c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80047a0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3714      	adds	r7, #20
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	785b      	ldrb	r3, [r3, #1]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d128      	bne.n	800481e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	015a      	lsls	r2, r3, #5
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4413      	add	r3, r2
 80047d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	0151      	lsls	r1, r2, #5
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	440a      	add	r2, r1
 80047e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80047ea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	78db      	ldrb	r3, [r3, #3]
 80047f0:	2b03      	cmp	r3, #3
 80047f2:	d003      	beq.n	80047fc <USB_EPClearStall+0x4c>
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	78db      	ldrb	r3, [r3, #3]
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d138      	bne.n	800486e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	015a      	lsls	r2, r3, #5
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4413      	add	r3, r2
 8004804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68ba      	ldr	r2, [r7, #8]
 800480c:	0151      	lsls	r1, r2, #5
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	440a      	add	r2, r1
 8004812:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800481a:	6013      	str	r3, [r2, #0]
 800481c:	e027      	b.n	800486e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	015a      	lsls	r2, r3, #5
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	4413      	add	r3, r2
 8004826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68ba      	ldr	r2, [r7, #8]
 800482e:	0151      	lsls	r1, r2, #5
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	440a      	add	r2, r1
 8004834:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004838:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800483c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	78db      	ldrb	r3, [r3, #3]
 8004842:	2b03      	cmp	r3, #3
 8004844:	d003      	beq.n	800484e <USB_EPClearStall+0x9e>
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	78db      	ldrb	r3, [r3, #3]
 800484a:	2b02      	cmp	r3, #2
 800484c:	d10f      	bne.n	800486e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	015a      	lsls	r2, r3, #5
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	4413      	add	r3, r2
 8004856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	0151      	lsls	r1, r2, #5
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	440a      	add	r2, r1
 8004864:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800486c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3714      	adds	r7, #20
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	460b      	mov	r3, r1
 8004886:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800489a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800489e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	78fb      	ldrb	r3, [r7, #3]
 80048aa:	011b      	lsls	r3, r3, #4
 80048ac:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80048b0:	68f9      	ldr	r1, [r7, #12]
 80048b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048b6:	4313      	orrs	r3, r2
 80048b8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3714      	adds	r7, #20
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80048e2:	f023 0303 	bic.w	r3, r3, #3
 80048e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048f6:	f023 0302 	bic.w	r3, r3, #2
 80048fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800490a:	b480      	push	{r7}
 800490c:	b085      	sub	sp, #20
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004924:	f023 0303 	bic.w	r3, r3, #3
 8004928:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004938:	f043 0302 	orr.w	r3, r3, #2
 800493c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3714      	adds	r7, #20
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	695b      	ldr	r3, [r3, #20]
 8004958:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	4013      	ands	r3, r2
 8004962:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004964:	68fb      	ldr	r3, [r7, #12]
}
 8004966:	4618      	mov	r0, r3
 8004968:	3714      	adds	r7, #20
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr

08004972 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004972:	b480      	push	{r7}
 8004974:	b085      	sub	sp, #20
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800498e:	69db      	ldr	r3, [r3, #28]
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	4013      	ands	r3, r2
 8004994:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	0c1b      	lsrs	r3, r3, #16
}
 800499a:	4618      	mov	r0, r3
 800499c:	3714      	adds	r7, #20
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr

080049a6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80049a6:	b480      	push	{r7}
 80049a8:	b085      	sub	sp, #20
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c2:	69db      	ldr	r3, [r3, #28]
 80049c4:	68ba      	ldr	r2, [r7, #8]
 80049c6:	4013      	ands	r3, r2
 80049c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	b29b      	uxth	r3, r3
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3714      	adds	r7, #20
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80049da:	b480      	push	{r7}
 80049dc:	b085      	sub	sp, #20
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
 80049e2:	460b      	mov	r3, r1
 80049e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80049ea:	78fb      	ldrb	r3, [r7, #3]
 80049ec:	015a      	lsls	r2, r3, #5
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	4413      	add	r3, r2
 80049f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	68ba      	ldr	r2, [r7, #8]
 8004a04:	4013      	ands	r3, r2
 8004a06:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004a08:	68bb      	ldr	r3, [r7, #8]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b087      	sub	sp, #28
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
 8004a1e:	460b      	mov	r3, r1
 8004a20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a38:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004a3a:	78fb      	ldrb	r3, [r7, #3]
 8004a3c:	f003 030f 	and.w	r3, r3, #15
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	fa22 f303 	lsr.w	r3, r2, r3
 8004a46:	01db      	lsls	r3, r3, #7
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004a50:	78fb      	ldrb	r3, [r7, #3]
 8004a52:	015a      	lsls	r2, r3, #5
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	4413      	add	r3, r2
 8004a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	4013      	ands	r3, r2
 8004a62:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004a64:	68bb      	ldr	r3, [r7, #8]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	371c      	adds	r7, #28
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr

08004a72 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004a72:	b480      	push	{r7}
 8004a74:	b083      	sub	sp, #12
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	f003 0301 	and.w	r3, r3, #1
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b085      	sub	sp, #20
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aa8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004aac:	f023 0307 	bic.w	r3, r3, #7
 8004ab0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ac4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3714      	adds	r7, #20
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	333c      	adds	r3, #60	; 0x3c
 8004ae6:	3304      	adds	r3, #4
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	4a1c      	ldr	r2, [pc, #112]	; (8004b60 <USB_EP0_OutStart+0x8c>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d90a      	bls.n	8004b0a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b04:	d101      	bne.n	8004b0a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8004b06:	2300      	movs	r3, #0
 8004b08:	e024      	b.n	8004b54 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b10:	461a      	mov	r2, r3
 8004b12:	2300      	movs	r3, #0
 8004b14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b38:	f043 0318 	orr.w	r3, r3, #24
 8004b3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b4c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004b50:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3714      	adds	r7, #20
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr
 8004b60:	4f54300a 	.word	0x4f54300a

08004b64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	3301      	adds	r3, #1
 8004b74:	60fb      	str	r3, [r7, #12]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	4a13      	ldr	r2, [pc, #76]	; (8004bc8 <USB_CoreReset+0x64>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d901      	bls.n	8004b82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e01b      	b.n	8004bba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	daf2      	bge.n	8004b70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	f043 0201 	orr.w	r2, r3, #1
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	60fb      	str	r3, [r7, #12]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	4a09      	ldr	r2, [pc, #36]	; (8004bc8 <USB_CoreReset+0x64>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d901      	bls.n	8004bac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e006      	b.n	8004bba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	f003 0301 	and.w	r3, r3, #1
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d0f0      	beq.n	8004b9a <USB_CoreReset+0x36>

  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3714      	adds	r7, #20
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	00030d40 	.word	0x00030d40

08004bcc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004bd8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004bdc:	f002 fa6c 	bl	80070b8 <USBD_static_malloc>
 8004be0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d105      	bne.n	8004bf4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	e066      	b.n	8004cc2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	7c1b      	ldrb	r3, [r3, #16]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d119      	bne.n	8004c38 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004c04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c08:	2202      	movs	r2, #2
 8004c0a:	2181      	movs	r1, #129	; 0x81
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f002 f83f 	bl	8006c90 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004c18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c1c:	2202      	movs	r2, #2
 8004c1e:	2101      	movs	r1, #1
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f002 f835 	bl	8006c90 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2210      	movs	r2, #16
 8004c32:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004c36:	e016      	b.n	8004c66 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004c38:	2340      	movs	r3, #64	; 0x40
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	2181      	movs	r1, #129	; 0x81
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f002 f826 	bl	8006c90 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004c4a:	2340      	movs	r3, #64	; 0x40
 8004c4c:	2202      	movs	r2, #2
 8004c4e:	2101      	movs	r1, #1
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f002 f81d 	bl	8006c90 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2210      	movs	r2, #16
 8004c62:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004c66:	2308      	movs	r3, #8
 8004c68:	2203      	movs	r2, #3
 8004c6a:	2182      	movs	r1, #130	; 0x82
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f002 f80f 	bl	8006c90 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	7c1b      	ldrb	r3, [r3, #16]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d109      	bne.n	8004cb0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ca2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ca6:	2101      	movs	r1, #1
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f002 f96b 	bl	8006f84 <USBD_LL_PrepareReceive>
 8004cae:	e007      	b.n	8004cc0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004cb6:	2340      	movs	r3, #64	; 0x40
 8004cb8:	2101      	movs	r1, #1
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f002 f962 	bl	8006f84 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b082      	sub	sp, #8
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004cd6:	2181      	movs	r1, #129	; 0x81
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f002 f817 	bl	8006d0c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004ce4:	2101      	movs	r1, #1
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f002 f810 	bl	8006d0c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004cf4:	2182      	movs	r1, #130	; 0x82
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f002 f808 	bl	8006d0c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00e      	beq.n	8004d34 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d26:	4618      	mov	r0, r3
 8004d28:	f002 f9d4 	bl	80070d4 <USBD_static_free>
    pdev->pClassData = NULL;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3708      	adds	r7, #8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
	...

08004d40 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d50:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004d52:	2300      	movs	r3, #0
 8004d54:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004d56:	2300      	movs	r3, #0
 8004d58:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d101      	bne.n	8004d68 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e0af      	b.n	8004ec8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d03f      	beq.n	8004df4 <USBD_CDC_Setup+0xb4>
 8004d74:	2b20      	cmp	r3, #32
 8004d76:	f040 809f 	bne.w	8004eb8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	88db      	ldrh	r3, [r3, #6]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d02e      	beq.n	8004de0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	b25b      	sxtb	r3, r3
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	da16      	bge.n	8004dba <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	683a      	ldr	r2, [r7, #0]
 8004d96:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8004d98:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004d9a:	683a      	ldr	r2, [r7, #0]
 8004d9c:	88d2      	ldrh	r2, [r2, #6]
 8004d9e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	88db      	ldrh	r3, [r3, #6]
 8004da4:	2b07      	cmp	r3, #7
 8004da6:	bf28      	it	cs
 8004da8:	2307      	movcs	r3, #7
 8004daa:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	89fa      	ldrh	r2, [r7, #14]
 8004db0:	4619      	mov	r1, r3
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f001 fb13 	bl	80063de <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8004db8:	e085      	b.n	8004ec6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	785a      	ldrb	r2, [r3, #1]
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	88db      	ldrh	r3, [r3, #6]
 8004dc8:	b2da      	uxtb	r2, r3
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004dd0:	6939      	ldr	r1, [r7, #16]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	88db      	ldrh	r3, [r3, #6]
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f001 fb2c 	bl	8006436 <USBD_CtlPrepareRx>
      break;
 8004dde:	e072      	b.n	8004ec6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	683a      	ldr	r2, [r7, #0]
 8004dea:	7850      	ldrb	r0, [r2, #1]
 8004dec:	2200      	movs	r2, #0
 8004dee:	6839      	ldr	r1, [r7, #0]
 8004df0:	4798      	blx	r3
      break;
 8004df2:	e068      	b.n	8004ec6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	785b      	ldrb	r3, [r3, #1]
 8004df8:	2b0b      	cmp	r3, #11
 8004dfa:	d852      	bhi.n	8004ea2 <USBD_CDC_Setup+0x162>
 8004dfc:	a201      	add	r2, pc, #4	; (adr r2, 8004e04 <USBD_CDC_Setup+0xc4>)
 8004dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e02:	bf00      	nop
 8004e04:	08004e35 	.word	0x08004e35
 8004e08:	08004eb1 	.word	0x08004eb1
 8004e0c:	08004ea3 	.word	0x08004ea3
 8004e10:	08004ea3 	.word	0x08004ea3
 8004e14:	08004ea3 	.word	0x08004ea3
 8004e18:	08004ea3 	.word	0x08004ea3
 8004e1c:	08004ea3 	.word	0x08004ea3
 8004e20:	08004ea3 	.word	0x08004ea3
 8004e24:	08004ea3 	.word	0x08004ea3
 8004e28:	08004ea3 	.word	0x08004ea3
 8004e2c:	08004e5f 	.word	0x08004e5f
 8004e30:	08004e89 	.word	0x08004e89
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	2b03      	cmp	r3, #3
 8004e3e:	d107      	bne.n	8004e50 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004e40:	f107 030a 	add.w	r3, r7, #10
 8004e44:	2202      	movs	r2, #2
 8004e46:	4619      	mov	r1, r3
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f001 fac8 	bl	80063de <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004e4e:	e032      	b.n	8004eb6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004e50:	6839      	ldr	r1, [r7, #0]
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f001 fa52 	bl	80062fc <USBD_CtlError>
            ret = USBD_FAIL;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	75fb      	strb	r3, [r7, #23]
          break;
 8004e5c:	e02b      	b.n	8004eb6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b03      	cmp	r3, #3
 8004e68:	d107      	bne.n	8004e7a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004e6a:	f107 030d 	add.w	r3, r7, #13
 8004e6e:	2201      	movs	r2, #1
 8004e70:	4619      	mov	r1, r3
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f001 fab3 	bl	80063de <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004e78:	e01d      	b.n	8004eb6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004e7a:	6839      	ldr	r1, [r7, #0]
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f001 fa3d 	bl	80062fc <USBD_CtlError>
            ret = USBD_FAIL;
 8004e82:	2303      	movs	r3, #3
 8004e84:	75fb      	strb	r3, [r7, #23]
          break;
 8004e86:	e016      	b.n	8004eb6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2b03      	cmp	r3, #3
 8004e92:	d00f      	beq.n	8004eb4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8004e94:	6839      	ldr	r1, [r7, #0]
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f001 fa30 	bl	80062fc <USBD_CtlError>
            ret = USBD_FAIL;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004ea0:	e008      	b.n	8004eb4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004ea2:	6839      	ldr	r1, [r7, #0]
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f001 fa29 	bl	80062fc <USBD_CtlError>
          ret = USBD_FAIL;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	75fb      	strb	r3, [r7, #23]
          break;
 8004eae:	e002      	b.n	8004eb6 <USBD_CDC_Setup+0x176>
          break;
 8004eb0:	bf00      	nop
 8004eb2:	e008      	b.n	8004ec6 <USBD_CDC_Setup+0x186>
          break;
 8004eb4:	bf00      	nop
      }
      break;
 8004eb6:	e006      	b.n	8004ec6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8004eb8:	6839      	ldr	r1, [r7, #0]
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f001 fa1e 	bl	80062fc <USBD_CtlError>
      ret = USBD_FAIL;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ec4:	bf00      	nop
  }

  return (uint8_t)ret;
 8004ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3718      	adds	r7, #24
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	460b      	mov	r3, r1
 8004eda:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004ee2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d101      	bne.n	8004ef2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e04f      	b.n	8004f92 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ef8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004efa:	78fa      	ldrb	r2, [r7, #3]
 8004efc:	6879      	ldr	r1, [r7, #4]
 8004efe:	4613      	mov	r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	4413      	add	r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	440b      	add	r3, r1
 8004f08:	3318      	adds	r3, #24
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d029      	beq.n	8004f64 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004f10:	78fa      	ldrb	r2, [r7, #3]
 8004f12:	6879      	ldr	r1, [r7, #4]
 8004f14:	4613      	mov	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	440b      	add	r3, r1
 8004f1e:	3318      	adds	r3, #24
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	78f9      	ldrb	r1, [r7, #3]
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	460b      	mov	r3, r1
 8004f28:	00db      	lsls	r3, r3, #3
 8004f2a:	1a5b      	subs	r3, r3, r1
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	4403      	add	r3, r0
 8004f30:	3344      	adds	r3, #68	; 0x44
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	fbb2 f1f3 	udiv	r1, r2, r3
 8004f38:	fb03 f301 	mul.w	r3, r3, r1
 8004f3c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d110      	bne.n	8004f64 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8004f42:	78fa      	ldrb	r2, [r7, #3]
 8004f44:	6879      	ldr	r1, [r7, #4]
 8004f46:	4613      	mov	r3, r2
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	4413      	add	r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	440b      	add	r3, r1
 8004f50:	3318      	adds	r3, #24
 8004f52:	2200      	movs	r2, #0
 8004f54:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004f56:	78f9      	ldrb	r1, [r7, #3]
 8004f58:	2300      	movs	r3, #0
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f001 ffd9 	bl	8006f14 <USBD_LL_Transmit>
 8004f62:	e015      	b.n	8004f90 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d00b      	beq.n	8004f90 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004f8c:	78fa      	ldrb	r2, [r7, #3]
 8004f8e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b084      	sub	sp, #16
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d101      	bne.n	8004fbc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e015      	b.n	8004fe8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004fbc:	78fb      	ldrb	r3, [r7, #3]
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f002 f817 	bl	8006ff4 <USBD_LL_GetRxDataSize>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004fe2:	4611      	mov	r1, r2
 8004fe4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ffe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005006:	2303      	movs	r3, #3
 8005008:	e01b      	b.n	8005042 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d015      	beq.n	8005040 <USBD_CDC_EP0_RxReady+0x50>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800501a:	2bff      	cmp	r3, #255	; 0xff
 800501c:	d010      	beq.n	8005040 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800502c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005034:	b292      	uxth	r2, r2
 8005036:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	22ff      	movs	r2, #255	; 0xff
 800503c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
	...

0800504c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2243      	movs	r2, #67	; 0x43
 8005058:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800505a:	4b03      	ldr	r3, [pc, #12]	; (8005068 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800505c:	4618      	mov	r0, r3
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	200000bc 	.word	0x200000bc

0800506c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2243      	movs	r2, #67	; 0x43
 8005078:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800507a:	4b03      	ldr	r3, [pc, #12]	; (8005088 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800507c:	4618      	mov	r0, r3
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	20000078 	.word	0x20000078

0800508c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2243      	movs	r2, #67	; 0x43
 8005098:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800509a:	4b03      	ldr	r3, [pc, #12]	; (80050a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800509c:	4618      	mov	r0, r3
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr
 80050a8:	20000100 	.word	0x20000100

080050ac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	220a      	movs	r2, #10
 80050b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80050ba:	4b03      	ldr	r3, [pc, #12]	; (80050c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80050bc:	4618      	mov	r0, r3
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr
 80050c8:	20000034 	.word	0x20000034

080050cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d101      	bne.n	80050e0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80050dc:	2303      	movs	r3, #3
 80050de:	e004      	b.n	80050ea <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	683a      	ldr	r2, [r7, #0]
 80050e4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	370c      	adds	r7, #12
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80050f6:	b480      	push	{r7}
 80050f8:	b087      	sub	sp, #28
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	60f8      	str	r0, [r7, #12]
 80050fe:	60b9      	str	r1, [r7, #8]
 8005100:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005108:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d101      	bne.n	8005114 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005110:	2303      	movs	r3, #3
 8005112:	e008      	b.n	8005126 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	68ba      	ldr	r2, [r7, #8]
 8005118:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	371c      	adds	r7, #28
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005132:	b480      	push	{r7}
 8005134:	b085      	sub	sp, #20
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
 800513a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005142:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800514a:	2303      	movs	r3, #3
 800514c:	e004      	b.n	8005158 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3714      	adds	r7, #20
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005172:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800517a:	2b00      	cmp	r3, #0
 800517c:	d101      	bne.n	8005182 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800517e:	2303      	movs	r3, #3
 8005180:	e016      	b.n	80051b0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	7c1b      	ldrb	r3, [r3, #16]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d109      	bne.n	800519e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005190:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005194:	2101      	movs	r1, #1
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f001 fef4 	bl	8006f84 <USBD_LL_PrepareReceive>
 800519c:	e007      	b.n	80051ae <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80051a4:	2340      	movs	r3, #64	; 0x40
 80051a6:	2101      	movs	r1, #1
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f001 feeb 	bl	8006f84 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b086      	sub	sp, #24
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	4613      	mov	r3, r2
 80051c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d101      	bne.n	80051d0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e01f      	b.n	8005210 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d003      	beq.n	80051f6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	68ba      	ldr	r2, [r7, #8]
 80051f2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	79fa      	ldrb	r2, [r7, #7]
 8005202:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	f001 fcc5 	bl	8006b94 <USBD_LL_Init>
 800520a:	4603      	mov	r3, r0
 800520c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800520e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005210:	4618      	mov	r0, r3
 8005212:	3718      	adds	r7, #24
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005222:	2300      	movs	r3, #0
 8005224:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d101      	bne.n	8005230 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800522c:	2303      	movs	r3, #3
 800522e:	e016      	b.n	800525e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	683a      	ldr	r2, [r7, #0]
 8005234:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800523e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00b      	beq.n	800525c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800524a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524c:	f107 020e 	add.w	r2, r7, #14
 8005250:	4610      	mov	r0, r2
 8005252:	4798      	blx	r3
 8005254:	4602      	mov	r2, r0
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b082      	sub	sp, #8
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f001 fcdc 	bl	8006c2c <USBD_LL_Start>
 8005274:	4603      	mov	r3, r0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800527e:	b480      	push	{r7}
 8005280:	b083      	sub	sp, #12
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005286:	2300      	movs	r3, #0
}
 8005288:	4618      	mov	r0, r3
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	460b      	mov	r3, r1
 800529e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80052a0:	2303      	movs	r3, #3
 80052a2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d009      	beq.n	80052c2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	78fa      	ldrb	r2, [r7, #3]
 80052b8:	4611      	mov	r1, r2
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	4798      	blx	r3
 80052be:	4603      	mov	r3, r0
 80052c0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80052c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	460b      	mov	r3, r1
 80052d6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d007      	beq.n	80052f2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	78fa      	ldrb	r2, [r7, #3]
 80052ec:	4611      	mov	r1, r2
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	4798      	blx	r3
  }

  return USBD_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3708      	adds	r7, #8
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800530c:	6839      	ldr	r1, [r7, #0]
 800530e:	4618      	mov	r0, r3
 8005310:	f000 ffba 	bl	8006288 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005322:	461a      	mov	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005330:	f003 031f 	and.w	r3, r3, #31
 8005334:	2b02      	cmp	r3, #2
 8005336:	d01a      	beq.n	800536e <USBD_LL_SetupStage+0x72>
 8005338:	2b02      	cmp	r3, #2
 800533a:	d822      	bhi.n	8005382 <USBD_LL_SetupStage+0x86>
 800533c:	2b00      	cmp	r3, #0
 800533e:	d002      	beq.n	8005346 <USBD_LL_SetupStage+0x4a>
 8005340:	2b01      	cmp	r3, #1
 8005342:	d00a      	beq.n	800535a <USBD_LL_SetupStage+0x5e>
 8005344:	e01d      	b.n	8005382 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800534c:	4619      	mov	r1, r3
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 fa62 	bl	8005818 <USBD_StdDevReq>
 8005354:	4603      	mov	r3, r0
 8005356:	73fb      	strb	r3, [r7, #15]
      break;
 8005358:	e020      	b.n	800539c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005360:	4619      	mov	r1, r3
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 fac6 	bl	80058f4 <USBD_StdItfReq>
 8005368:	4603      	mov	r3, r0
 800536a:	73fb      	strb	r3, [r7, #15]
      break;
 800536c:	e016      	b.n	800539c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005374:	4619      	mov	r1, r3
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 fb05 	bl	8005986 <USBD_StdEPReq>
 800537c:	4603      	mov	r3, r0
 800537e:	73fb      	strb	r3, [r7, #15]
      break;
 8005380:	e00c      	b.n	800539c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005388:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800538c:	b2db      	uxtb	r3, r3
 800538e:	4619      	mov	r1, r3
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f001 fcf1 	bl	8006d78 <USBD_LL_StallEP>
 8005396:	4603      	mov	r3, r0
 8005398:	73fb      	strb	r3, [r7, #15]
      break;
 800539a:	bf00      	nop
  }

  return ret;
 800539c:	7bfb      	ldrb	r3, [r7, #15]
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3710      	adds	r7, #16
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}

080053a6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80053a6:	b580      	push	{r7, lr}
 80053a8:	b086      	sub	sp, #24
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	60f8      	str	r0, [r7, #12]
 80053ae:	460b      	mov	r3, r1
 80053b0:	607a      	str	r2, [r7, #4]
 80053b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80053b4:	7afb      	ldrb	r3, [r7, #11]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d138      	bne.n	800542c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80053c0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80053c8:	2b03      	cmp	r3, #3
 80053ca:	d14a      	bne.n	8005462 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	689a      	ldr	r2, [r3, #8]
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d913      	bls.n	8005400 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	689a      	ldr	r2, [r3, #8]
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	1ad2      	subs	r2, r2, r3
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	68da      	ldr	r2, [r3, #12]
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	4293      	cmp	r3, r2
 80053f0:	bf28      	it	cs
 80053f2:	4613      	movcs	r3, r2
 80053f4:	461a      	mov	r2, r3
 80053f6:	6879      	ldr	r1, [r7, #4]
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f001 f839 	bl	8006470 <USBD_CtlContinueRx>
 80053fe:	e030      	b.n	8005462 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005406:	b2db      	uxtb	r3, r3
 8005408:	2b03      	cmp	r3, #3
 800540a:	d10b      	bne.n	8005424 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d005      	beq.n	8005424 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005424:	68f8      	ldr	r0, [r7, #12]
 8005426:	f001 f834 	bl	8006492 <USBD_CtlSendStatus>
 800542a:	e01a      	b.n	8005462 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b03      	cmp	r3, #3
 8005436:	d114      	bne.n	8005462 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00e      	beq.n	8005462 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	7afa      	ldrb	r2, [r7, #11]
 800544e:	4611      	mov	r1, r2
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	4798      	blx	r3
 8005454:	4603      	mov	r3, r0
 8005456:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005458:	7dfb      	ldrb	r3, [r7, #23]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d001      	beq.n	8005462 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800545e:	7dfb      	ldrb	r3, [r7, #23]
 8005460:	e000      	b.n	8005464 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3718      	adds	r7, #24
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	460b      	mov	r3, r1
 8005476:	607a      	str	r2, [r7, #4]
 8005478:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800547a:	7afb      	ldrb	r3, [r7, #11]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d16b      	bne.n	8005558 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	3314      	adds	r3, #20
 8005484:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800548c:	2b02      	cmp	r3, #2
 800548e:	d156      	bne.n	800553e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	689a      	ldr	r2, [r3, #8]
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	429a      	cmp	r2, r3
 800549a:	d914      	bls.n	80054c6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	689a      	ldr	r2, [r3, #8]
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	1ad2      	subs	r2, r2, r3
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	461a      	mov	r2, r3
 80054b0:	6879      	ldr	r1, [r7, #4]
 80054b2:	68f8      	ldr	r0, [r7, #12]
 80054b4:	f000 ffae 	bl	8006414 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80054b8:	2300      	movs	r3, #0
 80054ba:	2200      	movs	r2, #0
 80054bc:	2100      	movs	r1, #0
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f001 fd60 	bl	8006f84 <USBD_LL_PrepareReceive>
 80054c4:	e03b      	b.n	800553e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	68da      	ldr	r2, [r3, #12]
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d11c      	bne.n	800550c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	685a      	ldr	r2, [r3, #4]
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80054da:	429a      	cmp	r2, r3
 80054dc:	d316      	bcc.n	800550c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	685a      	ldr	r2, [r3, #4]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d20f      	bcs.n	800550c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80054ec:	2200      	movs	r2, #0
 80054ee:	2100      	movs	r1, #0
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	f000 ff8f 	bl	8006414 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80054fe:	2300      	movs	r3, #0
 8005500:	2200      	movs	r2, #0
 8005502:	2100      	movs	r1, #0
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f001 fd3d 	bl	8006f84 <USBD_LL_PrepareReceive>
 800550a:	e018      	b.n	800553e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005512:	b2db      	uxtb	r3, r3
 8005514:	2b03      	cmp	r3, #3
 8005516:	d10b      	bne.n	8005530 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d005      	beq.n	8005530 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005530:	2180      	movs	r1, #128	; 0x80
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f001 fc20 	bl	8006d78 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005538:	68f8      	ldr	r0, [r7, #12]
 800553a:	f000 ffbd 	bl	80064b8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005544:	2b01      	cmp	r3, #1
 8005546:	d122      	bne.n	800558e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005548:	68f8      	ldr	r0, [r7, #12]
 800554a:	f7ff fe98 	bl	800527e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005556:	e01a      	b.n	800558e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800555e:	b2db      	uxtb	r3, r3
 8005560:	2b03      	cmp	r3, #3
 8005562:	d114      	bne.n	800558e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800556a:	695b      	ldr	r3, [r3, #20]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00e      	beq.n	800558e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005576:	695b      	ldr	r3, [r3, #20]
 8005578:	7afa      	ldrb	r2, [r7, #11]
 800557a:	4611      	mov	r1, r2
 800557c:	68f8      	ldr	r0, [r7, #12]
 800557e:	4798      	blx	r3
 8005580:	4603      	mov	r3, r0
 8005582:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005584:	7dfb      	ldrb	r3, [r7, #23]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d001      	beq.n	800558e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800558a:	7dfb      	ldrb	r3, [r7, #23]
 800558c:	e000      	b.n	8005590 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3718      	adds	r7, #24
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d101      	bne.n	80055cc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e02f      	b.n	800562c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00f      	beq.n	80055f6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d009      	beq.n	80055f6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	6852      	ldr	r2, [r2, #4]
 80055ee:	b2d2      	uxtb	r2, r2
 80055f0:	4611      	mov	r1, r2
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80055f6:	2340      	movs	r3, #64	; 0x40
 80055f8:	2200      	movs	r2, #0
 80055fa:	2100      	movs	r1, #0
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f001 fb47 	bl	8006c90 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2240      	movs	r2, #64	; 0x40
 800560e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005612:	2340      	movs	r3, #64	; 0x40
 8005614:	2200      	movs	r2, #0
 8005616:	2180      	movs	r1, #128	; 0x80
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f001 fb39 	bl	8006c90 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2240      	movs	r2, #64	; 0x40
 8005628:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3708      	adds	r7, #8
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	460b      	mov	r3, r1
 800563e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	78fa      	ldrb	r2, [r7, #3]
 8005644:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005662:	b2da      	uxtb	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2204      	movs	r2, #4
 800566e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800568e:	b2db      	uxtb	r3, r3
 8005690:	2b04      	cmp	r3, #4
 8005692:	d106      	bne.n	80056a2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800569a:	b2da      	uxtb	r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d101      	bne.n	80056c6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e012      	b.n	80056ec <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b03      	cmp	r3, #3
 80056d0:	d10b      	bne.n	80056ea <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056d8:	69db      	ldr	r3, [r3, #28]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d005      	beq.n	80056ea <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056e4:	69db      	ldr	r3, [r3, #28]
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3708      	adds	r7, #8
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	460b      	mov	r3, r1
 80056fe:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800570a:	2303      	movs	r3, #3
 800570c:	e014      	b.n	8005738 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b03      	cmp	r3, #3
 8005718:	d10d      	bne.n	8005736 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d007      	beq.n	8005736 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	78fa      	ldrb	r2, [r7, #3]
 8005730:	4611      	mov	r1, r2
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3708      	adds	r7, #8
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	460b      	mov	r3, r1
 800574a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005752:	2b00      	cmp	r3, #0
 8005754:	d101      	bne.n	800575a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005756:	2303      	movs	r3, #3
 8005758:	e014      	b.n	8005784 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b03      	cmp	r3, #3
 8005764:	d10d      	bne.n	8005782 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800576c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576e:	2b00      	cmp	r3, #0
 8005770:	d007      	beq.n	8005782 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577a:	78fa      	ldrb	r2, [r7, #3]
 800577c:	4611      	mov	r1, r2
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	3708      	adds	r7, #8
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	370c      	adds	r7, #12
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr

080057a2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b082      	sub	sp, #8
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d009      	beq.n	80057d0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	6852      	ldr	r2, [r2, #4]
 80057c8:	b2d2      	uxtb	r2, r2
 80057ca:	4611      	mov	r1, r2
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	4798      	blx	r3
  }

  return USBD_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3708      	adds	r7, #8
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80057da:	b480      	push	{r7}
 80057dc:	b087      	sub	sp, #28
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	3301      	adds	r3, #1
 80057f0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80057f8:	8a3b      	ldrh	r3, [r7, #16]
 80057fa:	021b      	lsls	r3, r3, #8
 80057fc:	b21a      	sxth	r2, r3
 80057fe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005802:	4313      	orrs	r3, r2
 8005804:	b21b      	sxth	r3, r3
 8005806:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005808:	89fb      	ldrh	r3, [r7, #14]
}
 800580a:	4618      	mov	r0, r3
 800580c:	371c      	adds	r7, #28
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
	...

08005818 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005822:	2300      	movs	r3, #0
 8005824:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800582e:	2b40      	cmp	r3, #64	; 0x40
 8005830:	d005      	beq.n	800583e <USBD_StdDevReq+0x26>
 8005832:	2b40      	cmp	r3, #64	; 0x40
 8005834:	d853      	bhi.n	80058de <USBD_StdDevReq+0xc6>
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00b      	beq.n	8005852 <USBD_StdDevReq+0x3a>
 800583a:	2b20      	cmp	r3, #32
 800583c:	d14f      	bne.n	80058de <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	6839      	ldr	r1, [r7, #0]
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	4798      	blx	r3
 800584c:	4603      	mov	r3, r0
 800584e:	73fb      	strb	r3, [r7, #15]
      break;
 8005850:	e04a      	b.n	80058e8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	785b      	ldrb	r3, [r3, #1]
 8005856:	2b09      	cmp	r3, #9
 8005858:	d83b      	bhi.n	80058d2 <USBD_StdDevReq+0xba>
 800585a:	a201      	add	r2, pc, #4	; (adr r2, 8005860 <USBD_StdDevReq+0x48>)
 800585c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005860:	080058b5 	.word	0x080058b5
 8005864:	080058c9 	.word	0x080058c9
 8005868:	080058d3 	.word	0x080058d3
 800586c:	080058bf 	.word	0x080058bf
 8005870:	080058d3 	.word	0x080058d3
 8005874:	08005893 	.word	0x08005893
 8005878:	08005889 	.word	0x08005889
 800587c:	080058d3 	.word	0x080058d3
 8005880:	080058ab 	.word	0x080058ab
 8005884:	0800589d 	.word	0x0800589d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005888:	6839      	ldr	r1, [r7, #0]
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 f9de 	bl	8005c4c <USBD_GetDescriptor>
          break;
 8005890:	e024      	b.n	80058dc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005892:	6839      	ldr	r1, [r7, #0]
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 fb6d 	bl	8005f74 <USBD_SetAddress>
          break;
 800589a:	e01f      	b.n	80058dc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800589c:	6839      	ldr	r1, [r7, #0]
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 fbac 	bl	8005ffc <USBD_SetConfig>
 80058a4:	4603      	mov	r3, r0
 80058a6:	73fb      	strb	r3, [r7, #15]
          break;
 80058a8:	e018      	b.n	80058dc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80058aa:	6839      	ldr	r1, [r7, #0]
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 fc4b 	bl	8006148 <USBD_GetConfig>
          break;
 80058b2:	e013      	b.n	80058dc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80058b4:	6839      	ldr	r1, [r7, #0]
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 fc7c 	bl	80061b4 <USBD_GetStatus>
          break;
 80058bc:	e00e      	b.n	80058dc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80058be:	6839      	ldr	r1, [r7, #0]
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 fcab 	bl	800621c <USBD_SetFeature>
          break;
 80058c6:	e009      	b.n	80058dc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80058c8:	6839      	ldr	r1, [r7, #0]
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 fcba 	bl	8006244 <USBD_ClrFeature>
          break;
 80058d0:	e004      	b.n	80058dc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80058d2:	6839      	ldr	r1, [r7, #0]
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 fd11 	bl	80062fc <USBD_CtlError>
          break;
 80058da:	bf00      	nop
      }
      break;
 80058dc:	e004      	b.n	80058e8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80058de:	6839      	ldr	r1, [r7, #0]
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 fd0b 	bl	80062fc <USBD_CtlError>
      break;
 80058e6:	bf00      	nop
  }

  return ret;
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop

080058f4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80058fe:	2300      	movs	r3, #0
 8005900:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800590a:	2b40      	cmp	r3, #64	; 0x40
 800590c:	d005      	beq.n	800591a <USBD_StdItfReq+0x26>
 800590e:	2b40      	cmp	r3, #64	; 0x40
 8005910:	d82f      	bhi.n	8005972 <USBD_StdItfReq+0x7e>
 8005912:	2b00      	cmp	r3, #0
 8005914:	d001      	beq.n	800591a <USBD_StdItfReq+0x26>
 8005916:	2b20      	cmp	r3, #32
 8005918:	d12b      	bne.n	8005972 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005920:	b2db      	uxtb	r3, r3
 8005922:	3b01      	subs	r3, #1
 8005924:	2b02      	cmp	r3, #2
 8005926:	d81d      	bhi.n	8005964 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	889b      	ldrh	r3, [r3, #4]
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b01      	cmp	r3, #1
 8005930:	d813      	bhi.n	800595a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	6839      	ldr	r1, [r7, #0]
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	4798      	blx	r3
 8005940:	4603      	mov	r3, r0
 8005942:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	88db      	ldrh	r3, [r3, #6]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d110      	bne.n	800596e <USBD_StdItfReq+0x7a>
 800594c:	7bfb      	ldrb	r3, [r7, #15]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10d      	bne.n	800596e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 fd9d 	bl	8006492 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005958:	e009      	b.n	800596e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800595a:	6839      	ldr	r1, [r7, #0]
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 fccd 	bl	80062fc <USBD_CtlError>
          break;
 8005962:	e004      	b.n	800596e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8005964:	6839      	ldr	r1, [r7, #0]
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 fcc8 	bl	80062fc <USBD_CtlError>
          break;
 800596c:	e000      	b.n	8005970 <USBD_StdItfReq+0x7c>
          break;
 800596e:	bf00      	nop
      }
      break;
 8005970:	e004      	b.n	800597c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8005972:	6839      	ldr	r1, [r7, #0]
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 fcc1 	bl	80062fc <USBD_CtlError>
      break;
 800597a:	bf00      	nop
  }

  return ret;
 800597c:	7bfb      	ldrb	r3, [r7, #15]
}
 800597e:	4618      	mov	r0, r3
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005986:	b580      	push	{r7, lr}
 8005988:	b084      	sub	sp, #16
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
 800598e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005990:	2300      	movs	r3, #0
 8005992:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	889b      	ldrh	r3, [r3, #4]
 8005998:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059a2:	2b40      	cmp	r3, #64	; 0x40
 80059a4:	d007      	beq.n	80059b6 <USBD_StdEPReq+0x30>
 80059a6:	2b40      	cmp	r3, #64	; 0x40
 80059a8:	f200 8145 	bhi.w	8005c36 <USBD_StdEPReq+0x2b0>
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00c      	beq.n	80059ca <USBD_StdEPReq+0x44>
 80059b0:	2b20      	cmp	r3, #32
 80059b2:	f040 8140 	bne.w	8005c36 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	6839      	ldr	r1, [r7, #0]
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	4798      	blx	r3
 80059c4:	4603      	mov	r3, r0
 80059c6:	73fb      	strb	r3, [r7, #15]
      break;
 80059c8:	e13a      	b.n	8005c40 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	785b      	ldrb	r3, [r3, #1]
 80059ce:	2b03      	cmp	r3, #3
 80059d0:	d007      	beq.n	80059e2 <USBD_StdEPReq+0x5c>
 80059d2:	2b03      	cmp	r3, #3
 80059d4:	f300 8129 	bgt.w	8005c2a <USBD_StdEPReq+0x2a4>
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d07f      	beq.n	8005adc <USBD_StdEPReq+0x156>
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d03c      	beq.n	8005a5a <USBD_StdEPReq+0xd4>
 80059e0:	e123      	b.n	8005c2a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d002      	beq.n	80059f4 <USBD_StdEPReq+0x6e>
 80059ee:	2b03      	cmp	r3, #3
 80059f0:	d016      	beq.n	8005a20 <USBD_StdEPReq+0x9a>
 80059f2:	e02c      	b.n	8005a4e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80059f4:	7bbb      	ldrb	r3, [r7, #14]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00d      	beq.n	8005a16 <USBD_StdEPReq+0x90>
 80059fa:	7bbb      	ldrb	r3, [r7, #14]
 80059fc:	2b80      	cmp	r3, #128	; 0x80
 80059fe:	d00a      	beq.n	8005a16 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005a00:	7bbb      	ldrb	r3, [r7, #14]
 8005a02:	4619      	mov	r1, r3
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f001 f9b7 	bl	8006d78 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005a0a:	2180      	movs	r1, #128	; 0x80
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f001 f9b3 	bl	8006d78 <USBD_LL_StallEP>
 8005a12:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005a14:	e020      	b.n	8005a58 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8005a16:	6839      	ldr	r1, [r7, #0]
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 fc6f 	bl	80062fc <USBD_CtlError>
              break;
 8005a1e:	e01b      	b.n	8005a58 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	885b      	ldrh	r3, [r3, #2]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d10e      	bne.n	8005a46 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005a28:	7bbb      	ldrb	r3, [r7, #14]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00b      	beq.n	8005a46 <USBD_StdEPReq+0xc0>
 8005a2e:	7bbb      	ldrb	r3, [r7, #14]
 8005a30:	2b80      	cmp	r3, #128	; 0x80
 8005a32:	d008      	beq.n	8005a46 <USBD_StdEPReq+0xc0>
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	88db      	ldrh	r3, [r3, #6]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d104      	bne.n	8005a46 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005a3c:	7bbb      	ldrb	r3, [r7, #14]
 8005a3e:	4619      	mov	r1, r3
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f001 f999 	bl	8006d78 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 fd23 	bl	8006492 <USBD_CtlSendStatus>

              break;
 8005a4c:	e004      	b.n	8005a58 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8005a4e:	6839      	ldr	r1, [r7, #0]
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 fc53 	bl	80062fc <USBD_CtlError>
              break;
 8005a56:	bf00      	nop
          }
          break;
 8005a58:	e0ec      	b.n	8005c34 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d002      	beq.n	8005a6c <USBD_StdEPReq+0xe6>
 8005a66:	2b03      	cmp	r3, #3
 8005a68:	d016      	beq.n	8005a98 <USBD_StdEPReq+0x112>
 8005a6a:	e030      	b.n	8005ace <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a6c:	7bbb      	ldrb	r3, [r7, #14]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00d      	beq.n	8005a8e <USBD_StdEPReq+0x108>
 8005a72:	7bbb      	ldrb	r3, [r7, #14]
 8005a74:	2b80      	cmp	r3, #128	; 0x80
 8005a76:	d00a      	beq.n	8005a8e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005a78:	7bbb      	ldrb	r3, [r7, #14]
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f001 f97b 	bl	8006d78 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005a82:	2180      	movs	r1, #128	; 0x80
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f001 f977 	bl	8006d78 <USBD_LL_StallEP>
 8005a8a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005a8c:	e025      	b.n	8005ada <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8005a8e:	6839      	ldr	r1, [r7, #0]
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 fc33 	bl	80062fc <USBD_CtlError>
              break;
 8005a96:	e020      	b.n	8005ada <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	885b      	ldrh	r3, [r3, #2]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d11b      	bne.n	8005ad8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005aa0:	7bbb      	ldrb	r3, [r7, #14]
 8005aa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d004      	beq.n	8005ab4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005aaa:	7bbb      	ldrb	r3, [r7, #14]
 8005aac:	4619      	mov	r1, r3
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f001 f998 	bl	8006de4 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 fcec 	bl	8006492 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	6839      	ldr	r1, [r7, #0]
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	4798      	blx	r3
 8005ac8:	4603      	mov	r3, r0
 8005aca:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005acc:	e004      	b.n	8005ad8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8005ace:	6839      	ldr	r1, [r7, #0]
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 fc13 	bl	80062fc <USBD_CtlError>
              break;
 8005ad6:	e000      	b.n	8005ada <USBD_StdEPReq+0x154>
              break;
 8005ad8:	bf00      	nop
          }
          break;
 8005ada:	e0ab      	b.n	8005c34 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d002      	beq.n	8005aee <USBD_StdEPReq+0x168>
 8005ae8:	2b03      	cmp	r3, #3
 8005aea:	d032      	beq.n	8005b52 <USBD_StdEPReq+0x1cc>
 8005aec:	e097      	b.n	8005c1e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005aee:	7bbb      	ldrb	r3, [r7, #14]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d007      	beq.n	8005b04 <USBD_StdEPReq+0x17e>
 8005af4:	7bbb      	ldrb	r3, [r7, #14]
 8005af6:	2b80      	cmp	r3, #128	; 0x80
 8005af8:	d004      	beq.n	8005b04 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8005afa:	6839      	ldr	r1, [r7, #0]
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 fbfd 	bl	80062fc <USBD_CtlError>
                break;
 8005b02:	e091      	b.n	8005c28 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	da0b      	bge.n	8005b24 <USBD_StdEPReq+0x19e>
 8005b0c:	7bbb      	ldrb	r3, [r7, #14]
 8005b0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b12:	4613      	mov	r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	4413      	add	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	3310      	adds	r3, #16
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	4413      	add	r3, r2
 8005b20:	3304      	adds	r3, #4
 8005b22:	e00b      	b.n	8005b3c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005b24:	7bbb      	ldrb	r3, [r7, #14]
 8005b26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	4413      	add	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	4413      	add	r3, r2
 8005b3a:	3304      	adds	r3, #4
 8005b3c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	2200      	movs	r2, #0
 8005b42:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	2202      	movs	r2, #2
 8005b48:	4619      	mov	r1, r3
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 fc47 	bl	80063de <USBD_CtlSendData>
              break;
 8005b50:	e06a      	b.n	8005c28 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005b52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	da11      	bge.n	8005b7e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005b5a:	7bbb      	ldrb	r3, [r7, #14]
 8005b5c:	f003 020f 	and.w	r2, r3, #15
 8005b60:	6879      	ldr	r1, [r7, #4]
 8005b62:	4613      	mov	r3, r2
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	4413      	add	r3, r2
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	440b      	add	r3, r1
 8005b6c:	3324      	adds	r3, #36	; 0x24
 8005b6e:	881b      	ldrh	r3, [r3, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d117      	bne.n	8005ba4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005b74:	6839      	ldr	r1, [r7, #0]
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 fbc0 	bl	80062fc <USBD_CtlError>
                  break;
 8005b7c:	e054      	b.n	8005c28 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005b7e:	7bbb      	ldrb	r3, [r7, #14]
 8005b80:	f003 020f 	and.w	r2, r3, #15
 8005b84:	6879      	ldr	r1, [r7, #4]
 8005b86:	4613      	mov	r3, r2
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	4413      	add	r3, r2
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	440b      	add	r3, r1
 8005b90:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005b94:	881b      	ldrh	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d104      	bne.n	8005ba4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005b9a:	6839      	ldr	r1, [r7, #0]
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 fbad 	bl	80062fc <USBD_CtlError>
                  break;
 8005ba2:	e041      	b.n	8005c28 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ba4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	da0b      	bge.n	8005bc4 <USBD_StdEPReq+0x23e>
 8005bac:	7bbb      	ldrb	r3, [r7, #14]
 8005bae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4413      	add	r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	3310      	adds	r3, #16
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	3304      	adds	r3, #4
 8005bc2:	e00b      	b.n	8005bdc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005bc4:	7bbb      	ldrb	r3, [r7, #14]
 8005bc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005bca:	4613      	mov	r3, r2
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	4413      	add	r3, r2
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	4413      	add	r3, r2
 8005bda:	3304      	adds	r3, #4
 8005bdc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005bde:	7bbb      	ldrb	r3, [r7, #14]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d002      	beq.n	8005bea <USBD_StdEPReq+0x264>
 8005be4:	7bbb      	ldrb	r3, [r7, #14]
 8005be6:	2b80      	cmp	r3, #128	; 0x80
 8005be8:	d103      	bne.n	8005bf2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	2200      	movs	r2, #0
 8005bee:	601a      	str	r2, [r3, #0]
 8005bf0:	e00e      	b.n	8005c10 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005bf2:	7bbb      	ldrb	r3, [r7, #14]
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f001 f92a 	bl	8006e50 <USBD_LL_IsStallEP>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d003      	beq.n	8005c0a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	2201      	movs	r2, #1
 8005c06:	601a      	str	r2, [r3, #0]
 8005c08:	e002      	b.n	8005c10 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	2202      	movs	r2, #2
 8005c14:	4619      	mov	r1, r3
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 fbe1 	bl	80063de <USBD_CtlSendData>
              break;
 8005c1c:	e004      	b.n	8005c28 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8005c1e:	6839      	ldr	r1, [r7, #0]
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 fb6b 	bl	80062fc <USBD_CtlError>
              break;
 8005c26:	bf00      	nop
          }
          break;
 8005c28:	e004      	b.n	8005c34 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8005c2a:	6839      	ldr	r1, [r7, #0]
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 fb65 	bl	80062fc <USBD_CtlError>
          break;
 8005c32:	bf00      	nop
      }
      break;
 8005c34:	e004      	b.n	8005c40 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8005c36:	6839      	ldr	r1, [r7, #0]
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 fb5f 	bl	80062fc <USBD_CtlError>
      break;
 8005c3e:	bf00      	nop
  }

  return ret;
 8005c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
	...

08005c4c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c56:	2300      	movs	r3, #0
 8005c58:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	885b      	ldrh	r3, [r3, #2]
 8005c66:	0a1b      	lsrs	r3, r3, #8
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	2b0e      	cmp	r3, #14
 8005c6e:	f200 8152 	bhi.w	8005f16 <USBD_GetDescriptor+0x2ca>
 8005c72:	a201      	add	r2, pc, #4	; (adr r2, 8005c78 <USBD_GetDescriptor+0x2c>)
 8005c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c78:	08005ce9 	.word	0x08005ce9
 8005c7c:	08005d01 	.word	0x08005d01
 8005c80:	08005d41 	.word	0x08005d41
 8005c84:	08005f17 	.word	0x08005f17
 8005c88:	08005f17 	.word	0x08005f17
 8005c8c:	08005eb7 	.word	0x08005eb7
 8005c90:	08005ee3 	.word	0x08005ee3
 8005c94:	08005f17 	.word	0x08005f17
 8005c98:	08005f17 	.word	0x08005f17
 8005c9c:	08005f17 	.word	0x08005f17
 8005ca0:	08005f17 	.word	0x08005f17
 8005ca4:	08005f17 	.word	0x08005f17
 8005ca8:	08005f17 	.word	0x08005f17
 8005cac:	08005f17 	.word	0x08005f17
 8005cb0:	08005cb5 	.word	0x08005cb5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cba:	69db      	ldr	r3, [r3, #28]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d00b      	beq.n	8005cd8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cc6:	69db      	ldr	r3, [r3, #28]
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	7c12      	ldrb	r2, [r2, #16]
 8005ccc:	f107 0108 	add.w	r1, r7, #8
 8005cd0:	4610      	mov	r0, r2
 8005cd2:	4798      	blx	r3
 8005cd4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005cd6:	e126      	b.n	8005f26 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005cd8:	6839      	ldr	r1, [r7, #0]
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 fb0e 	bl	80062fc <USBD_CtlError>
        err++;
 8005ce0:	7afb      	ldrb	r3, [r7, #11]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	72fb      	strb	r3, [r7, #11]
      break;
 8005ce6:	e11e      	b.n	8005f26 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	7c12      	ldrb	r2, [r2, #16]
 8005cf4:	f107 0108 	add.w	r1, r7, #8
 8005cf8:	4610      	mov	r0, r2
 8005cfa:	4798      	blx	r3
 8005cfc:	60f8      	str	r0, [r7, #12]
      break;
 8005cfe:	e112      	b.n	8005f26 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	7c1b      	ldrb	r3, [r3, #16]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10d      	bne.n	8005d24 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d10:	f107 0208 	add.w	r2, r7, #8
 8005d14:	4610      	mov	r0, r2
 8005d16:	4798      	blx	r3
 8005d18:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	2202      	movs	r2, #2
 8005d20:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005d22:	e100      	b.n	8005f26 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2c:	f107 0208 	add.w	r2, r7, #8
 8005d30:	4610      	mov	r0, r2
 8005d32:	4798      	blx	r3
 8005d34:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	3301      	adds	r3, #1
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	701a      	strb	r2, [r3, #0]
      break;
 8005d3e:	e0f2      	b.n	8005f26 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	885b      	ldrh	r3, [r3, #2]
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b05      	cmp	r3, #5
 8005d48:	f200 80ac 	bhi.w	8005ea4 <USBD_GetDescriptor+0x258>
 8005d4c:	a201      	add	r2, pc, #4	; (adr r2, 8005d54 <USBD_GetDescriptor+0x108>)
 8005d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d52:	bf00      	nop
 8005d54:	08005d6d 	.word	0x08005d6d
 8005d58:	08005da1 	.word	0x08005da1
 8005d5c:	08005dd5 	.word	0x08005dd5
 8005d60:	08005e09 	.word	0x08005e09
 8005d64:	08005e3d 	.word	0x08005e3d
 8005d68:	08005e71 	.word	0x08005e71
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00b      	beq.n	8005d90 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	7c12      	ldrb	r2, [r2, #16]
 8005d84:	f107 0108 	add.w	r1, r7, #8
 8005d88:	4610      	mov	r0, r2
 8005d8a:	4798      	blx	r3
 8005d8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d8e:	e091      	b.n	8005eb4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005d90:	6839      	ldr	r1, [r7, #0]
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 fab2 	bl	80062fc <USBD_CtlError>
            err++;
 8005d98:	7afb      	ldrb	r3, [r7, #11]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	72fb      	strb	r3, [r7, #11]
          break;
 8005d9e:	e089      	b.n	8005eb4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00b      	beq.n	8005dc4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	7c12      	ldrb	r2, [r2, #16]
 8005db8:	f107 0108 	add.w	r1, r7, #8
 8005dbc:	4610      	mov	r0, r2
 8005dbe:	4798      	blx	r3
 8005dc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005dc2:	e077      	b.n	8005eb4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005dc4:	6839      	ldr	r1, [r7, #0]
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 fa98 	bl	80062fc <USBD_CtlError>
            err++;
 8005dcc:	7afb      	ldrb	r3, [r7, #11]
 8005dce:	3301      	adds	r3, #1
 8005dd0:	72fb      	strb	r3, [r7, #11]
          break;
 8005dd2:	e06f      	b.n	8005eb4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d00b      	beq.n	8005df8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	7c12      	ldrb	r2, [r2, #16]
 8005dec:	f107 0108 	add.w	r1, r7, #8
 8005df0:	4610      	mov	r0, r2
 8005df2:	4798      	blx	r3
 8005df4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005df6:	e05d      	b.n	8005eb4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005df8:	6839      	ldr	r1, [r7, #0]
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 fa7e 	bl	80062fc <USBD_CtlError>
            err++;
 8005e00:	7afb      	ldrb	r3, [r7, #11]
 8005e02:	3301      	adds	r3, #1
 8005e04:	72fb      	strb	r3, [r7, #11]
          break;
 8005e06:	e055      	b.n	8005eb4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00b      	beq.n	8005e2c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	7c12      	ldrb	r2, [r2, #16]
 8005e20:	f107 0108 	add.w	r1, r7, #8
 8005e24:	4610      	mov	r0, r2
 8005e26:	4798      	blx	r3
 8005e28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e2a:	e043      	b.n	8005eb4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005e2c:	6839      	ldr	r1, [r7, #0]
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 fa64 	bl	80062fc <USBD_CtlError>
            err++;
 8005e34:	7afb      	ldrb	r3, [r7, #11]
 8005e36:	3301      	adds	r3, #1
 8005e38:	72fb      	strb	r3, [r7, #11]
          break;
 8005e3a:	e03b      	b.n	8005eb4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e42:	695b      	ldr	r3, [r3, #20]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00b      	beq.n	8005e60 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e4e:	695b      	ldr	r3, [r3, #20]
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	7c12      	ldrb	r2, [r2, #16]
 8005e54:	f107 0108 	add.w	r1, r7, #8
 8005e58:	4610      	mov	r0, r2
 8005e5a:	4798      	blx	r3
 8005e5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e5e:	e029      	b.n	8005eb4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005e60:	6839      	ldr	r1, [r7, #0]
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 fa4a 	bl	80062fc <USBD_CtlError>
            err++;
 8005e68:	7afb      	ldrb	r3, [r7, #11]
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	72fb      	strb	r3, [r7, #11]
          break;
 8005e6e:	e021      	b.n	8005eb4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e76:	699b      	ldr	r3, [r3, #24]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d00b      	beq.n	8005e94 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e82:	699b      	ldr	r3, [r3, #24]
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	7c12      	ldrb	r2, [r2, #16]
 8005e88:	f107 0108 	add.w	r1, r7, #8
 8005e8c:	4610      	mov	r0, r2
 8005e8e:	4798      	blx	r3
 8005e90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e92:	e00f      	b.n	8005eb4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005e94:	6839      	ldr	r1, [r7, #0]
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 fa30 	bl	80062fc <USBD_CtlError>
            err++;
 8005e9c:	7afb      	ldrb	r3, [r7, #11]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	72fb      	strb	r3, [r7, #11]
          break;
 8005ea2:	e007      	b.n	8005eb4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005ea4:	6839      	ldr	r1, [r7, #0]
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 fa28 	bl	80062fc <USBD_CtlError>
          err++;
 8005eac:	7afb      	ldrb	r3, [r7, #11]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8005eb2:	bf00      	nop
      }
      break;
 8005eb4:	e037      	b.n	8005f26 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	7c1b      	ldrb	r3, [r3, #16]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d109      	bne.n	8005ed2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ec6:	f107 0208 	add.w	r2, r7, #8
 8005eca:	4610      	mov	r0, r2
 8005ecc:	4798      	blx	r3
 8005ece:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005ed0:	e029      	b.n	8005f26 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005ed2:	6839      	ldr	r1, [r7, #0]
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 fa11 	bl	80062fc <USBD_CtlError>
        err++;
 8005eda:	7afb      	ldrb	r3, [r7, #11]
 8005edc:	3301      	adds	r3, #1
 8005ede:	72fb      	strb	r3, [r7, #11]
      break;
 8005ee0:	e021      	b.n	8005f26 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	7c1b      	ldrb	r3, [r3, #16]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d10d      	bne.n	8005f06 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef2:	f107 0208 	add.w	r2, r7, #8
 8005ef6:	4610      	mov	r0, r2
 8005ef8:	4798      	blx	r3
 8005efa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	3301      	adds	r3, #1
 8005f00:	2207      	movs	r2, #7
 8005f02:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005f04:	e00f      	b.n	8005f26 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005f06:	6839      	ldr	r1, [r7, #0]
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 f9f7 	bl	80062fc <USBD_CtlError>
        err++;
 8005f0e:	7afb      	ldrb	r3, [r7, #11]
 8005f10:	3301      	adds	r3, #1
 8005f12:	72fb      	strb	r3, [r7, #11]
      break;
 8005f14:	e007      	b.n	8005f26 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8005f16:	6839      	ldr	r1, [r7, #0]
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 f9ef 	bl	80062fc <USBD_CtlError>
      err++;
 8005f1e:	7afb      	ldrb	r3, [r7, #11]
 8005f20:	3301      	adds	r3, #1
 8005f22:	72fb      	strb	r3, [r7, #11]
      break;
 8005f24:	bf00      	nop
  }

  if (err != 0U)
 8005f26:	7afb      	ldrb	r3, [r7, #11]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d11e      	bne.n	8005f6a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	88db      	ldrh	r3, [r3, #6]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d016      	beq.n	8005f62 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8005f34:	893b      	ldrh	r3, [r7, #8]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00e      	beq.n	8005f58 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	88da      	ldrh	r2, [r3, #6]
 8005f3e:	893b      	ldrh	r3, [r7, #8]
 8005f40:	4293      	cmp	r3, r2
 8005f42:	bf28      	it	cs
 8005f44:	4613      	movcs	r3, r2
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005f4a:	893b      	ldrh	r3, [r7, #8]
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	68f9      	ldr	r1, [r7, #12]
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 fa44 	bl	80063de <USBD_CtlSendData>
 8005f56:	e009      	b.n	8005f6c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005f58:	6839      	ldr	r1, [r7, #0]
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 f9ce 	bl	80062fc <USBD_CtlError>
 8005f60:	e004      	b.n	8005f6c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 fa95 	bl	8006492 <USBD_CtlSendStatus>
 8005f68:	e000      	b.n	8005f6c <USBD_GetDescriptor+0x320>
    return;
 8005f6a:	bf00      	nop
  }
}
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop

08005f74 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	889b      	ldrh	r3, [r3, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d131      	bne.n	8005fea <USBD_SetAddress+0x76>
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	88db      	ldrh	r3, [r3, #6]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d12d      	bne.n	8005fea <USBD_SetAddress+0x76>
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	885b      	ldrh	r3, [r3, #2]
 8005f92:	2b7f      	cmp	r3, #127	; 0x7f
 8005f94:	d829      	bhi.n	8005fea <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	885b      	ldrh	r3, [r3, #2]
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fa0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	2b03      	cmp	r3, #3
 8005fac:	d104      	bne.n	8005fb8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005fae:	6839      	ldr	r1, [r7, #0]
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 f9a3 	bl	80062fc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fb6:	e01d      	b.n	8005ff4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	7bfa      	ldrb	r2, [r7, #15]
 8005fbc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005fc0:	7bfb      	ldrb	r3, [r7, #15]
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 ff6f 	bl	8006ea8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 fa61 	bl	8006492 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005fd0:	7bfb      	ldrb	r3, [r7, #15]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d004      	beq.n	8005fe0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2202      	movs	r2, #2
 8005fda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fde:	e009      	b.n	8005ff4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fe8:	e004      	b.n	8005ff4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005fea:	6839      	ldr	r1, [r7, #0]
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 f985 	bl	80062fc <USBD_CtlError>
  }
}
 8005ff2:	bf00      	nop
 8005ff4:	bf00      	nop
 8005ff6:	3710      	adds	r7, #16
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006006:	2300      	movs	r3, #0
 8006008:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	885b      	ldrh	r3, [r3, #2]
 800600e:	b2da      	uxtb	r2, r3
 8006010:	4b4c      	ldr	r3, [pc, #304]	; (8006144 <USBD_SetConfig+0x148>)
 8006012:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006014:	4b4b      	ldr	r3, [pc, #300]	; (8006144 <USBD_SetConfig+0x148>)
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d905      	bls.n	8006028 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800601c:	6839      	ldr	r1, [r7, #0]
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 f96c 	bl	80062fc <USBD_CtlError>
    return USBD_FAIL;
 8006024:	2303      	movs	r3, #3
 8006026:	e088      	b.n	800613a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800602e:	b2db      	uxtb	r3, r3
 8006030:	2b02      	cmp	r3, #2
 8006032:	d002      	beq.n	800603a <USBD_SetConfig+0x3e>
 8006034:	2b03      	cmp	r3, #3
 8006036:	d025      	beq.n	8006084 <USBD_SetConfig+0x88>
 8006038:	e071      	b.n	800611e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800603a:	4b42      	ldr	r3, [pc, #264]	; (8006144 <USBD_SetConfig+0x148>)
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d01c      	beq.n	800607c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006042:	4b40      	ldr	r3, [pc, #256]	; (8006144 <USBD_SetConfig+0x148>)
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	461a      	mov	r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800604c:	4b3d      	ldr	r3, [pc, #244]	; (8006144 <USBD_SetConfig+0x148>)
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	4619      	mov	r1, r3
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f7ff f91e 	bl	8005294 <USBD_SetClassConfig>
 8006058:	4603      	mov	r3, r0
 800605a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800605c:	7bfb      	ldrb	r3, [r7, #15]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d004      	beq.n	800606c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006062:	6839      	ldr	r1, [r7, #0]
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 f949 	bl	80062fc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800606a:	e065      	b.n	8006138 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 fa10 	bl	8006492 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2203      	movs	r2, #3
 8006076:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800607a:	e05d      	b.n	8006138 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 fa08 	bl	8006492 <USBD_CtlSendStatus>
      break;
 8006082:	e059      	b.n	8006138 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006084:	4b2f      	ldr	r3, [pc, #188]	; (8006144 <USBD_SetConfig+0x148>)
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d112      	bne.n	80060b2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2202      	movs	r2, #2
 8006090:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006094:	4b2b      	ldr	r3, [pc, #172]	; (8006144 <USBD_SetConfig+0x148>)
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	461a      	mov	r2, r3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800609e:	4b29      	ldr	r3, [pc, #164]	; (8006144 <USBD_SetConfig+0x148>)
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	4619      	mov	r1, r3
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f7ff f911 	bl	80052cc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 f9f1 	bl	8006492 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80060b0:	e042      	b.n	8006138 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80060b2:	4b24      	ldr	r3, [pc, #144]	; (8006144 <USBD_SetConfig+0x148>)
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	461a      	mov	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d02a      	beq.n	8006116 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	4619      	mov	r1, r3
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f7ff f8ff 	bl	80052cc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80060ce:	4b1d      	ldr	r3, [pc, #116]	; (8006144 <USBD_SetConfig+0x148>)
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	461a      	mov	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80060d8:	4b1a      	ldr	r3, [pc, #104]	; (8006144 <USBD_SetConfig+0x148>)
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	4619      	mov	r1, r3
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f7ff f8d8 	bl	8005294 <USBD_SetClassConfig>
 80060e4:	4603      	mov	r3, r0
 80060e6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80060e8:	7bfb      	ldrb	r3, [r7, #15]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00f      	beq.n	800610e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80060ee:	6839      	ldr	r1, [r7, #0]
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 f903 	bl	80062fc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	4619      	mov	r1, r3
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f7ff f8e4 	bl	80052cc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2202      	movs	r2, #2
 8006108:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800610c:	e014      	b.n	8006138 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 f9bf 	bl	8006492 <USBD_CtlSendStatus>
      break;
 8006114:	e010      	b.n	8006138 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 f9bb 	bl	8006492 <USBD_CtlSendStatus>
      break;
 800611c:	e00c      	b.n	8006138 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800611e:	6839      	ldr	r1, [r7, #0]
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 f8eb 	bl	80062fc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006126:	4b07      	ldr	r3, [pc, #28]	; (8006144 <USBD_SetConfig+0x148>)
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	4619      	mov	r1, r3
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f7ff f8cd 	bl	80052cc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006132:	2303      	movs	r3, #3
 8006134:	73fb      	strb	r3, [r7, #15]
      break;
 8006136:	bf00      	nop
  }

  return ret;
 8006138:	7bfb      	ldrb	r3, [r7, #15]
}
 800613a:	4618      	mov	r0, r3
 800613c:	3710      	adds	r7, #16
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	2000023c 	.word	0x2000023c

08006148 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	88db      	ldrh	r3, [r3, #6]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d004      	beq.n	8006164 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800615a:	6839      	ldr	r1, [r7, #0]
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 f8cd 	bl	80062fc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006162:	e023      	b.n	80061ac <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800616a:	b2db      	uxtb	r3, r3
 800616c:	2b02      	cmp	r3, #2
 800616e:	dc02      	bgt.n	8006176 <USBD_GetConfig+0x2e>
 8006170:	2b00      	cmp	r3, #0
 8006172:	dc03      	bgt.n	800617c <USBD_GetConfig+0x34>
 8006174:	e015      	b.n	80061a2 <USBD_GetConfig+0x5a>
 8006176:	2b03      	cmp	r3, #3
 8006178:	d00b      	beq.n	8006192 <USBD_GetConfig+0x4a>
 800617a:	e012      	b.n	80061a2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	3308      	adds	r3, #8
 8006186:	2201      	movs	r2, #1
 8006188:	4619      	mov	r1, r3
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 f927 	bl	80063de <USBD_CtlSendData>
        break;
 8006190:	e00c      	b.n	80061ac <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	3304      	adds	r3, #4
 8006196:	2201      	movs	r2, #1
 8006198:	4619      	mov	r1, r3
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f91f 	bl	80063de <USBD_CtlSendData>
        break;
 80061a0:	e004      	b.n	80061ac <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80061a2:	6839      	ldr	r1, [r7, #0]
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 f8a9 	bl	80062fc <USBD_CtlError>
        break;
 80061aa:	bf00      	nop
}
 80061ac:	bf00      	nop
 80061ae:	3708      	adds	r7, #8
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	3b01      	subs	r3, #1
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d81e      	bhi.n	800620a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	88db      	ldrh	r3, [r3, #6]
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d004      	beq.n	80061de <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80061d4:	6839      	ldr	r1, [r7, #0]
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f890 	bl	80062fc <USBD_CtlError>
        break;
 80061dc:	e01a      	b.n	8006214 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2201      	movs	r2, #1
 80061e2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d005      	beq.n	80061fa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	f043 0202 	orr.w	r2, r3, #2
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	330c      	adds	r3, #12
 80061fe:	2202      	movs	r2, #2
 8006200:	4619      	mov	r1, r3
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 f8eb 	bl	80063de <USBD_CtlSendData>
      break;
 8006208:	e004      	b.n	8006214 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800620a:	6839      	ldr	r1, [r7, #0]
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 f875 	bl	80062fc <USBD_CtlError>
      break;
 8006212:	bf00      	nop
  }
}
 8006214:	bf00      	nop
 8006216:	3708      	adds	r7, #8
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	885b      	ldrh	r3, [r3, #2]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d106      	bne.n	800623c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2201      	movs	r2, #1
 8006232:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f92b 	bl	8006492 <USBD_CtlSendStatus>
  }
}
 800623c:	bf00      	nop
 800623e:	3708      	adds	r7, #8
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006254:	b2db      	uxtb	r3, r3
 8006256:	3b01      	subs	r3, #1
 8006258:	2b02      	cmp	r3, #2
 800625a:	d80b      	bhi.n	8006274 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	885b      	ldrh	r3, [r3, #2]
 8006260:	2b01      	cmp	r3, #1
 8006262:	d10c      	bne.n	800627e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 f910 	bl	8006492 <USBD_CtlSendStatus>
      }
      break;
 8006272:	e004      	b.n	800627e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006274:	6839      	ldr	r1, [r7, #0]
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f840 	bl	80062fc <USBD_CtlError>
      break;
 800627c:	e000      	b.n	8006280 <USBD_ClrFeature+0x3c>
      break;
 800627e:	bf00      	nop
  }
}
 8006280:	bf00      	nop
 8006282:	3708      	adds	r7, #8
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	781a      	ldrb	r2, [r3, #0]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	3301      	adds	r3, #1
 80062a2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	781a      	ldrb	r2, [r3, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	3301      	adds	r3, #1
 80062b0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80062b2:	68f8      	ldr	r0, [r7, #12]
 80062b4:	f7ff fa91 	bl	80057da <SWAPBYTE>
 80062b8:	4603      	mov	r3, r0
 80062ba:	461a      	mov	r2, r3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	3301      	adds	r3, #1
 80062c4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	3301      	adds	r3, #1
 80062ca:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80062cc:	68f8      	ldr	r0, [r7, #12]
 80062ce:	f7ff fa84 	bl	80057da <SWAPBYTE>
 80062d2:	4603      	mov	r3, r0
 80062d4:	461a      	mov	r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	3301      	adds	r3, #1
 80062de:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	3301      	adds	r3, #1
 80062e4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	f7ff fa77 	bl	80057da <SWAPBYTE>
 80062ec:	4603      	mov	r3, r0
 80062ee:	461a      	mov	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	80da      	strh	r2, [r3, #6]
}
 80062f4:	bf00      	nop
 80062f6:	3710      	adds	r7, #16
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006306:	2180      	movs	r1, #128	; 0x80
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 fd35 	bl	8006d78 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800630e:	2100      	movs	r1, #0
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 fd31 	bl	8006d78 <USBD_LL_StallEP>
}
 8006316:	bf00      	nop
 8006318:	3708      	adds	r7, #8
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b086      	sub	sp, #24
 8006322:	af00      	add	r7, sp, #0
 8006324:	60f8      	str	r0, [r7, #12]
 8006326:	60b9      	str	r1, [r7, #8]
 8006328:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800632a:	2300      	movs	r3, #0
 800632c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d036      	beq.n	80063a2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006338:	6938      	ldr	r0, [r7, #16]
 800633a:	f000 f836 	bl	80063aa <USBD_GetLen>
 800633e:	4603      	mov	r3, r0
 8006340:	3301      	adds	r3, #1
 8006342:	b29b      	uxth	r3, r3
 8006344:	005b      	lsls	r3, r3, #1
 8006346:	b29a      	uxth	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800634c:	7dfb      	ldrb	r3, [r7, #23]
 800634e:	68ba      	ldr	r2, [r7, #8]
 8006350:	4413      	add	r3, r2
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	7812      	ldrb	r2, [r2, #0]
 8006356:	701a      	strb	r2, [r3, #0]
  idx++;
 8006358:	7dfb      	ldrb	r3, [r7, #23]
 800635a:	3301      	adds	r3, #1
 800635c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800635e:	7dfb      	ldrb	r3, [r7, #23]
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	4413      	add	r3, r2
 8006364:	2203      	movs	r2, #3
 8006366:	701a      	strb	r2, [r3, #0]
  idx++;
 8006368:	7dfb      	ldrb	r3, [r7, #23]
 800636a:	3301      	adds	r3, #1
 800636c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800636e:	e013      	b.n	8006398 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006370:	7dfb      	ldrb	r3, [r7, #23]
 8006372:	68ba      	ldr	r2, [r7, #8]
 8006374:	4413      	add	r3, r2
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	7812      	ldrb	r2, [r2, #0]
 800637a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	3301      	adds	r3, #1
 8006380:	613b      	str	r3, [r7, #16]
    idx++;
 8006382:	7dfb      	ldrb	r3, [r7, #23]
 8006384:	3301      	adds	r3, #1
 8006386:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006388:	7dfb      	ldrb	r3, [r7, #23]
 800638a:	68ba      	ldr	r2, [r7, #8]
 800638c:	4413      	add	r3, r2
 800638e:	2200      	movs	r2, #0
 8006390:	701a      	strb	r2, [r3, #0]
    idx++;
 8006392:	7dfb      	ldrb	r3, [r7, #23]
 8006394:	3301      	adds	r3, #1
 8006396:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1e7      	bne.n	8006370 <USBD_GetString+0x52>
 80063a0:	e000      	b.n	80063a4 <USBD_GetString+0x86>
    return;
 80063a2:	bf00      	nop
  }
}
 80063a4:	3718      	adds	r7, #24
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b085      	sub	sp, #20
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80063b2:	2300      	movs	r3, #0
 80063b4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80063ba:	e005      	b.n	80063c8 <USBD_GetLen+0x1e>
  {
    len++;
 80063bc:	7bfb      	ldrb	r3, [r7, #15]
 80063be:	3301      	adds	r3, #1
 80063c0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	3301      	adds	r3, #1
 80063c6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d1f5      	bne.n	80063bc <USBD_GetLen+0x12>
  }

  return len;
 80063d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3714      	adds	r7, #20
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr

080063de <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80063de:	b580      	push	{r7, lr}
 80063e0:	b084      	sub	sp, #16
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	60f8      	str	r0, [r7, #12]
 80063e6:	60b9      	str	r1, [r7, #8]
 80063e8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2202      	movs	r2, #2
 80063ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	2100      	movs	r1, #0
 8006404:	68f8      	ldr	r0, [r7, #12]
 8006406:	f000 fd85 	bl	8006f14 <USBD_LL_Transmit>

  return USBD_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68ba      	ldr	r2, [r7, #8]
 8006424:	2100      	movs	r1, #0
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f000 fd74 	bl	8006f14 <USBD_LL_Transmit>

  return USBD_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006436:	b580      	push	{r7, lr}
 8006438:	b084      	sub	sp, #16
 800643a:	af00      	add	r7, sp, #0
 800643c:	60f8      	str	r0, [r7, #12]
 800643e:	60b9      	str	r1, [r7, #8]
 8006440:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2203      	movs	r2, #3
 8006446:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	2100      	movs	r1, #0
 8006460:	68f8      	ldr	r0, [r7, #12]
 8006462:	f000 fd8f 	bl	8006f84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	2100      	movs	r1, #0
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	f000 fd7e 	bl	8006f84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3710      	adds	r7, #16
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b082      	sub	sp, #8
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2204      	movs	r2, #4
 800649e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80064a2:	2300      	movs	r3, #0
 80064a4:	2200      	movs	r2, #0
 80064a6:	2100      	movs	r1, #0
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 fd33 	bl	8006f14 <USBD_LL_Transmit>

  return USBD_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3708      	adds	r7, #8
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2205      	movs	r2, #5
 80064c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80064c8:	2300      	movs	r3, #0
 80064ca:	2200      	movs	r2, #0
 80064cc:	2100      	movs	r1, #0
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 fd58 	bl	8006f84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3708      	adds	r7, #8
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
	...

080064e0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80064e4:	2200      	movs	r2, #0
 80064e6:	4912      	ldr	r1, [pc, #72]	; (8006530 <MX_USB_DEVICE_Init+0x50>)
 80064e8:	4812      	ldr	r0, [pc, #72]	; (8006534 <MX_USB_DEVICE_Init+0x54>)
 80064ea:	f7fe fe65 	bl	80051b8 <USBD_Init>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d001      	beq.n	80064f8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80064f4:	f7fa f88f 	bl	8000616 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80064f8:	490f      	ldr	r1, [pc, #60]	; (8006538 <MX_USB_DEVICE_Init+0x58>)
 80064fa:	480e      	ldr	r0, [pc, #56]	; (8006534 <MX_USB_DEVICE_Init+0x54>)
 80064fc:	f7fe fe8c 	bl	8005218 <USBD_RegisterClass>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d001      	beq.n	800650a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006506:	f7fa f886 	bl	8000616 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800650a:	490c      	ldr	r1, [pc, #48]	; (800653c <MX_USB_DEVICE_Init+0x5c>)
 800650c:	4809      	ldr	r0, [pc, #36]	; (8006534 <MX_USB_DEVICE_Init+0x54>)
 800650e:	f7fe fddd 	bl	80050cc <USBD_CDC_RegisterInterface>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d001      	beq.n	800651c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006518:	f7fa f87d 	bl	8000616 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800651c:	4805      	ldr	r0, [pc, #20]	; (8006534 <MX_USB_DEVICE_Init+0x54>)
 800651e:	f7fe fea2 	bl	8005266 <USBD_Start>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d001      	beq.n	800652c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006528:	f7fa f875 	bl	8000616 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800652c:	bf00      	nop
 800652e:	bd80      	pop	{r7, pc}
 8006530:	20000158 	.word	0x20000158
 8006534:	200004a0 	.word	0x200004a0
 8006538:	20000040 	.word	0x20000040
 800653c:	20000144 	.word	0x20000144

08006540 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006544:	2200      	movs	r2, #0
 8006546:	4905      	ldr	r1, [pc, #20]	; (800655c <CDC_Init_FS+0x1c>)
 8006548:	4805      	ldr	r0, [pc, #20]	; (8006560 <CDC_Init_FS+0x20>)
 800654a:	f7fe fdd4 	bl	80050f6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800654e:	4905      	ldr	r1, [pc, #20]	; (8006564 <CDC_Init_FS+0x24>)
 8006550:	4803      	ldr	r0, [pc, #12]	; (8006560 <CDC_Init_FS+0x20>)
 8006552:	f7fe fdee 	bl	8005132 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006556:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006558:	4618      	mov	r0, r3
 800655a:	bd80      	pop	{r7, pc}
 800655c:	20000f70 	.word	0x20000f70
 8006560:	200004a0 	.word	0x200004a0
 8006564:	20000770 	.word	0x20000770

08006568 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006568:	b480      	push	{r7}
 800656a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800656c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800656e:	4618      	mov	r0, r3
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	4603      	mov	r3, r0
 8006580:	6039      	str	r1, [r7, #0]
 8006582:	71fb      	strb	r3, [r7, #7]
 8006584:	4613      	mov	r3, r2
 8006586:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006588:	79fb      	ldrb	r3, [r7, #7]
 800658a:	2b23      	cmp	r3, #35	; 0x23
 800658c:	d84a      	bhi.n	8006624 <CDC_Control_FS+0xac>
 800658e:	a201      	add	r2, pc, #4	; (adr r2, 8006594 <CDC_Control_FS+0x1c>)
 8006590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006594:	08006625 	.word	0x08006625
 8006598:	08006625 	.word	0x08006625
 800659c:	08006625 	.word	0x08006625
 80065a0:	08006625 	.word	0x08006625
 80065a4:	08006625 	.word	0x08006625
 80065a8:	08006625 	.word	0x08006625
 80065ac:	08006625 	.word	0x08006625
 80065b0:	08006625 	.word	0x08006625
 80065b4:	08006625 	.word	0x08006625
 80065b8:	08006625 	.word	0x08006625
 80065bc:	08006625 	.word	0x08006625
 80065c0:	08006625 	.word	0x08006625
 80065c4:	08006625 	.word	0x08006625
 80065c8:	08006625 	.word	0x08006625
 80065cc:	08006625 	.word	0x08006625
 80065d0:	08006625 	.word	0x08006625
 80065d4:	08006625 	.word	0x08006625
 80065d8:	08006625 	.word	0x08006625
 80065dc:	08006625 	.word	0x08006625
 80065e0:	08006625 	.word	0x08006625
 80065e4:	08006625 	.word	0x08006625
 80065e8:	08006625 	.word	0x08006625
 80065ec:	08006625 	.word	0x08006625
 80065f0:	08006625 	.word	0x08006625
 80065f4:	08006625 	.word	0x08006625
 80065f8:	08006625 	.word	0x08006625
 80065fc:	08006625 	.word	0x08006625
 8006600:	08006625 	.word	0x08006625
 8006604:	08006625 	.word	0x08006625
 8006608:	08006625 	.word	0x08006625
 800660c:	08006625 	.word	0x08006625
 8006610:	08006625 	.word	0x08006625
 8006614:	08006625 	.word	0x08006625
 8006618:	08006625 	.word	0x08006625
 800661c:	08006625 	.word	0x08006625
 8006620:	08006625 	.word	0x08006625
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006624:	bf00      	nop
  }

  return (USBD_OK);
 8006626:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006628:	4618      	mov	r0, r3
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800663e:	6879      	ldr	r1, [r7, #4]
 8006640:	4805      	ldr	r0, [pc, #20]	; (8006658 <CDC_Receive_FS+0x24>)
 8006642:	f7fe fd76 	bl	8005132 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006646:	4804      	ldr	r0, [pc, #16]	; (8006658 <CDC_Receive_FS+0x24>)
 8006648:	f7fe fd8c 	bl	8005164 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800664c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800664e:	4618      	mov	r0, r3
 8006650:	3708      	adds	r7, #8
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	200004a0 	.word	0x200004a0

0800665c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800665c:	b480      	push	{r7}
 800665e:	b087      	sub	sp, #28
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	4613      	mov	r3, r2
 8006668:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800666a:	2300      	movs	r3, #0
 800666c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800666e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006672:	4618      	mov	r0, r3
 8006674:	371c      	adds	r7, #28
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr
	...

08006680 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	4603      	mov	r3, r0
 8006688:	6039      	str	r1, [r7, #0]
 800668a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	2212      	movs	r2, #18
 8006690:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006692:	4b03      	ldr	r3, [pc, #12]	; (80066a0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006694:	4618      	mov	r0, r3
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr
 80066a0:	20000178 	.word	0x20000178

080066a4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	4603      	mov	r3, r0
 80066ac:	6039      	str	r1, [r7, #0]
 80066ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	2204      	movs	r2, #4
 80066b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80066b6:	4b03      	ldr	r3, [pc, #12]	; (80066c4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr
 80066c4:	20000198 	.word	0x20000198

080066c8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	4603      	mov	r3, r0
 80066d0:	6039      	str	r1, [r7, #0]
 80066d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80066d4:	79fb      	ldrb	r3, [r7, #7]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d105      	bne.n	80066e6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80066da:	683a      	ldr	r2, [r7, #0]
 80066dc:	4907      	ldr	r1, [pc, #28]	; (80066fc <USBD_FS_ProductStrDescriptor+0x34>)
 80066de:	4808      	ldr	r0, [pc, #32]	; (8006700 <USBD_FS_ProductStrDescriptor+0x38>)
 80066e0:	f7ff fe1d 	bl	800631e <USBD_GetString>
 80066e4:	e004      	b.n	80066f0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	4904      	ldr	r1, [pc, #16]	; (80066fc <USBD_FS_ProductStrDescriptor+0x34>)
 80066ea:	4805      	ldr	r0, [pc, #20]	; (8006700 <USBD_FS_ProductStrDescriptor+0x38>)
 80066ec:	f7ff fe17 	bl	800631e <USBD_GetString>
  }
  return USBD_StrDesc;
 80066f0:	4b02      	ldr	r3, [pc, #8]	; (80066fc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3708      	adds	r7, #8
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	20001770 	.word	0x20001770
 8006700:	08008998 	.word	0x08008998

08006704 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	4603      	mov	r3, r0
 800670c:	6039      	str	r1, [r7, #0]
 800670e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006710:	683a      	ldr	r2, [r7, #0]
 8006712:	4904      	ldr	r1, [pc, #16]	; (8006724 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006714:	4804      	ldr	r0, [pc, #16]	; (8006728 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006716:	f7ff fe02 	bl	800631e <USBD_GetString>
  return USBD_StrDesc;
 800671a:	4b02      	ldr	r3, [pc, #8]	; (8006724 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800671c:	4618      	mov	r0, r3
 800671e:	3708      	adds	r7, #8
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}
 8006724:	20001770 	.word	0x20001770
 8006728:	080089b0 	.word	0x080089b0

0800672c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0
 8006732:	4603      	mov	r3, r0
 8006734:	6039      	str	r1, [r7, #0]
 8006736:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	221a      	movs	r2, #26
 800673c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800673e:	f000 f855 	bl	80067ec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006742:	4b02      	ldr	r3, [pc, #8]	; (800674c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006744:	4618      	mov	r0, r3
 8006746:	3708      	adds	r7, #8
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	2000019c 	.word	0x2000019c

08006750 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	4603      	mov	r3, r0
 8006758:	6039      	str	r1, [r7, #0]
 800675a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800675c:	79fb      	ldrb	r3, [r7, #7]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d105      	bne.n	800676e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006762:	683a      	ldr	r2, [r7, #0]
 8006764:	4907      	ldr	r1, [pc, #28]	; (8006784 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006766:	4808      	ldr	r0, [pc, #32]	; (8006788 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006768:	f7ff fdd9 	bl	800631e <USBD_GetString>
 800676c:	e004      	b.n	8006778 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800676e:	683a      	ldr	r2, [r7, #0]
 8006770:	4904      	ldr	r1, [pc, #16]	; (8006784 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006772:	4805      	ldr	r0, [pc, #20]	; (8006788 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006774:	f7ff fdd3 	bl	800631e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006778:	4b02      	ldr	r3, [pc, #8]	; (8006784 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800677a:	4618      	mov	r0, r3
 800677c:	3708      	adds	r7, #8
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	20001770 	.word	0x20001770
 8006788:	080089c4 	.word	0x080089c4

0800678c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
 8006792:	4603      	mov	r3, r0
 8006794:	6039      	str	r1, [r7, #0]
 8006796:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006798:	79fb      	ldrb	r3, [r7, #7]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d105      	bne.n	80067aa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800679e:	683a      	ldr	r2, [r7, #0]
 80067a0:	4907      	ldr	r1, [pc, #28]	; (80067c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80067a2:	4808      	ldr	r0, [pc, #32]	; (80067c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80067a4:	f7ff fdbb 	bl	800631e <USBD_GetString>
 80067a8:	e004      	b.n	80067b4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80067aa:	683a      	ldr	r2, [r7, #0]
 80067ac:	4904      	ldr	r1, [pc, #16]	; (80067c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80067ae:	4805      	ldr	r0, [pc, #20]	; (80067c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80067b0:	f7ff fdb5 	bl	800631e <USBD_GetString>
  }
  return USBD_StrDesc;
 80067b4:	4b02      	ldr	r3, [pc, #8]	; (80067c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3708      	adds	r7, #8
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	20001770 	.word	0x20001770
 80067c4:	080089d0 	.word	0x080089d0

080067c8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	4603      	mov	r3, r0
 80067d0:	6039      	str	r1, [r7, #0]
 80067d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	220c      	movs	r2, #12
 80067d8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80067da:	4b03      	ldr	r3, [pc, #12]	; (80067e8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80067dc:	4618      	mov	r0, r3
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr
 80067e8:	2000018c 	.word	0x2000018c

080067ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80067f2:	4b0f      	ldr	r3, [pc, #60]	; (8006830 <Get_SerialNum+0x44>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80067f8:	4b0e      	ldr	r3, [pc, #56]	; (8006834 <Get_SerialNum+0x48>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80067fe:	4b0e      	ldr	r3, [pc, #56]	; (8006838 <Get_SerialNum+0x4c>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4413      	add	r3, r2
 800680a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d009      	beq.n	8006826 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006812:	2208      	movs	r2, #8
 8006814:	4909      	ldr	r1, [pc, #36]	; (800683c <Get_SerialNum+0x50>)
 8006816:	68f8      	ldr	r0, [r7, #12]
 8006818:	f000 f814 	bl	8006844 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800681c:	2204      	movs	r2, #4
 800681e:	4908      	ldr	r1, [pc, #32]	; (8006840 <Get_SerialNum+0x54>)
 8006820:	68b8      	ldr	r0, [r7, #8]
 8006822:	f000 f80f 	bl	8006844 <IntToUnicode>
  }
}
 8006826:	bf00      	nop
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	1fff7590 	.word	0x1fff7590
 8006834:	1fff7594 	.word	0x1fff7594
 8006838:	1fff7598 	.word	0x1fff7598
 800683c:	2000019e 	.word	0x2000019e
 8006840:	200001ae 	.word	0x200001ae

08006844 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006844:	b480      	push	{r7}
 8006846:	b087      	sub	sp, #28
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	4613      	mov	r3, r2
 8006850:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006852:	2300      	movs	r3, #0
 8006854:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006856:	2300      	movs	r3, #0
 8006858:	75fb      	strb	r3, [r7, #23]
 800685a:	e027      	b.n	80068ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	0f1b      	lsrs	r3, r3, #28
 8006860:	2b09      	cmp	r3, #9
 8006862:	d80b      	bhi.n	800687c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	0f1b      	lsrs	r3, r3, #28
 8006868:	b2da      	uxtb	r2, r3
 800686a:	7dfb      	ldrb	r3, [r7, #23]
 800686c:	005b      	lsls	r3, r3, #1
 800686e:	4619      	mov	r1, r3
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	440b      	add	r3, r1
 8006874:	3230      	adds	r2, #48	; 0x30
 8006876:	b2d2      	uxtb	r2, r2
 8006878:	701a      	strb	r2, [r3, #0]
 800687a:	e00a      	b.n	8006892 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	0f1b      	lsrs	r3, r3, #28
 8006880:	b2da      	uxtb	r2, r3
 8006882:	7dfb      	ldrb	r3, [r7, #23]
 8006884:	005b      	lsls	r3, r3, #1
 8006886:	4619      	mov	r1, r3
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	440b      	add	r3, r1
 800688c:	3237      	adds	r2, #55	; 0x37
 800688e:	b2d2      	uxtb	r2, r2
 8006890:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	011b      	lsls	r3, r3, #4
 8006896:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006898:	7dfb      	ldrb	r3, [r7, #23]
 800689a:	005b      	lsls	r3, r3, #1
 800689c:	3301      	adds	r3, #1
 800689e:	68ba      	ldr	r2, [r7, #8]
 80068a0:	4413      	add	r3, r2
 80068a2:	2200      	movs	r2, #0
 80068a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80068a6:	7dfb      	ldrb	r3, [r7, #23]
 80068a8:	3301      	adds	r3, #1
 80068aa:	75fb      	strb	r3, [r7, #23]
 80068ac:	7dfa      	ldrb	r2, [r7, #23]
 80068ae:	79fb      	ldrb	r3, [r7, #7]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d3d3      	bcc.n	800685c <IntToUnicode+0x18>
  }
}
 80068b4:	bf00      	nop
 80068b6:	bf00      	nop
 80068b8:	371c      	adds	r7, #28
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
	...

080068c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b08a      	sub	sp, #40	; 0x28
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068cc:	f107 0314 	add.w	r3, r7, #20
 80068d0:	2200      	movs	r2, #0
 80068d2:	601a      	str	r2, [r3, #0]
 80068d4:	605a      	str	r2, [r3, #4]
 80068d6:	609a      	str	r2, [r3, #8]
 80068d8:	60da      	str	r2, [r3, #12]
 80068da:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80068e4:	d14e      	bne.n	8006984 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068e6:	4b29      	ldr	r3, [pc, #164]	; (800698c <HAL_PCD_MspInit+0xc8>)
 80068e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068ea:	4a28      	ldr	r2, [pc, #160]	; (800698c <HAL_PCD_MspInit+0xc8>)
 80068ec:	f043 0301 	orr.w	r3, r3, #1
 80068f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80068f2:	4b26      	ldr	r3, [pc, #152]	; (800698c <HAL_PCD_MspInit+0xc8>)
 80068f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068f6:	f003 0301 	and.w	r3, r3, #1
 80068fa:	613b      	str	r3, [r7, #16]
 80068fc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80068fe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006904:	2302      	movs	r3, #2
 8006906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006908:	2300      	movs	r3, #0
 800690a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800690c:	2303      	movs	r3, #3
 800690e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006910:	230a      	movs	r3, #10
 8006912:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006914:	f107 0314 	add.w	r3, r7, #20
 8006918:	4619      	mov	r1, r3
 800691a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800691e:	f7fa f985 	bl	8000c2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006922:	4b1a      	ldr	r3, [pc, #104]	; (800698c <HAL_PCD_MspInit+0xc8>)
 8006924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006926:	4a19      	ldr	r2, [pc, #100]	; (800698c <HAL_PCD_MspInit+0xc8>)
 8006928:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800692c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800692e:	4b17      	ldr	r3, [pc, #92]	; (800698c <HAL_PCD_MspInit+0xc8>)
 8006930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006932:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006936:	60fb      	str	r3, [r7, #12]
 8006938:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800693a:	4b14      	ldr	r3, [pc, #80]	; (800698c <HAL_PCD_MspInit+0xc8>)
 800693c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800693e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006942:	2b00      	cmp	r3, #0
 8006944:	d114      	bne.n	8006970 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006946:	4b11      	ldr	r3, [pc, #68]	; (800698c <HAL_PCD_MspInit+0xc8>)
 8006948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800694a:	4a10      	ldr	r2, [pc, #64]	; (800698c <HAL_PCD_MspInit+0xc8>)
 800694c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006950:	6593      	str	r3, [r2, #88]	; 0x58
 8006952:	4b0e      	ldr	r3, [pc, #56]	; (800698c <HAL_PCD_MspInit+0xc8>)
 8006954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800695a:	60bb      	str	r3, [r7, #8]
 800695c:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800695e:	f7fb fc45 	bl	80021ec <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006962:	4b0a      	ldr	r3, [pc, #40]	; (800698c <HAL_PCD_MspInit+0xc8>)
 8006964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006966:	4a09      	ldr	r2, [pc, #36]	; (800698c <HAL_PCD_MspInit+0xc8>)
 8006968:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800696c:	6593      	str	r3, [r2, #88]	; 0x58
 800696e:	e001      	b.n	8006974 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8006970:	f7fb fc3c 	bl	80021ec <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006974:	2200      	movs	r2, #0
 8006976:	2100      	movs	r1, #0
 8006978:	2043      	movs	r0, #67	; 0x43
 800697a:	f7fa f920 	bl	8000bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800697e:	2043      	movs	r0, #67	; 0x43
 8006980:	f7fa f939 	bl	8000bf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006984:	bf00      	nop
 8006986:	3728      	adds	r7, #40	; 0x28
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	40021000 	.word	0x40021000

08006990 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80069a4:	4619      	mov	r1, r3
 80069a6:	4610      	mov	r0, r2
 80069a8:	f7fe fca8 	bl	80052fc <USBD_LL_SetupStage>
}
 80069ac:	bf00      	nop
 80069ae:	3708      	adds	r7, #8
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	460b      	mov	r3, r1
 80069be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80069c6:	78fa      	ldrb	r2, [r7, #3]
 80069c8:	6879      	ldr	r1, [r7, #4]
 80069ca:	4613      	mov	r3, r2
 80069cc:	00db      	lsls	r3, r3, #3
 80069ce:	1a9b      	subs	r3, r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	440b      	add	r3, r1
 80069d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	78fb      	ldrb	r3, [r7, #3]
 80069dc:	4619      	mov	r1, r3
 80069de:	f7fe fce2 	bl	80053a6 <USBD_LL_DataOutStage>
}
 80069e2:	bf00      	nop
 80069e4:	3708      	adds	r7, #8
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}

080069ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b082      	sub	sp, #8
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
 80069f2:	460b      	mov	r3, r1
 80069f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80069fc:	78fa      	ldrb	r2, [r7, #3]
 80069fe:	6879      	ldr	r1, [r7, #4]
 8006a00:	4613      	mov	r3, r2
 8006a02:	00db      	lsls	r3, r3, #3
 8006a04:	1a9b      	subs	r3, r3, r2
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	440b      	add	r3, r1
 8006a0a:	3348      	adds	r3, #72	; 0x48
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	78fb      	ldrb	r3, [r7, #3]
 8006a10:	4619      	mov	r1, r3
 8006a12:	f7fe fd2b 	bl	800546c <USBD_LL_DataInStage>
}
 8006a16:	bf00      	nop
 8006a18:	3708      	adds	r7, #8
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}

08006a1e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b082      	sub	sp, #8
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f7fe fe3f 	bl	80056b0 <USBD_LL_SOF>
}
 8006a32:	bf00      	nop
 8006a34:	3708      	adds	r7, #8
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}

08006a3a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a3a:	b580      	push	{r7, lr}
 8006a3c:	b084      	sub	sp, #16
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006a42:	2301      	movs	r3, #1
 8006a44:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d001      	beq.n	8006a52 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006a4e:	f7f9 fde2 	bl	8000616 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006a58:	7bfa      	ldrb	r2, [r7, #15]
 8006a5a:	4611      	mov	r1, r2
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f7fe fde9 	bl	8005634 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f7fe fd95 	bl	8005598 <USBD_LL_Reset>
}
 8006a6e:	bf00      	nop
 8006a70:	3710      	adds	r7, #16
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
	...

08006a78 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	6812      	ldr	r2, [r2, #0]
 8006a8e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a92:	f043 0301 	orr.w	r3, r3, #1
 8006a96:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7fe fdd8 	bl	8005654 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6a1b      	ldr	r3, [r3, #32]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d005      	beq.n	8006ab8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006aac:	4b04      	ldr	r3, [pc, #16]	; (8006ac0 <HAL_PCD_SuspendCallback+0x48>)
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	4a03      	ldr	r2, [pc, #12]	; (8006ac0 <HAL_PCD_SuspendCallback+0x48>)
 8006ab2:	f043 0306 	orr.w	r3, r3, #6
 8006ab6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006ab8:	bf00      	nop
 8006aba:	3708      	adds	r7, #8
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	e000ed00 	.word	0xe000ed00

08006ac4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	6812      	ldr	r2, [r2, #0]
 8006ada:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006ade:	f023 0301 	bic.w	r3, r3, #1
 8006ae2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6a1b      	ldr	r3, [r3, #32]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d007      	beq.n	8006afc <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006aec:	4b08      	ldr	r3, [pc, #32]	; (8006b10 <HAL_PCD_ResumeCallback+0x4c>)
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	4a07      	ldr	r2, [pc, #28]	; (8006b10 <HAL_PCD_ResumeCallback+0x4c>)
 8006af2:	f023 0306 	bic.w	r3, r3, #6
 8006af6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8006af8:	f000 faf6 	bl	80070e8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7fe fdbc 	bl	8005680 <USBD_LL_Resume>
}
 8006b08:	bf00      	nop
 8006b0a:	3708      	adds	r7, #8
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	e000ed00 	.word	0xe000ed00

08006b14 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006b26:	78fa      	ldrb	r2, [r7, #3]
 8006b28:	4611      	mov	r1, r2
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7fe fe08 	bl	8005740 <USBD_LL_IsoOUTIncomplete>
}
 8006b30:	bf00      	nop
 8006b32:	3708      	adds	r7, #8
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	460b      	mov	r3, r1
 8006b42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006b4a:	78fa      	ldrb	r2, [r7, #3]
 8006b4c:	4611      	mov	r1, r2
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7fe fdd0 	bl	80056f4 <USBD_LL_IsoINIncomplete>
}
 8006b54:	bf00      	nop
 8006b56:	3708      	adds	r7, #8
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7fe fe0e 	bl	800578c <USBD_LL_DevConnected>
}
 8006b70:	bf00      	nop
 8006b72:	3708      	adds	r7, #8
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006b86:	4618      	mov	r0, r3
 8006b88:	f7fe fe0b 	bl	80057a2 <USBD_LL_DevDisconnected>
}
 8006b8c:	bf00      	nop
 8006b8e:	3708      	adds	r7, #8
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d13c      	bne.n	8006c1e <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006ba4:	4a20      	ldr	r2, [pc, #128]	; (8006c28 <USBD_LL_Init+0x94>)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a1e      	ldr	r2, [pc, #120]	; (8006c28 <USBD_LL_Init+0x94>)
 8006bb0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006bb4:	4b1c      	ldr	r3, [pc, #112]	; (8006c28 <USBD_LL_Init+0x94>)
 8006bb6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006bba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8006bbc:	4b1a      	ldr	r3, [pc, #104]	; (8006c28 <USBD_LL_Init+0x94>)
 8006bbe:	2206      	movs	r2, #6
 8006bc0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006bc2:	4b19      	ldr	r3, [pc, #100]	; (8006c28 <USBD_LL_Init+0x94>)
 8006bc4:	2202      	movs	r2, #2
 8006bc6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006bc8:	4b17      	ldr	r3, [pc, #92]	; (8006c28 <USBD_LL_Init+0x94>)
 8006bca:	2202      	movs	r2, #2
 8006bcc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006bce:	4b16      	ldr	r3, [pc, #88]	; (8006c28 <USBD_LL_Init+0x94>)
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006bd4:	4b14      	ldr	r3, [pc, #80]	; (8006c28 <USBD_LL_Init+0x94>)
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006bda:	4b13      	ldr	r3, [pc, #76]	; (8006c28 <USBD_LL_Init+0x94>)
 8006bdc:	2200      	movs	r2, #0
 8006bde:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8006be0:	4b11      	ldr	r3, [pc, #68]	; (8006c28 <USBD_LL_Init+0x94>)
 8006be2:	2200      	movs	r2, #0
 8006be4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006be6:	4b10      	ldr	r3, [pc, #64]	; (8006c28 <USBD_LL_Init+0x94>)
 8006be8:	2200      	movs	r2, #0
 8006bea:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006bec:	4b0e      	ldr	r3, [pc, #56]	; (8006c28 <USBD_LL_Init+0x94>)
 8006bee:	2200      	movs	r2, #0
 8006bf0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006bf2:	480d      	ldr	r0, [pc, #52]	; (8006c28 <USBD_LL_Init+0x94>)
 8006bf4:	f7fa f9f6 	bl	8000fe4 <HAL_PCD_Init>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d001      	beq.n	8006c02 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006bfe:	f7f9 fd0a 	bl	8000616 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006c02:	2180      	movs	r1, #128	; 0x80
 8006c04:	4808      	ldr	r0, [pc, #32]	; (8006c28 <USBD_LL_Init+0x94>)
 8006c06:	f7fb fa58 	bl	80020ba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006c0a:	2240      	movs	r2, #64	; 0x40
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	4806      	ldr	r0, [pc, #24]	; (8006c28 <USBD_LL_Init+0x94>)
 8006c10:	f7fb fa0c 	bl	800202c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006c14:	2280      	movs	r2, #128	; 0x80
 8006c16:	2101      	movs	r1, #1
 8006c18:	4803      	ldr	r0, [pc, #12]	; (8006c28 <USBD_LL_Init+0x94>)
 8006c1a:	f7fb fa07 	bl	800202c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3708      	adds	r7, #8
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	20001970 	.word	0x20001970

08006c2c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c34:	2300      	movs	r3, #0
 8006c36:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006c42:	4618      	mov	r0, r3
 8006c44:	f7fa faf2 	bl	800122c <HAL_PCD_Start>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006c4c:	7bbb      	ldrb	r3, [r7, #14]
 8006c4e:	2b03      	cmp	r3, #3
 8006c50:	d816      	bhi.n	8006c80 <USBD_LL_Start+0x54>
 8006c52:	a201      	add	r2, pc, #4	; (adr r2, 8006c58 <USBD_LL_Start+0x2c>)
 8006c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c58:	08006c69 	.word	0x08006c69
 8006c5c:	08006c6f 	.word	0x08006c6f
 8006c60:	08006c75 	.word	0x08006c75
 8006c64:	08006c7b 	.word	0x08006c7b
    case HAL_OK :
      usb_status = USBD_OK;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	73fb      	strb	r3, [r7, #15]
    break;
 8006c6c:	e00b      	b.n	8006c86 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	73fb      	strb	r3, [r7, #15]
    break;
 8006c72:	e008      	b.n	8006c86 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006c74:	2301      	movs	r3, #1
 8006c76:	73fb      	strb	r3, [r7, #15]
    break;
 8006c78:	e005      	b.n	8006c86 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	73fb      	strb	r3, [r7, #15]
    break;
 8006c7e:	e002      	b.n	8006c86 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8006c80:	2303      	movs	r3, #3
 8006c82:	73fb      	strb	r3, [r7, #15]
    break;
 8006c84:	bf00      	nop
  }
  return usb_status;
 8006c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3710      	adds	r7, #16
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	4608      	mov	r0, r1
 8006c9a:	4611      	mov	r1, r2
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	70fb      	strb	r3, [r7, #3]
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	70bb      	strb	r3, [r7, #2]
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006caa:	2300      	movs	r3, #0
 8006cac:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006cb8:	78bb      	ldrb	r3, [r7, #2]
 8006cba:	883a      	ldrh	r2, [r7, #0]
 8006cbc:	78f9      	ldrb	r1, [r7, #3]
 8006cbe:	f7fa fead 	bl	8001a1c <HAL_PCD_EP_Open>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006cc6:	7bbb      	ldrb	r3, [r7, #14]
 8006cc8:	2b03      	cmp	r3, #3
 8006cca:	d817      	bhi.n	8006cfc <USBD_LL_OpenEP+0x6c>
 8006ccc:	a201      	add	r2, pc, #4	; (adr r2, 8006cd4 <USBD_LL_OpenEP+0x44>)
 8006cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd2:	bf00      	nop
 8006cd4:	08006ce5 	.word	0x08006ce5
 8006cd8:	08006ceb 	.word	0x08006ceb
 8006cdc:	08006cf1 	.word	0x08006cf1
 8006ce0:	08006cf7 	.word	0x08006cf7
    case HAL_OK :
      usb_status = USBD_OK;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	73fb      	strb	r3, [r7, #15]
    break;
 8006ce8:	e00b      	b.n	8006d02 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006cea:	2303      	movs	r3, #3
 8006cec:	73fb      	strb	r3, [r7, #15]
    break;
 8006cee:	e008      	b.n	8006d02 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	73fb      	strb	r3, [r7, #15]
    break;
 8006cf4:	e005      	b.n	8006d02 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	73fb      	strb	r3, [r7, #15]
    break;
 8006cfa:	e002      	b.n	8006d02 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	73fb      	strb	r3, [r7, #15]
    break;
 8006d00:	bf00      	nop
  }
  return usb_status;
 8006d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	460b      	mov	r3, r1
 8006d16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006d26:	78fa      	ldrb	r2, [r7, #3]
 8006d28:	4611      	mov	r1, r2
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7fa fede 	bl	8001aec <HAL_PCD_EP_Close>
 8006d30:	4603      	mov	r3, r0
 8006d32:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006d34:	7bbb      	ldrb	r3, [r7, #14]
 8006d36:	2b03      	cmp	r3, #3
 8006d38:	d816      	bhi.n	8006d68 <USBD_LL_CloseEP+0x5c>
 8006d3a:	a201      	add	r2, pc, #4	; (adr r2, 8006d40 <USBD_LL_CloseEP+0x34>)
 8006d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d40:	08006d51 	.word	0x08006d51
 8006d44:	08006d57 	.word	0x08006d57
 8006d48:	08006d5d 	.word	0x08006d5d
 8006d4c:	08006d63 	.word	0x08006d63
    case HAL_OK :
      usb_status = USBD_OK;
 8006d50:	2300      	movs	r3, #0
 8006d52:	73fb      	strb	r3, [r7, #15]
    break;
 8006d54:	e00b      	b.n	8006d6e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006d56:	2303      	movs	r3, #3
 8006d58:	73fb      	strb	r3, [r7, #15]
    break;
 8006d5a:	e008      	b.n	8006d6e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	73fb      	strb	r3, [r7, #15]
    break;
 8006d60:	e005      	b.n	8006d6e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006d62:	2303      	movs	r3, #3
 8006d64:	73fb      	strb	r3, [r7, #15]
    break;
 8006d66:	e002      	b.n	8006d6e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006d68:	2303      	movs	r3, #3
 8006d6a:	73fb      	strb	r3, [r7, #15]
    break;
 8006d6c:	bf00      	nop
  }
  return usb_status;
 8006d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3710      	adds	r7, #16
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	460b      	mov	r3, r1
 8006d82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d84:	2300      	movs	r3, #0
 8006d86:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006d92:	78fa      	ldrb	r2, [r7, #3]
 8006d94:	4611      	mov	r1, r2
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7fa ff85 	bl	8001ca6 <HAL_PCD_EP_SetStall>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006da0:	7bbb      	ldrb	r3, [r7, #14]
 8006da2:	2b03      	cmp	r3, #3
 8006da4:	d816      	bhi.n	8006dd4 <USBD_LL_StallEP+0x5c>
 8006da6:	a201      	add	r2, pc, #4	; (adr r2, 8006dac <USBD_LL_StallEP+0x34>)
 8006da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dac:	08006dbd 	.word	0x08006dbd
 8006db0:	08006dc3 	.word	0x08006dc3
 8006db4:	08006dc9 	.word	0x08006dc9
 8006db8:	08006dcf 	.word	0x08006dcf
    case HAL_OK :
      usb_status = USBD_OK;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	73fb      	strb	r3, [r7, #15]
    break;
 8006dc0:	e00b      	b.n	8006dda <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	73fb      	strb	r3, [r7, #15]
    break;
 8006dc6:	e008      	b.n	8006dda <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	73fb      	strb	r3, [r7, #15]
    break;
 8006dcc:	e005      	b.n	8006dda <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006dce:	2303      	movs	r3, #3
 8006dd0:	73fb      	strb	r3, [r7, #15]
    break;
 8006dd2:	e002      	b.n	8006dda <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	73fb      	strb	r3, [r7, #15]
    break;
 8006dd8:	bf00      	nop
  }
  return usb_status;
 8006dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3710      	adds	r7, #16
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	460b      	mov	r3, r1
 8006dee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006df0:	2300      	movs	r3, #0
 8006df2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006df4:	2300      	movs	r3, #0
 8006df6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006dfe:	78fa      	ldrb	r2, [r7, #3]
 8006e00:	4611      	mov	r1, r2
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7fa ffb1 	bl	8001d6a <HAL_PCD_EP_ClrStall>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006e0c:	7bbb      	ldrb	r3, [r7, #14]
 8006e0e:	2b03      	cmp	r3, #3
 8006e10:	d816      	bhi.n	8006e40 <USBD_LL_ClearStallEP+0x5c>
 8006e12:	a201      	add	r2, pc, #4	; (adr r2, 8006e18 <USBD_LL_ClearStallEP+0x34>)
 8006e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e18:	08006e29 	.word	0x08006e29
 8006e1c:	08006e2f 	.word	0x08006e2f
 8006e20:	08006e35 	.word	0x08006e35
 8006e24:	08006e3b 	.word	0x08006e3b
    case HAL_OK :
      usb_status = USBD_OK;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	73fb      	strb	r3, [r7, #15]
    break;
 8006e2c:	e00b      	b.n	8006e46 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	73fb      	strb	r3, [r7, #15]
    break;
 8006e32:	e008      	b.n	8006e46 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006e34:	2301      	movs	r3, #1
 8006e36:	73fb      	strb	r3, [r7, #15]
    break;
 8006e38:	e005      	b.n	8006e46 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	73fb      	strb	r3, [r7, #15]
    break;
 8006e3e:	e002      	b.n	8006e46 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006e40:	2303      	movs	r3, #3
 8006e42:	73fb      	strb	r3, [r7, #15]
    break;
 8006e44:	bf00      	nop
  }
  return usb_status;
 8006e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	460b      	mov	r3, r1
 8006e5a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006e62:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006e64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	da0b      	bge.n	8006e84 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006e6c:	78fb      	ldrb	r3, [r7, #3]
 8006e6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e72:	68f9      	ldr	r1, [r7, #12]
 8006e74:	4613      	mov	r3, r2
 8006e76:	00db      	lsls	r3, r3, #3
 8006e78:	1a9b      	subs	r3, r3, r2
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	440b      	add	r3, r1
 8006e7e:	333e      	adds	r3, #62	; 0x3e
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	e00b      	b.n	8006e9c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006e84:	78fb      	ldrb	r3, [r7, #3]
 8006e86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e8a:	68f9      	ldr	r1, [r7, #12]
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	00db      	lsls	r3, r3, #3
 8006e90:	1a9b      	subs	r3, r3, r2
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	440b      	add	r3, r1
 8006e96:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006e9a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3714      	adds	r7, #20
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006ec2:	78fa      	ldrb	r2, [r7, #3]
 8006ec4:	4611      	mov	r1, r2
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f7fa fd83 	bl	80019d2 <HAL_PCD_SetAddress>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006ed0:	7bbb      	ldrb	r3, [r7, #14]
 8006ed2:	2b03      	cmp	r3, #3
 8006ed4:	d816      	bhi.n	8006f04 <USBD_LL_SetUSBAddress+0x5c>
 8006ed6:	a201      	add	r2, pc, #4	; (adr r2, 8006edc <USBD_LL_SetUSBAddress+0x34>)
 8006ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006edc:	08006eed 	.word	0x08006eed
 8006ee0:	08006ef3 	.word	0x08006ef3
 8006ee4:	08006ef9 	.word	0x08006ef9
 8006ee8:	08006eff 	.word	0x08006eff
    case HAL_OK :
      usb_status = USBD_OK;
 8006eec:	2300      	movs	r3, #0
 8006eee:	73fb      	strb	r3, [r7, #15]
    break;
 8006ef0:	e00b      	b.n	8006f0a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	73fb      	strb	r3, [r7, #15]
    break;
 8006ef6:	e008      	b.n	8006f0a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	73fb      	strb	r3, [r7, #15]
    break;
 8006efc:	e005      	b.n	8006f0a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006efe:	2303      	movs	r3, #3
 8006f00:	73fb      	strb	r3, [r7, #15]
    break;
 8006f02:	e002      	b.n	8006f0a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8006f04:	2303      	movs	r3, #3
 8006f06:	73fb      	strb	r3, [r7, #15]
    break;
 8006f08:	bf00      	nop
  }
  return usb_status;
 8006f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3710      	adds	r7, #16
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b086      	sub	sp, #24
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	607a      	str	r2, [r7, #4]
 8006f1e:	603b      	str	r3, [r7, #0]
 8006f20:	460b      	mov	r3, r1
 8006f22:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f24:	2300      	movs	r3, #0
 8006f26:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006f32:	7af9      	ldrb	r1, [r7, #11]
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	f7fa fe78 	bl	8001c2c <HAL_PCD_EP_Transmit>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8006f40:	7dbb      	ldrb	r3, [r7, #22]
 8006f42:	2b03      	cmp	r3, #3
 8006f44:	d816      	bhi.n	8006f74 <USBD_LL_Transmit+0x60>
 8006f46:	a201      	add	r2, pc, #4	; (adr r2, 8006f4c <USBD_LL_Transmit+0x38>)
 8006f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f4c:	08006f5d 	.word	0x08006f5d
 8006f50:	08006f63 	.word	0x08006f63
 8006f54:	08006f69 	.word	0x08006f69
 8006f58:	08006f6f 	.word	0x08006f6f
    case HAL_OK :
      usb_status = USBD_OK;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	75fb      	strb	r3, [r7, #23]
    break;
 8006f60:	e00b      	b.n	8006f7a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006f62:	2303      	movs	r3, #3
 8006f64:	75fb      	strb	r3, [r7, #23]
    break;
 8006f66:	e008      	b.n	8006f7a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	75fb      	strb	r3, [r7, #23]
    break;
 8006f6c:	e005      	b.n	8006f7a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	75fb      	strb	r3, [r7, #23]
    break;
 8006f72:	e002      	b.n	8006f7a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8006f74:	2303      	movs	r3, #3
 8006f76:	75fb      	strb	r3, [r7, #23]
    break;
 8006f78:	bf00      	nop
  }
  return usb_status;
 8006f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3718      	adds	r7, #24
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b086      	sub	sp, #24
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	607a      	str	r2, [r7, #4]
 8006f8e:	603b      	str	r3, [r7, #0]
 8006f90:	460b      	mov	r3, r1
 8006f92:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f94:	2300      	movs	r3, #0
 8006f96:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006fa2:	7af9      	ldrb	r1, [r7, #11]
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	f7fa fdea 	bl	8001b80 <HAL_PCD_EP_Receive>
 8006fac:	4603      	mov	r3, r0
 8006fae:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8006fb0:	7dbb      	ldrb	r3, [r7, #22]
 8006fb2:	2b03      	cmp	r3, #3
 8006fb4:	d816      	bhi.n	8006fe4 <USBD_LL_PrepareReceive+0x60>
 8006fb6:	a201      	add	r2, pc, #4	; (adr r2, 8006fbc <USBD_LL_PrepareReceive+0x38>)
 8006fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fbc:	08006fcd 	.word	0x08006fcd
 8006fc0:	08006fd3 	.word	0x08006fd3
 8006fc4:	08006fd9 	.word	0x08006fd9
 8006fc8:	08006fdf 	.word	0x08006fdf
    case HAL_OK :
      usb_status = USBD_OK;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	75fb      	strb	r3, [r7, #23]
    break;
 8006fd0:	e00b      	b.n	8006fea <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	75fb      	strb	r3, [r7, #23]
    break;
 8006fd6:	e008      	b.n	8006fea <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	75fb      	strb	r3, [r7, #23]
    break;
 8006fdc:	e005      	b.n	8006fea <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	75fb      	strb	r3, [r7, #23]
    break;
 8006fe2:	e002      	b.n	8006fea <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8006fe4:	2303      	movs	r3, #3
 8006fe6:	75fb      	strb	r3, [r7, #23]
    break;
 8006fe8:	bf00      	nop
  }
  return usb_status;
 8006fea:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3718      	adds	r7, #24
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007006:	78fa      	ldrb	r2, [r7, #3]
 8007008:	4611      	mov	r1, r2
 800700a:	4618      	mov	r0, r3
 800700c:	f7fa fdf6 	bl	8001bfc <HAL_PCD_EP_GetRxCount>
 8007010:	4603      	mov	r3, r0
}
 8007012:	4618      	mov	r0, r3
 8007014:	3708      	adds	r7, #8
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
	...

0800701c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	460b      	mov	r3, r1
 8007026:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8007028:	78fb      	ldrb	r3, [r7, #3]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d002      	beq.n	8007034 <HAL_PCDEx_LPM_Callback+0x18>
 800702e:	2b01      	cmp	r3, #1
 8007030:	d01f      	beq.n	8007072 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8007032:	e03b      	b.n	80070ac <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a1b      	ldr	r3, [r3, #32]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d007      	beq.n	800704c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800703c:	f000 f854 	bl	80070e8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007040:	4b1c      	ldr	r3, [pc, #112]	; (80070b4 <HAL_PCDEx_LPM_Callback+0x98>)
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	4a1b      	ldr	r2, [pc, #108]	; (80070b4 <HAL_PCDEx_LPM_Callback+0x98>)
 8007046:	f023 0306 	bic.w	r3, r3, #6
 800704a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	6812      	ldr	r2, [r2, #0]
 800705a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800705e:	f023 0301 	bic.w	r3, r3, #1
 8007062:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800706a:	4618      	mov	r0, r3
 800706c:	f7fe fb08 	bl	8005680 <USBD_LL_Resume>
    break;
 8007070:	e01c      	b.n	80070ac <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	6812      	ldr	r2, [r2, #0]
 8007080:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007084:	f043 0301 	orr.w	r3, r3, #1
 8007088:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007090:	4618      	mov	r0, r3
 8007092:	f7fe fadf 	bl	8005654 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a1b      	ldr	r3, [r3, #32]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d005      	beq.n	80070aa <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800709e:	4b05      	ldr	r3, [pc, #20]	; (80070b4 <HAL_PCDEx_LPM_Callback+0x98>)
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	4a04      	ldr	r2, [pc, #16]	; (80070b4 <HAL_PCDEx_LPM_Callback+0x98>)
 80070a4:	f043 0306 	orr.w	r3, r3, #6
 80070a8:	6113      	str	r3, [r2, #16]
    break;
 80070aa:	bf00      	nop
}
 80070ac:	bf00      	nop
 80070ae:	3708      	adds	r7, #8
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	e000ed00 	.word	0xe000ed00

080070b8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80070c0:	4b03      	ldr	r3, [pc, #12]	; (80070d0 <USBD_static_malloc+0x18>)
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	370c      	adds	r7, #12
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	20000240 	.word	0x20000240

080070d4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]

}
 80070dc:	bf00      	nop
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80070ec:	f7f9 f95e 	bl	80003ac <SystemClock_Config>
}
 80070f0:	bf00      	nop
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <AES_keyschedule_enc_LL>:
 80070f4:	b570      	push	{r4, r5, r6, lr}
 80070f6:	1092      	asrs	r2, r2, #2
 80070f8:	2300      	movs	r3, #0
 80070fa:	4293      	cmp	r3, r2
 80070fc:	da05      	bge.n	800710a <AES_keyschedule_enc_LL+0x16>
 80070fe:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8007102:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
 8007106:	3301      	adds	r3, #1
 8007108:	e7f7      	b.n	80070fa <AES_keyschedule_enc_LL+0x6>
 800710a:	2a06      	cmp	r2, #6
 800710c:	d02e      	beq.n	800716c <AES_keyschedule_enc_LL+0x78>
 800710e:	2a08      	cmp	r2, #8
 8007110:	d05c      	beq.n	80071cc <AES_keyschedule_enc_LL+0xd8>
 8007112:	2a04      	cmp	r2, #4
 8007114:	f040 80a3 	bne.w	800725e <AES_keyschedule_enc_LL+0x16a>
 8007118:	2200      	movs	r2, #0
 800711a:	4851      	ldr	r0, [pc, #324]	; (8007260 <AES_keyschedule_enc_LL+0x16c>)
 800711c:	68cb      	ldr	r3, [r1, #12]
 800711e:	5815      	ldr	r5, [r2, r0]
 8007120:	6808      	ldr	r0, [r1, #0]
 8007122:	b2dc      	uxtb	r4, r3
 8007124:	4045      	eors	r5, r0
 8007126:	484f      	ldr	r0, [pc, #316]	; (8007264 <AES_keyschedule_enc_LL+0x170>)
 8007128:	5d06      	ldrb	r6, [r0, r4]
 800712a:	0e1c      	lsrs	r4, r3, #24
 800712c:	3204      	adds	r2, #4
 800712e:	5d04      	ldrb	r4, [r0, r4]
 8007130:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 8007134:	f3c3 4607 	ubfx	r6, r3, #16, #8
 8007138:	2a28      	cmp	r2, #40	; 0x28
 800713a:	5d86      	ldrb	r6, [r0, r6]
 800713c:	ea44 6406 	orr.w	r4, r4, r6, lsl #24
 8007140:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8007144:	5d80      	ldrb	r0, [r0, r6]
 8007146:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 800714a:	ea85 0004 	eor.w	r0, r5, r4
 800714e:	684c      	ldr	r4, [r1, #4]
 8007150:	6108      	str	r0, [r1, #16]
 8007152:	ea80 0004 	eor.w	r0, r0, r4
 8007156:	688c      	ldr	r4, [r1, #8]
 8007158:	6148      	str	r0, [r1, #20]
 800715a:	ea80 0004 	eor.w	r0, r0, r4
 800715e:	ea80 0303 	eor.w	r3, r0, r3
 8007162:	6188      	str	r0, [r1, #24]
 8007164:	61cb      	str	r3, [r1, #28]
 8007166:	d07a      	beq.n	800725e <AES_keyschedule_enc_LL+0x16a>
 8007168:	3110      	adds	r1, #16
 800716a:	e7d6      	b.n	800711a <AES_keyschedule_enc_LL+0x26>
 800716c:	2200      	movs	r2, #0
 800716e:	4b3c      	ldr	r3, [pc, #240]	; (8007260 <AES_keyschedule_enc_LL+0x16c>)
 8007170:	6948      	ldr	r0, [r1, #20]
 8007172:	3201      	adds	r2, #1
 8007174:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8007178:	b2c5      	uxtb	r5, r0
 800717a:	f853 4c04 	ldr.w	r4, [r3, #-4]
 800717e:	680b      	ldr	r3, [r1, #0]
 8007180:	405c      	eors	r4, r3
 8007182:	4b38      	ldr	r3, [pc, #224]	; (8007264 <AES_keyschedule_enc_LL+0x170>)
 8007184:	5d5e      	ldrb	r6, [r3, r5]
 8007186:	0e05      	lsrs	r5, r0, #24
 8007188:	5d5d      	ldrb	r5, [r3, r5]
 800718a:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 800718e:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8007192:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8007196:	5d9e      	ldrb	r6, [r3, r6]
 8007198:	5c18      	ldrb	r0, [r3, r0]
 800719a:	ea45 6506 	orr.w	r5, r5, r6, lsl #24
 800719e:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
 80071a2:	ea84 0300 	eor.w	r3, r4, r0
 80071a6:	618b      	str	r3, [r1, #24]
 80071a8:	2001      	movs	r0, #1
 80071aa:	460b      	mov	r3, r1
 80071ac:	685d      	ldr	r5, [r3, #4]
 80071ae:	699c      	ldr	r4, [r3, #24]
 80071b0:	2803      	cmp	r0, #3
 80071b2:	ea85 0404 	eor.w	r4, r5, r4
 80071b6:	61dc      	str	r4, [r3, #28]
 80071b8:	d101      	bne.n	80071be <AES_keyschedule_enc_LL+0xca>
 80071ba:	2a07      	cmp	r2, #7
 80071bc:	dc4f      	bgt.n	800725e <AES_keyschedule_enc_LL+0x16a>
 80071be:	3001      	adds	r0, #1
 80071c0:	2806      	cmp	r0, #6
 80071c2:	f103 0304 	add.w	r3, r3, #4
 80071c6:	d1f1      	bne.n	80071ac <AES_keyschedule_enc_LL+0xb8>
 80071c8:	3118      	adds	r1, #24
 80071ca:	e7d0      	b.n	800716e <AES_keyschedule_enc_LL+0x7a>
 80071cc:	2400      	movs	r4, #0
 80071ce:	4b24      	ldr	r3, [pc, #144]	; (8007260 <AES_keyschedule_enc_LL+0x16c>)
 80071d0:	69ca      	ldr	r2, [r1, #28]
 80071d2:	58e5      	ldr	r5, [r4, r3]
 80071d4:	680b      	ldr	r3, [r1, #0]
 80071d6:	b2d0      	uxtb	r0, r2
 80071d8:	405d      	eors	r5, r3
 80071da:	4b22      	ldr	r3, [pc, #136]	; (8007264 <AES_keyschedule_enc_LL+0x170>)
 80071dc:	5c1e      	ldrb	r6, [r3, r0]
 80071de:	0e10      	lsrs	r0, r2, #24
 80071e0:	3404      	adds	r4, #4
 80071e2:	5c18      	ldrb	r0, [r3, r0]
 80071e4:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 80071e8:	f3c2 4607 	ubfx	r6, r2, #16, #8
 80071ec:	2c1c      	cmp	r4, #28
 80071ee:	5d9e      	ldrb	r6, [r3, r6]
 80071f0:	ea40 6006 	orr.w	r0, r0, r6, lsl #24
 80071f4:	f3c2 2607 	ubfx	r6, r2, #8, #8
 80071f8:	5d9e      	ldrb	r6, [r3, r6]
 80071fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80071fe:	ea85 0000 	eor.w	r0, r5, r0
 8007202:	684d      	ldr	r5, [r1, #4]
 8007204:	6208      	str	r0, [r1, #32]
 8007206:	ea80 0005 	eor.w	r0, r0, r5
 800720a:	688d      	ldr	r5, [r1, #8]
 800720c:	6248      	str	r0, [r1, #36]	; 0x24
 800720e:	ea80 0005 	eor.w	r0, r0, r5
 8007212:	68cd      	ldr	r5, [r1, #12]
 8007214:	6288      	str	r0, [r1, #40]	; 0x28
 8007216:	ea80 0005 	eor.w	r0, r0, r5
 800721a:	62c8      	str	r0, [r1, #44]	; 0x2c
 800721c:	d01f      	beq.n	800725e <AES_keyschedule_enc_LL+0x16a>
 800721e:	0e05      	lsrs	r5, r0, #24
 8007220:	3120      	adds	r1, #32
 8007222:	5d5e      	ldrb	r6, [r3, r5]
 8007224:	b2c5      	uxtb	r5, r0
 8007226:	5d5d      	ldrb	r5, [r3, r5]
 8007228:	ea45 6506 	orr.w	r5, r5, r6, lsl #24
 800722c:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8007230:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8007234:	5d9e      	ldrb	r6, [r3, r6]
 8007236:	5c1b      	ldrb	r3, [r3, r0]
 8007238:	f851 0c10 	ldr.w	r0, [r1, #-16]
 800723c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 8007240:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
 8007244:	4043      	eors	r3, r0
 8007246:	f851 0c0c 	ldr.w	r0, [r1, #-12]
 800724a:	610b      	str	r3, [r1, #16]
 800724c:	4043      	eors	r3, r0
 800724e:	f851 0c08 	ldr.w	r0, [r1, #-8]
 8007252:	614b      	str	r3, [r1, #20]
 8007254:	4043      	eors	r3, r0
 8007256:	405a      	eors	r2, r3
 8007258:	618b      	str	r3, [r1, #24]
 800725a:	61ca      	str	r2, [r1, #28]
 800725c:	e7b7      	b.n	80071ce <AES_keyschedule_enc_LL+0xda>
 800725e:	bd70      	pop	{r4, r5, r6, pc}
 8007260:	08008a60 	.word	0x08008a60
 8007264:	08009288 	.word	0x08009288

08007268 <AES_keyschedule_enc>:
 8007268:	b570      	push	{r4, r5, r6, lr}
 800726a:	4603      	mov	r3, r0
 800726c:	1095      	asrs	r5, r2, #2
 800726e:	2400      	movs	r4, #0
 8007270:	42ac      	cmp	r4, r5
 8007272:	f103 0304 	add.w	r3, r3, #4
 8007276:	da11      	bge.n	800729c <AES_keyschedule_enc+0x34>
 8007278:	f813 0c03 	ldrb.w	r0, [r3, #-3]
 800727c:	f813 6c04 	ldrb.w	r6, [r3, #-4]
 8007280:	0400      	lsls	r0, r0, #16
 8007282:	ea40 6006 	orr.w	r0, r0, r6, lsl #24
 8007286:	f813 6c01 	ldrb.w	r6, [r3, #-1]
 800728a:	4330      	orrs	r0, r6
 800728c:	f813 6c02 	ldrb.w	r6, [r3, #-2]
 8007290:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 8007294:	f841 0024 	str.w	r0, [r1, r4, lsl #2]
 8007298:	3401      	adds	r4, #1
 800729a:	e7e9      	b.n	8007270 <AES_keyschedule_enc+0x8>
 800729c:	4608      	mov	r0, r1
 800729e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80072a2:	f7ff bf27 	b.w	80070f4 <AES_keyschedule_enc_LL>
	...

080072a8 <AES_general_SW_enc>:
 80072a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ac:	10db      	asrs	r3, r3, #3
 80072ae:	f103 0903 	add.w	r9, r3, #3
 80072b2:	2300      	movs	r3, #0
 80072b4:	9301      	str	r3, [sp, #4]
 80072b6:	4ba5      	ldr	r3, [pc, #660]	; (800754c <AES_general_SW_enc+0x2a4>)
 80072b8:	2401      	movs	r4, #1
 80072ba:	601c      	str	r4, [r3, #0]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	9301      	str	r3, [sp, #4]
 80072c0:	4ba3      	ldr	r3, [pc, #652]	; (8007550 <AES_general_SW_enc+0x2a8>)
 80072c2:	681c      	ldr	r4, [r3, #0]
 80072c4:	9401      	str	r4, [sp, #4]
 80072c6:	9c01      	ldr	r4, [sp, #4]
 80072c8:	3401      	adds	r4, #1
 80072ca:	468b      	mov	fp, r1
 80072cc:	d117      	bne.n	80072fe <AES_general_SW_enc+0x56>
 80072ce:	9c01      	ldr	r4, [sp, #4]
 80072d0:	601c      	str	r4, [r3, #0]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	9301      	str	r3, [sp, #4]
 80072d6:	9e01      	ldr	r6, [sp, #4]
 80072d8:	6814      	ldr	r4, [r2, #0]
 80072da:	6803      	ldr	r3, [r0, #0]
 80072dc:	6857      	ldr	r7, [r2, #4]
 80072de:	6845      	ldr	r5, [r0, #4]
 80072e0:	b956      	cbnz	r6, 80072f8 <AES_general_SW_enc+0x50>
 80072e2:	ea84 0c03 	eor.w	ip, r4, r3
 80072e6:	6883      	ldr	r3, [r0, #8]
 80072e8:	6894      	ldr	r4, [r2, #8]
 80072ea:	68c0      	ldr	r0, [r0, #12]
 80072ec:	405c      	eors	r4, r3
 80072ee:	68d3      	ldr	r3, [r2, #12]
 80072f0:	406f      	eors	r7, r5
 80072f2:	ea83 0800 	eor.w	r8, r3, r0
 80072f6:	e00b      	b.n	8007310 <AES_general_SW_enc+0x68>
 80072f8:	ea87 0c05 	eor.w	ip, r7, r5
 80072fc:	e005      	b.n	800730a <AES_general_SW_enc+0x62>
 80072fe:	6854      	ldr	r4, [r2, #4]
 8007300:	6843      	ldr	r3, [r0, #4]
 8007302:	ea84 0c03 	eor.w	ip, r4, r3
 8007306:	6813      	ldr	r3, [r2, #0]
 8007308:	6804      	ldr	r4, [r0, #0]
 800730a:	405c      	eors	r4, r3
 800730c:	46a0      	mov	r8, r4
 800730e:	4627      	mov	r7, r4
 8007310:	4b90      	ldr	r3, [pc, #576]	; (8007554 <AES_general_SW_enc+0x2ac>)
 8007312:	ea4f 601c 	mov.w	r0, ip, lsr #24
 8007316:	fa5f f588 	uxtb.w	r5, r8
 800731a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800731e:	6910      	ldr	r0, [r2, #16]
 8007320:	4070      	eors	r0, r6
 8007322:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8007326:	f3c7 4507 	ubfx	r5, r7, #16, #8
 800732a:	ea80 6036 	eor.w	r0, r0, r6, ror #24
 800732e:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8007332:	ea80 2636 	eor.w	r6, r0, r6, ror #8
 8007336:	f3c4 2007 	ubfx	r0, r4, #8, #8
 800733a:	fa5f fa87 	uxtb.w	sl, r7
 800733e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8007342:	f853 a02a 	ldr.w	sl, [r3, sl, lsl #2]
 8007346:	ea86 4630 	eor.w	r6, r6, r0, ror #16
 800734a:	0e38      	lsrs	r0, r7, #24
 800734c:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8007350:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8007354:	6950      	ldr	r0, [r2, #20]
 8007356:	4068      	eors	r0, r5
 8007358:	fa5f f58c 	uxtb.w	r5, ip
 800735c:	f109 39ff 	add.w	r9, r9, #4294967295
 8007360:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 8007364:	ea80 6035 	eor.w	r0, r0, r5, ror #24
 8007368:	f3c4 4507 	ubfx	r5, r4, #16, #8
 800736c:	f1b9 0f00 	cmp.w	r9, #0
 8007370:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 8007374:	ea80 2035 	eor.w	r0, r0, r5, ror #8
 8007378:	f3c8 2507 	ubfx	r5, r8, #8, #8
 800737c:	f102 0220 	add.w	r2, r2, #32
 8007380:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 8007384:	ea80 4035 	eor.w	r0, r0, r5, ror #16
 8007388:	ea4f 6514 	mov.w	r5, r4, lsr #24
 800738c:	b2e4      	uxtb	r4, r4
 800738e:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 8007392:	f852 5c08 	ldr.w	r5, [r2, #-8]
 8007396:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 800739a:	ea81 0105 	eor.w	r1, r1, r5
 800739e:	ea81 653a 	eor.w	r5, r1, sl, ror #24
 80073a2:	f3c8 4a07 	ubfx	sl, r8, #16, #8
 80073a6:	ea4f 6818 	mov.w	r8, r8, lsr #24
 80073aa:	f853 a02a 	ldr.w	sl, [r3, sl, lsl #2]
 80073ae:	f852 1c04 	ldr.w	r1, [r2, #-4]
 80073b2:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
 80073b6:	ea85 253a 	eor.w	r5, r5, sl, ror #8
 80073ba:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 80073be:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80073c2:	ea88 0801 	eor.w	r8, r8, r1
 80073c6:	ea88 6834 	eor.w	r8, r8, r4, ror #24
 80073ca:	f853 402c 	ldr.w	r4, [r3, ip, lsl #2]
 80073ce:	f853 a02a 	ldr.w	sl, [r3, sl, lsl #2]
 80073d2:	ea88 2834 	eor.w	r8, r8, r4, ror #8
 80073d6:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 80073da:	ea85 453a 	eor.w	r5, r5, sl, ror #16
 80073de:	ea88 4834 	eor.w	r8, r8, r4, ror #16
 80073e2:	ea4f 6416 	mov.w	r4, r6, lsr #24
 80073e6:	dd5b      	ble.n	80074a0 <AES_general_SW_enc+0x1f8>
 80073e8:	f853 7024 	ldr.w	r7, [r3, r4, lsl #2]
 80073ec:	6814      	ldr	r4, [r2, #0]
 80073ee:	6891      	ldr	r1, [r2, #8]
 80073f0:	407c      	eors	r4, r7
 80073f2:	fa5f f788 	uxtb.w	r7, r8
 80073f6:	fa5f fa80 	uxtb.w	sl, r0
 80073fa:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 80073fe:	f853 a02a 	ldr.w	sl, [r3, sl, lsl #2]
 8007402:	ea84 6437 	eor.w	r4, r4, r7, ror #24
 8007406:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800740a:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 800740e:	ea84 2c37 	eor.w	ip, r4, r7, ror #8
 8007412:	f3c5 2407 	ubfx	r4, r5, #8, #8
 8007416:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 800741a:	ea8c 4c34 	eor.w	ip, ip, r4, ror #16
 800741e:	0e04      	lsrs	r4, r0, #24
 8007420:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8007424:	f853 7024 	ldr.w	r7, [r3, r4, lsl #2]
 8007428:	6854      	ldr	r4, [r2, #4]
 800742a:	407c      	eors	r4, r7
 800742c:	b2f7      	uxtb	r7, r6
 800742e:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8007432:	ea84 6437 	eor.w	r4, r4, r7, ror #24
 8007436:	f3c5 4707 	ubfx	r7, r5, #16, #8
 800743a:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 800743e:	ea84 2737 	eor.w	r7, r4, r7, ror #8
 8007442:	f3c8 2407 	ubfx	r4, r8, #8, #8
 8007446:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 800744a:	ea87 4734 	eor.w	r7, r7, r4, ror #16
 800744e:	0e2c      	lsrs	r4, r5, #24
 8007450:	b2ed      	uxtb	r5, r5
 8007452:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8007456:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 800745a:	404c      	eors	r4, r1
 800745c:	ea84 643a 	eor.w	r4, r4, sl, ror #24
 8007460:	f3c8 4a07 	ubfx	sl, r8, #16, #8
 8007464:	ea4f 6818 	mov.w	r8, r8, lsr #24
 8007468:	f853 a02a 	ldr.w	sl, [r3, sl, lsl #2]
 800746c:	f853 8028 	ldr.w	r8, [r3, r8, lsl #2]
 8007470:	68d1      	ldr	r1, [r2, #12]
 8007472:	ea84 243a 	eor.w	r4, r4, sl, ror #8
 8007476:	f3c6 2a07 	ubfx	sl, r6, #8, #8
 800747a:	f3c6 4607 	ubfx	r6, r6, #16, #8
 800747e:	ea88 0801 	eor.w	r8, r8, r1
 8007482:	ea88 6835 	eor.w	r8, r8, r5, ror #24
 8007486:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
 800748a:	f853 a02a 	ldr.w	sl, [r3, sl, lsl #2]
 800748e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007492:	ea88 2835 	eor.w	r8, r8, r5, ror #8
 8007496:	ea84 443a 	eor.w	r4, r4, sl, ror #16
 800749a:	ea88 4833 	eor.w	r8, r8, r3, ror #16
 800749e:	e737      	b.n	8007310 <AES_general_SW_enc+0x68>
 80074a0:	4b2d      	ldr	r3, [pc, #180]	; (8007558 <AES_general_SW_enc+0x2b0>)
 80074a2:	5d1f      	ldrb	r7, [r3, r4]
 80074a4:	fa5f f488 	uxtb.w	r4, r8
 80074a8:	5d1c      	ldrb	r4, [r3, r4]
 80074aa:	ea44 6707 	orr.w	r7, r4, r7, lsl #24
 80074ae:	f3c0 4407 	ubfx	r4, r0, #16, #8
 80074b2:	5d1c      	ldrb	r4, [r3, r4]
 80074b4:	ea47 4704 	orr.w	r7, r7, r4, lsl #16
 80074b8:	f3c5 2407 	ubfx	r4, r5, #8, #8
 80074bc:	5d1c      	ldrb	r4, [r3, r4]
 80074be:	ea47 2704 	orr.w	r7, r7, r4, lsl #8
 80074c2:	6814      	ldr	r4, [r2, #0]
 80074c4:	407c      	eors	r4, r7
 80074c6:	f8cb 4000 	str.w	r4, [fp]
 80074ca:	0e04      	lsrs	r4, r0, #24
 80074cc:	5d1f      	ldrb	r7, [r3, r4]
 80074ce:	b2f4      	uxtb	r4, r6
 80074d0:	5d1c      	ldrb	r4, [r3, r4]
 80074d2:	ea44 6707 	orr.w	r7, r4, r7, lsl #24
 80074d6:	f3c5 4407 	ubfx	r4, r5, #16, #8
 80074da:	5d1c      	ldrb	r4, [r3, r4]
 80074dc:	ea47 4704 	orr.w	r7, r7, r4, lsl #16
 80074e0:	f3c8 2407 	ubfx	r4, r8, #8, #8
 80074e4:	5d1c      	ldrb	r4, [r3, r4]
 80074e6:	ea47 2704 	orr.w	r7, r7, r4, lsl #8
 80074ea:	6854      	ldr	r4, [r2, #4]
 80074ec:	407c      	eors	r4, r7
 80074ee:	f8cb 4004 	str.w	r4, [fp, #4]
 80074f2:	0e2c      	lsrs	r4, r5, #24
 80074f4:	b2ed      	uxtb	r5, r5
 80074f6:	5d1f      	ldrb	r7, [r3, r4]
 80074f8:	b2c4      	uxtb	r4, r0
 80074fa:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80074fe:	5d1c      	ldrb	r4, [r3, r4]
 8007500:	ea44 6707 	orr.w	r7, r4, r7, lsl #24
 8007504:	f3c8 4407 	ubfx	r4, r8, #16, #8
 8007508:	ea4f 6818 	mov.w	r8, r8, lsr #24
 800750c:	5d1c      	ldrb	r4, [r3, r4]
 800750e:	ea47 4704 	orr.w	r7, r7, r4, lsl #16
 8007512:	f3c6 2407 	ubfx	r4, r6, #8, #8
 8007516:	f3c6 4607 	ubfx	r6, r6, #16, #8
 800751a:	5d1c      	ldrb	r4, [r3, r4]
 800751c:	ea47 2704 	orr.w	r7, r7, r4, lsl #8
 8007520:	6894      	ldr	r4, [r2, #8]
 8007522:	407c      	eors	r4, r7
 8007524:	f8cb 4008 	str.w	r4, [fp, #8]
 8007528:	f813 7008 	ldrb.w	r7, [r3, r8]
 800752c:	5d5c      	ldrb	r4, [r3, r5]
 800752e:	5d9d      	ldrb	r5, [r3, r6]
 8007530:	5c1b      	ldrb	r3, [r3, r0]
 8007532:	68d2      	ldr	r2, [r2, #12]
 8007534:	ea44 6407 	orr.w	r4, r4, r7, lsl #24
 8007538:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800753c:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 8007540:	4053      	eors	r3, r2
 8007542:	f8cb 300c 	str.w	r3, [fp, #12]
 8007546:	b003      	add	sp, #12
 8007548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800754c:	40023008 	.word	0x40023008
 8007550:	40023000 	.word	0x40023000
 8007554:	08008e88 	.word	0x08008e88
 8007558:	08009288 	.word	0x08009288

0800755c <AES_keyschedule_dec>:
 800755c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800755e:	4615      	mov	r5, r2
 8007560:	460c      	mov	r4, r1
 8007562:	f7ff fe81 	bl	8007268 <AES_keyschedule_enc>
 8007566:	10ea      	asrs	r2, r5, #3
 8007568:	3203      	adds	r2, #3
 800756a:	0052      	lsls	r2, r2, #1
 800756c:	2501      	movs	r5, #1
 800756e:	4295      	cmp	r5, r2
 8007570:	da6c      	bge.n	800764c <AES_keyschedule_dec+0xf0>
 8007572:	f854 1f10 	ldr.w	r1, [r4, #16]!
 8007576:	4836      	ldr	r0, [pc, #216]	; (8007650 <AES_keyschedule_dec+0xf4>)
 8007578:	4b36      	ldr	r3, [pc, #216]	; (8007654 <AES_keyschedule_dec+0xf8>)
 800757a:	b2ce      	uxtb	r6, r1
 800757c:	3501      	adds	r5, #1
 800757e:	5d86      	ldrb	r6, [r0, r6]
 8007580:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 8007584:	0e0e      	lsrs	r6, r1, #24
 8007586:	5d86      	ldrb	r6, [r0, r6]
 8007588:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 800758c:	ea86 6637 	eor.w	r6, r6, r7, ror #24
 8007590:	f3c1 4707 	ubfx	r7, r1, #16, #8
 8007594:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8007598:	5dc7      	ldrb	r7, [r0, r7]
 800759a:	5c41      	ldrb	r1, [r0, r1]
 800759c:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 80075a0:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80075a4:	ea86 2637 	eor.w	r6, r6, r7, ror #8
 80075a8:	ea86 4131 	eor.w	r1, r6, r1, ror #16
 80075ac:	6021      	str	r1, [r4, #0]
 80075ae:	6861      	ldr	r1, [r4, #4]
 80075b0:	b2ce      	uxtb	r6, r1
 80075b2:	5d86      	ldrb	r6, [r0, r6]
 80075b4:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 80075b8:	0e0e      	lsrs	r6, r1, #24
 80075ba:	5d86      	ldrb	r6, [r0, r6]
 80075bc:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 80075c0:	ea86 6637 	eor.w	r6, r6, r7, ror #24
 80075c4:	f3c1 4707 	ubfx	r7, r1, #16, #8
 80075c8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80075cc:	5dc7      	ldrb	r7, [r0, r7]
 80075ce:	5c41      	ldrb	r1, [r0, r1]
 80075d0:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 80075d4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80075d8:	ea86 2637 	eor.w	r6, r6, r7, ror #8
 80075dc:	ea86 4131 	eor.w	r1, r6, r1, ror #16
 80075e0:	6061      	str	r1, [r4, #4]
 80075e2:	68a1      	ldr	r1, [r4, #8]
 80075e4:	b2ce      	uxtb	r6, r1
 80075e6:	5d86      	ldrb	r6, [r0, r6]
 80075e8:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 80075ec:	0e0e      	lsrs	r6, r1, #24
 80075ee:	5d86      	ldrb	r6, [r0, r6]
 80075f0:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 80075f4:	ea86 6637 	eor.w	r6, r6, r7, ror #24
 80075f8:	f3c1 4707 	ubfx	r7, r1, #16, #8
 80075fc:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8007600:	5dc7      	ldrb	r7, [r0, r7]
 8007602:	5c41      	ldrb	r1, [r0, r1]
 8007604:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8007608:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800760c:	ea86 2637 	eor.w	r6, r6, r7, ror #8
 8007610:	ea86 4131 	eor.w	r1, r6, r1, ror #16
 8007614:	60a1      	str	r1, [r4, #8]
 8007616:	68e1      	ldr	r1, [r4, #12]
 8007618:	b2ce      	uxtb	r6, r1
 800761a:	5d86      	ldrb	r6, [r0, r6]
 800761c:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 8007620:	0e0e      	lsrs	r6, r1, #24
 8007622:	5d86      	ldrb	r6, [r0, r6]
 8007624:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8007628:	ea86 6637 	eor.w	r6, r6, r7, ror #24
 800762c:	f3c1 4707 	ubfx	r7, r1, #16, #8
 8007630:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8007634:	5dc7      	ldrb	r7, [r0, r7]
 8007636:	5c41      	ldrb	r1, [r0, r1]
 8007638:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 800763c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007640:	ea86 2637 	eor.w	r6, r6, r7, ror #8
 8007644:	ea86 4333 	eor.w	r3, r6, r3, ror #16
 8007648:	60e3      	str	r3, [r4, #12]
 800764a:	e790      	b.n	800756e <AES_keyschedule_dec+0x12>
 800764c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800764e:	bf00      	nop
 8007650:	08009288 	.word	0x08009288
 8007654:	08008a88 	.word	0x08008a88

08007658 <AESstdInit>:
 8007658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800765c:	460f      	mov	r7, r1
 800765e:	4604      	mov	r4, r0
 8007660:	4611      	mov	r1, r2
 8007662:	2800      	cmp	r0, #0
 8007664:	d05e      	beq.n	8007724 <AESstdInit+0xcc>
 8007666:	2f00      	cmp	r7, #0
 8007668:	d05c      	beq.n	8007724 <AESstdInit+0xcc>
 800766a:	b91a      	cbnz	r2, 8007674 <AESstdInit+0x1c>
 800766c:	f003 0206 	and.w	r2, r3, #6
 8007670:	2a02      	cmp	r2, #2
 8007672:	d157      	bne.n	8007724 <AESstdInit+0xcc>
 8007674:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007676:	f022 0008 	bic.w	r0, r2, #8
 800767a:	2810      	cmp	r0, #16
 800767c:	d001      	beq.n	8007682 <AESstdInit+0x2a>
 800767e:	2a20      	cmp	r2, #32
 8007680:	d14c      	bne.n	800771c <AESstdInit+0xc4>
 8007682:	f003 0c06 	and.w	ip, r3, #6
 8007686:	f1bc 0f02 	cmp.w	ip, #2
 800768a:	d003      	beq.n	8007694 <AESstdInit+0x3c>
 800768c:	6920      	ldr	r0, [r4, #16]
 800768e:	3801      	subs	r0, #1
 8007690:	280f      	cmp	r0, #15
 8007692:	d843      	bhi.n	800771c <AESstdInit+0xc4>
 8007694:	7920      	ldrb	r0, [r4, #4]
 8007696:	60e1      	str	r1, [r4, #12]
 8007698:	f020 0506 	bic.w	r5, r0, #6
 800769c:	f1bc 0f02 	cmp.w	ip, #2
 80076a0:	7125      	strb	r5, [r4, #4]
 80076a2:	d103      	bne.n	80076ac <AESstdInit+0x54>
 80076a4:	f010 0501 	ands.w	r5, r0, #1
 80076a8:	d026      	beq.n	80076f8 <AESstdInit+0xa0>
 80076aa:	e031      	b.n	8007710 <AESstdInit+0xb8>
 80076ac:	2600      	movs	r6, #0
 80076ae:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80076b2:	6166      	str	r6, [r4, #20]
 80076b4:	61a6      	str	r6, [r4, #24]
 80076b6:	61e6      	str	r6, [r4, #28]
 80076b8:	6226      	str	r6, [r4, #32]
 80076ba:	454e      	cmp	r6, r9
 80076bc:	daf2      	bge.n	80076a4 <AESstdInit+0x4c>
 80076be:	4d1b      	ldr	r5, [pc, #108]	; (800772c <AESstdInit+0xd4>)
 80076c0:	f811 a006 	ldrb.w	sl, [r1, r6]
 80076c4:	f04f 0804 	mov.w	r8, #4
 80076c8:	4035      	ands	r5, r6
 80076ca:	fb96 f8f8 	sdiv	r8, r6, r8
 80076ce:	2d00      	cmp	r5, #0
 80076d0:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 80076d4:	da03      	bge.n	80076de <AESstdInit+0x86>
 80076d6:	3d01      	subs	r5, #1
 80076d8:	f065 0503 	orn	r5, r5, #3
 80076dc:	3501      	adds	r5, #1
 80076de:	f1c5 0503 	rsb	r5, r5, #3
 80076e2:	00ed      	lsls	r5, r5, #3
 80076e4:	fa0a fa05 	lsl.w	sl, sl, r5
 80076e8:	f8d8 5014 	ldr.w	r5, [r8, #20]
 80076ec:	ea45 0a0a 	orr.w	sl, r5, sl
 80076f0:	f8c8 a014 	str.w	sl, [r8, #20]
 80076f4:	3601      	adds	r6, #1
 80076f6:	e7e0      	b.n	80076ba <AESstdInit+0x62>
 80076f8:	f013 0f01 	tst.w	r3, #1
 80076fc:	60a7      	str	r7, [r4, #8]
 80076fe:	4638      	mov	r0, r7
 8007700:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8007704:	d002      	beq.n	800770c <AESstdInit+0xb4>
 8007706:	f1bc 0f06 	cmp.w	ip, #6
 800770a:	d104      	bne.n	8007716 <AESstdInit+0xbe>
 800770c:	f7ff fdac 	bl	8007268 <AES_keyschedule_enc>
 8007710:	2000      	movs	r0, #0
 8007712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007716:	f7ff ff21 	bl	800755c <AES_keyschedule_dec>
 800771a:	e7f9      	b.n	8007710 <AESstdInit+0xb8>
 800771c:	f640 401f 	movw	r0, #3103	; 0xc1f
 8007720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007724:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 8007728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800772c:	80000003 	.word	0x80000003

08007730 <AES_CBC_Encrypt_Init>:
 8007730:	2304      	movs	r3, #4
 8007732:	f7ff bf91 	b.w	8007658 <AESstdInit>

08007736 <AES_CBC_Encrypt_Append>:
 8007736:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800773a:	460f      	mov	r7, r1
 800773c:	b087      	sub	sp, #28
 800773e:	4616      	mov	r6, r2
 8007740:	4698      	mov	r8, r3
 8007742:	4604      	mov	r4, r0
 8007744:	2800      	cmp	r0, #0
 8007746:	f000 80fc 	beq.w	8007942 <AES_CBC_Encrypt_Append+0x20c>
 800774a:	2900      	cmp	r1, #0
 800774c:	f000 80f9 	beq.w	8007942 <AES_CBC_Encrypt_Append+0x20c>
 8007750:	2b00      	cmp	r3, #0
 8007752:	f000 80f6 	beq.w	8007942 <AES_CBC_Encrypt_Append+0x20c>
 8007756:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007758:	2d00      	cmp	r5, #0
 800775a:	f000 80f2 	beq.w	8007942 <AES_CBC_Encrypt_Append+0x20c>
 800775e:	2a0f      	cmp	r2, #15
 8007760:	f340 80f2 	ble.w	8007948 <AES_CBC_Encrypt_Append+0x212>
 8007764:	7903      	ldrb	r3, [r0, #4]
 8007766:	f013 0f06 	tst.w	r3, #6
 800776a:	f040 80f0 	bne.w	800794e <AES_CBC_Encrypt_Append+0x218>
 800776e:	0732      	lsls	r2, r6, #28
 8007770:	bf1d      	ittte	ne
 8007772:	f043 0304 	orrne.w	r3, r3, #4
 8007776:	f1a6 0910 	subne.w	r9, r6, #16
 800777a:	7103      	strbne	r3, [r0, #4]
 800777c:	46b1      	moveq	r9, r6
 800777e:	2500      	movs	r5, #0
 8007780:	454d      	cmp	r5, r9
 8007782:	da38      	bge.n	80077f6 <AES_CBC_Encrypt_Append+0xc0>
 8007784:	1979      	adds	r1, r7, r5
 8007786:	460a      	mov	r2, r1
 8007788:	2300      	movs	r3, #0
 800778a:	78d0      	ldrb	r0, [r2, #3]
 800778c:	f811 e003 	ldrb.w	lr, [r1, r3]
 8007790:	ea40 6e0e 	orr.w	lr, r0, lr, lsl #24
 8007794:	7850      	ldrb	r0, [r2, #1]
 8007796:	ea4e 4e00 	orr.w	lr, lr, r0, lsl #16
 800779a:	7890      	ldrb	r0, [r2, #2]
 800779c:	ea4e 2e00 	orr.w	lr, lr, r0, lsl #8
 80077a0:	18e0      	adds	r0, r4, r3
 80077a2:	f103 0c08 	add.w	ip, r3, #8
 80077a6:	6940      	ldr	r0, [r0, #20]
 80077a8:	46ea      	mov	sl, sp
 80077aa:	3304      	adds	r3, #4
 80077ac:	ea8e 0000 	eor.w	r0, lr, r0
 80077b0:	2b10      	cmp	r3, #16
 80077b2:	f84c 000a 	str.w	r0, [ip, sl]
 80077b6:	f102 0204 	add.w	r2, r2, #4
 80077ba:	d1e6      	bne.n	800778a <AES_CBC_Encrypt_Append+0x54>
 80077bc:	f104 0114 	add.w	r1, r4, #20
 80077c0:	f104 0228 	add.w	r2, r4, #40	; 0x28
 80077c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077c6:	a802      	add	r0, sp, #8
 80077c8:	f7ff fd6e 	bl	80072a8 <AES_general_SW_enc>
 80077cc:	4623      	mov	r3, r4
 80077ce:	eb08 0205 	add.w	r2, r8, r5
 80077d2:	2100      	movs	r1, #0
 80077d4:	6958      	ldr	r0, [r3, #20]
 80077d6:	70d0      	strb	r0, [r2, #3]
 80077d8:	6958      	ldr	r0, [r3, #20]
 80077da:	0a00      	lsrs	r0, r0, #8
 80077dc:	7090      	strb	r0, [r2, #2]
 80077de:	8ad8      	ldrh	r0, [r3, #22]
 80077e0:	7050      	strb	r0, [r2, #1]
 80077e2:	3101      	adds	r1, #1
 80077e4:	7dd8      	ldrb	r0, [r3, #23]
 80077e6:	f802 0b04 	strb.w	r0, [r2], #4
 80077ea:	2904      	cmp	r1, #4
 80077ec:	f103 0304 	add.w	r3, r3, #4
 80077f0:	d1f0      	bne.n	80077d4 <AES_CBC_Encrypt_Append+0x9e>
 80077f2:	3510      	adds	r5, #16
 80077f4:	e7c4      	b.n	8007780 <AES_CBC_Encrypt_Append+0x4a>
 80077f6:	42b5      	cmp	r5, r6
 80077f8:	db03      	blt.n	8007802 <AES_CBC_Encrypt_Append+0xcc>
 80077fa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80077fc:	2000      	movs	r0, #0
 80077fe:	602e      	str	r6, [r5, #0]
 8007800:	e0a7      	b.n	8007952 <AES_CBC_Encrypt_Append+0x21c>
 8007802:	ebc5 0906 	rsb	r9, r5, r6
 8007806:	2104      	movs	r1, #4
 8007808:	fb99 f1f1 	sdiv	r1, r9, r1
 800780c:	eb08 0b05 	add.w	fp, r8, r5
 8007810:	9101      	str	r1, [sp, #4]
 8007812:	1978      	adds	r0, r7, r5
 8007814:	465b      	mov	r3, fp
 8007816:	4622      	mov	r2, r4
 8007818:	f04f 0e00 	mov.w	lr, #0
 800781c:	f8dd a004 	ldr.w	sl, [sp, #4]
 8007820:	45d6      	cmp	lr, sl
 8007822:	f100 0004 	add.w	r0, r0, #4
 8007826:	f102 0204 	add.w	r2, r2, #4
 800782a:	f103 0304 	add.w	r3, r3, #4
 800782e:	da29      	bge.n	8007884 <AES_CBC_Encrypt_Append+0x14e>
 8007830:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 8007834:	f810 ac04 	ldrb.w	sl, [r0, #-4]
 8007838:	6911      	ldr	r1, [r2, #16]
 800783a:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 800783e:	ea4c 6c0a 	orr.w	ip, ip, sl, lsl #24
 8007842:	f810 ac01 	ldrb.w	sl, [r0, #-1]
 8007846:	ea4c 0c0a 	orr.w	ip, ip, sl
 800784a:	f810 ac02 	ldrb.w	sl, [r0, #-2]
 800784e:	ea4c 2c0a 	orr.w	ip, ip, sl, lsl #8
 8007852:	ea8c 0c01 	eor.w	ip, ip, r1
 8007856:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800785a:	f803 ac01 	strb.w	sl, [r3, #-1]
 800785e:	a902      	add	r1, sp, #8
 8007860:	f841 c02e 	str.w	ip, [r1, lr, lsl #2]
 8007864:	6911      	ldr	r1, [r2, #16]
 8007866:	ea4f 2c11 	mov.w	ip, r1, lsr #8
 800786a:	f803 cc02 	strb.w	ip, [r3, #-2]
 800786e:	f8b2 c012 	ldrh.w	ip, [r2, #18]
 8007872:	f803 cc03 	strb.w	ip, [r3, #-3]
 8007876:	f892 c013 	ldrb.w	ip, [r2, #19]
 800787a:	f803 cc04 	strb.w	ip, [r3, #-4]
 800787e:	f10e 0e01 	add.w	lr, lr, #1
 8007882:	e7cb      	b.n	800781c <AES_CBC_Encrypt_Append+0xe6>
 8007884:	ea2a 71ea 	bic.w	r1, sl, sl, asr #31
 8007888:	008b      	lsls	r3, r1, #2
 800788a:	eb04 0e03 	add.w	lr, r4, r3
 800788e:	a806      	add	r0, sp, #24
 8007890:	4418      	add	r0, r3
 8007892:	f8de 2014 	ldr.w	r2, [lr, #20]
 8007896:	f840 2c10 	str.w	r2, [r0, #-16]
 800789a:	441d      	add	r5, r3
 800789c:	eba9 0981 	sub.w	r9, r9, r1, lsl #2
 80078a0:	9501      	str	r5, [sp, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	454a      	cmp	r2, r9
 80078a6:	da1e      	bge.n	80078e6 <AES_CBC_Encrypt_Append+0x1b0>
 80078a8:	f8dd a004 	ldr.w	sl, [sp, #4]
 80078ac:	ad06      	add	r5, sp, #24
 80078ae:	44ba      	add	sl, r7
 80078b0:	eb05 0081 	add.w	r0, r5, r1, lsl #2
 80078b4:	f81a a002 	ldrb.w	sl, [sl, r2]
 80078b8:	f850 5c10 	ldr.w	r5, [r0, #-16]
 80078bc:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
 80078c0:	f1cc 0c18 	rsb	ip, ip, #24
 80078c4:	fa0a fa0c 	lsl.w	sl, sl, ip
 80078c8:	ea8a 0a05 	eor.w	sl, sl, r5
 80078cc:	f840 ac10 	str.w	sl, [r0, #-16]
 80078d0:	f8dd a004 	ldr.w	sl, [sp, #4]
 80078d4:	f8de 0014 	ldr.w	r0, [lr, #20]
 80078d8:	44c2      	add	sl, r8
 80078da:	fa20 f00c 	lsr.w	r0, r0, ip
 80078de:	f80a 0002 	strb.w	r0, [sl, r2]
 80078e2:	3201      	adds	r2, #1
 80078e4:	e7de      	b.n	80078a4 <AES_CBC_Encrypt_Append+0x16e>
 80078e6:	f10d 0a08 	add.w	sl, sp, #8
 80078ea:	3101      	adds	r1, #1
 80078ec:	4453      	add	r3, sl
 80078ee:	2200      	movs	r2, #0
 80078f0:	2903      	cmp	r1, #3
 80078f2:	f102 0204 	add.w	r2, r2, #4
 80078f6:	dc05      	bgt.n	8007904 <AES_CBC_Encrypt_Append+0x1ce>
 80078f8:	eb0e 0002 	add.w	r0, lr, r2
 80078fc:	3101      	adds	r1, #1
 80078fe:	6940      	ldr	r0, [r0, #20]
 8007900:	5098      	str	r0, [r3, r2]
 8007902:	e7f5      	b.n	80078f0 <AES_CBC_Encrypt_Append+0x1ba>
 8007904:	f104 0228 	add.w	r2, r4, #40	; 0x28
 8007908:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800790a:	a802      	add	r0, sp, #8
 800790c:	f104 0114 	add.w	r1, r4, #20
 8007910:	f7ff fcca 	bl	80072a8 <AES_general_SW_enc>
 8007914:	465b      	mov	r3, fp
 8007916:	2200      	movs	r2, #0
 8007918:	6961      	ldr	r1, [r4, #20]
 800791a:	f803 1c0d 	strb.w	r1, [r3, #-13]
 800791e:	6961      	ldr	r1, [r4, #20]
 8007920:	0a09      	lsrs	r1, r1, #8
 8007922:	f803 1c0e 	strb.w	r1, [r3, #-14]
 8007926:	8ae1      	ldrh	r1, [r4, #22]
 8007928:	f803 1c0f 	strb.w	r1, [r3, #-15]
 800792c:	3201      	adds	r2, #1
 800792e:	7de1      	ldrb	r1, [r4, #23]
 8007930:	f803 1c10 	strb.w	r1, [r3, #-16]
 8007934:	2a04      	cmp	r2, #4
 8007936:	f104 0404 	add.w	r4, r4, #4
 800793a:	f103 0304 	add.w	r3, r3, #4
 800793e:	d1eb      	bne.n	8007918 <AES_CBC_Encrypt_Append+0x1e2>
 8007940:	e75b      	b.n	80077fa <AES_CBC_Encrypt_Append+0xc4>
 8007942:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 8007946:	e004      	b.n	8007952 <AES_CBC_Encrypt_Append+0x21c>
 8007948:	f640 401d 	movw	r0, #3101	; 0xc1d
 800794c:	e001      	b.n	8007952 <AES_CBC_Encrypt_Append+0x21c>
 800794e:	f640 401e 	movw	r0, #3102	; 0xc1e
 8007952:	b007      	add	sp, #28
 8007954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007958 <AES_CBC_Encrypt_Finish>:
 8007958:	b138      	cbz	r0, 800796a <AES_CBC_Encrypt_Finish+0x12>
 800795a:	b132      	cbz	r2, 800796a <AES_CBC_Encrypt_Finish+0x12>
 800795c:	7903      	ldrb	r3, [r0, #4]
 800795e:	f043 0302 	orr.w	r3, r3, #2
 8007962:	7103      	strb	r3, [r0, #4]
 8007964:	2000      	movs	r0, #0
 8007966:	6010      	str	r0, [r2, #0]
 8007968:	4770      	bx	lr
 800796a:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 800796e:	4770      	bx	lr

08007970 <__errno>:
 8007970:	4b01      	ldr	r3, [pc, #4]	; (8007978 <__errno+0x8>)
 8007972:	6818      	ldr	r0, [r3, #0]
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	200001b8 	.word	0x200001b8

0800797c <__libc_init_array>:
 800797c:	b570      	push	{r4, r5, r6, lr}
 800797e:	4d0d      	ldr	r5, [pc, #52]	; (80079b4 <__libc_init_array+0x38>)
 8007980:	4c0d      	ldr	r4, [pc, #52]	; (80079b8 <__libc_init_array+0x3c>)
 8007982:	1b64      	subs	r4, r4, r5
 8007984:	10a4      	asrs	r4, r4, #2
 8007986:	2600      	movs	r6, #0
 8007988:	42a6      	cmp	r6, r4
 800798a:	d109      	bne.n	80079a0 <__libc_init_array+0x24>
 800798c:	4d0b      	ldr	r5, [pc, #44]	; (80079bc <__libc_init_array+0x40>)
 800798e:	4c0c      	ldr	r4, [pc, #48]	; (80079c0 <__libc_init_array+0x44>)
 8007990:	f000 ffec 	bl	800896c <_init>
 8007994:	1b64      	subs	r4, r4, r5
 8007996:	10a4      	asrs	r4, r4, #2
 8007998:	2600      	movs	r6, #0
 800799a:	42a6      	cmp	r6, r4
 800799c:	d105      	bne.n	80079aa <__libc_init_array+0x2e>
 800799e:	bd70      	pop	{r4, r5, r6, pc}
 80079a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80079a4:	4798      	blx	r3
 80079a6:	3601      	adds	r6, #1
 80079a8:	e7ee      	b.n	8007988 <__libc_init_array+0xc>
 80079aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80079ae:	4798      	blx	r3
 80079b0:	3601      	adds	r6, #1
 80079b2:	e7f2      	b.n	800799a <__libc_init_array+0x1e>
 80079b4:	08009420 	.word	0x08009420
 80079b8:	08009420 	.word	0x08009420
 80079bc:	08009420 	.word	0x08009420
 80079c0:	08009424 	.word	0x08009424

080079c4 <memset>:
 80079c4:	4402      	add	r2, r0
 80079c6:	4603      	mov	r3, r0
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d100      	bne.n	80079ce <memset+0xa>
 80079cc:	4770      	bx	lr
 80079ce:	f803 1b01 	strb.w	r1, [r3], #1
 80079d2:	e7f9      	b.n	80079c8 <memset+0x4>

080079d4 <iprintf>:
 80079d4:	b40f      	push	{r0, r1, r2, r3}
 80079d6:	4b0a      	ldr	r3, [pc, #40]	; (8007a00 <iprintf+0x2c>)
 80079d8:	b513      	push	{r0, r1, r4, lr}
 80079da:	681c      	ldr	r4, [r3, #0]
 80079dc:	b124      	cbz	r4, 80079e8 <iprintf+0x14>
 80079de:	69a3      	ldr	r3, [r4, #24]
 80079e0:	b913      	cbnz	r3, 80079e8 <iprintf+0x14>
 80079e2:	4620      	mov	r0, r4
 80079e4:	f000 fa5e 	bl	8007ea4 <__sinit>
 80079e8:	ab05      	add	r3, sp, #20
 80079ea:	9a04      	ldr	r2, [sp, #16]
 80079ec:	68a1      	ldr	r1, [r4, #8]
 80079ee:	9301      	str	r3, [sp, #4]
 80079f0:	4620      	mov	r0, r4
 80079f2:	f000 fc2f 	bl	8008254 <_vfiprintf_r>
 80079f6:	b002      	add	sp, #8
 80079f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079fc:	b004      	add	sp, #16
 80079fe:	4770      	bx	lr
 8007a00:	200001b8 	.word	0x200001b8

08007a04 <_puts_r>:
 8007a04:	b570      	push	{r4, r5, r6, lr}
 8007a06:	460e      	mov	r6, r1
 8007a08:	4605      	mov	r5, r0
 8007a0a:	b118      	cbz	r0, 8007a14 <_puts_r+0x10>
 8007a0c:	6983      	ldr	r3, [r0, #24]
 8007a0e:	b90b      	cbnz	r3, 8007a14 <_puts_r+0x10>
 8007a10:	f000 fa48 	bl	8007ea4 <__sinit>
 8007a14:	69ab      	ldr	r3, [r5, #24]
 8007a16:	68ac      	ldr	r4, [r5, #8]
 8007a18:	b913      	cbnz	r3, 8007a20 <_puts_r+0x1c>
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	f000 fa42 	bl	8007ea4 <__sinit>
 8007a20:	4b2c      	ldr	r3, [pc, #176]	; (8007ad4 <_puts_r+0xd0>)
 8007a22:	429c      	cmp	r4, r3
 8007a24:	d120      	bne.n	8007a68 <_puts_r+0x64>
 8007a26:	686c      	ldr	r4, [r5, #4]
 8007a28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a2a:	07db      	lsls	r3, r3, #31
 8007a2c:	d405      	bmi.n	8007a3a <_puts_r+0x36>
 8007a2e:	89a3      	ldrh	r3, [r4, #12]
 8007a30:	0598      	lsls	r0, r3, #22
 8007a32:	d402      	bmi.n	8007a3a <_puts_r+0x36>
 8007a34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a36:	f000 fad3 	bl	8007fe0 <__retarget_lock_acquire_recursive>
 8007a3a:	89a3      	ldrh	r3, [r4, #12]
 8007a3c:	0719      	lsls	r1, r3, #28
 8007a3e:	d51d      	bpl.n	8007a7c <_puts_r+0x78>
 8007a40:	6923      	ldr	r3, [r4, #16]
 8007a42:	b1db      	cbz	r3, 8007a7c <_puts_r+0x78>
 8007a44:	3e01      	subs	r6, #1
 8007a46:	68a3      	ldr	r3, [r4, #8]
 8007a48:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	60a3      	str	r3, [r4, #8]
 8007a50:	bb39      	cbnz	r1, 8007aa2 <_puts_r+0x9e>
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	da38      	bge.n	8007ac8 <_puts_r+0xc4>
 8007a56:	4622      	mov	r2, r4
 8007a58:	210a      	movs	r1, #10
 8007a5a:	4628      	mov	r0, r5
 8007a5c:	f000 f848 	bl	8007af0 <__swbuf_r>
 8007a60:	3001      	adds	r0, #1
 8007a62:	d011      	beq.n	8007a88 <_puts_r+0x84>
 8007a64:	250a      	movs	r5, #10
 8007a66:	e011      	b.n	8007a8c <_puts_r+0x88>
 8007a68:	4b1b      	ldr	r3, [pc, #108]	; (8007ad8 <_puts_r+0xd4>)
 8007a6a:	429c      	cmp	r4, r3
 8007a6c:	d101      	bne.n	8007a72 <_puts_r+0x6e>
 8007a6e:	68ac      	ldr	r4, [r5, #8]
 8007a70:	e7da      	b.n	8007a28 <_puts_r+0x24>
 8007a72:	4b1a      	ldr	r3, [pc, #104]	; (8007adc <_puts_r+0xd8>)
 8007a74:	429c      	cmp	r4, r3
 8007a76:	bf08      	it	eq
 8007a78:	68ec      	ldreq	r4, [r5, #12]
 8007a7a:	e7d5      	b.n	8007a28 <_puts_r+0x24>
 8007a7c:	4621      	mov	r1, r4
 8007a7e:	4628      	mov	r0, r5
 8007a80:	f000 f888 	bl	8007b94 <__swsetup_r>
 8007a84:	2800      	cmp	r0, #0
 8007a86:	d0dd      	beq.n	8007a44 <_puts_r+0x40>
 8007a88:	f04f 35ff 	mov.w	r5, #4294967295
 8007a8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a8e:	07da      	lsls	r2, r3, #31
 8007a90:	d405      	bmi.n	8007a9e <_puts_r+0x9a>
 8007a92:	89a3      	ldrh	r3, [r4, #12]
 8007a94:	059b      	lsls	r3, r3, #22
 8007a96:	d402      	bmi.n	8007a9e <_puts_r+0x9a>
 8007a98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a9a:	f000 faa2 	bl	8007fe2 <__retarget_lock_release_recursive>
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	bd70      	pop	{r4, r5, r6, pc}
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	da04      	bge.n	8007ab0 <_puts_r+0xac>
 8007aa6:	69a2      	ldr	r2, [r4, #24]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	dc06      	bgt.n	8007aba <_puts_r+0xb6>
 8007aac:	290a      	cmp	r1, #10
 8007aae:	d004      	beq.n	8007aba <_puts_r+0xb6>
 8007ab0:	6823      	ldr	r3, [r4, #0]
 8007ab2:	1c5a      	adds	r2, r3, #1
 8007ab4:	6022      	str	r2, [r4, #0]
 8007ab6:	7019      	strb	r1, [r3, #0]
 8007ab8:	e7c5      	b.n	8007a46 <_puts_r+0x42>
 8007aba:	4622      	mov	r2, r4
 8007abc:	4628      	mov	r0, r5
 8007abe:	f000 f817 	bl	8007af0 <__swbuf_r>
 8007ac2:	3001      	adds	r0, #1
 8007ac4:	d1bf      	bne.n	8007a46 <_puts_r+0x42>
 8007ac6:	e7df      	b.n	8007a88 <_puts_r+0x84>
 8007ac8:	6823      	ldr	r3, [r4, #0]
 8007aca:	250a      	movs	r5, #10
 8007acc:	1c5a      	adds	r2, r3, #1
 8007ace:	6022      	str	r2, [r4, #0]
 8007ad0:	701d      	strb	r5, [r3, #0]
 8007ad2:	e7db      	b.n	8007a8c <_puts_r+0x88>
 8007ad4:	080093ac 	.word	0x080093ac
 8007ad8:	080093cc 	.word	0x080093cc
 8007adc:	0800938c 	.word	0x0800938c

08007ae0 <puts>:
 8007ae0:	4b02      	ldr	r3, [pc, #8]	; (8007aec <puts+0xc>)
 8007ae2:	4601      	mov	r1, r0
 8007ae4:	6818      	ldr	r0, [r3, #0]
 8007ae6:	f7ff bf8d 	b.w	8007a04 <_puts_r>
 8007aea:	bf00      	nop
 8007aec:	200001b8 	.word	0x200001b8

08007af0 <__swbuf_r>:
 8007af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007af2:	460e      	mov	r6, r1
 8007af4:	4614      	mov	r4, r2
 8007af6:	4605      	mov	r5, r0
 8007af8:	b118      	cbz	r0, 8007b02 <__swbuf_r+0x12>
 8007afa:	6983      	ldr	r3, [r0, #24]
 8007afc:	b90b      	cbnz	r3, 8007b02 <__swbuf_r+0x12>
 8007afe:	f000 f9d1 	bl	8007ea4 <__sinit>
 8007b02:	4b21      	ldr	r3, [pc, #132]	; (8007b88 <__swbuf_r+0x98>)
 8007b04:	429c      	cmp	r4, r3
 8007b06:	d12b      	bne.n	8007b60 <__swbuf_r+0x70>
 8007b08:	686c      	ldr	r4, [r5, #4]
 8007b0a:	69a3      	ldr	r3, [r4, #24]
 8007b0c:	60a3      	str	r3, [r4, #8]
 8007b0e:	89a3      	ldrh	r3, [r4, #12]
 8007b10:	071a      	lsls	r2, r3, #28
 8007b12:	d52f      	bpl.n	8007b74 <__swbuf_r+0x84>
 8007b14:	6923      	ldr	r3, [r4, #16]
 8007b16:	b36b      	cbz	r3, 8007b74 <__swbuf_r+0x84>
 8007b18:	6923      	ldr	r3, [r4, #16]
 8007b1a:	6820      	ldr	r0, [r4, #0]
 8007b1c:	1ac0      	subs	r0, r0, r3
 8007b1e:	6963      	ldr	r3, [r4, #20]
 8007b20:	b2f6      	uxtb	r6, r6
 8007b22:	4283      	cmp	r3, r0
 8007b24:	4637      	mov	r7, r6
 8007b26:	dc04      	bgt.n	8007b32 <__swbuf_r+0x42>
 8007b28:	4621      	mov	r1, r4
 8007b2a:	4628      	mov	r0, r5
 8007b2c:	f000 f926 	bl	8007d7c <_fflush_r>
 8007b30:	bb30      	cbnz	r0, 8007b80 <__swbuf_r+0x90>
 8007b32:	68a3      	ldr	r3, [r4, #8]
 8007b34:	3b01      	subs	r3, #1
 8007b36:	60a3      	str	r3, [r4, #8]
 8007b38:	6823      	ldr	r3, [r4, #0]
 8007b3a:	1c5a      	adds	r2, r3, #1
 8007b3c:	6022      	str	r2, [r4, #0]
 8007b3e:	701e      	strb	r6, [r3, #0]
 8007b40:	6963      	ldr	r3, [r4, #20]
 8007b42:	3001      	adds	r0, #1
 8007b44:	4283      	cmp	r3, r0
 8007b46:	d004      	beq.n	8007b52 <__swbuf_r+0x62>
 8007b48:	89a3      	ldrh	r3, [r4, #12]
 8007b4a:	07db      	lsls	r3, r3, #31
 8007b4c:	d506      	bpl.n	8007b5c <__swbuf_r+0x6c>
 8007b4e:	2e0a      	cmp	r6, #10
 8007b50:	d104      	bne.n	8007b5c <__swbuf_r+0x6c>
 8007b52:	4621      	mov	r1, r4
 8007b54:	4628      	mov	r0, r5
 8007b56:	f000 f911 	bl	8007d7c <_fflush_r>
 8007b5a:	b988      	cbnz	r0, 8007b80 <__swbuf_r+0x90>
 8007b5c:	4638      	mov	r0, r7
 8007b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b60:	4b0a      	ldr	r3, [pc, #40]	; (8007b8c <__swbuf_r+0x9c>)
 8007b62:	429c      	cmp	r4, r3
 8007b64:	d101      	bne.n	8007b6a <__swbuf_r+0x7a>
 8007b66:	68ac      	ldr	r4, [r5, #8]
 8007b68:	e7cf      	b.n	8007b0a <__swbuf_r+0x1a>
 8007b6a:	4b09      	ldr	r3, [pc, #36]	; (8007b90 <__swbuf_r+0xa0>)
 8007b6c:	429c      	cmp	r4, r3
 8007b6e:	bf08      	it	eq
 8007b70:	68ec      	ldreq	r4, [r5, #12]
 8007b72:	e7ca      	b.n	8007b0a <__swbuf_r+0x1a>
 8007b74:	4621      	mov	r1, r4
 8007b76:	4628      	mov	r0, r5
 8007b78:	f000 f80c 	bl	8007b94 <__swsetup_r>
 8007b7c:	2800      	cmp	r0, #0
 8007b7e:	d0cb      	beq.n	8007b18 <__swbuf_r+0x28>
 8007b80:	f04f 37ff 	mov.w	r7, #4294967295
 8007b84:	e7ea      	b.n	8007b5c <__swbuf_r+0x6c>
 8007b86:	bf00      	nop
 8007b88:	080093ac 	.word	0x080093ac
 8007b8c:	080093cc 	.word	0x080093cc
 8007b90:	0800938c 	.word	0x0800938c

08007b94 <__swsetup_r>:
 8007b94:	4b32      	ldr	r3, [pc, #200]	; (8007c60 <__swsetup_r+0xcc>)
 8007b96:	b570      	push	{r4, r5, r6, lr}
 8007b98:	681d      	ldr	r5, [r3, #0]
 8007b9a:	4606      	mov	r6, r0
 8007b9c:	460c      	mov	r4, r1
 8007b9e:	b125      	cbz	r5, 8007baa <__swsetup_r+0x16>
 8007ba0:	69ab      	ldr	r3, [r5, #24]
 8007ba2:	b913      	cbnz	r3, 8007baa <__swsetup_r+0x16>
 8007ba4:	4628      	mov	r0, r5
 8007ba6:	f000 f97d 	bl	8007ea4 <__sinit>
 8007baa:	4b2e      	ldr	r3, [pc, #184]	; (8007c64 <__swsetup_r+0xd0>)
 8007bac:	429c      	cmp	r4, r3
 8007bae:	d10f      	bne.n	8007bd0 <__swsetup_r+0x3c>
 8007bb0:	686c      	ldr	r4, [r5, #4]
 8007bb2:	89a3      	ldrh	r3, [r4, #12]
 8007bb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007bb8:	0719      	lsls	r1, r3, #28
 8007bba:	d42c      	bmi.n	8007c16 <__swsetup_r+0x82>
 8007bbc:	06dd      	lsls	r5, r3, #27
 8007bbe:	d411      	bmi.n	8007be4 <__swsetup_r+0x50>
 8007bc0:	2309      	movs	r3, #9
 8007bc2:	6033      	str	r3, [r6, #0]
 8007bc4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007bc8:	81a3      	strh	r3, [r4, #12]
 8007bca:	f04f 30ff 	mov.w	r0, #4294967295
 8007bce:	e03e      	b.n	8007c4e <__swsetup_r+0xba>
 8007bd0:	4b25      	ldr	r3, [pc, #148]	; (8007c68 <__swsetup_r+0xd4>)
 8007bd2:	429c      	cmp	r4, r3
 8007bd4:	d101      	bne.n	8007bda <__swsetup_r+0x46>
 8007bd6:	68ac      	ldr	r4, [r5, #8]
 8007bd8:	e7eb      	b.n	8007bb2 <__swsetup_r+0x1e>
 8007bda:	4b24      	ldr	r3, [pc, #144]	; (8007c6c <__swsetup_r+0xd8>)
 8007bdc:	429c      	cmp	r4, r3
 8007bde:	bf08      	it	eq
 8007be0:	68ec      	ldreq	r4, [r5, #12]
 8007be2:	e7e6      	b.n	8007bb2 <__swsetup_r+0x1e>
 8007be4:	0758      	lsls	r0, r3, #29
 8007be6:	d512      	bpl.n	8007c0e <__swsetup_r+0x7a>
 8007be8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bea:	b141      	cbz	r1, 8007bfe <__swsetup_r+0x6a>
 8007bec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bf0:	4299      	cmp	r1, r3
 8007bf2:	d002      	beq.n	8007bfa <__swsetup_r+0x66>
 8007bf4:	4630      	mov	r0, r6
 8007bf6:	f000 fa59 	bl	80080ac <_free_r>
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	6363      	str	r3, [r4, #52]	; 0x34
 8007bfe:	89a3      	ldrh	r3, [r4, #12]
 8007c00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c04:	81a3      	strh	r3, [r4, #12]
 8007c06:	2300      	movs	r3, #0
 8007c08:	6063      	str	r3, [r4, #4]
 8007c0a:	6923      	ldr	r3, [r4, #16]
 8007c0c:	6023      	str	r3, [r4, #0]
 8007c0e:	89a3      	ldrh	r3, [r4, #12]
 8007c10:	f043 0308 	orr.w	r3, r3, #8
 8007c14:	81a3      	strh	r3, [r4, #12]
 8007c16:	6923      	ldr	r3, [r4, #16]
 8007c18:	b94b      	cbnz	r3, 8007c2e <__swsetup_r+0x9a>
 8007c1a:	89a3      	ldrh	r3, [r4, #12]
 8007c1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c24:	d003      	beq.n	8007c2e <__swsetup_r+0x9a>
 8007c26:	4621      	mov	r1, r4
 8007c28:	4630      	mov	r0, r6
 8007c2a:	f000 f9ff 	bl	800802c <__smakebuf_r>
 8007c2e:	89a0      	ldrh	r0, [r4, #12]
 8007c30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c34:	f010 0301 	ands.w	r3, r0, #1
 8007c38:	d00a      	beq.n	8007c50 <__swsetup_r+0xbc>
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	60a3      	str	r3, [r4, #8]
 8007c3e:	6963      	ldr	r3, [r4, #20]
 8007c40:	425b      	negs	r3, r3
 8007c42:	61a3      	str	r3, [r4, #24]
 8007c44:	6923      	ldr	r3, [r4, #16]
 8007c46:	b943      	cbnz	r3, 8007c5a <__swsetup_r+0xc6>
 8007c48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007c4c:	d1ba      	bne.n	8007bc4 <__swsetup_r+0x30>
 8007c4e:	bd70      	pop	{r4, r5, r6, pc}
 8007c50:	0781      	lsls	r1, r0, #30
 8007c52:	bf58      	it	pl
 8007c54:	6963      	ldrpl	r3, [r4, #20]
 8007c56:	60a3      	str	r3, [r4, #8]
 8007c58:	e7f4      	b.n	8007c44 <__swsetup_r+0xb0>
 8007c5a:	2000      	movs	r0, #0
 8007c5c:	e7f7      	b.n	8007c4e <__swsetup_r+0xba>
 8007c5e:	bf00      	nop
 8007c60:	200001b8 	.word	0x200001b8
 8007c64:	080093ac 	.word	0x080093ac
 8007c68:	080093cc 	.word	0x080093cc
 8007c6c:	0800938c 	.word	0x0800938c

08007c70 <__sflush_r>:
 8007c70:	898a      	ldrh	r2, [r1, #12]
 8007c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c76:	4605      	mov	r5, r0
 8007c78:	0710      	lsls	r0, r2, #28
 8007c7a:	460c      	mov	r4, r1
 8007c7c:	d458      	bmi.n	8007d30 <__sflush_r+0xc0>
 8007c7e:	684b      	ldr	r3, [r1, #4]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	dc05      	bgt.n	8007c90 <__sflush_r+0x20>
 8007c84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	dc02      	bgt.n	8007c90 <__sflush_r+0x20>
 8007c8a:	2000      	movs	r0, #0
 8007c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c92:	2e00      	cmp	r6, #0
 8007c94:	d0f9      	beq.n	8007c8a <__sflush_r+0x1a>
 8007c96:	2300      	movs	r3, #0
 8007c98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c9c:	682f      	ldr	r7, [r5, #0]
 8007c9e:	602b      	str	r3, [r5, #0]
 8007ca0:	d032      	beq.n	8007d08 <__sflush_r+0x98>
 8007ca2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ca4:	89a3      	ldrh	r3, [r4, #12]
 8007ca6:	075a      	lsls	r2, r3, #29
 8007ca8:	d505      	bpl.n	8007cb6 <__sflush_r+0x46>
 8007caa:	6863      	ldr	r3, [r4, #4]
 8007cac:	1ac0      	subs	r0, r0, r3
 8007cae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007cb0:	b10b      	cbz	r3, 8007cb6 <__sflush_r+0x46>
 8007cb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007cb4:	1ac0      	subs	r0, r0, r3
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	4602      	mov	r2, r0
 8007cba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007cbc:	6a21      	ldr	r1, [r4, #32]
 8007cbe:	4628      	mov	r0, r5
 8007cc0:	47b0      	blx	r6
 8007cc2:	1c43      	adds	r3, r0, #1
 8007cc4:	89a3      	ldrh	r3, [r4, #12]
 8007cc6:	d106      	bne.n	8007cd6 <__sflush_r+0x66>
 8007cc8:	6829      	ldr	r1, [r5, #0]
 8007cca:	291d      	cmp	r1, #29
 8007ccc:	d82c      	bhi.n	8007d28 <__sflush_r+0xb8>
 8007cce:	4a2a      	ldr	r2, [pc, #168]	; (8007d78 <__sflush_r+0x108>)
 8007cd0:	40ca      	lsrs	r2, r1
 8007cd2:	07d6      	lsls	r6, r2, #31
 8007cd4:	d528      	bpl.n	8007d28 <__sflush_r+0xb8>
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	6062      	str	r2, [r4, #4]
 8007cda:	04d9      	lsls	r1, r3, #19
 8007cdc:	6922      	ldr	r2, [r4, #16]
 8007cde:	6022      	str	r2, [r4, #0]
 8007ce0:	d504      	bpl.n	8007cec <__sflush_r+0x7c>
 8007ce2:	1c42      	adds	r2, r0, #1
 8007ce4:	d101      	bne.n	8007cea <__sflush_r+0x7a>
 8007ce6:	682b      	ldr	r3, [r5, #0]
 8007ce8:	b903      	cbnz	r3, 8007cec <__sflush_r+0x7c>
 8007cea:	6560      	str	r0, [r4, #84]	; 0x54
 8007cec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cee:	602f      	str	r7, [r5, #0]
 8007cf0:	2900      	cmp	r1, #0
 8007cf2:	d0ca      	beq.n	8007c8a <__sflush_r+0x1a>
 8007cf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007cf8:	4299      	cmp	r1, r3
 8007cfa:	d002      	beq.n	8007d02 <__sflush_r+0x92>
 8007cfc:	4628      	mov	r0, r5
 8007cfe:	f000 f9d5 	bl	80080ac <_free_r>
 8007d02:	2000      	movs	r0, #0
 8007d04:	6360      	str	r0, [r4, #52]	; 0x34
 8007d06:	e7c1      	b.n	8007c8c <__sflush_r+0x1c>
 8007d08:	6a21      	ldr	r1, [r4, #32]
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	4628      	mov	r0, r5
 8007d0e:	47b0      	blx	r6
 8007d10:	1c41      	adds	r1, r0, #1
 8007d12:	d1c7      	bne.n	8007ca4 <__sflush_r+0x34>
 8007d14:	682b      	ldr	r3, [r5, #0]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d0c4      	beq.n	8007ca4 <__sflush_r+0x34>
 8007d1a:	2b1d      	cmp	r3, #29
 8007d1c:	d001      	beq.n	8007d22 <__sflush_r+0xb2>
 8007d1e:	2b16      	cmp	r3, #22
 8007d20:	d101      	bne.n	8007d26 <__sflush_r+0xb6>
 8007d22:	602f      	str	r7, [r5, #0]
 8007d24:	e7b1      	b.n	8007c8a <__sflush_r+0x1a>
 8007d26:	89a3      	ldrh	r3, [r4, #12]
 8007d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d2c:	81a3      	strh	r3, [r4, #12]
 8007d2e:	e7ad      	b.n	8007c8c <__sflush_r+0x1c>
 8007d30:	690f      	ldr	r7, [r1, #16]
 8007d32:	2f00      	cmp	r7, #0
 8007d34:	d0a9      	beq.n	8007c8a <__sflush_r+0x1a>
 8007d36:	0793      	lsls	r3, r2, #30
 8007d38:	680e      	ldr	r6, [r1, #0]
 8007d3a:	bf08      	it	eq
 8007d3c:	694b      	ldreq	r3, [r1, #20]
 8007d3e:	600f      	str	r7, [r1, #0]
 8007d40:	bf18      	it	ne
 8007d42:	2300      	movne	r3, #0
 8007d44:	eba6 0807 	sub.w	r8, r6, r7
 8007d48:	608b      	str	r3, [r1, #8]
 8007d4a:	f1b8 0f00 	cmp.w	r8, #0
 8007d4e:	dd9c      	ble.n	8007c8a <__sflush_r+0x1a>
 8007d50:	6a21      	ldr	r1, [r4, #32]
 8007d52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d54:	4643      	mov	r3, r8
 8007d56:	463a      	mov	r2, r7
 8007d58:	4628      	mov	r0, r5
 8007d5a:	47b0      	blx	r6
 8007d5c:	2800      	cmp	r0, #0
 8007d5e:	dc06      	bgt.n	8007d6e <__sflush_r+0xfe>
 8007d60:	89a3      	ldrh	r3, [r4, #12]
 8007d62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d66:	81a3      	strh	r3, [r4, #12]
 8007d68:	f04f 30ff 	mov.w	r0, #4294967295
 8007d6c:	e78e      	b.n	8007c8c <__sflush_r+0x1c>
 8007d6e:	4407      	add	r7, r0
 8007d70:	eba8 0800 	sub.w	r8, r8, r0
 8007d74:	e7e9      	b.n	8007d4a <__sflush_r+0xda>
 8007d76:	bf00      	nop
 8007d78:	20400001 	.word	0x20400001

08007d7c <_fflush_r>:
 8007d7c:	b538      	push	{r3, r4, r5, lr}
 8007d7e:	690b      	ldr	r3, [r1, #16]
 8007d80:	4605      	mov	r5, r0
 8007d82:	460c      	mov	r4, r1
 8007d84:	b913      	cbnz	r3, 8007d8c <_fflush_r+0x10>
 8007d86:	2500      	movs	r5, #0
 8007d88:	4628      	mov	r0, r5
 8007d8a:	bd38      	pop	{r3, r4, r5, pc}
 8007d8c:	b118      	cbz	r0, 8007d96 <_fflush_r+0x1a>
 8007d8e:	6983      	ldr	r3, [r0, #24]
 8007d90:	b90b      	cbnz	r3, 8007d96 <_fflush_r+0x1a>
 8007d92:	f000 f887 	bl	8007ea4 <__sinit>
 8007d96:	4b14      	ldr	r3, [pc, #80]	; (8007de8 <_fflush_r+0x6c>)
 8007d98:	429c      	cmp	r4, r3
 8007d9a:	d11b      	bne.n	8007dd4 <_fflush_r+0x58>
 8007d9c:	686c      	ldr	r4, [r5, #4]
 8007d9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d0ef      	beq.n	8007d86 <_fflush_r+0xa>
 8007da6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007da8:	07d0      	lsls	r0, r2, #31
 8007daa:	d404      	bmi.n	8007db6 <_fflush_r+0x3a>
 8007dac:	0599      	lsls	r1, r3, #22
 8007dae:	d402      	bmi.n	8007db6 <_fflush_r+0x3a>
 8007db0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007db2:	f000 f915 	bl	8007fe0 <__retarget_lock_acquire_recursive>
 8007db6:	4628      	mov	r0, r5
 8007db8:	4621      	mov	r1, r4
 8007dba:	f7ff ff59 	bl	8007c70 <__sflush_r>
 8007dbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007dc0:	07da      	lsls	r2, r3, #31
 8007dc2:	4605      	mov	r5, r0
 8007dc4:	d4e0      	bmi.n	8007d88 <_fflush_r+0xc>
 8007dc6:	89a3      	ldrh	r3, [r4, #12]
 8007dc8:	059b      	lsls	r3, r3, #22
 8007dca:	d4dd      	bmi.n	8007d88 <_fflush_r+0xc>
 8007dcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dce:	f000 f908 	bl	8007fe2 <__retarget_lock_release_recursive>
 8007dd2:	e7d9      	b.n	8007d88 <_fflush_r+0xc>
 8007dd4:	4b05      	ldr	r3, [pc, #20]	; (8007dec <_fflush_r+0x70>)
 8007dd6:	429c      	cmp	r4, r3
 8007dd8:	d101      	bne.n	8007dde <_fflush_r+0x62>
 8007dda:	68ac      	ldr	r4, [r5, #8]
 8007ddc:	e7df      	b.n	8007d9e <_fflush_r+0x22>
 8007dde:	4b04      	ldr	r3, [pc, #16]	; (8007df0 <_fflush_r+0x74>)
 8007de0:	429c      	cmp	r4, r3
 8007de2:	bf08      	it	eq
 8007de4:	68ec      	ldreq	r4, [r5, #12]
 8007de6:	e7da      	b.n	8007d9e <_fflush_r+0x22>
 8007de8:	080093ac 	.word	0x080093ac
 8007dec:	080093cc 	.word	0x080093cc
 8007df0:	0800938c 	.word	0x0800938c

08007df4 <std>:
 8007df4:	2300      	movs	r3, #0
 8007df6:	b510      	push	{r4, lr}
 8007df8:	4604      	mov	r4, r0
 8007dfa:	e9c0 3300 	strd	r3, r3, [r0]
 8007dfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e02:	6083      	str	r3, [r0, #8]
 8007e04:	8181      	strh	r1, [r0, #12]
 8007e06:	6643      	str	r3, [r0, #100]	; 0x64
 8007e08:	81c2      	strh	r2, [r0, #14]
 8007e0a:	6183      	str	r3, [r0, #24]
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	2208      	movs	r2, #8
 8007e10:	305c      	adds	r0, #92	; 0x5c
 8007e12:	f7ff fdd7 	bl	80079c4 <memset>
 8007e16:	4b05      	ldr	r3, [pc, #20]	; (8007e2c <std+0x38>)
 8007e18:	6263      	str	r3, [r4, #36]	; 0x24
 8007e1a:	4b05      	ldr	r3, [pc, #20]	; (8007e30 <std+0x3c>)
 8007e1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e1e:	4b05      	ldr	r3, [pc, #20]	; (8007e34 <std+0x40>)
 8007e20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e22:	4b05      	ldr	r3, [pc, #20]	; (8007e38 <std+0x44>)
 8007e24:	6224      	str	r4, [r4, #32]
 8007e26:	6323      	str	r3, [r4, #48]	; 0x30
 8007e28:	bd10      	pop	{r4, pc}
 8007e2a:	bf00      	nop
 8007e2c:	080087fd 	.word	0x080087fd
 8007e30:	0800881f 	.word	0x0800881f
 8007e34:	08008857 	.word	0x08008857
 8007e38:	0800887b 	.word	0x0800887b

08007e3c <_cleanup_r>:
 8007e3c:	4901      	ldr	r1, [pc, #4]	; (8007e44 <_cleanup_r+0x8>)
 8007e3e:	f000 b8af 	b.w	8007fa0 <_fwalk_reent>
 8007e42:	bf00      	nop
 8007e44:	08007d7d 	.word	0x08007d7d

08007e48 <__sfmoreglue>:
 8007e48:	b570      	push	{r4, r5, r6, lr}
 8007e4a:	1e4a      	subs	r2, r1, #1
 8007e4c:	2568      	movs	r5, #104	; 0x68
 8007e4e:	4355      	muls	r5, r2
 8007e50:	460e      	mov	r6, r1
 8007e52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007e56:	f000 f979 	bl	800814c <_malloc_r>
 8007e5a:	4604      	mov	r4, r0
 8007e5c:	b140      	cbz	r0, 8007e70 <__sfmoreglue+0x28>
 8007e5e:	2100      	movs	r1, #0
 8007e60:	e9c0 1600 	strd	r1, r6, [r0]
 8007e64:	300c      	adds	r0, #12
 8007e66:	60a0      	str	r0, [r4, #8]
 8007e68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007e6c:	f7ff fdaa 	bl	80079c4 <memset>
 8007e70:	4620      	mov	r0, r4
 8007e72:	bd70      	pop	{r4, r5, r6, pc}

08007e74 <__sfp_lock_acquire>:
 8007e74:	4801      	ldr	r0, [pc, #4]	; (8007e7c <__sfp_lock_acquire+0x8>)
 8007e76:	f000 b8b3 	b.w	8007fe0 <__retarget_lock_acquire_recursive>
 8007e7a:	bf00      	nop
 8007e7c:	20001d80 	.word	0x20001d80

08007e80 <__sfp_lock_release>:
 8007e80:	4801      	ldr	r0, [pc, #4]	; (8007e88 <__sfp_lock_release+0x8>)
 8007e82:	f000 b8ae 	b.w	8007fe2 <__retarget_lock_release_recursive>
 8007e86:	bf00      	nop
 8007e88:	20001d80 	.word	0x20001d80

08007e8c <__sinit_lock_acquire>:
 8007e8c:	4801      	ldr	r0, [pc, #4]	; (8007e94 <__sinit_lock_acquire+0x8>)
 8007e8e:	f000 b8a7 	b.w	8007fe0 <__retarget_lock_acquire_recursive>
 8007e92:	bf00      	nop
 8007e94:	20001d7b 	.word	0x20001d7b

08007e98 <__sinit_lock_release>:
 8007e98:	4801      	ldr	r0, [pc, #4]	; (8007ea0 <__sinit_lock_release+0x8>)
 8007e9a:	f000 b8a2 	b.w	8007fe2 <__retarget_lock_release_recursive>
 8007e9e:	bf00      	nop
 8007ea0:	20001d7b 	.word	0x20001d7b

08007ea4 <__sinit>:
 8007ea4:	b510      	push	{r4, lr}
 8007ea6:	4604      	mov	r4, r0
 8007ea8:	f7ff fff0 	bl	8007e8c <__sinit_lock_acquire>
 8007eac:	69a3      	ldr	r3, [r4, #24]
 8007eae:	b11b      	cbz	r3, 8007eb8 <__sinit+0x14>
 8007eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007eb4:	f7ff bff0 	b.w	8007e98 <__sinit_lock_release>
 8007eb8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007ebc:	6523      	str	r3, [r4, #80]	; 0x50
 8007ebe:	4b13      	ldr	r3, [pc, #76]	; (8007f0c <__sinit+0x68>)
 8007ec0:	4a13      	ldr	r2, [pc, #76]	; (8007f10 <__sinit+0x6c>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	62a2      	str	r2, [r4, #40]	; 0x28
 8007ec6:	42a3      	cmp	r3, r4
 8007ec8:	bf04      	itt	eq
 8007eca:	2301      	moveq	r3, #1
 8007ecc:	61a3      	streq	r3, [r4, #24]
 8007ece:	4620      	mov	r0, r4
 8007ed0:	f000 f820 	bl	8007f14 <__sfp>
 8007ed4:	6060      	str	r0, [r4, #4]
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	f000 f81c 	bl	8007f14 <__sfp>
 8007edc:	60a0      	str	r0, [r4, #8]
 8007ede:	4620      	mov	r0, r4
 8007ee0:	f000 f818 	bl	8007f14 <__sfp>
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	60e0      	str	r0, [r4, #12]
 8007ee8:	2104      	movs	r1, #4
 8007eea:	6860      	ldr	r0, [r4, #4]
 8007eec:	f7ff ff82 	bl	8007df4 <std>
 8007ef0:	68a0      	ldr	r0, [r4, #8]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	2109      	movs	r1, #9
 8007ef6:	f7ff ff7d 	bl	8007df4 <std>
 8007efa:	68e0      	ldr	r0, [r4, #12]
 8007efc:	2202      	movs	r2, #2
 8007efe:	2112      	movs	r1, #18
 8007f00:	f7ff ff78 	bl	8007df4 <std>
 8007f04:	2301      	movs	r3, #1
 8007f06:	61a3      	str	r3, [r4, #24]
 8007f08:	e7d2      	b.n	8007eb0 <__sinit+0xc>
 8007f0a:	bf00      	nop
 8007f0c:	08009388 	.word	0x08009388
 8007f10:	08007e3d 	.word	0x08007e3d

08007f14 <__sfp>:
 8007f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f16:	4607      	mov	r7, r0
 8007f18:	f7ff ffac 	bl	8007e74 <__sfp_lock_acquire>
 8007f1c:	4b1e      	ldr	r3, [pc, #120]	; (8007f98 <__sfp+0x84>)
 8007f1e:	681e      	ldr	r6, [r3, #0]
 8007f20:	69b3      	ldr	r3, [r6, #24]
 8007f22:	b913      	cbnz	r3, 8007f2a <__sfp+0x16>
 8007f24:	4630      	mov	r0, r6
 8007f26:	f7ff ffbd 	bl	8007ea4 <__sinit>
 8007f2a:	3648      	adds	r6, #72	; 0x48
 8007f2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007f30:	3b01      	subs	r3, #1
 8007f32:	d503      	bpl.n	8007f3c <__sfp+0x28>
 8007f34:	6833      	ldr	r3, [r6, #0]
 8007f36:	b30b      	cbz	r3, 8007f7c <__sfp+0x68>
 8007f38:	6836      	ldr	r6, [r6, #0]
 8007f3a:	e7f7      	b.n	8007f2c <__sfp+0x18>
 8007f3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007f40:	b9d5      	cbnz	r5, 8007f78 <__sfp+0x64>
 8007f42:	4b16      	ldr	r3, [pc, #88]	; (8007f9c <__sfp+0x88>)
 8007f44:	60e3      	str	r3, [r4, #12]
 8007f46:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f4a:	6665      	str	r5, [r4, #100]	; 0x64
 8007f4c:	f000 f847 	bl	8007fde <__retarget_lock_init_recursive>
 8007f50:	f7ff ff96 	bl	8007e80 <__sfp_lock_release>
 8007f54:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007f58:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007f5c:	6025      	str	r5, [r4, #0]
 8007f5e:	61a5      	str	r5, [r4, #24]
 8007f60:	2208      	movs	r2, #8
 8007f62:	4629      	mov	r1, r5
 8007f64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007f68:	f7ff fd2c 	bl	80079c4 <memset>
 8007f6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007f70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007f74:	4620      	mov	r0, r4
 8007f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f78:	3468      	adds	r4, #104	; 0x68
 8007f7a:	e7d9      	b.n	8007f30 <__sfp+0x1c>
 8007f7c:	2104      	movs	r1, #4
 8007f7e:	4638      	mov	r0, r7
 8007f80:	f7ff ff62 	bl	8007e48 <__sfmoreglue>
 8007f84:	4604      	mov	r4, r0
 8007f86:	6030      	str	r0, [r6, #0]
 8007f88:	2800      	cmp	r0, #0
 8007f8a:	d1d5      	bne.n	8007f38 <__sfp+0x24>
 8007f8c:	f7ff ff78 	bl	8007e80 <__sfp_lock_release>
 8007f90:	230c      	movs	r3, #12
 8007f92:	603b      	str	r3, [r7, #0]
 8007f94:	e7ee      	b.n	8007f74 <__sfp+0x60>
 8007f96:	bf00      	nop
 8007f98:	08009388 	.word	0x08009388
 8007f9c:	ffff0001 	.word	0xffff0001

08007fa0 <_fwalk_reent>:
 8007fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fa4:	4606      	mov	r6, r0
 8007fa6:	4688      	mov	r8, r1
 8007fa8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007fac:	2700      	movs	r7, #0
 8007fae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007fb2:	f1b9 0901 	subs.w	r9, r9, #1
 8007fb6:	d505      	bpl.n	8007fc4 <_fwalk_reent+0x24>
 8007fb8:	6824      	ldr	r4, [r4, #0]
 8007fba:	2c00      	cmp	r4, #0
 8007fbc:	d1f7      	bne.n	8007fae <_fwalk_reent+0xe>
 8007fbe:	4638      	mov	r0, r7
 8007fc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fc4:	89ab      	ldrh	r3, [r5, #12]
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d907      	bls.n	8007fda <_fwalk_reent+0x3a>
 8007fca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007fce:	3301      	adds	r3, #1
 8007fd0:	d003      	beq.n	8007fda <_fwalk_reent+0x3a>
 8007fd2:	4629      	mov	r1, r5
 8007fd4:	4630      	mov	r0, r6
 8007fd6:	47c0      	blx	r8
 8007fd8:	4307      	orrs	r7, r0
 8007fda:	3568      	adds	r5, #104	; 0x68
 8007fdc:	e7e9      	b.n	8007fb2 <_fwalk_reent+0x12>

08007fde <__retarget_lock_init_recursive>:
 8007fde:	4770      	bx	lr

08007fe0 <__retarget_lock_acquire_recursive>:
 8007fe0:	4770      	bx	lr

08007fe2 <__retarget_lock_release_recursive>:
 8007fe2:	4770      	bx	lr

08007fe4 <__swhatbuf_r>:
 8007fe4:	b570      	push	{r4, r5, r6, lr}
 8007fe6:	460e      	mov	r6, r1
 8007fe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fec:	2900      	cmp	r1, #0
 8007fee:	b096      	sub	sp, #88	; 0x58
 8007ff0:	4614      	mov	r4, r2
 8007ff2:	461d      	mov	r5, r3
 8007ff4:	da07      	bge.n	8008006 <__swhatbuf_r+0x22>
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	602b      	str	r3, [r5, #0]
 8007ffa:	89b3      	ldrh	r3, [r6, #12]
 8007ffc:	061a      	lsls	r2, r3, #24
 8007ffe:	d410      	bmi.n	8008022 <__swhatbuf_r+0x3e>
 8008000:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008004:	e00e      	b.n	8008024 <__swhatbuf_r+0x40>
 8008006:	466a      	mov	r2, sp
 8008008:	f000 fc5e 	bl	80088c8 <_fstat_r>
 800800c:	2800      	cmp	r0, #0
 800800e:	dbf2      	blt.n	8007ff6 <__swhatbuf_r+0x12>
 8008010:	9a01      	ldr	r2, [sp, #4]
 8008012:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008016:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800801a:	425a      	negs	r2, r3
 800801c:	415a      	adcs	r2, r3
 800801e:	602a      	str	r2, [r5, #0]
 8008020:	e7ee      	b.n	8008000 <__swhatbuf_r+0x1c>
 8008022:	2340      	movs	r3, #64	; 0x40
 8008024:	2000      	movs	r0, #0
 8008026:	6023      	str	r3, [r4, #0]
 8008028:	b016      	add	sp, #88	; 0x58
 800802a:	bd70      	pop	{r4, r5, r6, pc}

0800802c <__smakebuf_r>:
 800802c:	898b      	ldrh	r3, [r1, #12]
 800802e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008030:	079d      	lsls	r5, r3, #30
 8008032:	4606      	mov	r6, r0
 8008034:	460c      	mov	r4, r1
 8008036:	d507      	bpl.n	8008048 <__smakebuf_r+0x1c>
 8008038:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800803c:	6023      	str	r3, [r4, #0]
 800803e:	6123      	str	r3, [r4, #16]
 8008040:	2301      	movs	r3, #1
 8008042:	6163      	str	r3, [r4, #20]
 8008044:	b002      	add	sp, #8
 8008046:	bd70      	pop	{r4, r5, r6, pc}
 8008048:	ab01      	add	r3, sp, #4
 800804a:	466a      	mov	r2, sp
 800804c:	f7ff ffca 	bl	8007fe4 <__swhatbuf_r>
 8008050:	9900      	ldr	r1, [sp, #0]
 8008052:	4605      	mov	r5, r0
 8008054:	4630      	mov	r0, r6
 8008056:	f000 f879 	bl	800814c <_malloc_r>
 800805a:	b948      	cbnz	r0, 8008070 <__smakebuf_r+0x44>
 800805c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008060:	059a      	lsls	r2, r3, #22
 8008062:	d4ef      	bmi.n	8008044 <__smakebuf_r+0x18>
 8008064:	f023 0303 	bic.w	r3, r3, #3
 8008068:	f043 0302 	orr.w	r3, r3, #2
 800806c:	81a3      	strh	r3, [r4, #12]
 800806e:	e7e3      	b.n	8008038 <__smakebuf_r+0xc>
 8008070:	4b0d      	ldr	r3, [pc, #52]	; (80080a8 <__smakebuf_r+0x7c>)
 8008072:	62b3      	str	r3, [r6, #40]	; 0x28
 8008074:	89a3      	ldrh	r3, [r4, #12]
 8008076:	6020      	str	r0, [r4, #0]
 8008078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800807c:	81a3      	strh	r3, [r4, #12]
 800807e:	9b00      	ldr	r3, [sp, #0]
 8008080:	6163      	str	r3, [r4, #20]
 8008082:	9b01      	ldr	r3, [sp, #4]
 8008084:	6120      	str	r0, [r4, #16]
 8008086:	b15b      	cbz	r3, 80080a0 <__smakebuf_r+0x74>
 8008088:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800808c:	4630      	mov	r0, r6
 800808e:	f000 fc2d 	bl	80088ec <_isatty_r>
 8008092:	b128      	cbz	r0, 80080a0 <__smakebuf_r+0x74>
 8008094:	89a3      	ldrh	r3, [r4, #12]
 8008096:	f023 0303 	bic.w	r3, r3, #3
 800809a:	f043 0301 	orr.w	r3, r3, #1
 800809e:	81a3      	strh	r3, [r4, #12]
 80080a0:	89a0      	ldrh	r0, [r4, #12]
 80080a2:	4305      	orrs	r5, r0
 80080a4:	81a5      	strh	r5, [r4, #12]
 80080a6:	e7cd      	b.n	8008044 <__smakebuf_r+0x18>
 80080a8:	08007e3d 	.word	0x08007e3d

080080ac <_free_r>:
 80080ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080ae:	2900      	cmp	r1, #0
 80080b0:	d048      	beq.n	8008144 <_free_r+0x98>
 80080b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080b6:	9001      	str	r0, [sp, #4]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	f1a1 0404 	sub.w	r4, r1, #4
 80080be:	bfb8      	it	lt
 80080c0:	18e4      	addlt	r4, r4, r3
 80080c2:	f000 fc35 	bl	8008930 <__malloc_lock>
 80080c6:	4a20      	ldr	r2, [pc, #128]	; (8008148 <_free_r+0x9c>)
 80080c8:	9801      	ldr	r0, [sp, #4]
 80080ca:	6813      	ldr	r3, [r2, #0]
 80080cc:	4615      	mov	r5, r2
 80080ce:	b933      	cbnz	r3, 80080de <_free_r+0x32>
 80080d0:	6063      	str	r3, [r4, #4]
 80080d2:	6014      	str	r4, [r2, #0]
 80080d4:	b003      	add	sp, #12
 80080d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080da:	f000 bc2f 	b.w	800893c <__malloc_unlock>
 80080de:	42a3      	cmp	r3, r4
 80080e0:	d90b      	bls.n	80080fa <_free_r+0x4e>
 80080e2:	6821      	ldr	r1, [r4, #0]
 80080e4:	1862      	adds	r2, r4, r1
 80080e6:	4293      	cmp	r3, r2
 80080e8:	bf04      	itt	eq
 80080ea:	681a      	ldreq	r2, [r3, #0]
 80080ec:	685b      	ldreq	r3, [r3, #4]
 80080ee:	6063      	str	r3, [r4, #4]
 80080f0:	bf04      	itt	eq
 80080f2:	1852      	addeq	r2, r2, r1
 80080f4:	6022      	streq	r2, [r4, #0]
 80080f6:	602c      	str	r4, [r5, #0]
 80080f8:	e7ec      	b.n	80080d4 <_free_r+0x28>
 80080fa:	461a      	mov	r2, r3
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	b10b      	cbz	r3, 8008104 <_free_r+0x58>
 8008100:	42a3      	cmp	r3, r4
 8008102:	d9fa      	bls.n	80080fa <_free_r+0x4e>
 8008104:	6811      	ldr	r1, [r2, #0]
 8008106:	1855      	adds	r5, r2, r1
 8008108:	42a5      	cmp	r5, r4
 800810a:	d10b      	bne.n	8008124 <_free_r+0x78>
 800810c:	6824      	ldr	r4, [r4, #0]
 800810e:	4421      	add	r1, r4
 8008110:	1854      	adds	r4, r2, r1
 8008112:	42a3      	cmp	r3, r4
 8008114:	6011      	str	r1, [r2, #0]
 8008116:	d1dd      	bne.n	80080d4 <_free_r+0x28>
 8008118:	681c      	ldr	r4, [r3, #0]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	6053      	str	r3, [r2, #4]
 800811e:	4421      	add	r1, r4
 8008120:	6011      	str	r1, [r2, #0]
 8008122:	e7d7      	b.n	80080d4 <_free_r+0x28>
 8008124:	d902      	bls.n	800812c <_free_r+0x80>
 8008126:	230c      	movs	r3, #12
 8008128:	6003      	str	r3, [r0, #0]
 800812a:	e7d3      	b.n	80080d4 <_free_r+0x28>
 800812c:	6825      	ldr	r5, [r4, #0]
 800812e:	1961      	adds	r1, r4, r5
 8008130:	428b      	cmp	r3, r1
 8008132:	bf04      	itt	eq
 8008134:	6819      	ldreq	r1, [r3, #0]
 8008136:	685b      	ldreq	r3, [r3, #4]
 8008138:	6063      	str	r3, [r4, #4]
 800813a:	bf04      	itt	eq
 800813c:	1949      	addeq	r1, r1, r5
 800813e:	6021      	streq	r1, [r4, #0]
 8008140:	6054      	str	r4, [r2, #4]
 8008142:	e7c7      	b.n	80080d4 <_free_r+0x28>
 8008144:	b003      	add	sp, #12
 8008146:	bd30      	pop	{r4, r5, pc}
 8008148:	20000460 	.word	0x20000460

0800814c <_malloc_r>:
 800814c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800814e:	1ccd      	adds	r5, r1, #3
 8008150:	f025 0503 	bic.w	r5, r5, #3
 8008154:	3508      	adds	r5, #8
 8008156:	2d0c      	cmp	r5, #12
 8008158:	bf38      	it	cc
 800815a:	250c      	movcc	r5, #12
 800815c:	2d00      	cmp	r5, #0
 800815e:	4606      	mov	r6, r0
 8008160:	db01      	blt.n	8008166 <_malloc_r+0x1a>
 8008162:	42a9      	cmp	r1, r5
 8008164:	d903      	bls.n	800816e <_malloc_r+0x22>
 8008166:	230c      	movs	r3, #12
 8008168:	6033      	str	r3, [r6, #0]
 800816a:	2000      	movs	r0, #0
 800816c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800816e:	f000 fbdf 	bl	8008930 <__malloc_lock>
 8008172:	4921      	ldr	r1, [pc, #132]	; (80081f8 <_malloc_r+0xac>)
 8008174:	680a      	ldr	r2, [r1, #0]
 8008176:	4614      	mov	r4, r2
 8008178:	b99c      	cbnz	r4, 80081a2 <_malloc_r+0x56>
 800817a:	4f20      	ldr	r7, [pc, #128]	; (80081fc <_malloc_r+0xb0>)
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	b923      	cbnz	r3, 800818a <_malloc_r+0x3e>
 8008180:	4621      	mov	r1, r4
 8008182:	4630      	mov	r0, r6
 8008184:	f000 fb2a 	bl	80087dc <_sbrk_r>
 8008188:	6038      	str	r0, [r7, #0]
 800818a:	4629      	mov	r1, r5
 800818c:	4630      	mov	r0, r6
 800818e:	f000 fb25 	bl	80087dc <_sbrk_r>
 8008192:	1c43      	adds	r3, r0, #1
 8008194:	d123      	bne.n	80081de <_malloc_r+0x92>
 8008196:	230c      	movs	r3, #12
 8008198:	6033      	str	r3, [r6, #0]
 800819a:	4630      	mov	r0, r6
 800819c:	f000 fbce 	bl	800893c <__malloc_unlock>
 80081a0:	e7e3      	b.n	800816a <_malloc_r+0x1e>
 80081a2:	6823      	ldr	r3, [r4, #0]
 80081a4:	1b5b      	subs	r3, r3, r5
 80081a6:	d417      	bmi.n	80081d8 <_malloc_r+0x8c>
 80081a8:	2b0b      	cmp	r3, #11
 80081aa:	d903      	bls.n	80081b4 <_malloc_r+0x68>
 80081ac:	6023      	str	r3, [r4, #0]
 80081ae:	441c      	add	r4, r3
 80081b0:	6025      	str	r5, [r4, #0]
 80081b2:	e004      	b.n	80081be <_malloc_r+0x72>
 80081b4:	6863      	ldr	r3, [r4, #4]
 80081b6:	42a2      	cmp	r2, r4
 80081b8:	bf0c      	ite	eq
 80081ba:	600b      	streq	r3, [r1, #0]
 80081bc:	6053      	strne	r3, [r2, #4]
 80081be:	4630      	mov	r0, r6
 80081c0:	f000 fbbc 	bl	800893c <__malloc_unlock>
 80081c4:	f104 000b 	add.w	r0, r4, #11
 80081c8:	1d23      	adds	r3, r4, #4
 80081ca:	f020 0007 	bic.w	r0, r0, #7
 80081ce:	1ac2      	subs	r2, r0, r3
 80081d0:	d0cc      	beq.n	800816c <_malloc_r+0x20>
 80081d2:	1a1b      	subs	r3, r3, r0
 80081d4:	50a3      	str	r3, [r4, r2]
 80081d6:	e7c9      	b.n	800816c <_malloc_r+0x20>
 80081d8:	4622      	mov	r2, r4
 80081da:	6864      	ldr	r4, [r4, #4]
 80081dc:	e7cc      	b.n	8008178 <_malloc_r+0x2c>
 80081de:	1cc4      	adds	r4, r0, #3
 80081e0:	f024 0403 	bic.w	r4, r4, #3
 80081e4:	42a0      	cmp	r0, r4
 80081e6:	d0e3      	beq.n	80081b0 <_malloc_r+0x64>
 80081e8:	1a21      	subs	r1, r4, r0
 80081ea:	4630      	mov	r0, r6
 80081ec:	f000 faf6 	bl	80087dc <_sbrk_r>
 80081f0:	3001      	adds	r0, #1
 80081f2:	d1dd      	bne.n	80081b0 <_malloc_r+0x64>
 80081f4:	e7cf      	b.n	8008196 <_malloc_r+0x4a>
 80081f6:	bf00      	nop
 80081f8:	20000460 	.word	0x20000460
 80081fc:	20000464 	.word	0x20000464

08008200 <__sfputc_r>:
 8008200:	6893      	ldr	r3, [r2, #8]
 8008202:	3b01      	subs	r3, #1
 8008204:	2b00      	cmp	r3, #0
 8008206:	b410      	push	{r4}
 8008208:	6093      	str	r3, [r2, #8]
 800820a:	da08      	bge.n	800821e <__sfputc_r+0x1e>
 800820c:	6994      	ldr	r4, [r2, #24]
 800820e:	42a3      	cmp	r3, r4
 8008210:	db01      	blt.n	8008216 <__sfputc_r+0x16>
 8008212:	290a      	cmp	r1, #10
 8008214:	d103      	bne.n	800821e <__sfputc_r+0x1e>
 8008216:	f85d 4b04 	ldr.w	r4, [sp], #4
 800821a:	f7ff bc69 	b.w	8007af0 <__swbuf_r>
 800821e:	6813      	ldr	r3, [r2, #0]
 8008220:	1c58      	adds	r0, r3, #1
 8008222:	6010      	str	r0, [r2, #0]
 8008224:	7019      	strb	r1, [r3, #0]
 8008226:	4608      	mov	r0, r1
 8008228:	f85d 4b04 	ldr.w	r4, [sp], #4
 800822c:	4770      	bx	lr

0800822e <__sfputs_r>:
 800822e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008230:	4606      	mov	r6, r0
 8008232:	460f      	mov	r7, r1
 8008234:	4614      	mov	r4, r2
 8008236:	18d5      	adds	r5, r2, r3
 8008238:	42ac      	cmp	r4, r5
 800823a:	d101      	bne.n	8008240 <__sfputs_r+0x12>
 800823c:	2000      	movs	r0, #0
 800823e:	e007      	b.n	8008250 <__sfputs_r+0x22>
 8008240:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008244:	463a      	mov	r2, r7
 8008246:	4630      	mov	r0, r6
 8008248:	f7ff ffda 	bl	8008200 <__sfputc_r>
 800824c:	1c43      	adds	r3, r0, #1
 800824e:	d1f3      	bne.n	8008238 <__sfputs_r+0xa>
 8008250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008254 <_vfiprintf_r>:
 8008254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008258:	460d      	mov	r5, r1
 800825a:	b09d      	sub	sp, #116	; 0x74
 800825c:	4614      	mov	r4, r2
 800825e:	4698      	mov	r8, r3
 8008260:	4606      	mov	r6, r0
 8008262:	b118      	cbz	r0, 800826c <_vfiprintf_r+0x18>
 8008264:	6983      	ldr	r3, [r0, #24]
 8008266:	b90b      	cbnz	r3, 800826c <_vfiprintf_r+0x18>
 8008268:	f7ff fe1c 	bl	8007ea4 <__sinit>
 800826c:	4b89      	ldr	r3, [pc, #548]	; (8008494 <_vfiprintf_r+0x240>)
 800826e:	429d      	cmp	r5, r3
 8008270:	d11b      	bne.n	80082aa <_vfiprintf_r+0x56>
 8008272:	6875      	ldr	r5, [r6, #4]
 8008274:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008276:	07d9      	lsls	r1, r3, #31
 8008278:	d405      	bmi.n	8008286 <_vfiprintf_r+0x32>
 800827a:	89ab      	ldrh	r3, [r5, #12]
 800827c:	059a      	lsls	r2, r3, #22
 800827e:	d402      	bmi.n	8008286 <_vfiprintf_r+0x32>
 8008280:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008282:	f7ff fead 	bl	8007fe0 <__retarget_lock_acquire_recursive>
 8008286:	89ab      	ldrh	r3, [r5, #12]
 8008288:	071b      	lsls	r3, r3, #28
 800828a:	d501      	bpl.n	8008290 <_vfiprintf_r+0x3c>
 800828c:	692b      	ldr	r3, [r5, #16]
 800828e:	b9eb      	cbnz	r3, 80082cc <_vfiprintf_r+0x78>
 8008290:	4629      	mov	r1, r5
 8008292:	4630      	mov	r0, r6
 8008294:	f7ff fc7e 	bl	8007b94 <__swsetup_r>
 8008298:	b1c0      	cbz	r0, 80082cc <_vfiprintf_r+0x78>
 800829a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800829c:	07dc      	lsls	r4, r3, #31
 800829e:	d50e      	bpl.n	80082be <_vfiprintf_r+0x6a>
 80082a0:	f04f 30ff 	mov.w	r0, #4294967295
 80082a4:	b01d      	add	sp, #116	; 0x74
 80082a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082aa:	4b7b      	ldr	r3, [pc, #492]	; (8008498 <_vfiprintf_r+0x244>)
 80082ac:	429d      	cmp	r5, r3
 80082ae:	d101      	bne.n	80082b4 <_vfiprintf_r+0x60>
 80082b0:	68b5      	ldr	r5, [r6, #8]
 80082b2:	e7df      	b.n	8008274 <_vfiprintf_r+0x20>
 80082b4:	4b79      	ldr	r3, [pc, #484]	; (800849c <_vfiprintf_r+0x248>)
 80082b6:	429d      	cmp	r5, r3
 80082b8:	bf08      	it	eq
 80082ba:	68f5      	ldreq	r5, [r6, #12]
 80082bc:	e7da      	b.n	8008274 <_vfiprintf_r+0x20>
 80082be:	89ab      	ldrh	r3, [r5, #12]
 80082c0:	0598      	lsls	r0, r3, #22
 80082c2:	d4ed      	bmi.n	80082a0 <_vfiprintf_r+0x4c>
 80082c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082c6:	f7ff fe8c 	bl	8007fe2 <__retarget_lock_release_recursive>
 80082ca:	e7e9      	b.n	80082a0 <_vfiprintf_r+0x4c>
 80082cc:	2300      	movs	r3, #0
 80082ce:	9309      	str	r3, [sp, #36]	; 0x24
 80082d0:	2320      	movs	r3, #32
 80082d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80082d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80082da:	2330      	movs	r3, #48	; 0x30
 80082dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80084a0 <_vfiprintf_r+0x24c>
 80082e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082e4:	f04f 0901 	mov.w	r9, #1
 80082e8:	4623      	mov	r3, r4
 80082ea:	469a      	mov	sl, r3
 80082ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082f0:	b10a      	cbz	r2, 80082f6 <_vfiprintf_r+0xa2>
 80082f2:	2a25      	cmp	r2, #37	; 0x25
 80082f4:	d1f9      	bne.n	80082ea <_vfiprintf_r+0x96>
 80082f6:	ebba 0b04 	subs.w	fp, sl, r4
 80082fa:	d00b      	beq.n	8008314 <_vfiprintf_r+0xc0>
 80082fc:	465b      	mov	r3, fp
 80082fe:	4622      	mov	r2, r4
 8008300:	4629      	mov	r1, r5
 8008302:	4630      	mov	r0, r6
 8008304:	f7ff ff93 	bl	800822e <__sfputs_r>
 8008308:	3001      	adds	r0, #1
 800830a:	f000 80aa 	beq.w	8008462 <_vfiprintf_r+0x20e>
 800830e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008310:	445a      	add	r2, fp
 8008312:	9209      	str	r2, [sp, #36]	; 0x24
 8008314:	f89a 3000 	ldrb.w	r3, [sl]
 8008318:	2b00      	cmp	r3, #0
 800831a:	f000 80a2 	beq.w	8008462 <_vfiprintf_r+0x20e>
 800831e:	2300      	movs	r3, #0
 8008320:	f04f 32ff 	mov.w	r2, #4294967295
 8008324:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008328:	f10a 0a01 	add.w	sl, sl, #1
 800832c:	9304      	str	r3, [sp, #16]
 800832e:	9307      	str	r3, [sp, #28]
 8008330:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008334:	931a      	str	r3, [sp, #104]	; 0x68
 8008336:	4654      	mov	r4, sl
 8008338:	2205      	movs	r2, #5
 800833a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800833e:	4858      	ldr	r0, [pc, #352]	; (80084a0 <_vfiprintf_r+0x24c>)
 8008340:	f7f7 ff46 	bl	80001d0 <memchr>
 8008344:	9a04      	ldr	r2, [sp, #16]
 8008346:	b9d8      	cbnz	r0, 8008380 <_vfiprintf_r+0x12c>
 8008348:	06d1      	lsls	r1, r2, #27
 800834a:	bf44      	itt	mi
 800834c:	2320      	movmi	r3, #32
 800834e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008352:	0713      	lsls	r3, r2, #28
 8008354:	bf44      	itt	mi
 8008356:	232b      	movmi	r3, #43	; 0x2b
 8008358:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800835c:	f89a 3000 	ldrb.w	r3, [sl]
 8008360:	2b2a      	cmp	r3, #42	; 0x2a
 8008362:	d015      	beq.n	8008390 <_vfiprintf_r+0x13c>
 8008364:	9a07      	ldr	r2, [sp, #28]
 8008366:	4654      	mov	r4, sl
 8008368:	2000      	movs	r0, #0
 800836a:	f04f 0c0a 	mov.w	ip, #10
 800836e:	4621      	mov	r1, r4
 8008370:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008374:	3b30      	subs	r3, #48	; 0x30
 8008376:	2b09      	cmp	r3, #9
 8008378:	d94e      	bls.n	8008418 <_vfiprintf_r+0x1c4>
 800837a:	b1b0      	cbz	r0, 80083aa <_vfiprintf_r+0x156>
 800837c:	9207      	str	r2, [sp, #28]
 800837e:	e014      	b.n	80083aa <_vfiprintf_r+0x156>
 8008380:	eba0 0308 	sub.w	r3, r0, r8
 8008384:	fa09 f303 	lsl.w	r3, r9, r3
 8008388:	4313      	orrs	r3, r2
 800838a:	9304      	str	r3, [sp, #16]
 800838c:	46a2      	mov	sl, r4
 800838e:	e7d2      	b.n	8008336 <_vfiprintf_r+0xe2>
 8008390:	9b03      	ldr	r3, [sp, #12]
 8008392:	1d19      	adds	r1, r3, #4
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	9103      	str	r1, [sp, #12]
 8008398:	2b00      	cmp	r3, #0
 800839a:	bfbb      	ittet	lt
 800839c:	425b      	neglt	r3, r3
 800839e:	f042 0202 	orrlt.w	r2, r2, #2
 80083a2:	9307      	strge	r3, [sp, #28]
 80083a4:	9307      	strlt	r3, [sp, #28]
 80083a6:	bfb8      	it	lt
 80083a8:	9204      	strlt	r2, [sp, #16]
 80083aa:	7823      	ldrb	r3, [r4, #0]
 80083ac:	2b2e      	cmp	r3, #46	; 0x2e
 80083ae:	d10c      	bne.n	80083ca <_vfiprintf_r+0x176>
 80083b0:	7863      	ldrb	r3, [r4, #1]
 80083b2:	2b2a      	cmp	r3, #42	; 0x2a
 80083b4:	d135      	bne.n	8008422 <_vfiprintf_r+0x1ce>
 80083b6:	9b03      	ldr	r3, [sp, #12]
 80083b8:	1d1a      	adds	r2, r3, #4
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	9203      	str	r2, [sp, #12]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	bfb8      	it	lt
 80083c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80083c6:	3402      	adds	r4, #2
 80083c8:	9305      	str	r3, [sp, #20]
 80083ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80084b0 <_vfiprintf_r+0x25c>
 80083ce:	7821      	ldrb	r1, [r4, #0]
 80083d0:	2203      	movs	r2, #3
 80083d2:	4650      	mov	r0, sl
 80083d4:	f7f7 fefc 	bl	80001d0 <memchr>
 80083d8:	b140      	cbz	r0, 80083ec <_vfiprintf_r+0x198>
 80083da:	2340      	movs	r3, #64	; 0x40
 80083dc:	eba0 000a 	sub.w	r0, r0, sl
 80083e0:	fa03 f000 	lsl.w	r0, r3, r0
 80083e4:	9b04      	ldr	r3, [sp, #16]
 80083e6:	4303      	orrs	r3, r0
 80083e8:	3401      	adds	r4, #1
 80083ea:	9304      	str	r3, [sp, #16]
 80083ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083f0:	482c      	ldr	r0, [pc, #176]	; (80084a4 <_vfiprintf_r+0x250>)
 80083f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083f6:	2206      	movs	r2, #6
 80083f8:	f7f7 feea 	bl	80001d0 <memchr>
 80083fc:	2800      	cmp	r0, #0
 80083fe:	d03f      	beq.n	8008480 <_vfiprintf_r+0x22c>
 8008400:	4b29      	ldr	r3, [pc, #164]	; (80084a8 <_vfiprintf_r+0x254>)
 8008402:	bb1b      	cbnz	r3, 800844c <_vfiprintf_r+0x1f8>
 8008404:	9b03      	ldr	r3, [sp, #12]
 8008406:	3307      	adds	r3, #7
 8008408:	f023 0307 	bic.w	r3, r3, #7
 800840c:	3308      	adds	r3, #8
 800840e:	9303      	str	r3, [sp, #12]
 8008410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008412:	443b      	add	r3, r7
 8008414:	9309      	str	r3, [sp, #36]	; 0x24
 8008416:	e767      	b.n	80082e8 <_vfiprintf_r+0x94>
 8008418:	fb0c 3202 	mla	r2, ip, r2, r3
 800841c:	460c      	mov	r4, r1
 800841e:	2001      	movs	r0, #1
 8008420:	e7a5      	b.n	800836e <_vfiprintf_r+0x11a>
 8008422:	2300      	movs	r3, #0
 8008424:	3401      	adds	r4, #1
 8008426:	9305      	str	r3, [sp, #20]
 8008428:	4619      	mov	r1, r3
 800842a:	f04f 0c0a 	mov.w	ip, #10
 800842e:	4620      	mov	r0, r4
 8008430:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008434:	3a30      	subs	r2, #48	; 0x30
 8008436:	2a09      	cmp	r2, #9
 8008438:	d903      	bls.n	8008442 <_vfiprintf_r+0x1ee>
 800843a:	2b00      	cmp	r3, #0
 800843c:	d0c5      	beq.n	80083ca <_vfiprintf_r+0x176>
 800843e:	9105      	str	r1, [sp, #20]
 8008440:	e7c3      	b.n	80083ca <_vfiprintf_r+0x176>
 8008442:	fb0c 2101 	mla	r1, ip, r1, r2
 8008446:	4604      	mov	r4, r0
 8008448:	2301      	movs	r3, #1
 800844a:	e7f0      	b.n	800842e <_vfiprintf_r+0x1da>
 800844c:	ab03      	add	r3, sp, #12
 800844e:	9300      	str	r3, [sp, #0]
 8008450:	462a      	mov	r2, r5
 8008452:	4b16      	ldr	r3, [pc, #88]	; (80084ac <_vfiprintf_r+0x258>)
 8008454:	a904      	add	r1, sp, #16
 8008456:	4630      	mov	r0, r6
 8008458:	f3af 8000 	nop.w
 800845c:	4607      	mov	r7, r0
 800845e:	1c78      	adds	r0, r7, #1
 8008460:	d1d6      	bne.n	8008410 <_vfiprintf_r+0x1bc>
 8008462:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008464:	07d9      	lsls	r1, r3, #31
 8008466:	d405      	bmi.n	8008474 <_vfiprintf_r+0x220>
 8008468:	89ab      	ldrh	r3, [r5, #12]
 800846a:	059a      	lsls	r2, r3, #22
 800846c:	d402      	bmi.n	8008474 <_vfiprintf_r+0x220>
 800846e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008470:	f7ff fdb7 	bl	8007fe2 <__retarget_lock_release_recursive>
 8008474:	89ab      	ldrh	r3, [r5, #12]
 8008476:	065b      	lsls	r3, r3, #25
 8008478:	f53f af12 	bmi.w	80082a0 <_vfiprintf_r+0x4c>
 800847c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800847e:	e711      	b.n	80082a4 <_vfiprintf_r+0x50>
 8008480:	ab03      	add	r3, sp, #12
 8008482:	9300      	str	r3, [sp, #0]
 8008484:	462a      	mov	r2, r5
 8008486:	4b09      	ldr	r3, [pc, #36]	; (80084ac <_vfiprintf_r+0x258>)
 8008488:	a904      	add	r1, sp, #16
 800848a:	4630      	mov	r0, r6
 800848c:	f000 f880 	bl	8008590 <_printf_i>
 8008490:	e7e4      	b.n	800845c <_vfiprintf_r+0x208>
 8008492:	bf00      	nop
 8008494:	080093ac 	.word	0x080093ac
 8008498:	080093cc 	.word	0x080093cc
 800849c:	0800938c 	.word	0x0800938c
 80084a0:	080093ec 	.word	0x080093ec
 80084a4:	080093f6 	.word	0x080093f6
 80084a8:	00000000 	.word	0x00000000
 80084ac:	0800822f 	.word	0x0800822f
 80084b0:	080093f2 	.word	0x080093f2

080084b4 <_printf_common>:
 80084b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084b8:	4616      	mov	r6, r2
 80084ba:	4699      	mov	r9, r3
 80084bc:	688a      	ldr	r2, [r1, #8]
 80084be:	690b      	ldr	r3, [r1, #16]
 80084c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80084c4:	4293      	cmp	r3, r2
 80084c6:	bfb8      	it	lt
 80084c8:	4613      	movlt	r3, r2
 80084ca:	6033      	str	r3, [r6, #0]
 80084cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80084d0:	4607      	mov	r7, r0
 80084d2:	460c      	mov	r4, r1
 80084d4:	b10a      	cbz	r2, 80084da <_printf_common+0x26>
 80084d6:	3301      	adds	r3, #1
 80084d8:	6033      	str	r3, [r6, #0]
 80084da:	6823      	ldr	r3, [r4, #0]
 80084dc:	0699      	lsls	r1, r3, #26
 80084de:	bf42      	ittt	mi
 80084e0:	6833      	ldrmi	r3, [r6, #0]
 80084e2:	3302      	addmi	r3, #2
 80084e4:	6033      	strmi	r3, [r6, #0]
 80084e6:	6825      	ldr	r5, [r4, #0]
 80084e8:	f015 0506 	ands.w	r5, r5, #6
 80084ec:	d106      	bne.n	80084fc <_printf_common+0x48>
 80084ee:	f104 0a19 	add.w	sl, r4, #25
 80084f2:	68e3      	ldr	r3, [r4, #12]
 80084f4:	6832      	ldr	r2, [r6, #0]
 80084f6:	1a9b      	subs	r3, r3, r2
 80084f8:	42ab      	cmp	r3, r5
 80084fa:	dc26      	bgt.n	800854a <_printf_common+0x96>
 80084fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008500:	1e13      	subs	r3, r2, #0
 8008502:	6822      	ldr	r2, [r4, #0]
 8008504:	bf18      	it	ne
 8008506:	2301      	movne	r3, #1
 8008508:	0692      	lsls	r2, r2, #26
 800850a:	d42b      	bmi.n	8008564 <_printf_common+0xb0>
 800850c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008510:	4649      	mov	r1, r9
 8008512:	4638      	mov	r0, r7
 8008514:	47c0      	blx	r8
 8008516:	3001      	adds	r0, #1
 8008518:	d01e      	beq.n	8008558 <_printf_common+0xa4>
 800851a:	6823      	ldr	r3, [r4, #0]
 800851c:	68e5      	ldr	r5, [r4, #12]
 800851e:	6832      	ldr	r2, [r6, #0]
 8008520:	f003 0306 	and.w	r3, r3, #6
 8008524:	2b04      	cmp	r3, #4
 8008526:	bf08      	it	eq
 8008528:	1aad      	subeq	r5, r5, r2
 800852a:	68a3      	ldr	r3, [r4, #8]
 800852c:	6922      	ldr	r2, [r4, #16]
 800852e:	bf0c      	ite	eq
 8008530:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008534:	2500      	movne	r5, #0
 8008536:	4293      	cmp	r3, r2
 8008538:	bfc4      	itt	gt
 800853a:	1a9b      	subgt	r3, r3, r2
 800853c:	18ed      	addgt	r5, r5, r3
 800853e:	2600      	movs	r6, #0
 8008540:	341a      	adds	r4, #26
 8008542:	42b5      	cmp	r5, r6
 8008544:	d11a      	bne.n	800857c <_printf_common+0xc8>
 8008546:	2000      	movs	r0, #0
 8008548:	e008      	b.n	800855c <_printf_common+0xa8>
 800854a:	2301      	movs	r3, #1
 800854c:	4652      	mov	r2, sl
 800854e:	4649      	mov	r1, r9
 8008550:	4638      	mov	r0, r7
 8008552:	47c0      	blx	r8
 8008554:	3001      	adds	r0, #1
 8008556:	d103      	bne.n	8008560 <_printf_common+0xac>
 8008558:	f04f 30ff 	mov.w	r0, #4294967295
 800855c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008560:	3501      	adds	r5, #1
 8008562:	e7c6      	b.n	80084f2 <_printf_common+0x3e>
 8008564:	18e1      	adds	r1, r4, r3
 8008566:	1c5a      	adds	r2, r3, #1
 8008568:	2030      	movs	r0, #48	; 0x30
 800856a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800856e:	4422      	add	r2, r4
 8008570:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008574:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008578:	3302      	adds	r3, #2
 800857a:	e7c7      	b.n	800850c <_printf_common+0x58>
 800857c:	2301      	movs	r3, #1
 800857e:	4622      	mov	r2, r4
 8008580:	4649      	mov	r1, r9
 8008582:	4638      	mov	r0, r7
 8008584:	47c0      	blx	r8
 8008586:	3001      	adds	r0, #1
 8008588:	d0e6      	beq.n	8008558 <_printf_common+0xa4>
 800858a:	3601      	adds	r6, #1
 800858c:	e7d9      	b.n	8008542 <_printf_common+0x8e>
	...

08008590 <_printf_i>:
 8008590:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008594:	460c      	mov	r4, r1
 8008596:	4691      	mov	r9, r2
 8008598:	7e27      	ldrb	r7, [r4, #24]
 800859a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800859c:	2f78      	cmp	r7, #120	; 0x78
 800859e:	4680      	mov	r8, r0
 80085a0:	469a      	mov	sl, r3
 80085a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085a6:	d807      	bhi.n	80085b8 <_printf_i+0x28>
 80085a8:	2f62      	cmp	r7, #98	; 0x62
 80085aa:	d80a      	bhi.n	80085c2 <_printf_i+0x32>
 80085ac:	2f00      	cmp	r7, #0
 80085ae:	f000 80d8 	beq.w	8008762 <_printf_i+0x1d2>
 80085b2:	2f58      	cmp	r7, #88	; 0x58
 80085b4:	f000 80a3 	beq.w	80086fe <_printf_i+0x16e>
 80085b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80085bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80085c0:	e03a      	b.n	8008638 <_printf_i+0xa8>
 80085c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80085c6:	2b15      	cmp	r3, #21
 80085c8:	d8f6      	bhi.n	80085b8 <_printf_i+0x28>
 80085ca:	a001      	add	r0, pc, #4	; (adr r0, 80085d0 <_printf_i+0x40>)
 80085cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80085d0:	08008629 	.word	0x08008629
 80085d4:	0800863d 	.word	0x0800863d
 80085d8:	080085b9 	.word	0x080085b9
 80085dc:	080085b9 	.word	0x080085b9
 80085e0:	080085b9 	.word	0x080085b9
 80085e4:	080085b9 	.word	0x080085b9
 80085e8:	0800863d 	.word	0x0800863d
 80085ec:	080085b9 	.word	0x080085b9
 80085f0:	080085b9 	.word	0x080085b9
 80085f4:	080085b9 	.word	0x080085b9
 80085f8:	080085b9 	.word	0x080085b9
 80085fc:	08008749 	.word	0x08008749
 8008600:	0800866d 	.word	0x0800866d
 8008604:	0800872b 	.word	0x0800872b
 8008608:	080085b9 	.word	0x080085b9
 800860c:	080085b9 	.word	0x080085b9
 8008610:	0800876b 	.word	0x0800876b
 8008614:	080085b9 	.word	0x080085b9
 8008618:	0800866d 	.word	0x0800866d
 800861c:	080085b9 	.word	0x080085b9
 8008620:	080085b9 	.word	0x080085b9
 8008624:	08008733 	.word	0x08008733
 8008628:	680b      	ldr	r3, [r1, #0]
 800862a:	1d1a      	adds	r2, r3, #4
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	600a      	str	r2, [r1, #0]
 8008630:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008634:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008638:	2301      	movs	r3, #1
 800863a:	e0a3      	b.n	8008784 <_printf_i+0x1f4>
 800863c:	6825      	ldr	r5, [r4, #0]
 800863e:	6808      	ldr	r0, [r1, #0]
 8008640:	062e      	lsls	r6, r5, #24
 8008642:	f100 0304 	add.w	r3, r0, #4
 8008646:	d50a      	bpl.n	800865e <_printf_i+0xce>
 8008648:	6805      	ldr	r5, [r0, #0]
 800864a:	600b      	str	r3, [r1, #0]
 800864c:	2d00      	cmp	r5, #0
 800864e:	da03      	bge.n	8008658 <_printf_i+0xc8>
 8008650:	232d      	movs	r3, #45	; 0x2d
 8008652:	426d      	negs	r5, r5
 8008654:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008658:	485e      	ldr	r0, [pc, #376]	; (80087d4 <_printf_i+0x244>)
 800865a:	230a      	movs	r3, #10
 800865c:	e019      	b.n	8008692 <_printf_i+0x102>
 800865e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008662:	6805      	ldr	r5, [r0, #0]
 8008664:	600b      	str	r3, [r1, #0]
 8008666:	bf18      	it	ne
 8008668:	b22d      	sxthne	r5, r5
 800866a:	e7ef      	b.n	800864c <_printf_i+0xbc>
 800866c:	680b      	ldr	r3, [r1, #0]
 800866e:	6825      	ldr	r5, [r4, #0]
 8008670:	1d18      	adds	r0, r3, #4
 8008672:	6008      	str	r0, [r1, #0]
 8008674:	0628      	lsls	r0, r5, #24
 8008676:	d501      	bpl.n	800867c <_printf_i+0xec>
 8008678:	681d      	ldr	r5, [r3, #0]
 800867a:	e002      	b.n	8008682 <_printf_i+0xf2>
 800867c:	0669      	lsls	r1, r5, #25
 800867e:	d5fb      	bpl.n	8008678 <_printf_i+0xe8>
 8008680:	881d      	ldrh	r5, [r3, #0]
 8008682:	4854      	ldr	r0, [pc, #336]	; (80087d4 <_printf_i+0x244>)
 8008684:	2f6f      	cmp	r7, #111	; 0x6f
 8008686:	bf0c      	ite	eq
 8008688:	2308      	moveq	r3, #8
 800868a:	230a      	movne	r3, #10
 800868c:	2100      	movs	r1, #0
 800868e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008692:	6866      	ldr	r6, [r4, #4]
 8008694:	60a6      	str	r6, [r4, #8]
 8008696:	2e00      	cmp	r6, #0
 8008698:	bfa2      	ittt	ge
 800869a:	6821      	ldrge	r1, [r4, #0]
 800869c:	f021 0104 	bicge.w	r1, r1, #4
 80086a0:	6021      	strge	r1, [r4, #0]
 80086a2:	b90d      	cbnz	r5, 80086a8 <_printf_i+0x118>
 80086a4:	2e00      	cmp	r6, #0
 80086a6:	d04d      	beq.n	8008744 <_printf_i+0x1b4>
 80086a8:	4616      	mov	r6, r2
 80086aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80086ae:	fb03 5711 	mls	r7, r3, r1, r5
 80086b2:	5dc7      	ldrb	r7, [r0, r7]
 80086b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80086b8:	462f      	mov	r7, r5
 80086ba:	42bb      	cmp	r3, r7
 80086bc:	460d      	mov	r5, r1
 80086be:	d9f4      	bls.n	80086aa <_printf_i+0x11a>
 80086c0:	2b08      	cmp	r3, #8
 80086c2:	d10b      	bne.n	80086dc <_printf_i+0x14c>
 80086c4:	6823      	ldr	r3, [r4, #0]
 80086c6:	07df      	lsls	r7, r3, #31
 80086c8:	d508      	bpl.n	80086dc <_printf_i+0x14c>
 80086ca:	6923      	ldr	r3, [r4, #16]
 80086cc:	6861      	ldr	r1, [r4, #4]
 80086ce:	4299      	cmp	r1, r3
 80086d0:	bfde      	ittt	le
 80086d2:	2330      	movle	r3, #48	; 0x30
 80086d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80086d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80086dc:	1b92      	subs	r2, r2, r6
 80086de:	6122      	str	r2, [r4, #16]
 80086e0:	f8cd a000 	str.w	sl, [sp]
 80086e4:	464b      	mov	r3, r9
 80086e6:	aa03      	add	r2, sp, #12
 80086e8:	4621      	mov	r1, r4
 80086ea:	4640      	mov	r0, r8
 80086ec:	f7ff fee2 	bl	80084b4 <_printf_common>
 80086f0:	3001      	adds	r0, #1
 80086f2:	d14c      	bne.n	800878e <_printf_i+0x1fe>
 80086f4:	f04f 30ff 	mov.w	r0, #4294967295
 80086f8:	b004      	add	sp, #16
 80086fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086fe:	4835      	ldr	r0, [pc, #212]	; (80087d4 <_printf_i+0x244>)
 8008700:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008704:	6823      	ldr	r3, [r4, #0]
 8008706:	680e      	ldr	r6, [r1, #0]
 8008708:	061f      	lsls	r7, r3, #24
 800870a:	f856 5b04 	ldr.w	r5, [r6], #4
 800870e:	600e      	str	r6, [r1, #0]
 8008710:	d514      	bpl.n	800873c <_printf_i+0x1ac>
 8008712:	07d9      	lsls	r1, r3, #31
 8008714:	bf44      	itt	mi
 8008716:	f043 0320 	orrmi.w	r3, r3, #32
 800871a:	6023      	strmi	r3, [r4, #0]
 800871c:	b91d      	cbnz	r5, 8008726 <_printf_i+0x196>
 800871e:	6823      	ldr	r3, [r4, #0]
 8008720:	f023 0320 	bic.w	r3, r3, #32
 8008724:	6023      	str	r3, [r4, #0]
 8008726:	2310      	movs	r3, #16
 8008728:	e7b0      	b.n	800868c <_printf_i+0xfc>
 800872a:	6823      	ldr	r3, [r4, #0]
 800872c:	f043 0320 	orr.w	r3, r3, #32
 8008730:	6023      	str	r3, [r4, #0]
 8008732:	2378      	movs	r3, #120	; 0x78
 8008734:	4828      	ldr	r0, [pc, #160]	; (80087d8 <_printf_i+0x248>)
 8008736:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800873a:	e7e3      	b.n	8008704 <_printf_i+0x174>
 800873c:	065e      	lsls	r6, r3, #25
 800873e:	bf48      	it	mi
 8008740:	b2ad      	uxthmi	r5, r5
 8008742:	e7e6      	b.n	8008712 <_printf_i+0x182>
 8008744:	4616      	mov	r6, r2
 8008746:	e7bb      	b.n	80086c0 <_printf_i+0x130>
 8008748:	680b      	ldr	r3, [r1, #0]
 800874a:	6826      	ldr	r6, [r4, #0]
 800874c:	6960      	ldr	r0, [r4, #20]
 800874e:	1d1d      	adds	r5, r3, #4
 8008750:	600d      	str	r5, [r1, #0]
 8008752:	0635      	lsls	r5, r6, #24
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	d501      	bpl.n	800875c <_printf_i+0x1cc>
 8008758:	6018      	str	r0, [r3, #0]
 800875a:	e002      	b.n	8008762 <_printf_i+0x1d2>
 800875c:	0671      	lsls	r1, r6, #25
 800875e:	d5fb      	bpl.n	8008758 <_printf_i+0x1c8>
 8008760:	8018      	strh	r0, [r3, #0]
 8008762:	2300      	movs	r3, #0
 8008764:	6123      	str	r3, [r4, #16]
 8008766:	4616      	mov	r6, r2
 8008768:	e7ba      	b.n	80086e0 <_printf_i+0x150>
 800876a:	680b      	ldr	r3, [r1, #0]
 800876c:	1d1a      	adds	r2, r3, #4
 800876e:	600a      	str	r2, [r1, #0]
 8008770:	681e      	ldr	r6, [r3, #0]
 8008772:	6862      	ldr	r2, [r4, #4]
 8008774:	2100      	movs	r1, #0
 8008776:	4630      	mov	r0, r6
 8008778:	f7f7 fd2a 	bl	80001d0 <memchr>
 800877c:	b108      	cbz	r0, 8008782 <_printf_i+0x1f2>
 800877e:	1b80      	subs	r0, r0, r6
 8008780:	6060      	str	r0, [r4, #4]
 8008782:	6863      	ldr	r3, [r4, #4]
 8008784:	6123      	str	r3, [r4, #16]
 8008786:	2300      	movs	r3, #0
 8008788:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800878c:	e7a8      	b.n	80086e0 <_printf_i+0x150>
 800878e:	6923      	ldr	r3, [r4, #16]
 8008790:	4632      	mov	r2, r6
 8008792:	4649      	mov	r1, r9
 8008794:	4640      	mov	r0, r8
 8008796:	47d0      	blx	sl
 8008798:	3001      	adds	r0, #1
 800879a:	d0ab      	beq.n	80086f4 <_printf_i+0x164>
 800879c:	6823      	ldr	r3, [r4, #0]
 800879e:	079b      	lsls	r3, r3, #30
 80087a0:	d413      	bmi.n	80087ca <_printf_i+0x23a>
 80087a2:	68e0      	ldr	r0, [r4, #12]
 80087a4:	9b03      	ldr	r3, [sp, #12]
 80087a6:	4298      	cmp	r0, r3
 80087a8:	bfb8      	it	lt
 80087aa:	4618      	movlt	r0, r3
 80087ac:	e7a4      	b.n	80086f8 <_printf_i+0x168>
 80087ae:	2301      	movs	r3, #1
 80087b0:	4632      	mov	r2, r6
 80087b2:	4649      	mov	r1, r9
 80087b4:	4640      	mov	r0, r8
 80087b6:	47d0      	blx	sl
 80087b8:	3001      	adds	r0, #1
 80087ba:	d09b      	beq.n	80086f4 <_printf_i+0x164>
 80087bc:	3501      	adds	r5, #1
 80087be:	68e3      	ldr	r3, [r4, #12]
 80087c0:	9903      	ldr	r1, [sp, #12]
 80087c2:	1a5b      	subs	r3, r3, r1
 80087c4:	42ab      	cmp	r3, r5
 80087c6:	dcf2      	bgt.n	80087ae <_printf_i+0x21e>
 80087c8:	e7eb      	b.n	80087a2 <_printf_i+0x212>
 80087ca:	2500      	movs	r5, #0
 80087cc:	f104 0619 	add.w	r6, r4, #25
 80087d0:	e7f5      	b.n	80087be <_printf_i+0x22e>
 80087d2:	bf00      	nop
 80087d4:	080093fd 	.word	0x080093fd
 80087d8:	0800940e 	.word	0x0800940e

080087dc <_sbrk_r>:
 80087dc:	b538      	push	{r3, r4, r5, lr}
 80087de:	4d06      	ldr	r5, [pc, #24]	; (80087f8 <_sbrk_r+0x1c>)
 80087e0:	2300      	movs	r3, #0
 80087e2:	4604      	mov	r4, r0
 80087e4:	4608      	mov	r0, r1
 80087e6:	602b      	str	r3, [r5, #0]
 80087e8:	f7f7 ffe4 	bl	80007b4 <_sbrk>
 80087ec:	1c43      	adds	r3, r0, #1
 80087ee:	d102      	bne.n	80087f6 <_sbrk_r+0x1a>
 80087f0:	682b      	ldr	r3, [r5, #0]
 80087f2:	b103      	cbz	r3, 80087f6 <_sbrk_r+0x1a>
 80087f4:	6023      	str	r3, [r4, #0]
 80087f6:	bd38      	pop	{r3, r4, r5, pc}
 80087f8:	20001d84 	.word	0x20001d84

080087fc <__sread>:
 80087fc:	b510      	push	{r4, lr}
 80087fe:	460c      	mov	r4, r1
 8008800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008804:	f000 f8a0 	bl	8008948 <_read_r>
 8008808:	2800      	cmp	r0, #0
 800880a:	bfab      	itete	ge
 800880c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800880e:	89a3      	ldrhlt	r3, [r4, #12]
 8008810:	181b      	addge	r3, r3, r0
 8008812:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008816:	bfac      	ite	ge
 8008818:	6563      	strge	r3, [r4, #84]	; 0x54
 800881a:	81a3      	strhlt	r3, [r4, #12]
 800881c:	bd10      	pop	{r4, pc}

0800881e <__swrite>:
 800881e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008822:	461f      	mov	r7, r3
 8008824:	898b      	ldrh	r3, [r1, #12]
 8008826:	05db      	lsls	r3, r3, #23
 8008828:	4605      	mov	r5, r0
 800882a:	460c      	mov	r4, r1
 800882c:	4616      	mov	r6, r2
 800882e:	d505      	bpl.n	800883c <__swrite+0x1e>
 8008830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008834:	2302      	movs	r3, #2
 8008836:	2200      	movs	r2, #0
 8008838:	f000 f868 	bl	800890c <_lseek_r>
 800883c:	89a3      	ldrh	r3, [r4, #12]
 800883e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008842:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008846:	81a3      	strh	r3, [r4, #12]
 8008848:	4632      	mov	r2, r6
 800884a:	463b      	mov	r3, r7
 800884c:	4628      	mov	r0, r5
 800884e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008852:	f000 b817 	b.w	8008884 <_write_r>

08008856 <__sseek>:
 8008856:	b510      	push	{r4, lr}
 8008858:	460c      	mov	r4, r1
 800885a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800885e:	f000 f855 	bl	800890c <_lseek_r>
 8008862:	1c43      	adds	r3, r0, #1
 8008864:	89a3      	ldrh	r3, [r4, #12]
 8008866:	bf15      	itete	ne
 8008868:	6560      	strne	r0, [r4, #84]	; 0x54
 800886a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800886e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008872:	81a3      	strheq	r3, [r4, #12]
 8008874:	bf18      	it	ne
 8008876:	81a3      	strhne	r3, [r4, #12]
 8008878:	bd10      	pop	{r4, pc}

0800887a <__sclose>:
 800887a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800887e:	f000 b813 	b.w	80088a8 <_close_r>
	...

08008884 <_write_r>:
 8008884:	b538      	push	{r3, r4, r5, lr}
 8008886:	4d07      	ldr	r5, [pc, #28]	; (80088a4 <_write_r+0x20>)
 8008888:	4604      	mov	r4, r0
 800888a:	4608      	mov	r0, r1
 800888c:	4611      	mov	r1, r2
 800888e:	2200      	movs	r2, #0
 8008890:	602a      	str	r2, [r5, #0]
 8008892:	461a      	mov	r2, r3
 8008894:	f7f7 fd13 	bl	80002be <_write>
 8008898:	1c43      	adds	r3, r0, #1
 800889a:	d102      	bne.n	80088a2 <_write_r+0x1e>
 800889c:	682b      	ldr	r3, [r5, #0]
 800889e:	b103      	cbz	r3, 80088a2 <_write_r+0x1e>
 80088a0:	6023      	str	r3, [r4, #0]
 80088a2:	bd38      	pop	{r3, r4, r5, pc}
 80088a4:	20001d84 	.word	0x20001d84

080088a8 <_close_r>:
 80088a8:	b538      	push	{r3, r4, r5, lr}
 80088aa:	4d06      	ldr	r5, [pc, #24]	; (80088c4 <_close_r+0x1c>)
 80088ac:	2300      	movs	r3, #0
 80088ae:	4604      	mov	r4, r0
 80088b0:	4608      	mov	r0, r1
 80088b2:	602b      	str	r3, [r5, #0]
 80088b4:	f7f7 ff49 	bl	800074a <_close>
 80088b8:	1c43      	adds	r3, r0, #1
 80088ba:	d102      	bne.n	80088c2 <_close_r+0x1a>
 80088bc:	682b      	ldr	r3, [r5, #0]
 80088be:	b103      	cbz	r3, 80088c2 <_close_r+0x1a>
 80088c0:	6023      	str	r3, [r4, #0]
 80088c2:	bd38      	pop	{r3, r4, r5, pc}
 80088c4:	20001d84 	.word	0x20001d84

080088c8 <_fstat_r>:
 80088c8:	b538      	push	{r3, r4, r5, lr}
 80088ca:	4d07      	ldr	r5, [pc, #28]	; (80088e8 <_fstat_r+0x20>)
 80088cc:	2300      	movs	r3, #0
 80088ce:	4604      	mov	r4, r0
 80088d0:	4608      	mov	r0, r1
 80088d2:	4611      	mov	r1, r2
 80088d4:	602b      	str	r3, [r5, #0]
 80088d6:	f7f7 ff44 	bl	8000762 <_fstat>
 80088da:	1c43      	adds	r3, r0, #1
 80088dc:	d102      	bne.n	80088e4 <_fstat_r+0x1c>
 80088de:	682b      	ldr	r3, [r5, #0]
 80088e0:	b103      	cbz	r3, 80088e4 <_fstat_r+0x1c>
 80088e2:	6023      	str	r3, [r4, #0]
 80088e4:	bd38      	pop	{r3, r4, r5, pc}
 80088e6:	bf00      	nop
 80088e8:	20001d84 	.word	0x20001d84

080088ec <_isatty_r>:
 80088ec:	b538      	push	{r3, r4, r5, lr}
 80088ee:	4d06      	ldr	r5, [pc, #24]	; (8008908 <_isatty_r+0x1c>)
 80088f0:	2300      	movs	r3, #0
 80088f2:	4604      	mov	r4, r0
 80088f4:	4608      	mov	r0, r1
 80088f6:	602b      	str	r3, [r5, #0]
 80088f8:	f7f7 ff43 	bl	8000782 <_isatty>
 80088fc:	1c43      	adds	r3, r0, #1
 80088fe:	d102      	bne.n	8008906 <_isatty_r+0x1a>
 8008900:	682b      	ldr	r3, [r5, #0]
 8008902:	b103      	cbz	r3, 8008906 <_isatty_r+0x1a>
 8008904:	6023      	str	r3, [r4, #0]
 8008906:	bd38      	pop	{r3, r4, r5, pc}
 8008908:	20001d84 	.word	0x20001d84

0800890c <_lseek_r>:
 800890c:	b538      	push	{r3, r4, r5, lr}
 800890e:	4d07      	ldr	r5, [pc, #28]	; (800892c <_lseek_r+0x20>)
 8008910:	4604      	mov	r4, r0
 8008912:	4608      	mov	r0, r1
 8008914:	4611      	mov	r1, r2
 8008916:	2200      	movs	r2, #0
 8008918:	602a      	str	r2, [r5, #0]
 800891a:	461a      	mov	r2, r3
 800891c:	f7f7 ff3c 	bl	8000798 <_lseek>
 8008920:	1c43      	adds	r3, r0, #1
 8008922:	d102      	bne.n	800892a <_lseek_r+0x1e>
 8008924:	682b      	ldr	r3, [r5, #0]
 8008926:	b103      	cbz	r3, 800892a <_lseek_r+0x1e>
 8008928:	6023      	str	r3, [r4, #0]
 800892a:	bd38      	pop	{r3, r4, r5, pc}
 800892c:	20001d84 	.word	0x20001d84

08008930 <__malloc_lock>:
 8008930:	4801      	ldr	r0, [pc, #4]	; (8008938 <__malloc_lock+0x8>)
 8008932:	f7ff bb55 	b.w	8007fe0 <__retarget_lock_acquire_recursive>
 8008936:	bf00      	nop
 8008938:	20001d7c 	.word	0x20001d7c

0800893c <__malloc_unlock>:
 800893c:	4801      	ldr	r0, [pc, #4]	; (8008944 <__malloc_unlock+0x8>)
 800893e:	f7ff bb50 	b.w	8007fe2 <__retarget_lock_release_recursive>
 8008942:	bf00      	nop
 8008944:	20001d7c 	.word	0x20001d7c

08008948 <_read_r>:
 8008948:	b538      	push	{r3, r4, r5, lr}
 800894a:	4d07      	ldr	r5, [pc, #28]	; (8008968 <_read_r+0x20>)
 800894c:	4604      	mov	r4, r0
 800894e:	4608      	mov	r0, r1
 8008950:	4611      	mov	r1, r2
 8008952:	2200      	movs	r2, #0
 8008954:	602a      	str	r2, [r5, #0]
 8008956:	461a      	mov	r2, r3
 8008958:	f7f7 feda 	bl	8000710 <_read>
 800895c:	1c43      	adds	r3, r0, #1
 800895e:	d102      	bne.n	8008966 <_read_r+0x1e>
 8008960:	682b      	ldr	r3, [r5, #0]
 8008962:	b103      	cbz	r3, 8008966 <_read_r+0x1e>
 8008964:	6023      	str	r3, [r4, #0]
 8008966:	bd38      	pop	{r3, r4, r5, pc}
 8008968:	20001d84 	.word	0x20001d84

0800896c <_init>:
 800896c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800896e:	bf00      	nop
 8008970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008972:	bc08      	pop	{r3}
 8008974:	469e      	mov	lr, r3
 8008976:	4770      	bx	lr

08008978 <_fini>:
 8008978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800897a:	bf00      	nop
 800897c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800897e:	bc08      	pop	{r3}
 8008980:	469e      	mov	lr, r3
 8008982:	4770      	bx	lr
