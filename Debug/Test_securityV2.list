
Test_securityV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006928  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ab4  08006ab0  08006ab0  00016ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007564  08007564  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08007564  08007564  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007564  08007564  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007564  08007564  00017564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007568  08007568  00017568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800756c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ac  20000024  08007590  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d0  08007590  000204d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001db91  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036b7  00000000  00000000  0003dbe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e0  00000000  00000000  000412a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001168  00000000  00000000  00042580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a03f  00000000  00000000  000436e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001814f  00000000  00000000  0006d727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8905  00000000  00000000  00085876  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017e17b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e0c  00000000  00000000  0017e1d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006a98 	.word	0x08006a98

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	08006a98 	.word	0x08006a98

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	f5ad 7d3a 	sub.w	sp, sp, #744	; 0x2e8
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d0:	f001 f93e 	bl	8001450 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d4:	f000 f834 	bl	8000240 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d8:	f000 f8f2 	bl	80003c0 <MX_GPIO_Init>
  MX_RNG_Init();
 80001dc:	f000 f8dc 	bl	8000398 <MX_RNG_Init>
  //MX_USB_DEVICE_Init();
  MX_CRC_Init();
 80001e0:	f000 f8ba 	bl	8000358 <MX_CRC_Init>

  uint8_t Decrypted_data[64];

  // Initialize AES Context by using fixed symmetric key

  Error = aesInit(&Aes_Handler, Sym_Key, CRL_AES192_KEY);
 80001e4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80001e8:	2218      	movs	r2, #24
 80001ea:	4913      	ldr	r1, [pc, #76]	; (8000238 <main+0x70>)
 80001ec:	4618      	mov	r0, r3
 80001ee:	f000 fa81 	bl	80006f4 <aesInit>
 80001f2:	4603      	mov	r3, r0
 80001f4:	f8a7 32e6 	strh.w	r3, [r7, #742]	; 0x2e6
  if(Error != NO_ERROR )
 80001f8:	f8b7 32e6 	ldrh.w	r3, [r7, #742]	; 0x2e6
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d001      	beq.n	8000204 <main+0x3c>
  {
	  Error_Handler();
 8000200:	f000 f91c 	bl	800043c <Error_Handler>
  }

  // Encrypt data
  aesEncryptBlock(&Aes_Handler, Plaintext, Encrypted_data);
 8000204:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000208:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800020c:	490b      	ldr	r1, [pc, #44]	; (800023c <main+0x74>)
 800020e:	4618      	mov	r0, r3
 8000210:	f000 fc30 	bl	8000a74 <aesEncryptBlock>

  // Decrypt Data
  aesDecryptBlock(&Aes_Handler, Encrypted_data, Decrypted_data);
 8000214:	463a      	mov	r2, r7
 8000216:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800021a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800021e:	4618      	mov	r0, r3
 8000220:	f000 fe9a 	bl	8000f58 <aesDecryptBlock>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000224:	2120      	movs	r1, #32
 8000226:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800022a:	f001 fce7 	bl	8001bfc <HAL_GPIO_TogglePin>
	  HAL_Delay(2000);
 800022e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000232:	f001 f931 	bl	8001498 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000236:	e7f5      	b.n	8000224 <main+0x5c>
 8000238:	20000000 	.word	0x20000000
 800023c:	08006ab0 	.word	0x08006ab0

08000240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b0b8      	sub	sp, #224	; 0xe0
 8000244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000246:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800024a:	2244      	movs	r2, #68	; 0x44
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f006 fc1a 	bl	8006a88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000254:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000258:	2200      	movs	r2, #0
 800025a:	601a      	str	r2, [r3, #0]
 800025c:	605a      	str	r2, [r3, #4]
 800025e:	609a      	str	r2, [r3, #8]
 8000260:	60da      	str	r2, [r3, #12]
 8000262:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000264:	463b      	mov	r3, r7
 8000266:	2288      	movs	r2, #136	; 0x88
 8000268:	2100      	movs	r1, #0
 800026a:	4618      	mov	r0, r3
 800026c:	f006 fc0c 	bl	8006a88 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000270:	2310      	movs	r3, #16
 8000272:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000276:	2301      	movs	r3, #1
 8000278:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800027c:	2300      	movs	r3, #0
 800027e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000282:	2360      	movs	r3, #96	; 0x60
 8000284:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000288:	2302      	movs	r3, #2
 800028a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800028e:	2301      	movs	r3, #1
 8000290:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000294:	2301      	movs	r3, #1
 8000296:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 800029a:	2328      	movs	r3, #40	; 0x28
 800029c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80002a0:	2307      	movs	r3, #7
 80002a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002a6:	2302      	movs	r3, #2
 80002a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002ac:	2302      	movs	r3, #2
 80002ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80002b6:	4618      	mov	r0, r3
 80002b8:	f002 fb8c 	bl	80029d4 <HAL_RCC_OscConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80002c2:	f000 f8bb 	bl	800043c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c6:	230f      	movs	r3, #15
 80002c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002cc:	2303      	movs	r3, #3
 80002ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d8:	2300      	movs	r3, #0
 80002da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002de:	2300      	movs	r3, #0
 80002e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002e4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80002e8:	2104      	movs	r1, #4
 80002ea:	4618      	mov	r0, r3
 80002ec:	f002 ff58 	bl	80031a0 <HAL_RCC_ClockConfig>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0xba>
  {
    Error_Handler();
 80002f6:	f000 f8a1 	bl	800043c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_RNG;
 80002fa:	f44f 2384 	mov.w	r3, #270336	; 0x42000
 80002fe:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000300:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000304:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8000306:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800030a:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800030c:	2301      	movs	r3, #1
 800030e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000310:	2301      	movs	r3, #1
 8000312:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000314:	2318      	movs	r3, #24
 8000316:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000318:	2307      	movs	r3, #7
 800031a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800031c:	2302      	movs	r3, #2
 800031e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000320:	2302      	movs	r3, #2
 8000322:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000324:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000328:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800032a:	463b      	mov	r3, r7
 800032c:	4618      	mov	r0, r3
 800032e:	f003 f959 	bl	80035e4 <HAL_RCCEx_PeriphCLKConfig>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000338:	f000 f880 	bl	800043c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800033c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000340:	f002 faf2 	bl	8002928 <HAL_PWREx_ControlVoltageScaling>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0x10e>
  {
    Error_Handler();
 800034a:	f000 f877 	bl	800043c <Error_Handler>
  }
}
 800034e:	bf00      	nop
 8000350:	37e0      	adds	r7, #224	; 0xe0
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
	...

08000358 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
void MX_CRC_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0

	hcrc.Instance = CRC;
 800035c:	4b0c      	ldr	r3, [pc, #48]	; (8000390 <MX_CRC_Init+0x38>)
 800035e:	4a0d      	ldr	r2, [pc, #52]	; (8000394 <MX_CRC_Init+0x3c>)
 8000360:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultInitValueUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000362:	4b0b      	ldr	r3, [pc, #44]	; (8000390 <MX_CRC_Init+0x38>)
 8000364:	2200      	movs	r2, #0
 8000366:	715a      	strb	r2, [r3, #5]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000368:	4b09      	ldr	r3, [pc, #36]	; (8000390 <MX_CRC_Init+0x38>)
 800036a:	2200      	movs	r2, #0
 800036c:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800036e:	4b08      	ldr	r3, [pc, #32]	; (8000390 <MX_CRC_Init+0x38>)
 8000370:	2200      	movs	r2, #0
 8000372:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000374:	4b06      	ldr	r3, [pc, #24]	; (8000390 <MX_CRC_Init+0x38>)
 8000376:	2200      	movs	r2, #0
 8000378:	619a      	str	r2, [r3, #24]
	if(HAL_CRC_Init(&hcrc) != HAL_OK)
 800037a:	4805      	ldr	r0, [pc, #20]	; (8000390 <MX_CRC_Init+0x38>)
 800037c:	f001 f992 	bl	80016a4 <HAL_CRC_Init>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <MX_CRC_Init+0x32>
	{
		Error_Handler();
 8000386:	f000 f859 	bl	800043c <Error_Handler>
	}

}
 800038a:	bf00      	nop
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	20000044 	.word	0x20000044
 8000394:	40023000 	.word	0x40023000

08000398 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800039c:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <MX_RNG_Init+0x20>)
 800039e:	4a07      	ldr	r2, [pc, #28]	; (80003bc <MX_RNG_Init+0x24>)
 80003a0:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80003a2:	4805      	ldr	r0, [pc, #20]	; (80003b8 <MX_RNG_Init+0x20>)
 80003a4:	f003 fdda 	bl	8003f5c <HAL_RNG_Init>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80003ae:	f000 f845 	bl	800043c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20000068 	.word	0x20000068
 80003bc:	50060800 	.word	0x50060800

080003c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b088      	sub	sp, #32
 80003c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c6:	f107 030c 	add.w	r3, r7, #12
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]
 80003d2:	60da      	str	r2, [r3, #12]
 80003d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80003d6:	4b18      	ldr	r3, [pc, #96]	; (8000438 <MX_GPIO_Init+0x78>)
 80003d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003da:	4a17      	ldr	r2, [pc, #92]	; (8000438 <MX_GPIO_Init+0x78>)
 80003dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003e2:	4b15      	ldr	r3, [pc, #84]	; (8000438 <MX_GPIO_Init+0x78>)
 80003e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003ea:	60bb      	str	r3, [r7, #8]
 80003ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ee:	4b12      	ldr	r3, [pc, #72]	; (8000438 <MX_GPIO_Init+0x78>)
 80003f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003f2:	4a11      	ldr	r2, [pc, #68]	; (8000438 <MX_GPIO_Init+0x78>)
 80003f4:	f043 0301 	orr.w	r3, r3, #1
 80003f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003fa:	4b0f      	ldr	r3, [pc, #60]	; (8000438 <MX_GPIO_Init+0x78>)
 80003fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003fe:	f003 0301 	and.w	r3, r3, #1
 8000402:	607b      	str	r3, [r7, #4]
 8000404:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000406:	2200      	movs	r2, #0
 8000408:	2120      	movs	r1, #32
 800040a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800040e:	f001 fbdd 	bl	8001bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000412:	2320      	movs	r3, #32
 8000414:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000416:	2301      	movs	r3, #1
 8000418:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041a:	2300      	movs	r3, #0
 800041c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800041e:	2300      	movs	r3, #0
 8000420:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000422:	f107 030c 	add.w	r3, r7, #12
 8000426:	4619      	mov	r1, r3
 8000428:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800042c:	f001 fa24 	bl	8001878 <HAL_GPIO_Init>

}
 8000430:	bf00      	nop
 8000432:	3720      	adds	r7, #32
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	40021000 	.word	0x40021000

0800043c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000440:	b672      	cpsid	i
}
 8000442:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000444:	e7fe      	b.n	8000444 <Error_Handler+0x8>
	...

08000448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800044e:	4b0f      	ldr	r3, [pc, #60]	; (800048c <HAL_MspInit+0x44>)
 8000450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000452:	4a0e      	ldr	r2, [pc, #56]	; (800048c <HAL_MspInit+0x44>)
 8000454:	f043 0301 	orr.w	r3, r3, #1
 8000458:	6613      	str	r3, [r2, #96]	; 0x60
 800045a:	4b0c      	ldr	r3, [pc, #48]	; (800048c <HAL_MspInit+0x44>)
 800045c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800045e:	f003 0301 	and.w	r3, r3, #1
 8000462:	607b      	str	r3, [r7, #4]
 8000464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000466:	4b09      	ldr	r3, [pc, #36]	; (800048c <HAL_MspInit+0x44>)
 8000468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800046a:	4a08      	ldr	r2, [pc, #32]	; (800048c <HAL_MspInit+0x44>)
 800046c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000470:	6593      	str	r3, [r2, #88]	; 0x58
 8000472:	4b06      	ldr	r3, [pc, #24]	; (800048c <HAL_MspInit+0x44>)
 8000474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800047a:	603b      	str	r3, [r7, #0]
 800047c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800047e:	bf00      	nop
 8000480:	370c      	adds	r7, #12
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	40021000 	.word	0x40021000

08000490 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000490:	b480      	push	{r7}
 8000492:	b085      	sub	sp, #20
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a0a      	ldr	r2, [pc, #40]	; (80004c8 <HAL_CRC_MspInit+0x38>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d10b      	bne.n	80004ba <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80004a2:	4b0a      	ldr	r3, [pc, #40]	; (80004cc <HAL_CRC_MspInit+0x3c>)
 80004a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004a6:	4a09      	ldr	r2, [pc, #36]	; (80004cc <HAL_CRC_MspInit+0x3c>)
 80004a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004ac:	6493      	str	r3, [r2, #72]	; 0x48
 80004ae:	4b07      	ldr	r3, [pc, #28]	; (80004cc <HAL_CRC_MspInit+0x3c>)
 80004b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004b6:	60fb      	str	r3, [r7, #12]
 80004b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80004ba:	bf00      	nop
 80004bc:	3714      	adds	r7, #20
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	40023000 	.word	0x40023000
 80004cc:	40021000 	.word	0x40021000

080004d0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <HAL_RNG_MspInit+0x38>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d10b      	bne.n	80004fa <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80004e2:	4b0a      	ldr	r3, [pc, #40]	; (800050c <HAL_RNG_MspInit+0x3c>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e6:	4a09      	ldr	r2, [pc, #36]	; (800050c <HAL_RNG_MspInit+0x3c>)
 80004e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ee:	4b07      	ldr	r3, [pc, #28]	; (800050c <HAL_RNG_MspInit+0x3c>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80004fa:	bf00      	nop
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	50060800 	.word	0x50060800
 800050c:	40021000 	.word	0x40021000

08000510 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b08c      	sub	sp, #48	; 0x30
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000518:	2300      	movs	r3, #0
 800051a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800051c:	2300      	movs	r3, #0
 800051e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000520:	2200      	movs	r2, #0
 8000522:	6879      	ldr	r1, [r7, #4]
 8000524:	2019      	movs	r0, #25
 8000526:	f001 f893 	bl	8001650 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800052a:	2019      	movs	r0, #25
 800052c:	f001 f8ac 	bl	8001688 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000530:	4b1e      	ldr	r3, [pc, #120]	; (80005ac <HAL_InitTick+0x9c>)
 8000532:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000534:	4a1d      	ldr	r2, [pc, #116]	; (80005ac <HAL_InitTick+0x9c>)
 8000536:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800053a:	6613      	str	r3, [r2, #96]	; 0x60
 800053c:	4b1b      	ldr	r3, [pc, #108]	; (80005ac <HAL_InitTick+0x9c>)
 800053e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000540:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000548:	f107 0210 	add.w	r2, r7, #16
 800054c:	f107 0314 	add.w	r3, r7, #20
 8000550:	4611      	mov	r1, r2
 8000552:	4618      	mov	r0, r3
 8000554:	f002 ffb4 	bl	80034c0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000558:	f002 ff9c 	bl	8003494 <HAL_RCC_GetPCLK2Freq>
 800055c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800055e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000560:	4a13      	ldr	r2, [pc, #76]	; (80005b0 <HAL_InitTick+0xa0>)
 8000562:	fba2 2303 	umull	r2, r3, r2, r3
 8000566:	0c9b      	lsrs	r3, r3, #18
 8000568:	3b01      	subs	r3, #1
 800056a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800056c:	4b11      	ldr	r3, [pc, #68]	; (80005b4 <HAL_InitTick+0xa4>)
 800056e:	4a12      	ldr	r2, [pc, #72]	; (80005b8 <HAL_InitTick+0xa8>)
 8000570:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000572:	4b10      	ldr	r3, [pc, #64]	; (80005b4 <HAL_InitTick+0xa4>)
 8000574:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000578:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800057a:	4a0e      	ldr	r2, [pc, #56]	; (80005b4 <HAL_InitTick+0xa4>)
 800057c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800057e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000580:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <HAL_InitTick+0xa4>)
 8000582:	2200      	movs	r2, #0
 8000584:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000586:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <HAL_InitTick+0xa4>)
 8000588:	2200      	movs	r2, #0
 800058a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800058c:	4809      	ldr	r0, [pc, #36]	; (80005b4 <HAL_InitTick+0xa4>)
 800058e:	f003 fd35 	bl	8003ffc <HAL_TIM_Base_Init>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d104      	bne.n	80005a2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000598:	4806      	ldr	r0, [pc, #24]	; (80005b4 <HAL_InitTick+0xa4>)
 800059a:	f003 fd91 	bl	80040c0 <HAL_TIM_Base_Start_IT>
 800059e:	4603      	mov	r3, r0
 80005a0:	e000      	b.n	80005a4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80005a2:	2301      	movs	r3, #1
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3730      	adds	r7, #48	; 0x30
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40021000 	.word	0x40021000
 80005b0:	431bde83 	.word	0x431bde83
 80005b4:	20000078 	.word	0x20000078
 80005b8:	40012c00 	.word	0x40012c00

080005bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <NMI_Handler+0x4>

080005c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005c6:	e7fe      	b.n	80005c6 <HardFault_Handler+0x4>

080005c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005cc:	e7fe      	b.n	80005cc <MemManage_Handler+0x4>

080005ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005ce:	b480      	push	{r7}
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005d2:	e7fe      	b.n	80005d2 <BusFault_Handler+0x4>

080005d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005d8:	e7fe      	b.n	80005d8 <UsageFault_Handler+0x4>

080005da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005da:	b480      	push	{r7}
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005de:	bf00      	nop
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr

080005e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr

080005f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005f6:	b480      	push	{r7}
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005fa:	bf00      	nop
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr

08000604 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
	...

08000614 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000618:	4802      	ldr	r0, [pc, #8]	; (8000624 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800061a:	f003 fdc1 	bl	80041a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20000078 	.word	0x20000078

08000628 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800062c:	4802      	ldr	r0, [pc, #8]	; (8000638 <OTG_FS_IRQHandler+0x10>)
 800062e:	f001 faff 	bl	8001c30 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	200000c8 	.word	0x200000c8

0800063c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000640:	4b15      	ldr	r3, [pc, #84]	; (8000698 <SystemInit+0x5c>)
 8000642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000646:	4a14      	ldr	r2, [pc, #80]	; (8000698 <SystemInit+0x5c>)
 8000648:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800064c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000650:	4b12      	ldr	r3, [pc, #72]	; (800069c <SystemInit+0x60>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a11      	ldr	r2, [pc, #68]	; (800069c <SystemInit+0x60>)
 8000656:	f043 0301 	orr.w	r3, r3, #1
 800065a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800065c:	4b0f      	ldr	r3, [pc, #60]	; (800069c <SystemInit+0x60>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000662:	4b0e      	ldr	r3, [pc, #56]	; (800069c <SystemInit+0x60>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a0d      	ldr	r2, [pc, #52]	; (800069c <SystemInit+0x60>)
 8000668:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800066c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000670:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000672:	4b0a      	ldr	r3, [pc, #40]	; (800069c <SystemInit+0x60>)
 8000674:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000678:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <SystemInit+0x60>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a07      	ldr	r2, [pc, #28]	; (800069c <SystemInit+0x60>)
 8000680:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000684:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000686:	4b05      	ldr	r3, [pc, #20]	; (800069c <SystemInit+0x60>)
 8000688:	2200      	movs	r2, #0
 800068a:	619a      	str	r2, [r3, #24]
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	e000ed00 	.word	0xe000ed00
 800069c:	40021000 	.word	0x40021000

080006a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80006a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006a4:	f7ff ffca 	bl	800063c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80006a8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80006aa:	e003      	b.n	80006b4 <LoopCopyDataInit>

080006ac <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80006ac:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80006ae:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80006b0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80006b2:	3104      	adds	r1, #4

080006b4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80006b4:	480a      	ldr	r0, [pc, #40]	; (80006e0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80006b8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80006ba:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80006bc:	d3f6      	bcc.n	80006ac <CopyDataInit>
	ldr	r2, =_sbss
 80006be:	4a0a      	ldr	r2, [pc, #40]	; (80006e8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80006c0:	e002      	b.n	80006c8 <LoopFillZerobss>

080006c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80006c2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80006c4:	f842 3b04 	str.w	r3, [r2], #4

080006c8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80006c8:	4b08      	ldr	r3, [pc, #32]	; (80006ec <LoopForever+0x16>)
	cmp	r2, r3
 80006ca:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80006cc:	d3f9      	bcc.n	80006c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006ce:	f006 f9b7 	bl	8006a40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006d2:	f7ff fd79 	bl	80001c8 <main>

080006d6 <LoopForever>:

LoopForever:
    b LoopForever
 80006d6:	e7fe      	b.n	80006d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80006d8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80006dc:	0800756c 	.word	0x0800756c
	ldr	r0, =_sdata
 80006e0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80006e4:	20000024 	.word	0x20000024
	ldr	r2, =_sbss
 80006e8:	20000024 	.word	0x20000024
	ldr	r3, = _ebss
 80006ec:	200004d0 	.word	0x200004d0

080006f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006f0:	e7fe      	b.n	80006f0 <ADC1_2_IRQHandler>
	...

080006f4 <aesInit>:
 * @param[in] keyLen Length of the key
 * @return Error code
 **/

error_t aesInit(AesContext *context, const uint8_t *key, size_t keyLen)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b089      	sub	sp, #36	; 0x24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
   uint_t i;
   uint32_t temp;
   size_t keyScheduleSize;

   //Check parameters
   if(context == NULL || key == NULL)
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d002      	beq.n	800070c <aesInit+0x18>
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d101      	bne.n	8000710 <aesInit+0x1c>
      return ERROR_INVALID_PARAMETER;
 800070c:	2302      	movs	r3, #2
 800070e:	e1a4      	b.n	8000a5a <aesInit+0x366>

   //Check the length of the key
   if(keyLen == 16)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2b10      	cmp	r3, #16
 8000714:	d103      	bne.n	800071e <aesInit+0x2a>
   {
      //10 rounds are required for 128-bit key
      context->nr = 10;
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	220a      	movs	r2, #10
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	e00f      	b.n	800073e <aesInit+0x4a>
   }
   else if(keyLen == 24)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2b18      	cmp	r3, #24
 8000722:	d103      	bne.n	800072c <aesInit+0x38>
   {
      //12 rounds are required for 192-bit key
      context->nr = 12;
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	220c      	movs	r2, #12
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	e008      	b.n	800073e <aesInit+0x4a>
   }
   else if(keyLen == 32)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b20      	cmp	r3, #32
 8000730:	d103      	bne.n	800073a <aesInit+0x46>
   {
      //14 rounds are required for 256-bit key
      context->nr = 14;
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	220e      	movs	r2, #14
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	e001      	b.n	800073e <aesInit+0x4a>
   }
   else
   {
      //Report an error
      return ERROR_INVALID_KEY_LENGTH;
 800073a:	23e8      	movs	r3, #232	; 0xe8
 800073c:	e18d      	b.n	8000a5a <aesInit+0x366>
   }

   //Determine the number of 32-bit words in the key
   keyLen /= 4;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	089b      	lsrs	r3, r3, #2
 8000742:	607b      	str	r3, [r7, #4]

   //Copy the original key
   for(i = 0; i < keyLen; i++)
 8000744:	2300      	movs	r3, #0
 8000746:	61fb      	str	r3, [r7, #28]
 8000748:	e026      	b.n	8000798 <aesInit+0xa4>
   {
      context->ek[i] = LOAD32LE(key + (i * 4));
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	009b      	lsls	r3, r3, #2
 800074e:	68ba      	ldr	r2, [r7, #8]
 8000750:	4413      	add	r3, r2
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	4619      	mov	r1, r3
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	68ba      	ldr	r2, [r7, #8]
 800075c:	4413      	add	r3, r2
 800075e:	3301      	adds	r3, #1
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	021b      	lsls	r3, r3, #8
 8000764:	ea41 0203 	orr.w	r2, r1, r3
 8000768:	69fb      	ldr	r3, [r7, #28]
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	68b9      	ldr	r1, [r7, #8]
 800076e:	440b      	add	r3, r1
 8000770:	3302      	adds	r3, #2
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	041b      	lsls	r3, r3, #16
 8000776:	431a      	orrs	r2, r3
 8000778:	69fb      	ldr	r3, [r7, #28]
 800077a:	009b      	lsls	r3, r3, #2
 800077c:	68b9      	ldr	r1, [r7, #8]
 800077e:	440b      	add	r3, r1
 8000780:	3303      	adds	r3, #3
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	061b      	lsls	r3, r3, #24
 8000786:	431a      	orrs	r2, r3
 8000788:	68f9      	ldr	r1, [r7, #12]
 800078a:	69fb      	ldr	r3, [r7, #28]
 800078c:	009b      	lsls	r3, r3, #2
 800078e:	440b      	add	r3, r1
 8000790:	605a      	str	r2, [r3, #4]
   for(i = 0; i < keyLen; i++)
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	3301      	adds	r3, #1
 8000796:	61fb      	str	r3, [r7, #28]
 8000798:	69fa      	ldr	r2, [r7, #28]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	429a      	cmp	r2, r3
 800079e:	d3d4      	bcc.n	800074a <aesInit+0x56>
   }

   //The size of the key schedule depends on the number of rounds
   keyScheduleSize = 4 * (context->nr + 1);
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	3301      	adds	r3, #1
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	61bb      	str	r3, [r7, #24]

   //Generate the key schedule (encryption)
   for(i = keyLen; i < keyScheduleSize; i++)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	61fb      	str	r3, [r7, #28]
 80007ae:	e0c4      	b.n	800093a <aesInit+0x246>
   {
      //Save previous word
      temp = context->ek[i - 1];
 80007b0:	69fb      	ldr	r3, [r7, #28]
 80007b2:	3b01      	subs	r3, #1
 80007b4:	68fa      	ldr	r2, [r7, #12]
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	4413      	add	r3, r2
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	617b      	str	r3, [r7, #20]

      //Apply transformation
      if((i % keyLen) == 0)
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	687a      	ldr	r2, [r7, #4]
 80007c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80007c6:	6879      	ldr	r1, [r7, #4]
 80007c8:	fb01 f202 	mul.w	r2, r1, r2
 80007cc:	1a9b      	subs	r3, r3, r2
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d14e      	bne.n	8000870 <aesInit+0x17c>
      {
         context->ek[i] = sbox[(temp >> 8) & 0xFF];
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	0a1b      	lsrs	r3, r3, #8
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	4aa3      	ldr	r2, [pc, #652]	; (8000a68 <aesInit+0x374>)
 80007da:	5cd3      	ldrb	r3, [r2, r3]
 80007dc:	4619      	mov	r1, r3
 80007de:	68fa      	ldr	r2, [r7, #12]
 80007e0:	69fb      	ldr	r3, [r7, #28]
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	4413      	add	r3, r2
 80007e6:	6059      	str	r1, [r3, #4]
         context->ek[i] |= (sbox[(temp >> 16) & 0xFF] << 8);
 80007e8:	68fa      	ldr	r2, [r7, #12]
 80007ea:	69fb      	ldr	r3, [r7, #28]
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	4413      	add	r3, r2
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	697a      	ldr	r2, [r7, #20]
 80007f4:	0c12      	lsrs	r2, r2, #16
 80007f6:	b2d2      	uxtb	r2, r2
 80007f8:	499b      	ldr	r1, [pc, #620]	; (8000a68 <aesInit+0x374>)
 80007fa:	5c8a      	ldrb	r2, [r1, r2]
 80007fc:	0212      	lsls	r2, r2, #8
 80007fe:	431a      	orrs	r2, r3
 8000800:	68f9      	ldr	r1, [r7, #12]
 8000802:	69fb      	ldr	r3, [r7, #28]
 8000804:	009b      	lsls	r3, r3, #2
 8000806:	440b      	add	r3, r1
 8000808:	605a      	str	r2, [r3, #4]
         context->ek[i] |= (sbox[(temp >> 24) & 0xFF] << 16);
 800080a:	68fa      	ldr	r2, [r7, #12]
 800080c:	69fb      	ldr	r3, [r7, #28]
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	4413      	add	r3, r2
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	697a      	ldr	r2, [r7, #20]
 8000816:	0e12      	lsrs	r2, r2, #24
 8000818:	4993      	ldr	r1, [pc, #588]	; (8000a68 <aesInit+0x374>)
 800081a:	5c8a      	ldrb	r2, [r1, r2]
 800081c:	0412      	lsls	r2, r2, #16
 800081e:	431a      	orrs	r2, r3
 8000820:	68f9      	ldr	r1, [r7, #12]
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	440b      	add	r3, r1
 8000828:	605a      	str	r2, [r3, #4]
         context->ek[i] |= (sbox[temp & 0xFF] << 24);
 800082a:	68fa      	ldr	r2, [r7, #12]
 800082c:	69fb      	ldr	r3, [r7, #28]
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	4413      	add	r3, r2
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	697a      	ldr	r2, [r7, #20]
 8000836:	b2d2      	uxtb	r2, r2
 8000838:	498b      	ldr	r1, [pc, #556]	; (8000a68 <aesInit+0x374>)
 800083a:	5c8a      	ldrb	r2, [r1, r2]
 800083c:	0612      	lsls	r2, r2, #24
 800083e:	431a      	orrs	r2, r3
 8000840:	68f9      	ldr	r1, [r7, #12]
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	440b      	add	r3, r1
 8000848:	605a      	str	r2, [r3, #4]
         context->ek[i] ^= rcon[i / keyLen];
 800084a:	68fa      	ldr	r2, [r7, #12]
 800084c:	69fb      	ldr	r3, [r7, #28]
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	4413      	add	r3, r2
 8000852:	685a      	ldr	r2, [r3, #4]
 8000854:	69f9      	ldr	r1, [r7, #28]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	fbb1 f3f3 	udiv	r3, r1, r3
 800085c:	4983      	ldr	r1, [pc, #524]	; (8000a6c <aesInit+0x378>)
 800085e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000862:	405a      	eors	r2, r3
 8000864:	68f9      	ldr	r1, [r7, #12]
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	440b      	add	r3, r1
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	e04f      	b.n	8000910 <aesInit+0x21c>
      }
      else if(keyLen > 6 && (i % keyLen) == 4)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2b06      	cmp	r3, #6
 8000874:	d946      	bls.n	8000904 <aesInit+0x210>
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	fbb3 f2f2 	udiv	r2, r3, r2
 800087e:	6879      	ldr	r1, [r7, #4]
 8000880:	fb01 f202 	mul.w	r2, r1, r2
 8000884:	1a9b      	subs	r3, r3, r2
 8000886:	2b04      	cmp	r3, #4
 8000888:	d13c      	bne.n	8000904 <aesInit+0x210>
      {
         context->ek[i] = sbox[temp & 0xFF];
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	b2db      	uxtb	r3, r3
 800088e:	4a76      	ldr	r2, [pc, #472]	; (8000a68 <aesInit+0x374>)
 8000890:	5cd3      	ldrb	r3, [r2, r3]
 8000892:	4619      	mov	r1, r3
 8000894:	68fa      	ldr	r2, [r7, #12]
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	4413      	add	r3, r2
 800089c:	6059      	str	r1, [r3, #4]
         context->ek[i] |= (sbox[(temp >> 8) & 0xFF] << 8);
 800089e:	68fa      	ldr	r2, [r7, #12]
 80008a0:	69fb      	ldr	r3, [r7, #28]
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	4413      	add	r3, r2
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	697a      	ldr	r2, [r7, #20]
 80008aa:	0a12      	lsrs	r2, r2, #8
 80008ac:	b2d2      	uxtb	r2, r2
 80008ae:	496e      	ldr	r1, [pc, #440]	; (8000a68 <aesInit+0x374>)
 80008b0:	5c8a      	ldrb	r2, [r1, r2]
 80008b2:	0212      	lsls	r2, r2, #8
 80008b4:	431a      	orrs	r2, r3
 80008b6:	68f9      	ldr	r1, [r7, #12]
 80008b8:	69fb      	ldr	r3, [r7, #28]
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	440b      	add	r3, r1
 80008be:	605a      	str	r2, [r3, #4]
         context->ek[i] |= (sbox[(temp >> 16) & 0xFF] << 16);
 80008c0:	68fa      	ldr	r2, [r7, #12]
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	4413      	add	r3, r2
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	697a      	ldr	r2, [r7, #20]
 80008cc:	0c12      	lsrs	r2, r2, #16
 80008ce:	b2d2      	uxtb	r2, r2
 80008d0:	4965      	ldr	r1, [pc, #404]	; (8000a68 <aesInit+0x374>)
 80008d2:	5c8a      	ldrb	r2, [r1, r2]
 80008d4:	0412      	lsls	r2, r2, #16
 80008d6:	431a      	orrs	r2, r3
 80008d8:	68f9      	ldr	r1, [r7, #12]
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	440b      	add	r3, r1
 80008e0:	605a      	str	r2, [r3, #4]
         context->ek[i] |= (sbox[(temp >> 24) & 0xFF] << 24);
 80008e2:	68fa      	ldr	r2, [r7, #12]
 80008e4:	69fb      	ldr	r3, [r7, #28]
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	4413      	add	r3, r2
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	697a      	ldr	r2, [r7, #20]
 80008ee:	0e12      	lsrs	r2, r2, #24
 80008f0:	495d      	ldr	r1, [pc, #372]	; (8000a68 <aesInit+0x374>)
 80008f2:	5c8a      	ldrb	r2, [r1, r2]
 80008f4:	0612      	lsls	r2, r2, #24
 80008f6:	431a      	orrs	r2, r3
 80008f8:	68f9      	ldr	r1, [r7, #12]
 80008fa:	69fb      	ldr	r3, [r7, #28]
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	440b      	add	r3, r1
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	e005      	b.n	8000910 <aesInit+0x21c>
      }
      else
      {
         context->ek[i] = temp;
 8000904:	68fa      	ldr	r2, [r7, #12]
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	4413      	add	r3, r2
 800090c:	697a      	ldr	r2, [r7, #20]
 800090e:	605a      	str	r2, [r3, #4]
      }

      //Update the key schedule
      context->ek[i] ^= context->ek[i - keyLen];
 8000910:	68fa      	ldr	r2, [r7, #12]
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	4413      	add	r3, r2
 8000918:	685a      	ldr	r2, [r3, #4]
 800091a:	69f9      	ldr	r1, [r7, #28]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	1acb      	subs	r3, r1, r3
 8000920:	68f9      	ldr	r1, [r7, #12]
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	440b      	add	r3, r1
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	405a      	eors	r2, r3
 800092a:	68f9      	ldr	r1, [r7, #12]
 800092c:	69fb      	ldr	r3, [r7, #28]
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	440b      	add	r3, r1
 8000932:	605a      	str	r2, [r3, #4]
   for(i = keyLen; i < keyScheduleSize; i++)
 8000934:	69fb      	ldr	r3, [r7, #28]
 8000936:	3301      	adds	r3, #1
 8000938:	61fb      	str	r3, [r7, #28]
 800093a:	69fa      	ldr	r2, [r7, #28]
 800093c:	69bb      	ldr	r3, [r7, #24]
 800093e:	429a      	cmp	r2, r3
 8000940:	f4ff af36 	bcc.w	80007b0 <aesInit+0xbc>
   }

   //Generate the key schedule (decryption)
   for(i = 0; i < keyScheduleSize; i++)
 8000944:	2300      	movs	r3, #0
 8000946:	61fb      	str	r3, [r7, #28]
 8000948:	e081      	b.n	8000a4e <aesInit+0x35a>
   {
      //Apply the InvMixColumns transformation to all round keys
      //but the first and the last
      if(i < 4 || i >= (keyScheduleSize - 4))
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	2b03      	cmp	r3, #3
 800094e:	d904      	bls.n	800095a <aesInit+0x266>
 8000950:	69bb      	ldr	r3, [r7, #24]
 8000952:	3b04      	subs	r3, #4
 8000954:	69fa      	ldr	r2, [r7, #28]
 8000956:	429a      	cmp	r2, r3
 8000958:	d30b      	bcc.n	8000972 <aesInit+0x27e>
      {
         context->dk[i] = context->ek[i];
 800095a:	68fa      	ldr	r2, [r7, #12]
 800095c:	69fb      	ldr	r3, [r7, #28]
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	4413      	add	r3, r2
 8000962:	685a      	ldr	r2, [r3, #4]
 8000964:	68f9      	ldr	r1, [r7, #12]
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	333c      	adds	r3, #60	; 0x3c
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	440b      	add	r3, r1
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	e06a      	b.n	8000a48 <aesInit+0x354>
      }
      else
      {
         context->dk[i] = td[sbox[context->ek[i] & 0xFF]];
 8000972:	68fa      	ldr	r2, [r7, #12]
 8000974:	69fb      	ldr	r3, [r7, #28]
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	4413      	add	r3, r2
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	b2db      	uxtb	r3, r3
 800097e:	4a3a      	ldr	r2, [pc, #232]	; (8000a68 <aesInit+0x374>)
 8000980:	5cd3      	ldrb	r3, [r2, r3]
 8000982:	461a      	mov	r2, r3
 8000984:	4b3a      	ldr	r3, [pc, #232]	; (8000a70 <aesInit+0x37c>)
 8000986:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800098a:	68f9      	ldr	r1, [r7, #12]
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	333c      	adds	r3, #60	; 0x3c
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	440b      	add	r3, r1
 8000994:	605a      	str	r2, [r3, #4]
         temp = td[sbox[(context->ek[i] >> 8) & 0xFF]];
 8000996:	68fa      	ldr	r2, [r7, #12]
 8000998:	69fb      	ldr	r3, [r7, #28]
 800099a:	009b      	lsls	r3, r3, #2
 800099c:	4413      	add	r3, r2
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	0a1b      	lsrs	r3, r3, #8
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	4a30      	ldr	r2, [pc, #192]	; (8000a68 <aesInit+0x374>)
 80009a6:	5cd3      	ldrb	r3, [r2, r3]
 80009a8:	461a      	mov	r2, r3
 80009aa:	4b31      	ldr	r3, [pc, #196]	; (8000a70 <aesInit+0x37c>)
 80009ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009b0:	617b      	str	r3, [r7, #20]
         context->dk[i] ^= ROL32(temp, 8);
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	333c      	adds	r3, #60	; 0x3c
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	4413      	add	r3, r2
 80009bc:	685a      	ldr	r2, [r3, #4]
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	ea4f 6333 	mov.w	r3, r3, ror #24
 80009c4:	405a      	eors	r2, r3
 80009c6:	68f9      	ldr	r1, [r7, #12]
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	333c      	adds	r3, #60	; 0x3c
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	440b      	add	r3, r1
 80009d0:	605a      	str	r2, [r3, #4]
         temp = td[sbox[(context->ek[i] >> 16) & 0xFF]];
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	4413      	add	r3, r2
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	0c1b      	lsrs	r3, r3, #16
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	4a21      	ldr	r2, [pc, #132]	; (8000a68 <aesInit+0x374>)
 80009e2:	5cd3      	ldrb	r3, [r2, r3]
 80009e4:	461a      	mov	r2, r3
 80009e6:	4b22      	ldr	r3, [pc, #136]	; (8000a70 <aesInit+0x37c>)
 80009e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009ec:	617b      	str	r3, [r7, #20]
         context->dk[i] ^= ROL32(temp, 16);
 80009ee:	68fa      	ldr	r2, [r7, #12]
 80009f0:	69fb      	ldr	r3, [r7, #28]
 80009f2:	333c      	adds	r3, #60	; 0x3c
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	4413      	add	r3, r2
 80009f8:	685a      	ldr	r2, [r3, #4]
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	ea4f 4333 	mov.w	r3, r3, ror #16
 8000a00:	405a      	eors	r2, r3
 8000a02:	68f9      	ldr	r1, [r7, #12]
 8000a04:	69fb      	ldr	r3, [r7, #28]
 8000a06:	333c      	adds	r3, #60	; 0x3c
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	440b      	add	r3, r1
 8000a0c:	605a      	str	r2, [r3, #4]
         temp = td[sbox[(context->ek[i] >> 24) & 0xFF]];
 8000a0e:	68fa      	ldr	r2, [r7, #12]
 8000a10:	69fb      	ldr	r3, [r7, #28]
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	4413      	add	r3, r2
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	0e1b      	lsrs	r3, r3, #24
 8000a1a:	4a13      	ldr	r2, [pc, #76]	; (8000a68 <aesInit+0x374>)
 8000a1c:	5cd3      	ldrb	r3, [r2, r3]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <aesInit+0x37c>)
 8000a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a26:	617b      	str	r3, [r7, #20]
         context->dk[i] ^= ROL32(temp, 24);
 8000a28:	68fa      	ldr	r2, [r7, #12]
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	333c      	adds	r3, #60	; 0x3c
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	4413      	add	r3, r2
 8000a32:	685a      	ldr	r2, [r3, #4]
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	ea4f 2333 	mov.w	r3, r3, ror #8
 8000a3a:	405a      	eors	r2, r3
 8000a3c:	68f9      	ldr	r1, [r7, #12]
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	333c      	adds	r3, #60	; 0x3c
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	440b      	add	r3, r1
 8000a46:	605a      	str	r2, [r3, #4]
   for(i = 0; i < keyScheduleSize; i++)
 8000a48:	69fb      	ldr	r3, [r7, #28]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	61fb      	str	r3, [r7, #28]
 8000a4e:	69fa      	ldr	r2, [r7, #28]
 8000a50:	69bb      	ldr	r3, [r7, #24]
 8000a52:	429a      	cmp	r2, r3
 8000a54:	f4ff af79 	bcc.w	800094a <aesInit+0x256>
      }
   }

   //No error to report
   return NO_ERROR;
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3724      	adds	r7, #36	; 0x24
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	08006b38 	.word	0x08006b38
 8000a6c:	08007538 	.word	0x08007538
 8000a70:	08007138 	.word	0x08007138

08000a74 <aesEncryptBlock>:
 * @param[in] input Plaintext block to encrypt
 * @param[out] output Ciphertext block resulting from encryption
 **/

void aesEncryptBlock(AesContext *context, const uint8_t *input, uint8_t *output)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b08f      	sub	sp, #60	; 0x3c
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
   uint32_t t2;
   uint32_t t3;
   uint32_t temp;

   //Copy the plaintext to the state array
   s0 = LOAD32LE(input + 0);
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	461a      	mov	r2, r3
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	021b      	lsls	r3, r3, #8
 8000a8e:	431a      	orrs	r2, r3
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	3302      	adds	r3, #2
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	041b      	lsls	r3, r3, #16
 8000a98:	431a      	orrs	r2, r3
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	3303      	adds	r3, #3
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	061b      	lsls	r3, r3, #24
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	633b      	str	r3, [r7, #48]	; 0x30
   s1 = LOAD32LE(input + 4);
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	3304      	adds	r3, #4
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	461a      	mov	r2, r3
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	3304      	adds	r3, #4
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	021b      	lsls	r3, r3, #8
 8000ab8:	431a      	orrs	r2, r3
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	3304      	adds	r3, #4
 8000abe:	3302      	adds	r3, #2
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	041b      	lsls	r3, r3, #16
 8000ac4:	431a      	orrs	r2, r3
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	3304      	adds	r3, #4
 8000aca:	3303      	adds	r3, #3
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	061b      	lsls	r3, r3, #24
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
   s2 = LOAD32LE(input + 8);
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	3308      	adds	r3, #8
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	461a      	mov	r2, r3
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	3308      	adds	r3, #8
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	021b      	lsls	r3, r3, #8
 8000ae6:	431a      	orrs	r2, r3
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	3308      	adds	r3, #8
 8000aec:	3302      	adds	r3, #2
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	041b      	lsls	r3, r3, #16
 8000af2:	431a      	orrs	r2, r3
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	3308      	adds	r3, #8
 8000af8:	3303      	adds	r3, #3
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	061b      	lsls	r3, r3, #24
 8000afe:	4313      	orrs	r3, r2
 8000b00:	62bb      	str	r3, [r7, #40]	; 0x28
   s3 = LOAD32LE(input + 12);
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	330c      	adds	r3, #12
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	330c      	adds	r3, #12
 8000b0e:	3301      	adds	r3, #1
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	021b      	lsls	r3, r3, #8
 8000b14:	431a      	orrs	r2, r3
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	330c      	adds	r3, #12
 8000b1a:	3302      	adds	r3, #2
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	041b      	lsls	r3, r3, #16
 8000b20:	431a      	orrs	r2, r3
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	330c      	adds	r3, #12
 8000b26:	3303      	adds	r3, #3
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	061b      	lsls	r3, r3, #24
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24

   //Initial round key addition
   s0 ^= context->ek[0];
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b36:	4053      	eors	r3, r2
 8000b38:	633b      	str	r3, [r7, #48]	; 0x30
   s1 ^= context->ek[1];
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	689b      	ldr	r3, [r3, #8]
 8000b3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b40:	4053      	eors	r3, r2
 8000b42:	62fb      	str	r3, [r7, #44]	; 0x2c
   s2 ^= context->ek[2];
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b4a:	4053      	eors	r3, r2
 8000b4c:	62bb      	str	r3, [r7, #40]	; 0x28
   s3 ^= context->ek[3];
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	691b      	ldr	r3, [r3, #16]
 8000b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b54:	4053      	eors	r3, r2
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24

   //The number of rounds depends on the key length
   for(i = 1; i < context->nr; i++)
 8000b58:	2301      	movs	r3, #1
 8000b5a:	637b      	str	r3, [r7, #52]	; 0x34
 8000b5c:	e0d9      	b.n	8000d12 <aesEncryptBlock+0x29e>
   {
      //Apply round function
      t0 = te[s0 & 0xFF];
 8000b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	4aa2      	ldr	r2, [pc, #648]	; (8000dec <aesEncryptBlock+0x378>)
 8000b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b68:	623b      	str	r3, [r7, #32]
      temp = te[(s1 >> 8) & 0xFF];
 8000b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b6c:	0a1b      	lsrs	r3, r3, #8
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	4a9e      	ldr	r2, [pc, #632]	; (8000dec <aesEncryptBlock+0x378>)
 8000b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b76:	613b      	str	r3, [r7, #16]
      t0 ^= ROL32(temp, 8);
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	ea4f 6333 	mov.w	r3, r3, ror #24
 8000b7e:	6a3a      	ldr	r2, [r7, #32]
 8000b80:	4053      	eors	r3, r2
 8000b82:	623b      	str	r3, [r7, #32]
      temp = te[(s2 >> 16) & 0xFF];
 8000b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b86:	0c1b      	lsrs	r3, r3, #16
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	4a98      	ldr	r2, [pc, #608]	; (8000dec <aesEncryptBlock+0x378>)
 8000b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b90:	613b      	str	r3, [r7, #16]
      t0 ^= ROL32(temp, 16);
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	ea4f 4333 	mov.w	r3, r3, ror #16
 8000b98:	6a3a      	ldr	r2, [r7, #32]
 8000b9a:	4053      	eors	r3, r2
 8000b9c:	623b      	str	r3, [r7, #32]
      temp = te[(s3 >> 24) & 0xFF];
 8000b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba0:	0e1b      	lsrs	r3, r3, #24
 8000ba2:	4a92      	ldr	r2, [pc, #584]	; (8000dec <aesEncryptBlock+0x378>)
 8000ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ba8:	613b      	str	r3, [r7, #16]
      t0 ^= ROL32(temp, 24);
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	ea4f 2333 	mov.w	r3, r3, ror #8
 8000bb0:	6a3a      	ldr	r2, [r7, #32]
 8000bb2:	4053      	eors	r3, r2
 8000bb4:	623b      	str	r3, [r7, #32]

      t1 = te[s1 & 0xFF];
 8000bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	4a8c      	ldr	r2, [pc, #560]	; (8000dec <aesEncryptBlock+0x378>)
 8000bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bc0:	61fb      	str	r3, [r7, #28]
      temp = te[(s2 >> 8) & 0xFF];
 8000bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bc4:	0a1b      	lsrs	r3, r3, #8
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	4a88      	ldr	r2, [pc, #544]	; (8000dec <aesEncryptBlock+0x378>)
 8000bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bce:	613b      	str	r3, [r7, #16]
      t1 ^= ROL32(temp, 8);
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	ea4f 6333 	mov.w	r3, r3, ror #24
 8000bd6:	69fa      	ldr	r2, [r7, #28]
 8000bd8:	4053      	eors	r3, r2
 8000bda:	61fb      	str	r3, [r7, #28]
      temp = te[(s3 >> 16) & 0xFF];
 8000bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bde:	0c1b      	lsrs	r3, r3, #16
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	4a82      	ldr	r2, [pc, #520]	; (8000dec <aesEncryptBlock+0x378>)
 8000be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be8:	613b      	str	r3, [r7, #16]
      t1 ^= ROL32(temp, 16);
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	ea4f 4333 	mov.w	r3, r3, ror #16
 8000bf0:	69fa      	ldr	r2, [r7, #28]
 8000bf2:	4053      	eors	r3, r2
 8000bf4:	61fb      	str	r3, [r7, #28]
      temp = te[(s0 >> 24) & 0xFF];
 8000bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bf8:	0e1b      	lsrs	r3, r3, #24
 8000bfa:	4a7c      	ldr	r2, [pc, #496]	; (8000dec <aesEncryptBlock+0x378>)
 8000bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c00:	613b      	str	r3, [r7, #16]
      t1 ^= ROL32(temp, 24);
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	ea4f 2333 	mov.w	r3, r3, ror #8
 8000c08:	69fa      	ldr	r2, [r7, #28]
 8000c0a:	4053      	eors	r3, r2
 8000c0c:	61fb      	str	r3, [r7, #28]

      t2 = te[s2 & 0xFF];
 8000c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	4a76      	ldr	r2, [pc, #472]	; (8000dec <aesEncryptBlock+0x378>)
 8000c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c18:	61bb      	str	r3, [r7, #24]
      temp = te[(s3 >> 8) & 0xFF];
 8000c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1c:	0a1b      	lsrs	r3, r3, #8
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	4a72      	ldr	r2, [pc, #456]	; (8000dec <aesEncryptBlock+0x378>)
 8000c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c26:	613b      	str	r3, [r7, #16]
      t2 ^= ROL32(temp, 8);
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	ea4f 6333 	mov.w	r3, r3, ror #24
 8000c2e:	69ba      	ldr	r2, [r7, #24]
 8000c30:	4053      	eors	r3, r2
 8000c32:	61bb      	str	r3, [r7, #24]
      temp = te[(s0 >> 16) & 0xFF];
 8000c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c36:	0c1b      	lsrs	r3, r3, #16
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	4a6c      	ldr	r2, [pc, #432]	; (8000dec <aesEncryptBlock+0x378>)
 8000c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c40:	613b      	str	r3, [r7, #16]
      t2 ^= ROL32(temp, 16);
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	ea4f 4333 	mov.w	r3, r3, ror #16
 8000c48:	69ba      	ldr	r2, [r7, #24]
 8000c4a:	4053      	eors	r3, r2
 8000c4c:	61bb      	str	r3, [r7, #24]
      temp = te[(s1 >> 24) & 0xFF];
 8000c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c50:	0e1b      	lsrs	r3, r3, #24
 8000c52:	4a66      	ldr	r2, [pc, #408]	; (8000dec <aesEncryptBlock+0x378>)
 8000c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c58:	613b      	str	r3, [r7, #16]
      t2 ^= ROL32(temp, 24);
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	ea4f 2333 	mov.w	r3, r3, ror #8
 8000c60:	69ba      	ldr	r2, [r7, #24]
 8000c62:	4053      	eors	r3, r2
 8000c64:	61bb      	str	r3, [r7, #24]

      t3 = te[s3 & 0xFF];
 8000c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	4a60      	ldr	r2, [pc, #384]	; (8000dec <aesEncryptBlock+0x378>)
 8000c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c70:	617b      	str	r3, [r7, #20]
      temp = te[(s0 >> 8) & 0xFF];
 8000c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c74:	0a1b      	lsrs	r3, r3, #8
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	4a5c      	ldr	r2, [pc, #368]	; (8000dec <aesEncryptBlock+0x378>)
 8000c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c7e:	613b      	str	r3, [r7, #16]
      t3 ^= ROL32(temp, 8);
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	ea4f 6333 	mov.w	r3, r3, ror #24
 8000c86:	697a      	ldr	r2, [r7, #20]
 8000c88:	4053      	eors	r3, r2
 8000c8a:	617b      	str	r3, [r7, #20]
      temp = te[(s1 >> 16) & 0xFF];
 8000c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c8e:	0c1b      	lsrs	r3, r3, #16
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	4a56      	ldr	r2, [pc, #344]	; (8000dec <aesEncryptBlock+0x378>)
 8000c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c98:	613b      	str	r3, [r7, #16]
      t3 ^= ROL32(temp, 16);
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	ea4f 4333 	mov.w	r3, r3, ror #16
 8000ca0:	697a      	ldr	r2, [r7, #20]
 8000ca2:	4053      	eors	r3, r2
 8000ca4:	617b      	str	r3, [r7, #20]
      temp = te[(s2 >> 24) & 0xFF];
 8000ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ca8:	0e1b      	lsrs	r3, r3, #24
 8000caa:	4a50      	ldr	r2, [pc, #320]	; (8000dec <aesEncryptBlock+0x378>)
 8000cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb0:	613b      	str	r3, [r7, #16]
      t3 ^= ROL32(temp, 24);
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	ea4f 2333 	mov.w	r3, r3, ror #8
 8000cb8:	697a      	ldr	r2, [r7, #20]
 8000cba:	4053      	eors	r3, r2
 8000cbc:	617b      	str	r3, [r7, #20]

      //Round key addition
      s0 = t0 ^ context->ek[i * 4];
 8000cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	4413      	add	r3, r2
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	6a3a      	ldr	r2, [r7, #32]
 8000ccc:	4053      	eors	r3, r2
 8000cce:	633b      	str	r3, [r7, #48]	; 0x30
      s1 = t1 ^ context->ek[i * 4 + 1];
 8000cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	68fa      	ldr	r2, [r7, #12]
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	4413      	add	r3, r2
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	69fa      	ldr	r2, [r7, #28]
 8000ce0:	4053      	eors	r3, r2
 8000ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
      s2 = t2 ^ context->ek[i * 4 + 2];
 8000ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	3302      	adds	r3, #2
 8000cea:	68fa      	ldr	r2, [r7, #12]
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	4413      	add	r3, r2
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	69ba      	ldr	r2, [r7, #24]
 8000cf4:	4053      	eors	r3, r2
 8000cf6:	62bb      	str	r3, [r7, #40]	; 0x28
      s3 = t3 ^ context->ek[i * 4 + 3];
 8000cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	3303      	adds	r3, #3
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	4413      	add	r3, r2
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	697a      	ldr	r2, [r7, #20]
 8000d08:	4053      	eors	r3, r2
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
   for(i = 1; i < context->nr; i++)
 8000d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d0e:	3301      	adds	r3, #1
 8000d10:	637b      	str	r3, [r7, #52]	; 0x34
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	f4ff af20 	bcc.w	8000b5e <aesEncryptBlock+0xea>
   }

   //The last round differs slightly from the first rounds
   t0 = sbox[s0 & 0xFF];
 8000d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	4a33      	ldr	r2, [pc, #204]	; (8000df0 <aesEncryptBlock+0x37c>)
 8000d24:	5cd3      	ldrb	r3, [r2, r3]
 8000d26:	623b      	str	r3, [r7, #32]
   t0 |= sbox[(s1 >> 8) & 0xFF] << 8;
 8000d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d2a:	0a1b      	lsrs	r3, r3, #8
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	4a30      	ldr	r2, [pc, #192]	; (8000df0 <aesEncryptBlock+0x37c>)
 8000d30:	5cd3      	ldrb	r3, [r2, r3]
 8000d32:	021b      	lsls	r3, r3, #8
 8000d34:	461a      	mov	r2, r3
 8000d36:	6a3b      	ldr	r3, [r7, #32]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	623b      	str	r3, [r7, #32]
   t0 |= sbox[(s2 >> 16) & 0xFF] << 16;
 8000d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d3e:	0c1b      	lsrs	r3, r3, #16
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	4a2b      	ldr	r2, [pc, #172]	; (8000df0 <aesEncryptBlock+0x37c>)
 8000d44:	5cd3      	ldrb	r3, [r2, r3]
 8000d46:	041b      	lsls	r3, r3, #16
 8000d48:	461a      	mov	r2, r3
 8000d4a:	6a3b      	ldr	r3, [r7, #32]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	623b      	str	r3, [r7, #32]
   t0 |= sbox[(s3 >> 24) & 0xFF] << 24;
 8000d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d52:	0e1b      	lsrs	r3, r3, #24
 8000d54:	4a26      	ldr	r2, [pc, #152]	; (8000df0 <aesEncryptBlock+0x37c>)
 8000d56:	5cd3      	ldrb	r3, [r2, r3]
 8000d58:	061b      	lsls	r3, r3, #24
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	6a3b      	ldr	r3, [r7, #32]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	623b      	str	r3, [r7, #32]

   t1 = sbox[s1 & 0xFF];
 8000d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	4a22      	ldr	r2, [pc, #136]	; (8000df0 <aesEncryptBlock+0x37c>)
 8000d68:	5cd3      	ldrb	r3, [r2, r3]
 8000d6a:	61fb      	str	r3, [r7, #28]
   t1 |= sbox[(s2 >> 8) & 0xFF] << 8;
 8000d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d6e:	0a1b      	lsrs	r3, r3, #8
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	4a1f      	ldr	r2, [pc, #124]	; (8000df0 <aesEncryptBlock+0x37c>)
 8000d74:	5cd3      	ldrb	r3, [r2, r3]
 8000d76:	021b      	lsls	r3, r3, #8
 8000d78:	461a      	mov	r2, r3
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	61fb      	str	r3, [r7, #28]
   t1 |= sbox[(s3 >> 16) & 0xFF] << 16;
 8000d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d82:	0c1b      	lsrs	r3, r3, #16
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	4a1a      	ldr	r2, [pc, #104]	; (8000df0 <aesEncryptBlock+0x37c>)
 8000d88:	5cd3      	ldrb	r3, [r2, r3]
 8000d8a:	041b      	lsls	r3, r3, #16
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	61fb      	str	r3, [r7, #28]
   t1 |= sbox[(s0 >> 24) & 0xFF] << 24;
 8000d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d96:	0e1b      	lsrs	r3, r3, #24
 8000d98:	4a15      	ldr	r2, [pc, #84]	; (8000df0 <aesEncryptBlock+0x37c>)
 8000d9a:	5cd3      	ldrb	r3, [r2, r3]
 8000d9c:	061b      	lsls	r3, r3, #24
 8000d9e:	461a      	mov	r2, r3
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	61fb      	str	r3, [r7, #28]

   t2 = sbox[s2 & 0xFF];
 8000da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	4a11      	ldr	r2, [pc, #68]	; (8000df0 <aesEncryptBlock+0x37c>)
 8000dac:	5cd3      	ldrb	r3, [r2, r3]
 8000dae:	61bb      	str	r3, [r7, #24]
   t2 |= sbox[(s3 >> 8) & 0xFF] << 8;
 8000db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db2:	0a1b      	lsrs	r3, r3, #8
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	4a0e      	ldr	r2, [pc, #56]	; (8000df0 <aesEncryptBlock+0x37c>)
 8000db8:	5cd3      	ldrb	r3, [r2, r3]
 8000dba:	021b      	lsls	r3, r3, #8
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	69bb      	ldr	r3, [r7, #24]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
   t2 |= sbox[(s0 >> 16) & 0xFF] << 16;
 8000dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dc6:	0c1b      	lsrs	r3, r3, #16
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	4a09      	ldr	r2, [pc, #36]	; (8000df0 <aesEncryptBlock+0x37c>)
 8000dcc:	5cd3      	ldrb	r3, [r2, r3]
 8000dce:	041b      	lsls	r3, r3, #16
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
   t2 |= sbox[(s1 >> 24) & 0xFF] << 24;
 8000dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dda:	0e1b      	lsrs	r3, r3, #24
 8000ddc:	4a04      	ldr	r2, [pc, #16]	; (8000df0 <aesEncryptBlock+0x37c>)
 8000dde:	5cd3      	ldrb	r3, [r2, r3]
 8000de0:	061b      	lsls	r3, r3, #24
 8000de2:	461a      	mov	r2, r3
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	e004      	b.n	8000df4 <aesEncryptBlock+0x380>
 8000dea:	bf00      	nop
 8000dec:	08006d38 	.word	0x08006d38
 8000df0:	08006b38 	.word	0x08006b38
 8000df4:	61bb      	str	r3, [r7, #24]

   t3 = sbox[s3 & 0xFF];
 8000df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	4a56      	ldr	r2, [pc, #344]	; (8000f54 <aesEncryptBlock+0x4e0>)
 8000dfc:	5cd3      	ldrb	r3, [r2, r3]
 8000dfe:	617b      	str	r3, [r7, #20]
   t3 |= sbox[(s0 >> 8) & 0xFF] << 8;
 8000e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e02:	0a1b      	lsrs	r3, r3, #8
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	4a53      	ldr	r2, [pc, #332]	; (8000f54 <aesEncryptBlock+0x4e0>)
 8000e08:	5cd3      	ldrb	r3, [r2, r3]
 8000e0a:	021b      	lsls	r3, r3, #8
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	617b      	str	r3, [r7, #20]
   t3 |= sbox[(s1 >> 16) & 0xFF] << 16;
 8000e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e16:	0c1b      	lsrs	r3, r3, #16
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	4a4e      	ldr	r2, [pc, #312]	; (8000f54 <aesEncryptBlock+0x4e0>)
 8000e1c:	5cd3      	ldrb	r3, [r2, r3]
 8000e1e:	041b      	lsls	r3, r3, #16
 8000e20:	461a      	mov	r2, r3
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	617b      	str	r3, [r7, #20]
   t3 |= sbox[(s2 >> 24) & 0xFF] << 24;
 8000e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e2a:	0e1b      	lsrs	r3, r3, #24
 8000e2c:	4a49      	ldr	r2, [pc, #292]	; (8000f54 <aesEncryptBlock+0x4e0>)
 8000e2e:	5cd3      	ldrb	r3, [r2, r3]
 8000e30:	061b      	lsls	r3, r3, #24
 8000e32:	461a      	mov	r2, r3
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	617b      	str	r3, [r7, #20]

   //Last round key addition
   s0 = t0 ^ context->ek[context->nr * 4];
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	68fa      	ldr	r2, [r7, #12]
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	4413      	add	r3, r2
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	6a3a      	ldr	r2, [r7, #32]
 8000e4a:	4053      	eors	r3, r2
 8000e4c:	633b      	str	r3, [r7, #48]	; 0x30
   s1 = t1 ^ context->ek[context->nr * 4 + 1];
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	3301      	adds	r3, #1
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	4413      	add	r3, r2
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	69fa      	ldr	r2, [r7, #28]
 8000e60:	4053      	eors	r3, r2
 8000e62:	62fb      	str	r3, [r7, #44]	; 0x2c
   s2 = t2 ^ context->ek[context->nr * 4 + 2];
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	3302      	adds	r3, #2
 8000e6c:	68fa      	ldr	r2, [r7, #12]
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	4413      	add	r3, r2
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4053      	eors	r3, r2
 8000e78:	62bb      	str	r3, [r7, #40]	; 0x28
   s3 = t3 ^ context->ek[context->nr * 4 + 3];
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	3303      	adds	r3, #3
 8000e82:	68fa      	ldr	r2, [r7, #12]
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	4413      	add	r3, r2
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	697a      	ldr	r2, [r7, #20]
 8000e8c:	4053      	eors	r3, r2
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24

   //The final state is then copied to the output
   STORE32LE(s0, output + 0);
 8000e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	701a      	strb	r2, [r3, #0]
 8000e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e9a:	0a1a      	lsrs	r2, r3, #8
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	b2d2      	uxtb	r2, r2
 8000ea2:	701a      	strb	r2, [r3, #0]
 8000ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ea6:	0c1a      	lsrs	r2, r3, #16
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3302      	adds	r3, #2
 8000eac:	b2d2      	uxtb	r2, r2
 8000eae:	701a      	strb	r2, [r3, #0]
 8000eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eb2:	0e1a      	lsrs	r2, r3, #24
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3303      	adds	r3, #3
 8000eb8:	b2d2      	uxtb	r2, r2
 8000eba:	701a      	strb	r2, [r3, #0]
   STORE32LE(s1, output + 4);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3304      	adds	r3, #4
 8000ec0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ec2:	b2d2      	uxtb	r2, r2
 8000ec4:	701a      	strb	r2, [r3, #0]
 8000ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ec8:	0a1a      	lsrs	r2, r3, #8
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	3305      	adds	r3, #5
 8000ece:	b2d2      	uxtb	r2, r2
 8000ed0:	701a      	strb	r2, [r3, #0]
 8000ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ed4:	0c1a      	lsrs	r2, r3, #16
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	3306      	adds	r3, #6
 8000eda:	b2d2      	uxtb	r2, r2
 8000edc:	701a      	strb	r2, [r3, #0]
 8000ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ee0:	0e1a      	lsrs	r2, r3, #24
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	3307      	adds	r3, #7
 8000ee6:	b2d2      	uxtb	r2, r2
 8000ee8:	701a      	strb	r2, [r3, #0]
   STORE32LE(s2, output + 8);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	3308      	adds	r3, #8
 8000eee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ef0:	b2d2      	uxtb	r2, r2
 8000ef2:	701a      	strb	r2, [r3, #0]
 8000ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ef6:	0a1a      	lsrs	r2, r3, #8
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3309      	adds	r3, #9
 8000efc:	b2d2      	uxtb	r2, r2
 8000efe:	701a      	strb	r2, [r3, #0]
 8000f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f02:	0c1a      	lsrs	r2, r3, #16
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	330a      	adds	r3, #10
 8000f08:	b2d2      	uxtb	r2, r2
 8000f0a:	701a      	strb	r2, [r3, #0]
 8000f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f0e:	0e1a      	lsrs	r2, r3, #24
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	330b      	adds	r3, #11
 8000f14:	b2d2      	uxtb	r2, r2
 8000f16:	701a      	strb	r2, [r3, #0]
   STORE32LE(s3, output + 12);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	330c      	adds	r3, #12
 8000f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f1e:	b2d2      	uxtb	r2, r2
 8000f20:	701a      	strb	r2, [r3, #0]
 8000f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f24:	0a1a      	lsrs	r2, r3, #8
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	330d      	adds	r3, #13
 8000f2a:	b2d2      	uxtb	r2, r2
 8000f2c:	701a      	strb	r2, [r3, #0]
 8000f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f30:	0c1a      	lsrs	r2, r3, #16
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	330e      	adds	r3, #14
 8000f36:	b2d2      	uxtb	r2, r2
 8000f38:	701a      	strb	r2, [r3, #0]
 8000f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3c:	0e1a      	lsrs	r2, r3, #24
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	330f      	adds	r3, #15
 8000f42:	b2d2      	uxtb	r2, r2
 8000f44:	701a      	strb	r2, [r3, #0]
}
 8000f46:	bf00      	nop
 8000f48:	373c      	adds	r7, #60	; 0x3c
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	08006b38 	.word	0x08006b38

08000f58 <aesDecryptBlock>:
 * @param[in] input Ciphertext block to decrypt
 * @param[out] output Plaintext block resulting from decryption
 **/

void aesDecryptBlock(AesContext *context, const uint8_t *input, uint8_t *output)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b08f      	sub	sp, #60	; 0x3c
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
   uint32_t t2;
   uint32_t t3;
   uint32_t temp;

   //Copy the ciphertext to the state array
   s0 = LOAD32LE(input + 0);
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	021b      	lsls	r3, r3, #8
 8000f72:	431a      	orrs	r2, r3
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	3302      	adds	r3, #2
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	041b      	lsls	r3, r3, #16
 8000f7c:	431a      	orrs	r2, r3
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	3303      	adds	r3, #3
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	061b      	lsls	r3, r3, #24
 8000f86:	4313      	orrs	r3, r2
 8000f88:	633b      	str	r3, [r7, #48]	; 0x30
   s1 = LOAD32LE(input + 4);
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	3304      	adds	r3, #4
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	3304      	adds	r3, #4
 8000f96:	3301      	adds	r3, #1
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	021b      	lsls	r3, r3, #8
 8000f9c:	431a      	orrs	r2, r3
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	3302      	adds	r3, #2
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	041b      	lsls	r3, r3, #16
 8000fa8:	431a      	orrs	r2, r3
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	3304      	adds	r3, #4
 8000fae:	3303      	adds	r3, #3
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	061b      	lsls	r3, r3, #24
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
   s2 = LOAD32LE(input + 8);
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	3308      	adds	r3, #8
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	3308      	adds	r3, #8
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	021b      	lsls	r3, r3, #8
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	3308      	adds	r3, #8
 8000fd0:	3302      	adds	r3, #2
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	041b      	lsls	r3, r3, #16
 8000fd6:	431a      	orrs	r2, r3
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	3308      	adds	r3, #8
 8000fdc:	3303      	adds	r3, #3
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	061b      	lsls	r3, r3, #24
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	62bb      	str	r3, [r7, #40]	; 0x28
   s3 = LOAD32LE(input + 12);
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	330c      	adds	r3, #12
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	461a      	mov	r2, r3
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	330c      	adds	r3, #12
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	021b      	lsls	r3, r3, #8
 8000ff8:	431a      	orrs	r2, r3
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	330c      	adds	r3, #12
 8000ffe:	3302      	adds	r3, #2
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	041b      	lsls	r3, r3, #16
 8001004:	431a      	orrs	r2, r3
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	330c      	adds	r3, #12
 800100a:	3303      	adds	r3, #3
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	061b      	lsls	r3, r3, #24
 8001010:	4313      	orrs	r3, r2
 8001012:	627b      	str	r3, [r7, #36]	; 0x24

   //Initial round key addition
   s0 ^= context->dk[context->nr * 4];
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	333c      	adds	r3, #60	; 0x3c
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4413      	add	r3, r2
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001026:	4053      	eors	r3, r2
 8001028:	633b      	str	r3, [r7, #48]	; 0x30
   s1 ^= context->dk[context->nr * 4 + 1];
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	3301      	adds	r3, #1
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	333c      	adds	r3, #60	; 0x3c
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	4413      	add	r3, r2
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800103e:	4053      	eors	r3, r2
 8001040:	62fb      	str	r3, [r7, #44]	; 0x2c
   s2 ^= context->dk[context->nr * 4 + 2];
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	3302      	adds	r3, #2
 800104a:	68fa      	ldr	r2, [r7, #12]
 800104c:	333c      	adds	r3, #60	; 0x3c
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	4413      	add	r3, r2
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001056:	4053      	eors	r3, r2
 8001058:	62bb      	str	r3, [r7, #40]	; 0x28
   s3 ^= context->dk[context->nr * 4 + 3];
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	3303      	adds	r3, #3
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	333c      	adds	r3, #60	; 0x3c
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	4413      	add	r3, r2
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800106e:	4053      	eors	r3, r2
 8001070:	627b      	str	r3, [r7, #36]	; 0x24

   //The number of rounds depends on the key length
   for(i = context->nr - 1; i >= 1; i--)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	3b01      	subs	r3, #1
 8001078:	637b      	str	r3, [r7, #52]	; 0x34
 800107a:	e0dd      	b.n	8001238 <aesDecryptBlock+0x2e0>
   {
      //Apply round function
      t0 = td[s0 & 0xFF];
 800107c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800107e:	b2db      	uxtb	r3, r3
 8001080:	4aa2      	ldr	r2, [pc, #648]	; (800130c <aesDecryptBlock+0x3b4>)
 8001082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001086:	623b      	str	r3, [r7, #32]
      temp = td[(s3 >> 8) & 0xFF];
 8001088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108a:	0a1b      	lsrs	r3, r3, #8
 800108c:	b2db      	uxtb	r3, r3
 800108e:	4a9f      	ldr	r2, [pc, #636]	; (800130c <aesDecryptBlock+0x3b4>)
 8001090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001094:	613b      	str	r3, [r7, #16]
      t0 ^= ROL32(temp, 8);
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	ea4f 6333 	mov.w	r3, r3, ror #24
 800109c:	6a3a      	ldr	r2, [r7, #32]
 800109e:	4053      	eors	r3, r2
 80010a0:	623b      	str	r3, [r7, #32]
      temp = td[(s2 >> 16) & 0xFF];
 80010a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010a4:	0c1b      	lsrs	r3, r3, #16
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	4a98      	ldr	r2, [pc, #608]	; (800130c <aesDecryptBlock+0x3b4>)
 80010aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ae:	613b      	str	r3, [r7, #16]
      t0 ^= ROL32(temp, 16);
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	ea4f 4333 	mov.w	r3, r3, ror #16
 80010b6:	6a3a      	ldr	r2, [r7, #32]
 80010b8:	4053      	eors	r3, r2
 80010ba:	623b      	str	r3, [r7, #32]
      temp = td[(s1 >> 24) & 0xFF];
 80010bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010be:	0e1b      	lsrs	r3, r3, #24
 80010c0:	4a92      	ldr	r2, [pc, #584]	; (800130c <aesDecryptBlock+0x3b4>)
 80010c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c6:	613b      	str	r3, [r7, #16]
      t0 ^= ROL32(temp, 24);
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	ea4f 2333 	mov.w	r3, r3, ror #8
 80010ce:	6a3a      	ldr	r2, [r7, #32]
 80010d0:	4053      	eors	r3, r2
 80010d2:	623b      	str	r3, [r7, #32]

      t1 = td[s1 & 0xFF];
 80010d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4a8c      	ldr	r2, [pc, #560]	; (800130c <aesDecryptBlock+0x3b4>)
 80010da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010de:	61fb      	str	r3, [r7, #28]
      temp = td[(s0 >> 8) & 0xFF];
 80010e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010e2:	0a1b      	lsrs	r3, r3, #8
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	4a89      	ldr	r2, [pc, #548]	; (800130c <aesDecryptBlock+0x3b4>)
 80010e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ec:	613b      	str	r3, [r7, #16]
      t1 ^= ROL32(temp, 8);
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	ea4f 6333 	mov.w	r3, r3, ror #24
 80010f4:	69fa      	ldr	r2, [r7, #28]
 80010f6:	4053      	eors	r3, r2
 80010f8:	61fb      	str	r3, [r7, #28]
      temp = td[(s3 >> 16) & 0xFF];
 80010fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fc:	0c1b      	lsrs	r3, r3, #16
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	4a82      	ldr	r2, [pc, #520]	; (800130c <aesDecryptBlock+0x3b4>)
 8001102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001106:	613b      	str	r3, [r7, #16]
      t1 ^= ROL32(temp, 16);
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	ea4f 4333 	mov.w	r3, r3, ror #16
 800110e:	69fa      	ldr	r2, [r7, #28]
 8001110:	4053      	eors	r3, r2
 8001112:	61fb      	str	r3, [r7, #28]
      temp = td[(s2 >> 24) & 0xFF];
 8001114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001116:	0e1b      	lsrs	r3, r3, #24
 8001118:	4a7c      	ldr	r2, [pc, #496]	; (800130c <aesDecryptBlock+0x3b4>)
 800111a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800111e:	613b      	str	r3, [r7, #16]
      t1 ^= ROL32(temp, 24);
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001126:	69fa      	ldr	r2, [r7, #28]
 8001128:	4053      	eors	r3, r2
 800112a:	61fb      	str	r3, [r7, #28]

      t2 = td[s2 & 0xFF];
 800112c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800112e:	b2db      	uxtb	r3, r3
 8001130:	4a76      	ldr	r2, [pc, #472]	; (800130c <aesDecryptBlock+0x3b4>)
 8001132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001136:	61bb      	str	r3, [r7, #24]
      temp = td[(s1 >> 8) & 0xFF];
 8001138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800113a:	0a1b      	lsrs	r3, r3, #8
 800113c:	b2db      	uxtb	r3, r3
 800113e:	4a73      	ldr	r2, [pc, #460]	; (800130c <aesDecryptBlock+0x3b4>)
 8001140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001144:	613b      	str	r3, [r7, #16]
      t2 ^= ROL32(temp, 8);
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	ea4f 6333 	mov.w	r3, r3, ror #24
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4053      	eors	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
      temp = td[(s0 >> 16) & 0xFF];
 8001152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001154:	0c1b      	lsrs	r3, r3, #16
 8001156:	b2db      	uxtb	r3, r3
 8001158:	4a6c      	ldr	r2, [pc, #432]	; (800130c <aesDecryptBlock+0x3b4>)
 800115a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115e:	613b      	str	r3, [r7, #16]
      t2 ^= ROL32(temp, 16);
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	ea4f 4333 	mov.w	r3, r3, ror #16
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4053      	eors	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
      temp = td[(s3 >> 24) & 0xFF];
 800116c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116e:	0e1b      	lsrs	r3, r3, #24
 8001170:	4a66      	ldr	r2, [pc, #408]	; (800130c <aesDecryptBlock+0x3b4>)
 8001172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001176:	613b      	str	r3, [r7, #16]
      t2 ^= ROL32(temp, 24);
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	ea4f 2333 	mov.w	r3, r3, ror #8
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4053      	eors	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]

      t3 = td[s3 & 0xFF];
 8001184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001186:	b2db      	uxtb	r3, r3
 8001188:	4a60      	ldr	r2, [pc, #384]	; (800130c <aesDecryptBlock+0x3b4>)
 800118a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800118e:	617b      	str	r3, [r7, #20]
      temp = td[(s2 >> 8) & 0xFF];
 8001190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001192:	0a1b      	lsrs	r3, r3, #8
 8001194:	b2db      	uxtb	r3, r3
 8001196:	4a5d      	ldr	r2, [pc, #372]	; (800130c <aesDecryptBlock+0x3b4>)
 8001198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119c:	613b      	str	r3, [r7, #16]
      t3 ^= ROL32(temp, 8);
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	ea4f 6333 	mov.w	r3, r3, ror #24
 80011a4:	697a      	ldr	r2, [r7, #20]
 80011a6:	4053      	eors	r3, r2
 80011a8:	617b      	str	r3, [r7, #20]
      temp = td[(s1 >> 16) & 0xFF];
 80011aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ac:	0c1b      	lsrs	r3, r3, #16
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	4a56      	ldr	r2, [pc, #344]	; (800130c <aesDecryptBlock+0x3b4>)
 80011b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b6:	613b      	str	r3, [r7, #16]
      t3 ^= ROL32(temp, 16);
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	ea4f 4333 	mov.w	r3, r3, ror #16
 80011be:	697a      	ldr	r2, [r7, #20]
 80011c0:	4053      	eors	r3, r2
 80011c2:	617b      	str	r3, [r7, #20]
      temp = td[(s0 >> 24) & 0xFF];
 80011c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011c6:	0e1b      	lsrs	r3, r3, #24
 80011c8:	4a50      	ldr	r2, [pc, #320]	; (800130c <aesDecryptBlock+0x3b4>)
 80011ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ce:	613b      	str	r3, [r7, #16]
      t3 ^= ROL32(temp, 24);
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	ea4f 2333 	mov.w	r3, r3, ror #8
 80011d6:	697a      	ldr	r2, [r7, #20]
 80011d8:	4053      	eors	r3, r2
 80011da:	617b      	str	r3, [r7, #20]

      //Round key addition
      s0 = t0 ^ context->dk[i * 4];
 80011dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	68fa      	ldr	r2, [r7, #12]
 80011e2:	333c      	adds	r3, #60	; 0x3c
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4413      	add	r3, r2
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	6a3a      	ldr	r2, [r7, #32]
 80011ec:	4053      	eors	r3, r2
 80011ee:	633b      	str	r3, [r7, #48]	; 0x30
      s1 = t1 ^ context->dk[i * 4 + 1];
 80011f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	3301      	adds	r3, #1
 80011f6:	68fa      	ldr	r2, [r7, #12]
 80011f8:	333c      	adds	r3, #60	; 0x3c
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	4413      	add	r3, r2
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	69fa      	ldr	r2, [r7, #28]
 8001202:	4053      	eors	r3, r2
 8001204:	62fb      	str	r3, [r7, #44]	; 0x2c
      s2 = t2 ^ context->dk[i * 4 + 2];
 8001206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	3302      	adds	r3, #2
 800120c:	68fa      	ldr	r2, [r7, #12]
 800120e:	333c      	adds	r3, #60	; 0x3c
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	4413      	add	r3, r2
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4053      	eors	r3, r2
 800121a:	62bb      	str	r3, [r7, #40]	; 0x28
      s3 = t3 ^ context->dk[i * 4 + 3];
 800121c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	3303      	adds	r3, #3
 8001222:	68fa      	ldr	r2, [r7, #12]
 8001224:	333c      	adds	r3, #60	; 0x3c
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	4053      	eors	r3, r2
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
   for(i = context->nr - 1; i >= 1; i--)
 8001232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001234:	3b01      	subs	r3, #1
 8001236:	637b      	str	r3, [r7, #52]	; 0x34
 8001238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800123a:	2b00      	cmp	r3, #0
 800123c:	f47f af1e 	bne.w	800107c <aesDecryptBlock+0x124>
   }

   //The last round differs slightly from the first rounds
   t0 = isbox[s0 & 0xFF];
 8001240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001242:	b2db      	uxtb	r3, r3
 8001244:	4a32      	ldr	r2, [pc, #200]	; (8001310 <aesDecryptBlock+0x3b8>)
 8001246:	5cd3      	ldrb	r3, [r2, r3]
 8001248:	623b      	str	r3, [r7, #32]
   t0 |= isbox[(s3 >> 8) & 0xFF] << 8;
 800124a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124c:	0a1b      	lsrs	r3, r3, #8
 800124e:	b2db      	uxtb	r3, r3
 8001250:	4a2f      	ldr	r2, [pc, #188]	; (8001310 <aesDecryptBlock+0x3b8>)
 8001252:	5cd3      	ldrb	r3, [r2, r3]
 8001254:	021b      	lsls	r3, r3, #8
 8001256:	461a      	mov	r2, r3
 8001258:	6a3b      	ldr	r3, [r7, #32]
 800125a:	4313      	orrs	r3, r2
 800125c:	623b      	str	r3, [r7, #32]
   t0 |= isbox[(s2 >> 16) & 0xFF] << 16;
 800125e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001260:	0c1b      	lsrs	r3, r3, #16
 8001262:	b2db      	uxtb	r3, r3
 8001264:	4a2a      	ldr	r2, [pc, #168]	; (8001310 <aesDecryptBlock+0x3b8>)
 8001266:	5cd3      	ldrb	r3, [r2, r3]
 8001268:	041b      	lsls	r3, r3, #16
 800126a:	461a      	mov	r2, r3
 800126c:	6a3b      	ldr	r3, [r7, #32]
 800126e:	4313      	orrs	r3, r2
 8001270:	623b      	str	r3, [r7, #32]
   t0 |= isbox[(s1 >> 24) & 0xFF] << 24;
 8001272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001274:	0e1b      	lsrs	r3, r3, #24
 8001276:	4a26      	ldr	r2, [pc, #152]	; (8001310 <aesDecryptBlock+0x3b8>)
 8001278:	5cd3      	ldrb	r3, [r2, r3]
 800127a:	061b      	lsls	r3, r3, #24
 800127c:	461a      	mov	r2, r3
 800127e:	6a3b      	ldr	r3, [r7, #32]
 8001280:	4313      	orrs	r3, r2
 8001282:	623b      	str	r3, [r7, #32]

   t1 = isbox[s1 & 0xFF];
 8001284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001286:	b2db      	uxtb	r3, r3
 8001288:	4a21      	ldr	r2, [pc, #132]	; (8001310 <aesDecryptBlock+0x3b8>)
 800128a:	5cd3      	ldrb	r3, [r2, r3]
 800128c:	61fb      	str	r3, [r7, #28]
   t1 |= isbox[(s0 >> 8) & 0xFF] << 8;
 800128e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001290:	0a1b      	lsrs	r3, r3, #8
 8001292:	b2db      	uxtb	r3, r3
 8001294:	4a1e      	ldr	r2, [pc, #120]	; (8001310 <aesDecryptBlock+0x3b8>)
 8001296:	5cd3      	ldrb	r3, [r2, r3]
 8001298:	021b      	lsls	r3, r3, #8
 800129a:	461a      	mov	r2, r3
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61fb      	str	r3, [r7, #28]
   t1 |= isbox[(s3 >> 16) & 0xFF] << 16;
 80012a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a4:	0c1b      	lsrs	r3, r3, #16
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	4a19      	ldr	r2, [pc, #100]	; (8001310 <aesDecryptBlock+0x3b8>)
 80012aa:	5cd3      	ldrb	r3, [r2, r3]
 80012ac:	041b      	lsls	r3, r3, #16
 80012ae:	461a      	mov	r2, r3
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61fb      	str	r3, [r7, #28]
   t1 |= isbox[(s2 >> 24) & 0xFF] << 24;
 80012b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b8:	0e1b      	lsrs	r3, r3, #24
 80012ba:	4a15      	ldr	r2, [pc, #84]	; (8001310 <aesDecryptBlock+0x3b8>)
 80012bc:	5cd3      	ldrb	r3, [r2, r3]
 80012be:	061b      	lsls	r3, r3, #24
 80012c0:	461a      	mov	r2, r3
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	61fb      	str	r3, [r7, #28]

   t2 = isbox[s2 & 0xFF];
 80012c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	4a10      	ldr	r2, [pc, #64]	; (8001310 <aesDecryptBlock+0x3b8>)
 80012ce:	5cd3      	ldrb	r3, [r2, r3]
 80012d0:	61bb      	str	r3, [r7, #24]
   t2 |= isbox[(s1 >> 8) & 0xFF] << 8;
 80012d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012d4:	0a1b      	lsrs	r3, r3, #8
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	4a0d      	ldr	r2, [pc, #52]	; (8001310 <aesDecryptBlock+0x3b8>)
 80012da:	5cd3      	ldrb	r3, [r2, r3]
 80012dc:	021b      	lsls	r3, r3, #8
 80012de:	461a      	mov	r2, r3
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
   t2 |= isbox[(s0 >> 16) & 0xFF] << 16;
 80012e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012e8:	0c1b      	lsrs	r3, r3, #16
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	4a08      	ldr	r2, [pc, #32]	; (8001310 <aesDecryptBlock+0x3b8>)
 80012ee:	5cd3      	ldrb	r3, [r2, r3]
 80012f0:	041b      	lsls	r3, r3, #16
 80012f2:	461a      	mov	r2, r3
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
   t2 |= isbox[(s3 >> 24) & 0xFF] << 24;
 80012fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fc:	0e1b      	lsrs	r3, r3, #24
 80012fe:	4a04      	ldr	r2, [pc, #16]	; (8001310 <aesDecryptBlock+0x3b8>)
 8001300:	5cd3      	ldrb	r3, [r2, r3]
 8001302:	061b      	lsls	r3, r3, #24
 8001304:	461a      	mov	r2, r3
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	4313      	orrs	r3, r2
 800130a:	e003      	b.n	8001314 <aesDecryptBlock+0x3bc>
 800130c:	08007138 	.word	0x08007138
 8001310:	08006c38 	.word	0x08006c38
 8001314:	61bb      	str	r3, [r7, #24]

   t3 = isbox[s3 & 0xFF];
 8001316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001318:	b2db      	uxtb	r3, r3
 800131a:	4a4c      	ldr	r2, [pc, #304]	; (800144c <aesDecryptBlock+0x4f4>)
 800131c:	5cd3      	ldrb	r3, [r2, r3]
 800131e:	617b      	str	r3, [r7, #20]
   t3 |= isbox[(s2 >> 8) & 0xFF] << 8;
 8001320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001322:	0a1b      	lsrs	r3, r3, #8
 8001324:	b2db      	uxtb	r3, r3
 8001326:	4a49      	ldr	r2, [pc, #292]	; (800144c <aesDecryptBlock+0x4f4>)
 8001328:	5cd3      	ldrb	r3, [r2, r3]
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	461a      	mov	r2, r3
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	4313      	orrs	r3, r2
 8001332:	617b      	str	r3, [r7, #20]
   t3 |= isbox[(s1 >> 16) & 0xFF] << 16;
 8001334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001336:	0c1b      	lsrs	r3, r3, #16
 8001338:	b2db      	uxtb	r3, r3
 800133a:	4a44      	ldr	r2, [pc, #272]	; (800144c <aesDecryptBlock+0x4f4>)
 800133c:	5cd3      	ldrb	r3, [r2, r3]
 800133e:	041b      	lsls	r3, r3, #16
 8001340:	461a      	mov	r2, r3
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	4313      	orrs	r3, r2
 8001346:	617b      	str	r3, [r7, #20]
   t3 |= isbox[(s0 >> 24) & 0xFF] << 24;
 8001348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800134a:	0e1b      	lsrs	r3, r3, #24
 800134c:	4a3f      	ldr	r2, [pc, #252]	; (800144c <aesDecryptBlock+0x4f4>)
 800134e:	5cd3      	ldrb	r3, [r2, r3]
 8001350:	061b      	lsls	r3, r3, #24
 8001352:	461a      	mov	r2, r3
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	4313      	orrs	r3, r2
 8001358:	617b      	str	r3, [r7, #20]

   //Last round key addition
   s0 = t0 ^ context->dk[0];
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001360:	6a3a      	ldr	r2, [r7, #32]
 8001362:	4053      	eors	r3, r2
 8001364:	633b      	str	r3, [r7, #48]	; 0x30
   s1 = t1 ^ context->dk[1];
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800136c:	69fa      	ldr	r2, [r7, #28]
 800136e:	4053      	eors	r3, r2
 8001370:	62fb      	str	r3, [r7, #44]	; 0x2c
   s2 = t2 ^ context->dk[2];
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4053      	eors	r3, r2
 800137c:	62bb      	str	r3, [r7, #40]	; 0x28
   s3 = t3 ^ context->dk[3];
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001384:	697a      	ldr	r2, [r7, #20]
 8001386:	4053      	eors	r3, r2
 8001388:	627b      	str	r3, [r7, #36]	; 0x24

   //The final state is then copied to the output
   STORE32LE(s0, output + 0);
 800138a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800138c:	b2da      	uxtb	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	701a      	strb	r2, [r3, #0]
 8001392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001394:	0a1a      	lsrs	r2, r3, #8
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	3301      	adds	r3, #1
 800139a:	b2d2      	uxtb	r2, r2
 800139c:	701a      	strb	r2, [r3, #0]
 800139e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013a0:	0c1a      	lsrs	r2, r3, #16
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	3302      	adds	r3, #2
 80013a6:	b2d2      	uxtb	r2, r2
 80013a8:	701a      	strb	r2, [r3, #0]
 80013aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013ac:	0e1a      	lsrs	r2, r3, #24
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	3303      	adds	r3, #3
 80013b2:	b2d2      	uxtb	r2, r2
 80013b4:	701a      	strb	r2, [r3, #0]
   STORE32LE(s1, output + 4);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3304      	adds	r3, #4
 80013ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013bc:	b2d2      	uxtb	r2, r2
 80013be:	701a      	strb	r2, [r3, #0]
 80013c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013c2:	0a1a      	lsrs	r2, r3, #8
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3305      	adds	r3, #5
 80013c8:	b2d2      	uxtb	r2, r2
 80013ca:	701a      	strb	r2, [r3, #0]
 80013cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ce:	0c1a      	lsrs	r2, r3, #16
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3306      	adds	r3, #6
 80013d4:	b2d2      	uxtb	r2, r2
 80013d6:	701a      	strb	r2, [r3, #0]
 80013d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013da:	0e1a      	lsrs	r2, r3, #24
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3307      	adds	r3, #7
 80013e0:	b2d2      	uxtb	r2, r2
 80013e2:	701a      	strb	r2, [r3, #0]
   STORE32LE(s2, output + 8);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3308      	adds	r3, #8
 80013e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013ea:	b2d2      	uxtb	r2, r2
 80013ec:	701a      	strb	r2, [r3, #0]
 80013ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f0:	0a1a      	lsrs	r2, r3, #8
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	3309      	adds	r3, #9
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	701a      	strb	r2, [r3, #0]
 80013fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013fc:	0c1a      	lsrs	r2, r3, #16
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	330a      	adds	r3, #10
 8001402:	b2d2      	uxtb	r2, r2
 8001404:	701a      	strb	r2, [r3, #0]
 8001406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001408:	0e1a      	lsrs	r2, r3, #24
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	330b      	adds	r3, #11
 800140e:	b2d2      	uxtb	r2, r2
 8001410:	701a      	strb	r2, [r3, #0]
   STORE32LE(s3, output + 12);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	330c      	adds	r3, #12
 8001416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001418:	b2d2      	uxtb	r2, r2
 800141a:	701a      	strb	r2, [r3, #0]
 800141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141e:	0a1a      	lsrs	r2, r3, #8
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	330d      	adds	r3, #13
 8001424:	b2d2      	uxtb	r2, r2
 8001426:	701a      	strb	r2, [r3, #0]
 8001428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142a:	0c1a      	lsrs	r2, r3, #16
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	330e      	adds	r3, #14
 8001430:	b2d2      	uxtb	r2, r2
 8001432:	701a      	strb	r2, [r3, #0]
 8001434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001436:	0e1a      	lsrs	r2, r3, #24
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	330f      	adds	r3, #15
 800143c:	b2d2      	uxtb	r2, r2
 800143e:	701a      	strb	r2, [r3, #0]
}
 8001440:	bf00      	nop
 8001442:	373c      	adds	r7, #60	; 0x3c
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	08006c38 	.word	0x08006c38

08001450 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001456:	2300      	movs	r3, #0
 8001458:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800145a:	2003      	movs	r0, #3
 800145c:	f000 f8ed 	bl	800163a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001460:	2000      	movs	r0, #0
 8001462:	f7ff f855 	bl	8000510 <HAL_InitTick>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d002      	beq.n	8001472 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	71fb      	strb	r3, [r7, #7]
 8001470:	e001      	b.n	8001476 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001472:	f7fe ffe9 	bl	8000448 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001476:	79fb      	ldrb	r3, [r7, #7]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return uwTick;
 8001484:	4b03      	ldr	r3, [pc, #12]	; (8001494 <HAL_GetTick+0x14>)
 8001486:	681b      	ldr	r3, [r3, #0]
}
 8001488:	4618      	mov	r0, r3
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	200000c4 	.word	0x200000c4

08001498 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a0:	f7ff ffee 	bl	8001480 <HAL_GetTick>
 80014a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b0:	d005      	beq.n	80014be <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80014b2:	4b0a      	ldr	r3, [pc, #40]	; (80014dc <HAL_Delay+0x44>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	461a      	mov	r2, r3
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4413      	add	r3, r2
 80014bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014be:	bf00      	nop
 80014c0:	f7ff ffde 	bl	8001480 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d8f7      	bhi.n	80014c0 <HAL_Delay+0x28>
  {
  }
}
 80014d0:	bf00      	nop
 80014d2:	bf00      	nop
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000020 	.word	0x20000020

080014e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <__NVIC_SetPriorityGrouping+0x44>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014f6:	68ba      	ldr	r2, [r7, #8]
 80014f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014fc:	4013      	ands	r3, r2
 80014fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001508:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800150c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001510:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001512:	4a04      	ldr	r2, [pc, #16]	; (8001524 <__NVIC_SetPriorityGrouping+0x44>)
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	60d3      	str	r3, [r2, #12]
}
 8001518:	bf00      	nop
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800152c:	4b04      	ldr	r3, [pc, #16]	; (8001540 <__NVIC_GetPriorityGrouping+0x18>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	0a1b      	lsrs	r3, r3, #8
 8001532:	f003 0307 	and.w	r3, r3, #7
}
 8001536:	4618      	mov	r0, r3
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	2b00      	cmp	r3, #0
 8001554:	db0b      	blt.n	800156e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	f003 021f 	and.w	r2, r3, #31
 800155c:	4907      	ldr	r1, [pc, #28]	; (800157c <__NVIC_EnableIRQ+0x38>)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	095b      	lsrs	r3, r3, #5
 8001564:	2001      	movs	r0, #1
 8001566:	fa00 f202 	lsl.w	r2, r0, r2
 800156a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	e000e100 	.word	0xe000e100

08001580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	6039      	str	r1, [r7, #0]
 800158a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800158c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001590:	2b00      	cmp	r3, #0
 8001592:	db0a      	blt.n	80015aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	b2da      	uxtb	r2, r3
 8001598:	490c      	ldr	r1, [pc, #48]	; (80015cc <__NVIC_SetPriority+0x4c>)
 800159a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159e:	0112      	lsls	r2, r2, #4
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	440b      	add	r3, r1
 80015a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a8:	e00a      	b.n	80015c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	4908      	ldr	r1, [pc, #32]	; (80015d0 <__NVIC_SetPriority+0x50>)
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	f003 030f 	and.w	r3, r3, #15
 80015b6:	3b04      	subs	r3, #4
 80015b8:	0112      	lsls	r2, r2, #4
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	440b      	add	r3, r1
 80015be:	761a      	strb	r2, [r3, #24]
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	e000e100 	.word	0xe000e100
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b089      	sub	sp, #36	; 0x24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	f1c3 0307 	rsb	r3, r3, #7
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	bf28      	it	cs
 80015f2:	2304      	movcs	r3, #4
 80015f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3304      	adds	r3, #4
 80015fa:	2b06      	cmp	r3, #6
 80015fc:	d902      	bls.n	8001604 <NVIC_EncodePriority+0x30>
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	3b03      	subs	r3, #3
 8001602:	e000      	b.n	8001606 <NVIC_EncodePriority+0x32>
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001608:	f04f 32ff 	mov.w	r2, #4294967295
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43da      	mvns	r2, r3
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	401a      	ands	r2, r3
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800161c:	f04f 31ff 	mov.w	r1, #4294967295
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	fa01 f303 	lsl.w	r3, r1, r3
 8001626:	43d9      	mvns	r1, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800162c:	4313      	orrs	r3, r2
         );
}
 800162e:	4618      	mov	r0, r3
 8001630:	3724      	adds	r7, #36	; 0x24
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff ff4c 	bl	80014e0 <__NVIC_SetPriorityGrouping>
}
 8001648:	bf00      	nop
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
 800165c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800165e:	2300      	movs	r3, #0
 8001660:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001662:	f7ff ff61 	bl	8001528 <__NVIC_GetPriorityGrouping>
 8001666:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	68b9      	ldr	r1, [r7, #8]
 800166c:	6978      	ldr	r0, [r7, #20]
 800166e:	f7ff ffb1 	bl	80015d4 <NVIC_EncodePriority>
 8001672:	4602      	mov	r2, r0
 8001674:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001678:	4611      	mov	r1, r2
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff ff80 	bl	8001580 <__NVIC_SetPriority>
}
 8001680:	bf00      	nop
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff ff54 	bl	8001544 <__NVIC_EnableIRQ>
}
 800169c:	bf00      	nop
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d101      	bne.n	80016b6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e054      	b.n	8001760 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	7f5b      	ldrb	r3, [r3, #29]
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d105      	bne.n	80016cc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7fe fee2 	bl	8000490 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2202      	movs	r2, #2
 80016d0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	791b      	ldrb	r3, [r3, #4]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d10c      	bne.n	80016f4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a22      	ldr	r2, [pc, #136]	; (8001768 <HAL_CRC_Init+0xc4>)
 80016e0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 0218 	bic.w	r2, r2, #24
 80016f0:	609a      	str	r2, [r3, #8]
 80016f2:	e00c      	b.n	800170e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6899      	ldr	r1, [r3, #8]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	461a      	mov	r2, r3
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 f834 	bl	800176c <HAL_CRCEx_Polynomial_Set>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e028      	b.n	8001760 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	795b      	ldrb	r3, [r3, #5]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d105      	bne.n	8001722 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f04f 32ff 	mov.w	r2, #4294967295
 800171e:	611a      	str	r2, [r3, #16]
 8001720:	e004      	b.n	800172c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	6912      	ldr	r2, [r2, #16]
 800172a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	695a      	ldr	r2, [r3, #20]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	430a      	orrs	r2, r1
 8001740:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	699a      	ldr	r2, [r3, #24]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	430a      	orrs	r2, r1
 8001756:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2201      	movs	r2, #1
 800175c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800175e:	2300      	movs	r3, #0
}
 8001760:	4618      	mov	r0, r3
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	04c11db7 	.word	0x04c11db7

0800176c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800176c:	b480      	push	{r7}
 800176e:	b087      	sub	sp, #28
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001778:	2300      	movs	r3, #0
 800177a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800177c:	231f      	movs	r3, #31
 800177e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001780:	bf00      	nop
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1e5a      	subs	r2, r3, #1
 8001786:	613a      	str	r2, [r7, #16]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d009      	beq.n	80017a0 <HAL_CRCEx_Polynomial_Set+0x34>
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	f003 031f 	and.w	r3, r3, #31
 8001792:	68ba      	ldr	r2, [r7, #8]
 8001794:	fa22 f303 	lsr.w	r3, r2, r3
 8001798:	f003 0301 	and.w	r3, r3, #1
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0f0      	beq.n	8001782 <HAL_CRCEx_Polynomial_Set+0x16>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b18      	cmp	r3, #24
 80017a4:	d846      	bhi.n	8001834 <HAL_CRCEx_Polynomial_Set+0xc8>
 80017a6:	a201      	add	r2, pc, #4	; (adr r2, 80017ac <HAL_CRCEx_Polynomial_Set+0x40>)
 80017a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ac:	0800183b 	.word	0x0800183b
 80017b0:	08001835 	.word	0x08001835
 80017b4:	08001835 	.word	0x08001835
 80017b8:	08001835 	.word	0x08001835
 80017bc:	08001835 	.word	0x08001835
 80017c0:	08001835 	.word	0x08001835
 80017c4:	08001835 	.word	0x08001835
 80017c8:	08001835 	.word	0x08001835
 80017cc:	08001829 	.word	0x08001829
 80017d0:	08001835 	.word	0x08001835
 80017d4:	08001835 	.word	0x08001835
 80017d8:	08001835 	.word	0x08001835
 80017dc:	08001835 	.word	0x08001835
 80017e0:	08001835 	.word	0x08001835
 80017e4:	08001835 	.word	0x08001835
 80017e8:	08001835 	.word	0x08001835
 80017ec:	0800181d 	.word	0x0800181d
 80017f0:	08001835 	.word	0x08001835
 80017f4:	08001835 	.word	0x08001835
 80017f8:	08001835 	.word	0x08001835
 80017fc:	08001835 	.word	0x08001835
 8001800:	08001835 	.word	0x08001835
 8001804:	08001835 	.word	0x08001835
 8001808:	08001835 	.word	0x08001835
 800180c:	08001811 	.word	0x08001811
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	2b06      	cmp	r3, #6
 8001814:	d913      	bls.n	800183e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800181a:	e010      	b.n	800183e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	2b07      	cmp	r3, #7
 8001820:	d90f      	bls.n	8001842 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001826:	e00c      	b.n	8001842 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	2b0f      	cmp	r3, #15
 800182c:	d90b      	bls.n	8001846 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001832:	e008      	b.n	8001846 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	75fb      	strb	r3, [r7, #23]
      break;
 8001838:	e006      	b.n	8001848 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800183a:	bf00      	nop
 800183c:	e004      	b.n	8001848 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800183e:	bf00      	nop
 8001840:	e002      	b.n	8001848 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001842:	bf00      	nop
 8001844:	e000      	b.n	8001848 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001846:	bf00      	nop
  }
  if (status == HAL_OK)
 8001848:	7dfb      	ldrb	r3, [r7, #23]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d10d      	bne.n	800186a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	68ba      	ldr	r2, [r7, #8]
 8001854:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f023 0118 	bic.w	r1, r3, #24
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	430a      	orrs	r2, r1
 8001868:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800186a:	7dfb      	ldrb	r3, [r7, #23]
}
 800186c:	4618      	mov	r0, r3
 800186e:	371c      	adds	r7, #28
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001878:	b480      	push	{r7}
 800187a:	b087      	sub	sp, #28
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001886:	e17f      	b.n	8001b88 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	2101      	movs	r1, #1
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	fa01 f303 	lsl.w	r3, r1, r3
 8001894:	4013      	ands	r3, r2
 8001896:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2b00      	cmp	r3, #0
 800189c:	f000 8171 	beq.w	8001b82 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d00b      	beq.n	80018c0 <HAL_GPIO_Init+0x48>
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d007      	beq.n	80018c0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018b4:	2b11      	cmp	r3, #17
 80018b6:	d003      	beq.n	80018c0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	2b12      	cmp	r3, #18
 80018be:	d130      	bne.n	8001922 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	2203      	movs	r2, #3
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	43db      	mvns	r3, r3
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	4013      	ands	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	68da      	ldr	r2, [r3, #12]
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018f6:	2201      	movs	r2, #1
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43db      	mvns	r3, r3
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	4013      	ands	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	091b      	lsrs	r3, r3, #4
 800190c:	f003 0201 	and.w	r2, r3, #1
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	4313      	orrs	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 0303 	and.w	r3, r3, #3
 800192a:	2b03      	cmp	r3, #3
 800192c:	d118      	bne.n	8001960 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001932:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001934:	2201      	movs	r2, #1
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	4013      	ands	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	08db      	lsrs	r3, r3, #3
 800194a:	f003 0201 	and.w	r2, r3, #1
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	4313      	orrs	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	2203      	movs	r2, #3
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	4013      	ands	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4313      	orrs	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	2b02      	cmp	r3, #2
 8001996:	d003      	beq.n	80019a0 <HAL_GPIO_Init+0x128>
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	2b12      	cmp	r3, #18
 800199e:	d123      	bne.n	80019e8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	08da      	lsrs	r2, r3, #3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3208      	adds	r2, #8
 80019a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	220f      	movs	r2, #15
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4013      	ands	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	691a      	ldr	r2, [r3, #16]
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	08da      	lsrs	r2, r3, #3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	3208      	adds	r2, #8
 80019e2:	6939      	ldr	r1, [r7, #16]
 80019e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	2203      	movs	r2, #3
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4013      	ands	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 0203 	and.w	r2, r3, #3
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 80ac 	beq.w	8001b82 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a2a:	4b5f      	ldr	r3, [pc, #380]	; (8001ba8 <HAL_GPIO_Init+0x330>)
 8001a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a2e:	4a5e      	ldr	r2, [pc, #376]	; (8001ba8 <HAL_GPIO_Init+0x330>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	6613      	str	r3, [r2, #96]	; 0x60
 8001a36:	4b5c      	ldr	r3, [pc, #368]	; (8001ba8 <HAL_GPIO_Init+0x330>)
 8001a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	60bb      	str	r3, [r7, #8]
 8001a40:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a42:	4a5a      	ldr	r2, [pc, #360]	; (8001bac <HAL_GPIO_Init+0x334>)
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	089b      	lsrs	r3, r3, #2
 8001a48:	3302      	adds	r3, #2
 8001a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	f003 0303 	and.w	r3, r3, #3
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	220f      	movs	r2, #15
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	4013      	ands	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a6c:	d025      	beq.n	8001aba <HAL_GPIO_Init+0x242>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a4f      	ldr	r2, [pc, #316]	; (8001bb0 <HAL_GPIO_Init+0x338>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d01f      	beq.n	8001ab6 <HAL_GPIO_Init+0x23e>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a4e      	ldr	r2, [pc, #312]	; (8001bb4 <HAL_GPIO_Init+0x33c>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d019      	beq.n	8001ab2 <HAL_GPIO_Init+0x23a>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a4d      	ldr	r2, [pc, #308]	; (8001bb8 <HAL_GPIO_Init+0x340>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d013      	beq.n	8001aae <HAL_GPIO_Init+0x236>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a4c      	ldr	r2, [pc, #304]	; (8001bbc <HAL_GPIO_Init+0x344>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d00d      	beq.n	8001aaa <HAL_GPIO_Init+0x232>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a4b      	ldr	r2, [pc, #300]	; (8001bc0 <HAL_GPIO_Init+0x348>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d007      	beq.n	8001aa6 <HAL_GPIO_Init+0x22e>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a4a      	ldr	r2, [pc, #296]	; (8001bc4 <HAL_GPIO_Init+0x34c>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d101      	bne.n	8001aa2 <HAL_GPIO_Init+0x22a>
 8001a9e:	2306      	movs	r3, #6
 8001aa0:	e00c      	b.n	8001abc <HAL_GPIO_Init+0x244>
 8001aa2:	2307      	movs	r3, #7
 8001aa4:	e00a      	b.n	8001abc <HAL_GPIO_Init+0x244>
 8001aa6:	2305      	movs	r3, #5
 8001aa8:	e008      	b.n	8001abc <HAL_GPIO_Init+0x244>
 8001aaa:	2304      	movs	r3, #4
 8001aac:	e006      	b.n	8001abc <HAL_GPIO_Init+0x244>
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e004      	b.n	8001abc <HAL_GPIO_Init+0x244>
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	e002      	b.n	8001abc <HAL_GPIO_Init+0x244>
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e000      	b.n	8001abc <HAL_GPIO_Init+0x244>
 8001aba:	2300      	movs	r3, #0
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	f002 0203 	and.w	r2, r2, #3
 8001ac2:	0092      	lsls	r2, r2, #2
 8001ac4:	4093      	lsls	r3, r2
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001acc:	4937      	ldr	r1, [pc, #220]	; (8001bac <HAL_GPIO_Init+0x334>)
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	089b      	lsrs	r3, r3, #2
 8001ad2:	3302      	adds	r3, #2
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ada:	4b3b      	ldr	r3, [pc, #236]	; (8001bc8 <HAL_GPIO_Init+0x350>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001afe:	4a32      	ldr	r2, [pc, #200]	; (8001bc8 <HAL_GPIO_Init+0x350>)
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001b04:	4b30      	ldr	r3, [pc, #192]	; (8001bc8 <HAL_GPIO_Init+0x350>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	4013      	ands	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d003      	beq.n	8001b28 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b28:	4a27      	ldr	r2, [pc, #156]	; (8001bc8 <HAL_GPIO_Init+0x350>)
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b2e:	4b26      	ldr	r3, [pc, #152]	; (8001bc8 <HAL_GPIO_Init+0x350>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	43db      	mvns	r3, r3
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b52:	4a1d      	ldr	r2, [pc, #116]	; (8001bc8 <HAL_GPIO_Init+0x350>)
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b58:	4b1b      	ldr	r3, [pc, #108]	; (8001bc8 <HAL_GPIO_Init+0x350>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	43db      	mvns	r3, r3
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4013      	ands	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b7c:	4a12      	ldr	r2, [pc, #72]	; (8001bc8 <HAL_GPIO_Init+0x350>)
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	3301      	adds	r3, #1
 8001b86:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f47f ae78 	bne.w	8001888 <HAL_GPIO_Init+0x10>
  }
}
 8001b98:	bf00      	nop
 8001b9a:	bf00      	nop
 8001b9c:	371c      	adds	r7, #28
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	40010000 	.word	0x40010000
 8001bb0:	48000400 	.word	0x48000400
 8001bb4:	48000800 	.word	0x48000800
 8001bb8:	48000c00 	.word	0x48000c00
 8001bbc:	48001000 	.word	0x48001000
 8001bc0:	48001400 	.word	0x48001400
 8001bc4:	48001800 	.word	0x48001800
 8001bc8:	40010400 	.word	0x40010400

08001bcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	807b      	strh	r3, [r7, #2]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bdc:	787b      	ldrb	r3, [r7, #1]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001be2:	887a      	ldrh	r2, [r7, #2]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001be8:	e002      	b.n	8001bf0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bea:	887a      	ldrh	r2, [r7, #2]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	460b      	mov	r3, r1
 8001c06:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c0e:	887a      	ldrh	r2, [r7, #2]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4013      	ands	r3, r2
 8001c14:	041a      	lsls	r2, r3, #16
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	43d9      	mvns	r1, r3
 8001c1a:	887b      	ldrh	r3, [r7, #2]
 8001c1c:	400b      	ands	r3, r1
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	619a      	str	r2, [r3, #24]
}
 8001c24:	bf00      	nop
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c30:	b590      	push	{r4, r7, lr}
 8001c32:	b08d      	sub	sp, #52	; 0x34
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c3e:	6a3b      	ldr	r3, [r7, #32]
 8001c40:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f003 fafd 	bl	8005246 <USB_GetMode>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f040 838f 	bne.w	8002372 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f003 fa61 	bl	8005120 <USB_ReadInterrupts>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f000 8385 	beq.w	8002370 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f003 fa58 	bl	8005120 <USB_ReadInterrupts>
 8001c70:	4603      	mov	r3, r0
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d107      	bne.n	8001c8a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	695a      	ldr	r2, [r3, #20]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f002 0202 	and.w	r2, r2, #2
 8001c88:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f003 fa46 	bl	8005120 <USB_ReadInterrupts>
 8001c94:	4603      	mov	r3, r0
 8001c96:	f003 0310 	and.w	r3, r3, #16
 8001c9a:	2b10      	cmp	r3, #16
 8001c9c:	d161      	bne.n	8001d62 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	699a      	ldr	r2, [r3, #24]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 0210 	bic.w	r2, r2, #16
 8001cac:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001cae:	6a3b      	ldr	r3, [r7, #32]
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	f003 020f 	and.w	r2, r3, #15
 8001cba:	4613      	mov	r3, r2
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	1a9b      	subs	r3, r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	4413      	add	r3, r2
 8001cca:	3304      	adds	r3, #4
 8001ccc:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	0c5b      	lsrs	r3, r3, #17
 8001cd2:	f003 030f 	and.w	r3, r3, #15
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d124      	bne.n	8001d24 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d035      	beq.n	8001d52 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	091b      	lsrs	r3, r3, #4
 8001cee:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001cf0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	6a38      	ldr	r0, [r7, #32]
 8001cfa:	f003 f8ee 	bl	8004eda <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	68da      	ldr	r2, [r3, #12]
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	091b      	lsrs	r3, r3, #4
 8001d06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d0a:	441a      	add	r2, r3
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	699a      	ldr	r2, [r3, #24]
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	091b      	lsrs	r3, r3, #4
 8001d18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d1c:	441a      	add	r2, r3
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	619a      	str	r2, [r3, #24]
 8001d22:	e016      	b.n	8001d52 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	0c5b      	lsrs	r3, r3, #17
 8001d28:	f003 030f 	and.w	r3, r3, #15
 8001d2c:	2b06      	cmp	r3, #6
 8001d2e:	d110      	bne.n	8001d52 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d36:	2208      	movs	r2, #8
 8001d38:	4619      	mov	r1, r3
 8001d3a:	6a38      	ldr	r0, [r7, #32]
 8001d3c:	f003 f8cd 	bl	8004eda <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	699a      	ldr	r2, [r3, #24]
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	091b      	lsrs	r3, r3, #4
 8001d48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d4c:	441a      	add	r2, r3
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	699a      	ldr	r2, [r3, #24]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f042 0210 	orr.w	r2, r2, #16
 8001d60:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f003 f9da 	bl	8005120 <USB_ReadInterrupts>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d72:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001d76:	d16e      	bne.n	8001e56 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f003 f9e0 	bl	8005146 <USB_ReadDevAllOutEpInterrupt>
 8001d86:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001d88:	e062      	b.n	8001e50 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d057      	beq.n	8001e44 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	4611      	mov	r1, r2
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f003 fa05 	bl	80051ae <USB_ReadDevOutEPInterrupt>
 8001da4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d00c      	beq.n	8001dca <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db2:	015a      	lsls	r2, r3, #5
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	4413      	add	r3, r2
 8001db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001dc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 fd1f 	bl	8002808 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	f003 0308 	and.w	r3, r3, #8
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d00c      	beq.n	8001dee <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	015a      	lsls	r2, r3, #5
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	4413      	add	r3, r2
 8001ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001de0:	461a      	mov	r2, r3
 8001de2:	2308      	movs	r3, #8
 8001de4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001de6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 fd5b 	bl	80028a4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	f003 0310 	and.w	r3, r3, #16
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d008      	beq.n	8001e0a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfa:	015a      	lsls	r2, r3, #5
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	4413      	add	r3, r2
 8001e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e04:	461a      	mov	r2, r3
 8001e06:	2310      	movs	r3, #16
 8001e08:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	f003 0320 	and.w	r3, r3, #32
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d008      	beq.n	8001e26 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e16:	015a      	lsls	r2, r3, #5
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e20:	461a      	mov	r2, r3
 8001e22:	2320      	movs	r3, #32
 8001e24:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d009      	beq.n	8001e44 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	015a      	lsls	r2, r3, #5
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	4413      	add	r3, r2
 8001e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e42:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e46:	3301      	adds	r3, #1
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e4c:	085b      	lsrs	r3, r3, #1
 8001e4e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d199      	bne.n	8001d8a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f003 f960 	bl	8005120 <USB_ReadInterrupts>
 8001e60:	4603      	mov	r3, r0
 8001e62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e66:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001e6a:	f040 8087 	bne.w	8001f7c <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f003 f981 	bl	800517a <USB_ReadDevAllInEpInterrupt>
 8001e78:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001e7e:	e07a      	b.n	8001f76 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d06f      	beq.n	8001f6a <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	4611      	mov	r1, r2
 8001e94:	4618      	mov	r0, r3
 8001e96:	f003 f9a8 	bl	80051ea <USB_ReadDevInEPInterrupt>
 8001e9a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d020      	beq.n	8001ee8 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea8:	f003 030f 	and.w	r3, r3, #15
 8001eac:	2201      	movs	r2, #1
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	69f9      	ldr	r1, [r7, #28]
 8001ec2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	015a      	lsls	r2, r3, #5
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	2301      	movs	r3, #1
 8001eda:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f004 fb07 	bl	80064f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	f003 0308 	and.w	r3, r3, #8
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d008      	beq.n	8001f04 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	015a      	lsls	r2, r3, #5
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	4413      	add	r3, r2
 8001efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001efe:	461a      	mov	r2, r3
 8001f00:	2308      	movs	r3, #8
 8001f02:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	f003 0310 	and.w	r3, r3, #16
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d008      	beq.n	8001f20 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	015a      	lsls	r2, r3, #5
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	4413      	add	r3, r2
 8001f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	2310      	movs	r3, #16
 8001f1e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d008      	beq.n	8001f3c <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	015a      	lsls	r2, r3, #5
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	4413      	add	r3, r2
 8001f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f36:	461a      	mov	r2, r3
 8001f38:	2340      	movs	r3, #64	; 0x40
 8001f3a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d008      	beq.n	8001f58 <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	015a      	lsls	r2, r3, #5
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f52:	461a      	mov	r2, r3
 8001f54:	2302      	movs	r3, #2
 8001f56:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001f62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 fbc7 	bl	80026f8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f72:	085b      	lsrs	r3, r3, #1
 8001f74:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d181      	bne.n	8001e80 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f003 f8cd 	bl	8005120 <USB_ReadInterrupts>
 8001f86:	4603      	mov	r3, r0
 8001f88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001f8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f90:	d122      	bne.n	8001fd8 <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	69fa      	ldr	r2, [r7, #28]
 8001f9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fa0:	f023 0301 	bic.w	r3, r3, #1
 8001fa4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d108      	bne.n	8001fc2 <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001fb8:	2100      	movs	r1, #0
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f004 fcec 	bl	8006998 <HAL_PCDEx_LPM_Callback>
 8001fc0:	e002      	b.n	8001fc8 <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f004 fb04 	bl	80065d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	695a      	ldr	r2, [r3, #20]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001fd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f003 f89f 	bl	8005120 <USB_ReadInterrupts>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fe8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fec:	d112      	bne.n	8002014 <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d102      	bne.n	8002004 <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f004 fac0 	bl	8006584 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	695a      	ldr	r2, [r3, #20]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002012:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f003 f881 	bl	8005120 <USB_ReadInterrupts>
 800201e:	4603      	mov	r3, r0
 8002020:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002024:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002028:	d121      	bne.n	800206e <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	695a      	ldr	r2, [r3, #20]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002038:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002040:	2b00      	cmp	r3, #0
 8002042:	d111      	bne.n	8002068 <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002052:	089b      	lsrs	r3, r3, #2
 8002054:	f003 020f 	and.w	r2, r3, #15
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800205e:	2101      	movs	r1, #1
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f004 fc99 	bl	8006998 <HAL_PCDEx_LPM_Callback>
 8002066:	e002      	b.n	800206e <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f004 fa8b 	bl	8006584 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f003 f854 	bl	8005120 <USB_ReadInterrupts>
 8002078:	4603      	mov	r3, r0
 800207a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800207e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002082:	f040 80c5 	bne.w	8002210 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	69fa      	ldr	r2, [r7, #28]
 8002090:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002094:	f023 0301 	bic.w	r3, r3, #1
 8002098:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2110      	movs	r1, #16
 80020a0:	4618      	mov	r0, r3
 80020a2:	f002 fb23 	bl	80046ec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020a6:	2300      	movs	r3, #0
 80020a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020aa:	e056      	b.n	800215a <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80020ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ae:	015a      	lsls	r2, r3, #5
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	4413      	add	r3, r2
 80020b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020b8:	461a      	mov	r2, r3
 80020ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80020be:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80020c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c2:	015a      	lsls	r2, r3, #5
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	4413      	add	r3, r2
 80020c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020d0:	0151      	lsls	r1, r2, #5
 80020d2:	69fa      	ldr	r2, [r7, #28]
 80020d4:	440a      	add	r2, r1
 80020d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80020da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80020de:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80020e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e2:	015a      	lsls	r2, r3, #5
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	4413      	add	r3, r2
 80020e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020f0:	0151      	lsls	r1, r2, #5
 80020f2:	69fa      	ldr	r2, [r7, #28]
 80020f4:	440a      	add	r2, r1
 80020f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80020fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80020fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002102:	015a      	lsls	r2, r3, #5
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	4413      	add	r3, r2
 8002108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800210c:	461a      	mov	r2, r3
 800210e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002112:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002116:	015a      	lsls	r2, r3, #5
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	4413      	add	r3, r2
 800211c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002124:	0151      	lsls	r1, r2, #5
 8002126:	69fa      	ldr	r2, [r7, #28]
 8002128:	440a      	add	r2, r1
 800212a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800212e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002132:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002136:	015a      	lsls	r2, r3, #5
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	4413      	add	r3, r2
 800213c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002144:	0151      	lsls	r1, r2, #5
 8002146:	69fa      	ldr	r2, [r7, #28]
 8002148:	440a      	add	r2, r1
 800214a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800214e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002152:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002156:	3301      	adds	r3, #1
 8002158:	62fb      	str	r3, [r7, #44]	; 0x2c
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002160:	429a      	cmp	r2, r3
 8002162:	d3a3      	bcc.n	80020ac <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800216a:	69db      	ldr	r3, [r3, #28]
 800216c:	69fa      	ldr	r2, [r7, #28]
 800216e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002172:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002176:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217c:	2b00      	cmp	r3, #0
 800217e:	d016      	beq.n	80021ae <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002186:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800218a:	69fa      	ldr	r2, [r7, #28]
 800218c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002190:	f043 030b 	orr.w	r3, r3, #11
 8002194:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800219e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a0:	69fa      	ldr	r2, [r7, #28]
 80021a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021a6:	f043 030b 	orr.w	r3, r3, #11
 80021aa:	6453      	str	r3, [r2, #68]	; 0x44
 80021ac:	e015      	b.n	80021da <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	69fa      	ldr	r2, [r7, #28]
 80021b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021c0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80021c4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	69fa      	ldr	r2, [r7, #28]
 80021d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021d4:	f043 030b 	orr.w	r3, r3, #11
 80021d8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	69fa      	ldr	r2, [r7, #28]
 80021e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021e8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80021ec:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80021f8:	4619      	mov	r1, r3
 80021fa:	4610      	mov	r0, r2
 80021fc:	f003 f854 	bl	80052a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	695a      	ldr	r2, [r3, #20]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800220e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4618      	mov	r0, r3
 8002216:	f002 ff83 	bl	8005120 <USB_ReadInterrupts>
 800221a:	4603      	mov	r3, r0
 800221c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002220:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002224:	d124      	bne.n	8002270 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f003 f819 	bl	8005262 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f002 fa7f 	bl	8004738 <USB_GetDevSpeed>
 800223a:	4603      	mov	r3, r0
 800223c:	461a      	mov	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681c      	ldr	r4, [r3, #0]
 8002246:	f001 f919 	bl	800347c <HAL_RCC_GetHCLKFreq>
 800224a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002250:	b2db      	uxtb	r3, r3
 8002252:	461a      	mov	r2, r3
 8002254:	4620      	mov	r0, r4
 8002256:	f002 f9ad 	bl	80045b4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f004 f973 	bl	8006546 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	695a      	ldr	r2, [r3, #20]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800226e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f002 ff53 	bl	8005120 <USB_ReadInterrupts>
 800227a:	4603      	mov	r3, r0
 800227c:	f003 0308 	and.w	r3, r3, #8
 8002280:	2b08      	cmp	r3, #8
 8002282:	d10a      	bne.n	800229a <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f004 f950 	bl	800652a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	695a      	ldr	r2, [r3, #20]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f002 0208 	and.w	r2, r2, #8
 8002298:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4618      	mov	r0, r3
 80022a0:	f002 ff3e 	bl	8005120 <USB_ReadInterrupts>
 80022a4:	4603      	mov	r3, r0
 80022a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022ae:	d10f      	bne.n	80022d0 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80022b0:	2300      	movs	r3, #0
 80022b2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	4619      	mov	r1, r3
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f004 f9c2 	bl	8006644 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	695a      	ldr	r2, [r3, #20]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80022ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f002 ff23 	bl	8005120 <USB_ReadInterrupts>
 80022da:	4603      	mov	r3, r0
 80022dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022e4:	d10f      	bne.n	8002306 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	4619      	mov	r1, r3
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f004 f995 	bl	8006620 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	695a      	ldr	r2, [r3, #20]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002304:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f002 ff08 	bl	8005120 <USB_ReadInterrupts>
 8002310:	4603      	mov	r3, r0
 8002312:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800231a:	d10a      	bne.n	8002332 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f004 f9a3 	bl	8006668 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	695a      	ldr	r2, [r3, #20]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002330:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f002 fef2 	bl	8005120 <USB_ReadInterrupts>
 800233c:	4603      	mov	r3, r0
 800233e:	f003 0304 	and.w	r3, r3, #4
 8002342:	2b04      	cmp	r3, #4
 8002344:	d115      	bne.n	8002372 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	2b00      	cmp	r3, #0
 8002356:	d002      	beq.n	800235e <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f004 f993 	bl	8006684 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6859      	ldr	r1, [r3, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	430a      	orrs	r2, r1
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	e000      	b.n	8002372 <HAL_PCD_IRQHandler+0x742>
      return;
 8002370:	bf00      	nop
    }
  }
}
 8002372:	3734      	adds	r7, #52	; 0x34
 8002374:	46bd      	mov	sp, r7
 8002376:	bd90      	pop	{r4, r7, pc}

08002378 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800238a:	2b01      	cmp	r3, #1
 800238c:	d101      	bne.n	8002392 <HAL_PCD_SetAddress+0x1a>
 800238e:	2302      	movs	r3, #2
 8002390:	e013      	b.n	80023ba <HAL_PCD_SetAddress+0x42>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	78fa      	ldrb	r2, [r7, #3]
 800239e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	78fa      	ldrb	r2, [r7, #3]
 80023a8:	4611      	mov	r1, r2
 80023aa:	4618      	mov	r0, r3
 80023ac:	f002 fe92 	bl	80050d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b084      	sub	sp, #16
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
 80023ca:	4608      	mov	r0, r1
 80023cc:	4611      	mov	r1, r2
 80023ce:	461a      	mov	r2, r3
 80023d0:	4603      	mov	r3, r0
 80023d2:	70fb      	strb	r3, [r7, #3]
 80023d4:	460b      	mov	r3, r1
 80023d6:	803b      	strh	r3, [r7, #0]
 80023d8:	4613      	mov	r3, r2
 80023da:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80023dc:	2300      	movs	r3, #0
 80023de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80023e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	da0f      	bge.n	8002408 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023e8:	78fb      	ldrb	r3, [r7, #3]
 80023ea:	f003 020f 	and.w	r2, r3, #15
 80023ee:	4613      	mov	r3, r2
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	1a9b      	subs	r3, r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	3338      	adds	r3, #56	; 0x38
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	4413      	add	r3, r2
 80023fc:	3304      	adds	r3, #4
 80023fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2201      	movs	r2, #1
 8002404:	705a      	strb	r2, [r3, #1]
 8002406:	e00f      	b.n	8002428 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002408:	78fb      	ldrb	r3, [r7, #3]
 800240a:	f003 020f 	and.w	r2, r3, #15
 800240e:	4613      	mov	r3, r2
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	1a9b      	subs	r3, r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	4413      	add	r3, r2
 800241e:	3304      	adds	r3, #4
 8002420:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2200      	movs	r2, #0
 8002426:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002428:	78fb      	ldrb	r3, [r7, #3]
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	b2da      	uxtb	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002434:	883a      	ldrh	r2, [r7, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	78ba      	ldrb	r2, [r7, #2]
 800243e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	785b      	ldrb	r3, [r3, #1]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d004      	beq.n	8002452 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	b29a      	uxth	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002452:	78bb      	ldrb	r3, [r7, #2]
 8002454:	2b02      	cmp	r3, #2
 8002456:	d102      	bne.n	800245e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002464:	2b01      	cmp	r3, #1
 8002466:	d101      	bne.n	800246c <HAL_PCD_EP_Open+0xaa>
 8002468:	2302      	movs	r3, #2
 800246a:	e00e      	b.n	800248a <HAL_PCD_EP_Open+0xc8>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68f9      	ldr	r1, [r7, #12]
 800247a:	4618      	mov	r0, r3
 800247c:	f002 f97b 	bl	8004776 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002488:	7afb      	ldrb	r3, [r7, #11]
}
 800248a:	4618      	mov	r0, r3
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b086      	sub	sp, #24
 8002496:	af00      	add	r7, sp, #0
 8002498:	60f8      	str	r0, [r7, #12]
 800249a:	607a      	str	r2, [r7, #4]
 800249c:	603b      	str	r3, [r7, #0]
 800249e:	460b      	mov	r3, r1
 80024a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024a2:	7afb      	ldrb	r3, [r7, #11]
 80024a4:	f003 020f 	and.w	r2, r3, #15
 80024a8:	4613      	mov	r3, r2
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	1a9b      	subs	r3, r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	4413      	add	r3, r2
 80024b8:	3304      	adds	r3, #4
 80024ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	2200      	movs	r2, #0
 80024cc:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	2200      	movs	r2, #0
 80024d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024d4:	7afb      	ldrb	r3, [r7, #11]
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80024e0:	7afb      	ldrb	r3, [r7, #11]
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d106      	bne.n	80024f8 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6979      	ldr	r1, [r7, #20]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f002 fba3 	bl	8004c3c <USB_EP0StartXfer>
 80024f6:	e005      	b.n	8002504 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6979      	ldr	r1, [r7, #20]
 80024fe:	4618      	mov	r0, r3
 8002500:	f002 f9c0 	bl	8004884 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3718      	adds	r7, #24
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b086      	sub	sp, #24
 8002512:	af00      	add	r7, sp, #0
 8002514:	60f8      	str	r0, [r7, #12]
 8002516:	607a      	str	r2, [r7, #4]
 8002518:	603b      	str	r3, [r7, #0]
 800251a:	460b      	mov	r3, r1
 800251c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800251e:	7afb      	ldrb	r3, [r7, #11]
 8002520:	f003 020f 	and.w	r2, r3, #15
 8002524:	4613      	mov	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	1a9b      	subs	r3, r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	3338      	adds	r3, #56	; 0x38
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	4413      	add	r3, r2
 8002532:	3304      	adds	r3, #4
 8002534:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	2200      	movs	r2, #0
 8002546:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	2201      	movs	r2, #1
 800254c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800254e:	7afb      	ldrb	r3, [r7, #11]
 8002550:	f003 030f 	and.w	r3, r3, #15
 8002554:	b2da      	uxtb	r2, r3
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800255a:	7afb      	ldrb	r3, [r7, #11]
 800255c:	f003 030f 	and.w	r3, r3, #15
 8002560:	2b00      	cmp	r3, #0
 8002562:	d106      	bne.n	8002572 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6979      	ldr	r1, [r7, #20]
 800256a:	4618      	mov	r0, r3
 800256c:	f002 fb66 	bl	8004c3c <USB_EP0StartXfer>
 8002570:	e005      	b.n	800257e <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6979      	ldr	r1, [r7, #20]
 8002578:	4618      	mov	r0, r3
 800257a:	f002 f983 	bl	8004884 <USB_EPStartXfer>
  }

  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	460b      	mov	r3, r1
 8002592:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002594:	78fb      	ldrb	r3, [r7, #3]
 8002596:	f003 020f 	and.w	r2, r3, #15
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d901      	bls.n	80025a6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e04e      	b.n	8002644 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	da0f      	bge.n	80025ce <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025ae:	78fb      	ldrb	r3, [r7, #3]
 80025b0:	f003 020f 	and.w	r2, r3, #15
 80025b4:	4613      	mov	r3, r2
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	1a9b      	subs	r3, r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	3338      	adds	r3, #56	; 0x38
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	4413      	add	r3, r2
 80025c2:	3304      	adds	r3, #4
 80025c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2201      	movs	r2, #1
 80025ca:	705a      	strb	r2, [r3, #1]
 80025cc:	e00d      	b.n	80025ea <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80025ce:	78fa      	ldrb	r2, [r7, #3]
 80025d0:	4613      	mov	r3, r2
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	1a9b      	subs	r3, r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	4413      	add	r3, r2
 80025e0:	3304      	adds	r3, #4
 80025e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2201      	movs	r2, #1
 80025ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025f0:	78fb      	ldrb	r3, [r7, #3]
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	b2da      	uxtb	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002602:	2b01      	cmp	r3, #1
 8002604:	d101      	bne.n	800260a <HAL_PCD_EP_SetStall+0x82>
 8002606:	2302      	movs	r3, #2
 8002608:	e01c      	b.n	8002644 <HAL_PCD_EP_SetStall+0xbc>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68f9      	ldr	r1, [r7, #12]
 8002618:	4618      	mov	r0, r3
 800261a:	f002 fc87 	bl	8004f2c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800261e:	78fb      	ldrb	r3, [r7, #3]
 8002620:	f003 030f 	and.w	r3, r3, #15
 8002624:	2b00      	cmp	r3, #0
 8002626:	d108      	bne.n	800263a <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002632:	4619      	mov	r1, r3
 8002634:	4610      	mov	r0, r2
 8002636:	f002 fe37 	bl	80052a8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002658:	78fb      	ldrb	r3, [r7, #3]
 800265a:	f003 020f 	and.w	r2, r3, #15
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	429a      	cmp	r2, r3
 8002664:	d901      	bls.n	800266a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e042      	b.n	80026f0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800266a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800266e:	2b00      	cmp	r3, #0
 8002670:	da0f      	bge.n	8002692 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002672:	78fb      	ldrb	r3, [r7, #3]
 8002674:	f003 020f 	and.w	r2, r3, #15
 8002678:	4613      	mov	r3, r2
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	1a9b      	subs	r3, r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	3338      	adds	r3, #56	; 0x38
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	4413      	add	r3, r2
 8002686:	3304      	adds	r3, #4
 8002688:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2201      	movs	r2, #1
 800268e:	705a      	strb	r2, [r3, #1]
 8002690:	e00f      	b.n	80026b2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002692:	78fb      	ldrb	r3, [r7, #3]
 8002694:	f003 020f 	and.w	r2, r3, #15
 8002698:	4613      	mov	r3, r2
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	1a9b      	subs	r3, r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	4413      	add	r3, r2
 80026a8:	3304      	adds	r3, #4
 80026aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026b8:	78fb      	ldrb	r3, [r7, #3]
 80026ba:	f003 030f 	and.w	r3, r3, #15
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d101      	bne.n	80026d2 <HAL_PCD_EP_ClrStall+0x86>
 80026ce:	2302      	movs	r3, #2
 80026d0:	e00e      	b.n	80026f0 <HAL_PCD_EP_ClrStall+0xa4>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68f9      	ldr	r1, [r7, #12]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f002 fc91 	bl	8005008 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b088      	sub	sp, #32
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	4613      	mov	r3, r2
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	1a9b      	subs	r3, r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	3338      	adds	r3, #56	; 0x38
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	4413      	add	r3, r2
 800271c:	3304      	adds	r3, #4
 800271e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	699a      	ldr	r2, [r3, #24]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	429a      	cmp	r2, r3
 800272a:	d901      	bls.n	8002730 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e067      	b.n	8002800 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	695a      	ldr	r2, [r3, #20]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	69fa      	ldr	r2, [r7, #28]
 8002742:	429a      	cmp	r2, r3
 8002744:	d902      	bls.n	800274c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	3303      	adds	r3, #3
 8002750:	089b      	lsrs	r3, r3, #2
 8002752:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002754:	e026      	b.n	80027a4 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	695a      	ldr	r2, [r3, #20]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	69fa      	ldr	r2, [r7, #28]
 8002768:	429a      	cmp	r2, r3
 800276a:	d902      	bls.n	8002772 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	3303      	adds	r3, #3
 8002776:	089b      	lsrs	r3, r3, #2
 8002778:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	68d9      	ldr	r1, [r3, #12]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	b2da      	uxtb	r2, r3
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	b29b      	uxth	r3, r3
 8002786:	6978      	ldr	r0, [r7, #20]
 8002788:	f002 fb76 	bl	8004e78 <USB_WritePacket>

    ep->xfer_buff  += len;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	68da      	ldr	r2, [r3, #12]
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	441a      	add	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	699a      	ldr	r2, [r3, #24]
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	441a      	add	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	015a      	lsls	r2, r3, #5
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	4413      	add	r3, r2
 80027ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d809      	bhi.n	80027ce <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	699a      	ldr	r2, [r3, #24]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d203      	bcs.n	80027ce <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1c3      	bne.n	8002756 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	695a      	ldr	r2, [r3, #20]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d811      	bhi.n	80027fe <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	f003 030f 	and.w	r3, r3, #15
 80027e0:	2201      	movs	r2, #1
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	43db      	mvns	r3, r3
 80027f4:	6939      	ldr	r1, [r7, #16]
 80027f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80027fa:	4013      	ands	r3, r2
 80027fc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3720      	adds	r7, #32
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	333c      	adds	r3, #60	; 0x3c
 8002820:	3304      	adds	r3, #4
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	015a      	lsls	r2, r3, #5
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	4413      	add	r3, r2
 800282e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	4a19      	ldr	r2, [pc, #100]	; (80028a0 <PCD_EP_OutXfrComplete_int+0x98>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d124      	bne.n	8002888 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00a      	beq.n	800285e <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	015a      	lsls	r2, r3, #5
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	4413      	add	r3, r2
 8002850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002854:	461a      	mov	r2, r3
 8002856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800285a:	6093      	str	r3, [r2, #8]
 800285c:	e01a      	b.n	8002894 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	f003 0320 	and.w	r3, r3, #32
 8002864:	2b00      	cmp	r3, #0
 8002866:	d008      	beq.n	800287a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	015a      	lsls	r2, r3, #5
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	4413      	add	r3, r2
 8002870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002874:	461a      	mov	r2, r3
 8002876:	2320      	movs	r3, #32
 8002878:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	b2db      	uxtb	r3, r3
 800287e:	4619      	mov	r1, r3
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f003 fe1d 	bl	80064c0 <HAL_PCD_DataOutStageCallback>
 8002886:	e005      	b.n	8002894 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	b2db      	uxtb	r3, r3
 800288c:	4619      	mov	r1, r3
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f003 fe16 	bl	80064c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3718      	adds	r7, #24
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	4f54310a 	.word	0x4f54310a

080028a4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	333c      	adds	r3, #60	; 0x3c
 80028bc:	3304      	adds	r3, #4
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	015a      	lsls	r2, r3, #5
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	4413      	add	r3, r2
 80028ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	4a0c      	ldr	r2, [pc, #48]	; (8002908 <PCD_EP_OutSetupPacket_int+0x64>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d90e      	bls.n	80028f8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d009      	beq.n	80028f8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	015a      	lsls	r2, r3, #5
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	4413      	add	r3, r2
 80028ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028f0:	461a      	mov	r2, r3
 80028f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028f6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f003 fdcf 	bl	800649c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3718      	adds	r7, #24
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	4f54300a 	.word	0x4f54300a

0800290c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002910:	4b04      	ldr	r3, [pc, #16]	; (8002924 <HAL_PWREx_GetVoltageRange+0x18>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002918:	4618      	mov	r0, r3
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	40007000 	.word	0x40007000

08002928 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002936:	d130      	bne.n	800299a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002938:	4b23      	ldr	r3, [pc, #140]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002944:	d038      	beq.n	80029b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002946:	4b20      	ldr	r3, [pc, #128]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800294e:	4a1e      	ldr	r2, [pc, #120]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002950:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002954:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002956:	4b1d      	ldr	r3, [pc, #116]	; (80029cc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2232      	movs	r2, #50	; 0x32
 800295c:	fb02 f303 	mul.w	r3, r2, r3
 8002960:	4a1b      	ldr	r2, [pc, #108]	; (80029d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002962:	fba2 2303 	umull	r2, r3, r2, r3
 8002966:	0c9b      	lsrs	r3, r3, #18
 8002968:	3301      	adds	r3, #1
 800296a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800296c:	e002      	b.n	8002974 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	3b01      	subs	r3, #1
 8002972:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002974:	4b14      	ldr	r3, [pc, #80]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800297c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002980:	d102      	bne.n	8002988 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1f2      	bne.n	800296e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002988:	4b0f      	ldr	r3, [pc, #60]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002994:	d110      	bne.n	80029b8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e00f      	b.n	80029ba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800299a:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029a6:	d007      	beq.n	80029b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029a8:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029b0:	4a05      	ldr	r2, [pc, #20]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029b6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3714      	adds	r7, #20
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	40007000 	.word	0x40007000
 80029cc:	20000018 	.word	0x20000018
 80029d0:	431bde83 	.word	0x431bde83

080029d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b088      	sub	sp, #32
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e3d4      	b.n	8003190 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029e6:	4ba1      	ldr	r3, [pc, #644]	; (8002c6c <HAL_RCC_OscConfig+0x298>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 030c 	and.w	r3, r3, #12
 80029ee:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029f0:	4b9e      	ldr	r3, [pc, #632]	; (8002c6c <HAL_RCC_OscConfig+0x298>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	f003 0303 	and.w	r3, r3, #3
 80029f8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0310 	and.w	r3, r3, #16
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f000 80e4 	beq.w	8002bd0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d007      	beq.n	8002a1e <HAL_RCC_OscConfig+0x4a>
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	2b0c      	cmp	r3, #12
 8002a12:	f040 808b 	bne.w	8002b2c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	f040 8087 	bne.w	8002b2c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a1e:	4b93      	ldr	r3, [pc, #588]	; (8002c6c <HAL_RCC_OscConfig+0x298>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d005      	beq.n	8002a36 <HAL_RCC_OscConfig+0x62>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e3ac      	b.n	8003190 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a1a      	ldr	r2, [r3, #32]
 8002a3a:	4b8c      	ldr	r3, [pc, #560]	; (8002c6c <HAL_RCC_OscConfig+0x298>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d004      	beq.n	8002a50 <HAL_RCC_OscConfig+0x7c>
 8002a46:	4b89      	ldr	r3, [pc, #548]	; (8002c6c <HAL_RCC_OscConfig+0x298>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a4e:	e005      	b.n	8002a5c <HAL_RCC_OscConfig+0x88>
 8002a50:	4b86      	ldr	r3, [pc, #536]	; (8002c6c <HAL_RCC_OscConfig+0x298>)
 8002a52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a56:	091b      	lsrs	r3, r3, #4
 8002a58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d223      	bcs.n	8002aa8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f000 fd5d 	bl	8003524 <RCC_SetFlashLatencyFromMSIRange>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e38d      	b.n	8003190 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a74:	4b7d      	ldr	r3, [pc, #500]	; (8002c6c <HAL_RCC_OscConfig+0x298>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a7c      	ldr	r2, [pc, #496]	; (8002c6c <HAL_RCC_OscConfig+0x298>)
 8002a7a:	f043 0308 	orr.w	r3, r3, #8
 8002a7e:	6013      	str	r3, [r2, #0]
 8002a80:	4b7a      	ldr	r3, [pc, #488]	; (8002c6c <HAL_RCC_OscConfig+0x298>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	4977      	ldr	r1, [pc, #476]	; (8002c6c <HAL_RCC_OscConfig+0x298>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a92:	4b76      	ldr	r3, [pc, #472]	; (8002c6c <HAL_RCC_OscConfig+0x298>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	021b      	lsls	r3, r3, #8
 8002aa0:	4972      	ldr	r1, [pc, #456]	; (8002c6c <HAL_RCC_OscConfig+0x298>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	604b      	str	r3, [r1, #4]
 8002aa6:	e025      	b.n	8002af4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002aa8:	4b70      	ldr	r3, [pc, #448]	; (8002c6c <HAL_RCC_OscConfig+0x298>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a6f      	ldr	r2, [pc, #444]	; (8002c6c <HAL_RCC_OscConfig+0x298>)
 8002aae:	f043 0308 	orr.w	r3, r3, #8
 8002ab2:	6013      	str	r3, [r2, #0]
 8002ab4:	4b6d      	ldr	r3, [pc, #436]	; (8002c6c <HAL_RCC_OscConfig+0x298>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	496a      	ldr	r1, [pc, #424]	; (8002c6c <HAL_RCC_OscConfig+0x298>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ac6:	4b69      	ldr	r3, [pc, #420]	; (8002c6c <HAL_RCC_OscConfig+0x298>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	021b      	lsls	r3, r3, #8
 8002ad4:	4965      	ldr	r1, [pc, #404]	; (8002c6c <HAL_RCC_OscConfig+0x298>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d109      	bne.n	8002af4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f000 fd1d 	bl	8003524 <RCC_SetFlashLatencyFromMSIRange>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e34d      	b.n	8003190 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002af4:	f000 fc36 	bl	8003364 <HAL_RCC_GetSysClockFreq>
 8002af8:	4602      	mov	r2, r0
 8002afa:	4b5c      	ldr	r3, [pc, #368]	; (8002c6c <HAL_RCC_OscConfig+0x298>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	091b      	lsrs	r3, r3, #4
 8002b00:	f003 030f 	and.w	r3, r3, #15
 8002b04:	495a      	ldr	r1, [pc, #360]	; (8002c70 <HAL_RCC_OscConfig+0x29c>)
 8002b06:	5ccb      	ldrb	r3, [r1, r3]
 8002b08:	f003 031f 	and.w	r3, r3, #31
 8002b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b10:	4a58      	ldr	r2, [pc, #352]	; (8002c74 <HAL_RCC_OscConfig+0x2a0>)
 8002b12:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b14:	4b58      	ldr	r3, [pc, #352]	; (8002c78 <HAL_RCC_OscConfig+0x2a4>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7fd fcf9 	bl	8000510 <HAL_InitTick>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b22:	7bfb      	ldrb	r3, [r7, #15]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d052      	beq.n	8002bce <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002b28:	7bfb      	ldrb	r3, [r7, #15]
 8002b2a:	e331      	b.n	8003190 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d032      	beq.n	8002b9a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b34:	4b4d      	ldr	r3, [pc, #308]	; (8002c6c <HAL_RCC_OscConfig+0x298>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a4c      	ldr	r2, [pc, #304]	; (8002c6c <HAL_RCC_OscConfig+0x298>)
 8002b3a:	f043 0301 	orr.w	r3, r3, #1
 8002b3e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b40:	f7fe fc9e 	bl	8001480 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b48:	f7fe fc9a 	bl	8001480 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e31a      	b.n	8003190 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b5a:	4b44      	ldr	r3, [pc, #272]	; (8002c6c <HAL_RCC_OscConfig+0x298>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0f0      	beq.n	8002b48 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b66:	4b41      	ldr	r3, [pc, #260]	; (8002c6c <HAL_RCC_OscConfig+0x298>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a40      	ldr	r2, [pc, #256]	; (8002c6c <HAL_RCC_OscConfig+0x298>)
 8002b6c:	f043 0308 	orr.w	r3, r3, #8
 8002b70:	6013      	str	r3, [r2, #0]
 8002b72:	4b3e      	ldr	r3, [pc, #248]	; (8002c6c <HAL_RCC_OscConfig+0x298>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	493b      	ldr	r1, [pc, #236]	; (8002c6c <HAL_RCC_OscConfig+0x298>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b84:	4b39      	ldr	r3, [pc, #228]	; (8002c6c <HAL_RCC_OscConfig+0x298>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	69db      	ldr	r3, [r3, #28]
 8002b90:	021b      	lsls	r3, r3, #8
 8002b92:	4936      	ldr	r1, [pc, #216]	; (8002c6c <HAL_RCC_OscConfig+0x298>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	604b      	str	r3, [r1, #4]
 8002b98:	e01a      	b.n	8002bd0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b9a:	4b34      	ldr	r3, [pc, #208]	; (8002c6c <HAL_RCC_OscConfig+0x298>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a33      	ldr	r2, [pc, #204]	; (8002c6c <HAL_RCC_OscConfig+0x298>)
 8002ba0:	f023 0301 	bic.w	r3, r3, #1
 8002ba4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ba6:	f7fe fc6b 	bl	8001480 <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bac:	e008      	b.n	8002bc0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bae:	f7fe fc67 	bl	8001480 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e2e7      	b.n	8003190 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bc0:	4b2a      	ldr	r3, [pc, #168]	; (8002c6c <HAL_RCC_OscConfig+0x298>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1f0      	bne.n	8002bae <HAL_RCC_OscConfig+0x1da>
 8002bcc:	e000      	b.n	8002bd0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bce:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d074      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	2b08      	cmp	r3, #8
 8002be0:	d005      	beq.n	8002bee <HAL_RCC_OscConfig+0x21a>
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	2b0c      	cmp	r3, #12
 8002be6:	d10e      	bne.n	8002c06 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	2b03      	cmp	r3, #3
 8002bec:	d10b      	bne.n	8002c06 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bee:	4b1f      	ldr	r3, [pc, #124]	; (8002c6c <HAL_RCC_OscConfig+0x298>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d064      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x2f0>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d160      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e2c4      	b.n	8003190 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c0e:	d106      	bne.n	8002c1e <HAL_RCC_OscConfig+0x24a>
 8002c10:	4b16      	ldr	r3, [pc, #88]	; (8002c6c <HAL_RCC_OscConfig+0x298>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a15      	ldr	r2, [pc, #84]	; (8002c6c <HAL_RCC_OscConfig+0x298>)
 8002c16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c1a:	6013      	str	r3, [r2, #0]
 8002c1c:	e01d      	b.n	8002c5a <HAL_RCC_OscConfig+0x286>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c26:	d10c      	bne.n	8002c42 <HAL_RCC_OscConfig+0x26e>
 8002c28:	4b10      	ldr	r3, [pc, #64]	; (8002c6c <HAL_RCC_OscConfig+0x298>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a0f      	ldr	r2, [pc, #60]	; (8002c6c <HAL_RCC_OscConfig+0x298>)
 8002c2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c32:	6013      	str	r3, [r2, #0]
 8002c34:	4b0d      	ldr	r3, [pc, #52]	; (8002c6c <HAL_RCC_OscConfig+0x298>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a0c      	ldr	r2, [pc, #48]	; (8002c6c <HAL_RCC_OscConfig+0x298>)
 8002c3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c3e:	6013      	str	r3, [r2, #0]
 8002c40:	e00b      	b.n	8002c5a <HAL_RCC_OscConfig+0x286>
 8002c42:	4b0a      	ldr	r3, [pc, #40]	; (8002c6c <HAL_RCC_OscConfig+0x298>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a09      	ldr	r2, [pc, #36]	; (8002c6c <HAL_RCC_OscConfig+0x298>)
 8002c48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c4c:	6013      	str	r3, [r2, #0]
 8002c4e:	4b07      	ldr	r3, [pc, #28]	; (8002c6c <HAL_RCC_OscConfig+0x298>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a06      	ldr	r2, [pc, #24]	; (8002c6c <HAL_RCC_OscConfig+0x298>)
 8002c54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c58:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d01c      	beq.n	8002c9c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c62:	f7fe fc0d 	bl	8001480 <HAL_GetTick>
 8002c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c68:	e011      	b.n	8002c8e <HAL_RCC_OscConfig+0x2ba>
 8002c6a:	bf00      	nop
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	08006af0 	.word	0x08006af0
 8002c74:	20000018 	.word	0x20000018
 8002c78:	2000001c 	.word	0x2000001c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c7c:	f7fe fc00 	bl	8001480 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b64      	cmp	r3, #100	; 0x64
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e280      	b.n	8003190 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c8e:	4baf      	ldr	r3, [pc, #700]	; (8002f4c <HAL_RCC_OscConfig+0x578>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d0f0      	beq.n	8002c7c <HAL_RCC_OscConfig+0x2a8>
 8002c9a:	e014      	b.n	8002cc6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9c:	f7fe fbf0 	bl	8001480 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca4:	f7fe fbec 	bl	8001480 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b64      	cmp	r3, #100	; 0x64
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e26c      	b.n	8003190 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cb6:	4ba5      	ldr	r3, [pc, #660]	; (8002f4c <HAL_RCC_OscConfig+0x578>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1f0      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x2d0>
 8002cc2:	e000      	b.n	8002cc6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d060      	beq.n	8002d94 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	2b04      	cmp	r3, #4
 8002cd6:	d005      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x310>
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	2b0c      	cmp	r3, #12
 8002cdc:	d119      	bne.n	8002d12 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d116      	bne.n	8002d12 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ce4:	4b99      	ldr	r3, [pc, #612]	; (8002f4c <HAL_RCC_OscConfig+0x578>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d005      	beq.n	8002cfc <HAL_RCC_OscConfig+0x328>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e249      	b.n	8003190 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cfc:	4b93      	ldr	r3, [pc, #588]	; (8002f4c <HAL_RCC_OscConfig+0x578>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	061b      	lsls	r3, r3, #24
 8002d0a:	4990      	ldr	r1, [pc, #576]	; (8002f4c <HAL_RCC_OscConfig+0x578>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d10:	e040      	b.n	8002d94 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d023      	beq.n	8002d62 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d1a:	4b8c      	ldr	r3, [pc, #560]	; (8002f4c <HAL_RCC_OscConfig+0x578>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a8b      	ldr	r2, [pc, #556]	; (8002f4c <HAL_RCC_OscConfig+0x578>)
 8002d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d26:	f7fe fbab 	bl	8001480 <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d2e:	f7fe fba7 	bl	8001480 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e227      	b.n	8003190 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d40:	4b82      	ldr	r3, [pc, #520]	; (8002f4c <HAL_RCC_OscConfig+0x578>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0f0      	beq.n	8002d2e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d4c:	4b7f      	ldr	r3, [pc, #508]	; (8002f4c <HAL_RCC_OscConfig+0x578>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	061b      	lsls	r3, r3, #24
 8002d5a:	497c      	ldr	r1, [pc, #496]	; (8002f4c <HAL_RCC_OscConfig+0x578>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	604b      	str	r3, [r1, #4]
 8002d60:	e018      	b.n	8002d94 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d62:	4b7a      	ldr	r3, [pc, #488]	; (8002f4c <HAL_RCC_OscConfig+0x578>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a79      	ldr	r2, [pc, #484]	; (8002f4c <HAL_RCC_OscConfig+0x578>)
 8002d68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6e:	f7fe fb87 	bl	8001480 <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d76:	f7fe fb83 	bl	8001480 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e203      	b.n	8003190 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d88:	4b70      	ldr	r3, [pc, #448]	; (8002f4c <HAL_RCC_OscConfig+0x578>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1f0      	bne.n	8002d76 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0308 	and.w	r3, r3, #8
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d03c      	beq.n	8002e1a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d01c      	beq.n	8002de2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002da8:	4b68      	ldr	r3, [pc, #416]	; (8002f4c <HAL_RCC_OscConfig+0x578>)
 8002daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dae:	4a67      	ldr	r2, [pc, #412]	; (8002f4c <HAL_RCC_OscConfig+0x578>)
 8002db0:	f043 0301 	orr.w	r3, r3, #1
 8002db4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db8:	f7fe fb62 	bl	8001480 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dc0:	f7fe fb5e 	bl	8001480 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e1de      	b.n	8003190 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dd2:	4b5e      	ldr	r3, [pc, #376]	; (8002f4c <HAL_RCC_OscConfig+0x578>)
 8002dd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0ef      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x3ec>
 8002de0:	e01b      	b.n	8002e1a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002de2:	4b5a      	ldr	r3, [pc, #360]	; (8002f4c <HAL_RCC_OscConfig+0x578>)
 8002de4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002de8:	4a58      	ldr	r2, [pc, #352]	; (8002f4c <HAL_RCC_OscConfig+0x578>)
 8002dea:	f023 0301 	bic.w	r3, r3, #1
 8002dee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df2:	f7fe fb45 	bl	8001480 <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002df8:	e008      	b.n	8002e0c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dfa:	f7fe fb41 	bl	8001480 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e1c1      	b.n	8003190 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e0c:	4b4f      	ldr	r3, [pc, #316]	; (8002f4c <HAL_RCC_OscConfig+0x578>)
 8002e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1ef      	bne.n	8002dfa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0304 	and.w	r3, r3, #4
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f000 80a6 	beq.w	8002f74 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e2c:	4b47      	ldr	r3, [pc, #284]	; (8002f4c <HAL_RCC_OscConfig+0x578>)
 8002e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10d      	bne.n	8002e54 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e38:	4b44      	ldr	r3, [pc, #272]	; (8002f4c <HAL_RCC_OscConfig+0x578>)
 8002e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3c:	4a43      	ldr	r2, [pc, #268]	; (8002f4c <HAL_RCC_OscConfig+0x578>)
 8002e3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e42:	6593      	str	r3, [r2, #88]	; 0x58
 8002e44:	4b41      	ldr	r3, [pc, #260]	; (8002f4c <HAL_RCC_OscConfig+0x578>)
 8002e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4c:	60bb      	str	r3, [r7, #8]
 8002e4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e50:	2301      	movs	r3, #1
 8002e52:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e54:	4b3e      	ldr	r3, [pc, #248]	; (8002f50 <HAL_RCC_OscConfig+0x57c>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d118      	bne.n	8002e92 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e60:	4b3b      	ldr	r3, [pc, #236]	; (8002f50 <HAL_RCC_OscConfig+0x57c>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a3a      	ldr	r2, [pc, #232]	; (8002f50 <HAL_RCC_OscConfig+0x57c>)
 8002e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e6a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e6c:	f7fe fb08 	bl	8001480 <HAL_GetTick>
 8002e70:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e72:	e008      	b.n	8002e86 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e74:	f7fe fb04 	bl	8001480 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e184      	b.n	8003190 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e86:	4b32      	ldr	r3, [pc, #200]	; (8002f50 <HAL_RCC_OscConfig+0x57c>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d0f0      	beq.n	8002e74 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d108      	bne.n	8002eac <HAL_RCC_OscConfig+0x4d8>
 8002e9a:	4b2c      	ldr	r3, [pc, #176]	; (8002f4c <HAL_RCC_OscConfig+0x578>)
 8002e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea0:	4a2a      	ldr	r2, [pc, #168]	; (8002f4c <HAL_RCC_OscConfig+0x578>)
 8002ea2:	f043 0301 	orr.w	r3, r3, #1
 8002ea6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002eaa:	e024      	b.n	8002ef6 <HAL_RCC_OscConfig+0x522>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	2b05      	cmp	r3, #5
 8002eb2:	d110      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x502>
 8002eb4:	4b25      	ldr	r3, [pc, #148]	; (8002f4c <HAL_RCC_OscConfig+0x578>)
 8002eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eba:	4a24      	ldr	r2, [pc, #144]	; (8002f4c <HAL_RCC_OscConfig+0x578>)
 8002ebc:	f043 0304 	orr.w	r3, r3, #4
 8002ec0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ec4:	4b21      	ldr	r3, [pc, #132]	; (8002f4c <HAL_RCC_OscConfig+0x578>)
 8002ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eca:	4a20      	ldr	r2, [pc, #128]	; (8002f4c <HAL_RCC_OscConfig+0x578>)
 8002ecc:	f043 0301 	orr.w	r3, r3, #1
 8002ed0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ed4:	e00f      	b.n	8002ef6 <HAL_RCC_OscConfig+0x522>
 8002ed6:	4b1d      	ldr	r3, [pc, #116]	; (8002f4c <HAL_RCC_OscConfig+0x578>)
 8002ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002edc:	4a1b      	ldr	r2, [pc, #108]	; (8002f4c <HAL_RCC_OscConfig+0x578>)
 8002ede:	f023 0301 	bic.w	r3, r3, #1
 8002ee2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ee6:	4b19      	ldr	r3, [pc, #100]	; (8002f4c <HAL_RCC_OscConfig+0x578>)
 8002ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eec:	4a17      	ldr	r2, [pc, #92]	; (8002f4c <HAL_RCC_OscConfig+0x578>)
 8002eee:	f023 0304 	bic.w	r3, r3, #4
 8002ef2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d016      	beq.n	8002f2c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002efe:	f7fe fabf 	bl	8001480 <HAL_GetTick>
 8002f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f04:	e00a      	b.n	8002f1c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f06:	f7fe fabb 	bl	8001480 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e139      	b.n	8003190 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f1c:	4b0b      	ldr	r3, [pc, #44]	; (8002f4c <HAL_RCC_OscConfig+0x578>)
 8002f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d0ed      	beq.n	8002f06 <HAL_RCC_OscConfig+0x532>
 8002f2a:	e01a      	b.n	8002f62 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f2c:	f7fe faa8 	bl	8001480 <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f32:	e00f      	b.n	8002f54 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f34:	f7fe faa4 	bl	8001480 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d906      	bls.n	8002f54 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e122      	b.n	8003190 <HAL_RCC_OscConfig+0x7bc>
 8002f4a:	bf00      	nop
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f54:	4b90      	ldr	r3, [pc, #576]	; (8003198 <HAL_RCC_OscConfig+0x7c4>)
 8002f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1e8      	bne.n	8002f34 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f62:	7ffb      	ldrb	r3, [r7, #31]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d105      	bne.n	8002f74 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f68:	4b8b      	ldr	r3, [pc, #556]	; (8003198 <HAL_RCC_OscConfig+0x7c4>)
 8002f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f6c:	4a8a      	ldr	r2, [pc, #552]	; (8003198 <HAL_RCC_OscConfig+0x7c4>)
 8002f6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f72:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 8108 	beq.w	800318e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	f040 80d0 	bne.w	8003128 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f88:	4b83      	ldr	r3, [pc, #524]	; (8003198 <HAL_RCC_OscConfig+0x7c4>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	f003 0203 	and.w	r2, r3, #3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d130      	bne.n	8002ffe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d127      	bne.n	8002ffe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d11f      	bne.n	8002ffe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fc8:	2a07      	cmp	r2, #7
 8002fca:	bf14      	ite	ne
 8002fcc:	2201      	movne	r2, #1
 8002fce:	2200      	moveq	r2, #0
 8002fd0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d113      	bne.n	8002ffe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe0:	085b      	lsrs	r3, r3, #1
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d109      	bne.n	8002ffe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff4:	085b      	lsrs	r3, r3, #1
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d06e      	beq.n	80030dc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	2b0c      	cmp	r3, #12
 8003002:	d069      	beq.n	80030d8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003004:	4b64      	ldr	r3, [pc, #400]	; (8003198 <HAL_RCC_OscConfig+0x7c4>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d105      	bne.n	800301c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003010:	4b61      	ldr	r3, [pc, #388]	; (8003198 <HAL_RCC_OscConfig+0x7c4>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e0b7      	b.n	8003190 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003020:	4b5d      	ldr	r3, [pc, #372]	; (8003198 <HAL_RCC_OscConfig+0x7c4>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a5c      	ldr	r2, [pc, #368]	; (8003198 <HAL_RCC_OscConfig+0x7c4>)
 8003026:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800302a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800302c:	f7fe fa28 	bl	8001480 <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003034:	f7fe fa24 	bl	8001480 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e0a4      	b.n	8003190 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003046:	4b54      	ldr	r3, [pc, #336]	; (8003198 <HAL_RCC_OscConfig+0x7c4>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1f0      	bne.n	8003034 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003052:	4b51      	ldr	r3, [pc, #324]	; (8003198 <HAL_RCC_OscConfig+0x7c4>)
 8003054:	68da      	ldr	r2, [r3, #12]
 8003056:	4b51      	ldr	r3, [pc, #324]	; (800319c <HAL_RCC_OscConfig+0x7c8>)
 8003058:	4013      	ands	r3, r2
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003062:	3a01      	subs	r2, #1
 8003064:	0112      	lsls	r2, r2, #4
 8003066:	4311      	orrs	r1, r2
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800306c:	0212      	lsls	r2, r2, #8
 800306e:	4311      	orrs	r1, r2
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003074:	0852      	lsrs	r2, r2, #1
 8003076:	3a01      	subs	r2, #1
 8003078:	0552      	lsls	r2, r2, #21
 800307a:	4311      	orrs	r1, r2
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003080:	0852      	lsrs	r2, r2, #1
 8003082:	3a01      	subs	r2, #1
 8003084:	0652      	lsls	r2, r2, #25
 8003086:	4311      	orrs	r1, r2
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800308c:	0912      	lsrs	r2, r2, #4
 800308e:	0452      	lsls	r2, r2, #17
 8003090:	430a      	orrs	r2, r1
 8003092:	4941      	ldr	r1, [pc, #260]	; (8003198 <HAL_RCC_OscConfig+0x7c4>)
 8003094:	4313      	orrs	r3, r2
 8003096:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003098:	4b3f      	ldr	r3, [pc, #252]	; (8003198 <HAL_RCC_OscConfig+0x7c4>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a3e      	ldr	r2, [pc, #248]	; (8003198 <HAL_RCC_OscConfig+0x7c4>)
 800309e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030a2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030a4:	4b3c      	ldr	r3, [pc, #240]	; (8003198 <HAL_RCC_OscConfig+0x7c4>)
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	4a3b      	ldr	r2, [pc, #236]	; (8003198 <HAL_RCC_OscConfig+0x7c4>)
 80030aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030ae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030b0:	f7fe f9e6 	bl	8001480 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b8:	f7fe f9e2 	bl	8001480 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e062      	b.n	8003190 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ca:	4b33      	ldr	r3, [pc, #204]	; (8003198 <HAL_RCC_OscConfig+0x7c4>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d0f0      	beq.n	80030b8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030d6:	e05a      	b.n	800318e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e059      	b.n	8003190 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030dc:	4b2e      	ldr	r3, [pc, #184]	; (8003198 <HAL_RCC_OscConfig+0x7c4>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d152      	bne.n	800318e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80030e8:	4b2b      	ldr	r3, [pc, #172]	; (8003198 <HAL_RCC_OscConfig+0x7c4>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a2a      	ldr	r2, [pc, #168]	; (8003198 <HAL_RCC_OscConfig+0x7c4>)
 80030ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030f2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030f4:	4b28      	ldr	r3, [pc, #160]	; (8003198 <HAL_RCC_OscConfig+0x7c4>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	4a27      	ldr	r2, [pc, #156]	; (8003198 <HAL_RCC_OscConfig+0x7c4>)
 80030fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030fe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003100:	f7fe f9be 	bl	8001480 <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003108:	f7fe f9ba 	bl	8001480 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e03a      	b.n	8003190 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800311a:	4b1f      	ldr	r3, [pc, #124]	; (8003198 <HAL_RCC_OscConfig+0x7c4>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d0f0      	beq.n	8003108 <HAL_RCC_OscConfig+0x734>
 8003126:	e032      	b.n	800318e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	2b0c      	cmp	r3, #12
 800312c:	d02d      	beq.n	800318a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800312e:	4b1a      	ldr	r3, [pc, #104]	; (8003198 <HAL_RCC_OscConfig+0x7c4>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a19      	ldr	r2, [pc, #100]	; (8003198 <HAL_RCC_OscConfig+0x7c4>)
 8003134:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003138:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800313a:	4b17      	ldr	r3, [pc, #92]	; (8003198 <HAL_RCC_OscConfig+0x7c4>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d105      	bne.n	8003152 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003146:	4b14      	ldr	r3, [pc, #80]	; (8003198 <HAL_RCC_OscConfig+0x7c4>)
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	4a13      	ldr	r2, [pc, #76]	; (8003198 <HAL_RCC_OscConfig+0x7c4>)
 800314c:	f023 0303 	bic.w	r3, r3, #3
 8003150:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003152:	4b11      	ldr	r3, [pc, #68]	; (8003198 <HAL_RCC_OscConfig+0x7c4>)
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	4a10      	ldr	r2, [pc, #64]	; (8003198 <HAL_RCC_OscConfig+0x7c4>)
 8003158:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800315c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003160:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003162:	f7fe f98d 	bl	8001480 <HAL_GetTick>
 8003166:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003168:	e008      	b.n	800317c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800316a:	f7fe f989 	bl	8001480 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d901      	bls.n	800317c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e009      	b.n	8003190 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800317c:	4b06      	ldr	r3, [pc, #24]	; (8003198 <HAL_RCC_OscConfig+0x7c4>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1f0      	bne.n	800316a <HAL_RCC_OscConfig+0x796>
 8003188:	e001      	b.n	800318e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e000      	b.n	8003190 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3720      	adds	r7, #32
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40021000 	.word	0x40021000
 800319c:	f99d808c 	.word	0xf99d808c

080031a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d101      	bne.n	80031b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e0c8      	b.n	8003346 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031b4:	4b66      	ldr	r3, [pc, #408]	; (8003350 <HAL_RCC_ClockConfig+0x1b0>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d910      	bls.n	80031e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031c2:	4b63      	ldr	r3, [pc, #396]	; (8003350 <HAL_RCC_ClockConfig+0x1b0>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f023 0207 	bic.w	r2, r3, #7
 80031ca:	4961      	ldr	r1, [pc, #388]	; (8003350 <HAL_RCC_ClockConfig+0x1b0>)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d2:	4b5f      	ldr	r3, [pc, #380]	; (8003350 <HAL_RCC_ClockConfig+0x1b0>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0307 	and.w	r3, r3, #7
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d001      	beq.n	80031e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e0b0      	b.n	8003346 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d04c      	beq.n	800328a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	2b03      	cmp	r3, #3
 80031f6:	d107      	bne.n	8003208 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031f8:	4b56      	ldr	r3, [pc, #344]	; (8003354 <HAL_RCC_ClockConfig+0x1b4>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d121      	bne.n	8003248 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e09e      	b.n	8003346 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	2b02      	cmp	r3, #2
 800320e:	d107      	bne.n	8003220 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003210:	4b50      	ldr	r3, [pc, #320]	; (8003354 <HAL_RCC_ClockConfig+0x1b4>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d115      	bne.n	8003248 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e092      	b.n	8003346 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d107      	bne.n	8003238 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003228:	4b4a      	ldr	r3, [pc, #296]	; (8003354 <HAL_RCC_ClockConfig+0x1b4>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d109      	bne.n	8003248 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e086      	b.n	8003346 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003238:	4b46      	ldr	r3, [pc, #280]	; (8003354 <HAL_RCC_ClockConfig+0x1b4>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e07e      	b.n	8003346 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003248:	4b42      	ldr	r3, [pc, #264]	; (8003354 <HAL_RCC_ClockConfig+0x1b4>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f023 0203 	bic.w	r2, r3, #3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	493f      	ldr	r1, [pc, #252]	; (8003354 <HAL_RCC_ClockConfig+0x1b4>)
 8003256:	4313      	orrs	r3, r2
 8003258:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800325a:	f7fe f911 	bl	8001480 <HAL_GetTick>
 800325e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003260:	e00a      	b.n	8003278 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003262:	f7fe f90d 	bl	8001480 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003270:	4293      	cmp	r3, r2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e066      	b.n	8003346 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003278:	4b36      	ldr	r3, [pc, #216]	; (8003354 <HAL_RCC_ClockConfig+0x1b4>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f003 020c 	and.w	r2, r3, #12
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	429a      	cmp	r2, r3
 8003288:	d1eb      	bne.n	8003262 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d008      	beq.n	80032a8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003296:	4b2f      	ldr	r3, [pc, #188]	; (8003354 <HAL_RCC_ClockConfig+0x1b4>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	492c      	ldr	r1, [pc, #176]	; (8003354 <HAL_RCC_ClockConfig+0x1b4>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032a8:	4b29      	ldr	r3, [pc, #164]	; (8003350 <HAL_RCC_ClockConfig+0x1b0>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d210      	bcs.n	80032d8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b6:	4b26      	ldr	r3, [pc, #152]	; (8003350 <HAL_RCC_ClockConfig+0x1b0>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f023 0207 	bic.w	r2, r3, #7
 80032be:	4924      	ldr	r1, [pc, #144]	; (8003350 <HAL_RCC_ClockConfig+0x1b0>)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c6:	4b22      	ldr	r3, [pc, #136]	; (8003350 <HAL_RCC_ClockConfig+0x1b0>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d001      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e036      	b.n	8003346 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0304 	and.w	r3, r3, #4
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d008      	beq.n	80032f6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032e4:	4b1b      	ldr	r3, [pc, #108]	; (8003354 <HAL_RCC_ClockConfig+0x1b4>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	4918      	ldr	r1, [pc, #96]	; (8003354 <HAL_RCC_ClockConfig+0x1b4>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0308 	and.w	r3, r3, #8
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d009      	beq.n	8003316 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003302:	4b14      	ldr	r3, [pc, #80]	; (8003354 <HAL_RCC_ClockConfig+0x1b4>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	4910      	ldr	r1, [pc, #64]	; (8003354 <HAL_RCC_ClockConfig+0x1b4>)
 8003312:	4313      	orrs	r3, r2
 8003314:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003316:	f000 f825 	bl	8003364 <HAL_RCC_GetSysClockFreq>
 800331a:	4602      	mov	r2, r0
 800331c:	4b0d      	ldr	r3, [pc, #52]	; (8003354 <HAL_RCC_ClockConfig+0x1b4>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	091b      	lsrs	r3, r3, #4
 8003322:	f003 030f 	and.w	r3, r3, #15
 8003326:	490c      	ldr	r1, [pc, #48]	; (8003358 <HAL_RCC_ClockConfig+0x1b8>)
 8003328:	5ccb      	ldrb	r3, [r1, r3]
 800332a:	f003 031f 	and.w	r3, r3, #31
 800332e:	fa22 f303 	lsr.w	r3, r2, r3
 8003332:	4a0a      	ldr	r2, [pc, #40]	; (800335c <HAL_RCC_ClockConfig+0x1bc>)
 8003334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003336:	4b0a      	ldr	r3, [pc, #40]	; (8003360 <HAL_RCC_ClockConfig+0x1c0>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f7fd f8e8 	bl	8000510 <HAL_InitTick>
 8003340:	4603      	mov	r3, r0
 8003342:	72fb      	strb	r3, [r7, #11]

  return status;
 8003344:	7afb      	ldrb	r3, [r7, #11]
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40022000 	.word	0x40022000
 8003354:	40021000 	.word	0x40021000
 8003358:	08006af0 	.word	0x08006af0
 800335c:	20000018 	.word	0x20000018
 8003360:	2000001c 	.word	0x2000001c

08003364 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003364:	b480      	push	{r7}
 8003366:	b089      	sub	sp, #36	; 0x24
 8003368:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800336a:	2300      	movs	r3, #0
 800336c:	61fb      	str	r3, [r7, #28]
 800336e:	2300      	movs	r3, #0
 8003370:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003372:	4b3e      	ldr	r3, [pc, #248]	; (800346c <HAL_RCC_GetSysClockFreq+0x108>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 030c 	and.w	r3, r3, #12
 800337a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800337c:	4b3b      	ldr	r3, [pc, #236]	; (800346c <HAL_RCC_GetSysClockFreq+0x108>)
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	f003 0303 	and.w	r3, r3, #3
 8003384:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d005      	beq.n	8003398 <HAL_RCC_GetSysClockFreq+0x34>
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	2b0c      	cmp	r3, #12
 8003390:	d121      	bne.n	80033d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d11e      	bne.n	80033d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003398:	4b34      	ldr	r3, [pc, #208]	; (800346c <HAL_RCC_GetSysClockFreq+0x108>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0308 	and.w	r3, r3, #8
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d107      	bne.n	80033b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80033a4:	4b31      	ldr	r3, [pc, #196]	; (800346c <HAL_RCC_GetSysClockFreq+0x108>)
 80033a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033aa:	0a1b      	lsrs	r3, r3, #8
 80033ac:	f003 030f 	and.w	r3, r3, #15
 80033b0:	61fb      	str	r3, [r7, #28]
 80033b2:	e005      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80033b4:	4b2d      	ldr	r3, [pc, #180]	; (800346c <HAL_RCC_GetSysClockFreq+0x108>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	091b      	lsrs	r3, r3, #4
 80033ba:	f003 030f 	and.w	r3, r3, #15
 80033be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80033c0:	4a2b      	ldr	r2, [pc, #172]	; (8003470 <HAL_RCC_GetSysClockFreq+0x10c>)
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10d      	bne.n	80033ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033d4:	e00a      	b.n	80033ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	2b04      	cmp	r3, #4
 80033da:	d102      	bne.n	80033e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033dc:	4b25      	ldr	r3, [pc, #148]	; (8003474 <HAL_RCC_GetSysClockFreq+0x110>)
 80033de:	61bb      	str	r3, [r7, #24]
 80033e0:	e004      	b.n	80033ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	d101      	bne.n	80033ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033e8:	4b23      	ldr	r3, [pc, #140]	; (8003478 <HAL_RCC_GetSysClockFreq+0x114>)
 80033ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	2b0c      	cmp	r3, #12
 80033f0:	d134      	bne.n	800345c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033f2:	4b1e      	ldr	r3, [pc, #120]	; (800346c <HAL_RCC_GetSysClockFreq+0x108>)
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	f003 0303 	and.w	r3, r3, #3
 80033fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d003      	beq.n	800340a <HAL_RCC_GetSysClockFreq+0xa6>
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	2b03      	cmp	r3, #3
 8003406:	d003      	beq.n	8003410 <HAL_RCC_GetSysClockFreq+0xac>
 8003408:	e005      	b.n	8003416 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800340a:	4b1a      	ldr	r3, [pc, #104]	; (8003474 <HAL_RCC_GetSysClockFreq+0x110>)
 800340c:	617b      	str	r3, [r7, #20]
      break;
 800340e:	e005      	b.n	800341c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003410:	4b19      	ldr	r3, [pc, #100]	; (8003478 <HAL_RCC_GetSysClockFreq+0x114>)
 8003412:	617b      	str	r3, [r7, #20]
      break;
 8003414:	e002      	b.n	800341c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	617b      	str	r3, [r7, #20]
      break;
 800341a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800341c:	4b13      	ldr	r3, [pc, #76]	; (800346c <HAL_RCC_GetSysClockFreq+0x108>)
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	091b      	lsrs	r3, r3, #4
 8003422:	f003 0307 	and.w	r3, r3, #7
 8003426:	3301      	adds	r3, #1
 8003428:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800342a:	4b10      	ldr	r3, [pc, #64]	; (800346c <HAL_RCC_GetSysClockFreq+0x108>)
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	0a1b      	lsrs	r3, r3, #8
 8003430:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003434:	697a      	ldr	r2, [r7, #20]
 8003436:	fb02 f203 	mul.w	r2, r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003440:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003442:	4b0a      	ldr	r3, [pc, #40]	; (800346c <HAL_RCC_GetSysClockFreq+0x108>)
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	0e5b      	lsrs	r3, r3, #25
 8003448:	f003 0303 	and.w	r3, r3, #3
 800344c:	3301      	adds	r3, #1
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	fbb2 f3f3 	udiv	r3, r2, r3
 800345a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800345c:	69bb      	ldr	r3, [r7, #24]
}
 800345e:	4618      	mov	r0, r3
 8003460:	3724      	adds	r7, #36	; 0x24
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	40021000 	.word	0x40021000
 8003470:	08006b08 	.word	0x08006b08
 8003474:	00f42400 	.word	0x00f42400
 8003478:	007a1200 	.word	0x007a1200

0800347c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003480:	4b03      	ldr	r3, [pc, #12]	; (8003490 <HAL_RCC_GetHCLKFreq+0x14>)
 8003482:	681b      	ldr	r3, [r3, #0]
}
 8003484:	4618      	mov	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	20000018 	.word	0x20000018

08003494 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003498:	f7ff fff0 	bl	800347c <HAL_RCC_GetHCLKFreq>
 800349c:	4602      	mov	r2, r0
 800349e:	4b06      	ldr	r3, [pc, #24]	; (80034b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	0adb      	lsrs	r3, r3, #11
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	4904      	ldr	r1, [pc, #16]	; (80034bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80034aa:	5ccb      	ldrb	r3, [r1, r3]
 80034ac:	f003 031f 	and.w	r3, r3, #31
 80034b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40021000 	.word	0x40021000
 80034bc:	08006b00 	.word	0x08006b00

080034c0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	220f      	movs	r2, #15
 80034ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80034d0:	4b12      	ldr	r3, [pc, #72]	; (800351c <HAL_RCC_GetClockConfig+0x5c>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f003 0203 	and.w	r2, r3, #3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80034dc:	4b0f      	ldr	r3, [pc, #60]	; (800351c <HAL_RCC_GetClockConfig+0x5c>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80034e8:	4b0c      	ldr	r3, [pc, #48]	; (800351c <HAL_RCC_GetClockConfig+0x5c>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80034f4:	4b09      	ldr	r3, [pc, #36]	; (800351c <HAL_RCC_GetClockConfig+0x5c>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	08db      	lsrs	r3, r3, #3
 80034fa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003502:	4b07      	ldr	r3, [pc, #28]	; (8003520 <HAL_RCC_GetClockConfig+0x60>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0207 	and.w	r2, r3, #7
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	601a      	str	r2, [r3, #0]
}
 800350e:	bf00      	nop
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	40021000 	.word	0x40021000
 8003520:	40022000 	.word	0x40022000

08003524 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800352c:	2300      	movs	r3, #0
 800352e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003530:	4b2a      	ldr	r3, [pc, #168]	; (80035dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d003      	beq.n	8003544 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800353c:	f7ff f9e6 	bl	800290c <HAL_PWREx_GetVoltageRange>
 8003540:	6178      	str	r0, [r7, #20]
 8003542:	e014      	b.n	800356e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003544:	4b25      	ldr	r3, [pc, #148]	; (80035dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003548:	4a24      	ldr	r2, [pc, #144]	; (80035dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800354a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800354e:	6593      	str	r3, [r2, #88]	; 0x58
 8003550:	4b22      	ldr	r3, [pc, #136]	; (80035dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003558:	60fb      	str	r3, [r7, #12]
 800355a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800355c:	f7ff f9d6 	bl	800290c <HAL_PWREx_GetVoltageRange>
 8003560:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003562:	4b1e      	ldr	r3, [pc, #120]	; (80035dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003566:	4a1d      	ldr	r2, [pc, #116]	; (80035dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003568:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800356c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003574:	d10b      	bne.n	800358e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b80      	cmp	r3, #128	; 0x80
 800357a:	d919      	bls.n	80035b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2ba0      	cmp	r3, #160	; 0xa0
 8003580:	d902      	bls.n	8003588 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003582:	2302      	movs	r3, #2
 8003584:	613b      	str	r3, [r7, #16]
 8003586:	e013      	b.n	80035b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003588:	2301      	movs	r3, #1
 800358a:	613b      	str	r3, [r7, #16]
 800358c:	e010      	b.n	80035b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b80      	cmp	r3, #128	; 0x80
 8003592:	d902      	bls.n	800359a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003594:	2303      	movs	r3, #3
 8003596:	613b      	str	r3, [r7, #16]
 8003598:	e00a      	b.n	80035b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b80      	cmp	r3, #128	; 0x80
 800359e:	d102      	bne.n	80035a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035a0:	2302      	movs	r3, #2
 80035a2:	613b      	str	r3, [r7, #16]
 80035a4:	e004      	b.n	80035b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b70      	cmp	r3, #112	; 0x70
 80035aa:	d101      	bne.n	80035b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035ac:	2301      	movs	r3, #1
 80035ae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80035b0:	4b0b      	ldr	r3, [pc, #44]	; (80035e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f023 0207 	bic.w	r2, r3, #7
 80035b8:	4909      	ldr	r1, [pc, #36]	; (80035e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	4313      	orrs	r3, r2
 80035be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80035c0:	4b07      	ldr	r3, [pc, #28]	; (80035e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d001      	beq.n	80035d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e000      	b.n	80035d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3718      	adds	r7, #24
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40021000 	.word	0x40021000
 80035e0:	40022000 	.word	0x40022000

080035e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035ec:	2300      	movs	r3, #0
 80035ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035f0:	2300      	movs	r3, #0
 80035f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d041      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003604:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003608:	d02a      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800360a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800360e:	d824      	bhi.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003610:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003614:	d008      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003616:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800361a:	d81e      	bhi.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00a      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003620:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003624:	d010      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003626:	e018      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003628:	4b86      	ldr	r3, [pc, #536]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	4a85      	ldr	r2, [pc, #532]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800362e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003632:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003634:	e015      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	3304      	adds	r3, #4
 800363a:	2100      	movs	r1, #0
 800363c:	4618      	mov	r0, r3
 800363e:	f000 fabb 	bl	8003bb8 <RCCEx_PLLSAI1_Config>
 8003642:	4603      	mov	r3, r0
 8003644:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003646:	e00c      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3320      	adds	r3, #32
 800364c:	2100      	movs	r1, #0
 800364e:	4618      	mov	r0, r3
 8003650:	f000 fba6 	bl	8003da0 <RCCEx_PLLSAI2_Config>
 8003654:	4603      	mov	r3, r0
 8003656:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003658:	e003      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	74fb      	strb	r3, [r7, #19]
      break;
 800365e:	e000      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003660:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003662:	7cfb      	ldrb	r3, [r7, #19]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10b      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003668:	4b76      	ldr	r3, [pc, #472]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800366a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800366e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003676:	4973      	ldr	r1, [pc, #460]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003678:	4313      	orrs	r3, r2
 800367a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800367e:	e001      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003680:	7cfb      	ldrb	r3, [r7, #19]
 8003682:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d041      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003694:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003698:	d02a      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800369a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800369e:	d824      	bhi.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80036a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036a4:	d008      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80036a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036aa:	d81e      	bhi.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00a      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80036b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036b4:	d010      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80036b6:	e018      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036b8:	4b62      	ldr	r3, [pc, #392]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	4a61      	ldr	r2, [pc, #388]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036c2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036c4:	e015      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	3304      	adds	r3, #4
 80036ca:	2100      	movs	r1, #0
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 fa73 	bl	8003bb8 <RCCEx_PLLSAI1_Config>
 80036d2:	4603      	mov	r3, r0
 80036d4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036d6:	e00c      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3320      	adds	r3, #32
 80036dc:	2100      	movs	r1, #0
 80036de:	4618      	mov	r0, r3
 80036e0:	f000 fb5e 	bl	8003da0 <RCCEx_PLLSAI2_Config>
 80036e4:	4603      	mov	r3, r0
 80036e6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036e8:	e003      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	74fb      	strb	r3, [r7, #19]
      break;
 80036ee:	e000      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80036f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036f2:	7cfb      	ldrb	r3, [r7, #19]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10b      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80036f8:	4b52      	ldr	r3, [pc, #328]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003706:	494f      	ldr	r1, [pc, #316]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003708:	4313      	orrs	r3, r2
 800370a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800370e:	e001      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003710:	7cfb      	ldrb	r3, [r7, #19]
 8003712:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 80a0 	beq.w	8003862 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003722:	2300      	movs	r3, #0
 8003724:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003726:	4b47      	ldr	r3, [pc, #284]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003732:	2301      	movs	r3, #1
 8003734:	e000      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003736:	2300      	movs	r3, #0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00d      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800373c:	4b41      	ldr	r3, [pc, #260]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800373e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003740:	4a40      	ldr	r2, [pc, #256]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003746:	6593      	str	r3, [r2, #88]	; 0x58
 8003748:	4b3e      	ldr	r3, [pc, #248]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800374a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003750:	60bb      	str	r3, [r7, #8]
 8003752:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003754:	2301      	movs	r3, #1
 8003756:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003758:	4b3b      	ldr	r3, [pc, #236]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a3a      	ldr	r2, [pc, #232]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800375e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003762:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003764:	f7fd fe8c 	bl	8001480 <HAL_GetTick>
 8003768:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800376a:	e009      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800376c:	f7fd fe88 	bl	8001480 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d902      	bls.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	74fb      	strb	r3, [r7, #19]
        break;
 800377e:	e005      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003780:	4b31      	ldr	r3, [pc, #196]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003788:	2b00      	cmp	r3, #0
 800378a:	d0ef      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800378c:	7cfb      	ldrb	r3, [r7, #19]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d15c      	bne.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003792:	4b2c      	ldr	r3, [pc, #176]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003798:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800379c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d01f      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d019      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037b0:	4b24      	ldr	r3, [pc, #144]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037bc:	4b21      	ldr	r3, [pc, #132]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c2:	4a20      	ldr	r2, [pc, #128]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037cc:	4b1d      	ldr	r3, [pc, #116]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d2:	4a1c      	ldr	r2, [pc, #112]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037dc:	4a19      	ldr	r2, [pc, #100]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d016      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ee:	f7fd fe47 	bl	8001480 <HAL_GetTick>
 80037f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037f4:	e00b      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037f6:	f7fd fe43 	bl	8001480 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	f241 3288 	movw	r2, #5000	; 0x1388
 8003804:	4293      	cmp	r3, r2
 8003806:	d902      	bls.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	74fb      	strb	r3, [r7, #19]
            break;
 800380c:	e006      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800380e:	4b0d      	ldr	r3, [pc, #52]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0ec      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800381c:	7cfb      	ldrb	r3, [r7, #19]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10c      	bne.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003822:	4b08      	ldr	r3, [pc, #32]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003828:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003832:	4904      	ldr	r1, [pc, #16]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003834:	4313      	orrs	r3, r2
 8003836:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800383a:	e009      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800383c:	7cfb      	ldrb	r3, [r7, #19]
 800383e:	74bb      	strb	r3, [r7, #18]
 8003840:	e006      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003842:	bf00      	nop
 8003844:	40021000 	.word	0x40021000
 8003848:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800384c:	7cfb      	ldrb	r3, [r7, #19]
 800384e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003850:	7c7b      	ldrb	r3, [r7, #17]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d105      	bne.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003856:	4b9e      	ldr	r3, [pc, #632]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385a:	4a9d      	ldr	r2, [pc, #628]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800385c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003860:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00a      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800386e:	4b98      	ldr	r3, [pc, #608]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003874:	f023 0203 	bic.w	r2, r3, #3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387c:	4994      	ldr	r1, [pc, #592]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800387e:	4313      	orrs	r3, r2
 8003880:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00a      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003890:	4b8f      	ldr	r3, [pc, #572]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003896:	f023 020c 	bic.w	r2, r3, #12
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800389e:	498c      	ldr	r1, [pc, #560]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0304 	and.w	r3, r3, #4
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00a      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038b2:	4b87      	ldr	r3, [pc, #540]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c0:	4983      	ldr	r1, [pc, #524]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00a      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038d4:	4b7e      	ldr	r3, [pc, #504]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e2:	497b      	ldr	r1, [pc, #492]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0310 	and.w	r3, r3, #16
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00a      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038f6:	4b76      	ldr	r3, [pc, #472]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003904:	4972      	ldr	r1, [pc, #456]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003906:	4313      	orrs	r3, r2
 8003908:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0320 	and.w	r3, r3, #32
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00a      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003918:	4b6d      	ldr	r3, [pc, #436]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800391a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800391e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003926:	496a      	ldr	r1, [pc, #424]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003928:	4313      	orrs	r3, r2
 800392a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00a      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800393a:	4b65      	ldr	r3, [pc, #404]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800393c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003940:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003948:	4961      	ldr	r1, [pc, #388]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800394a:	4313      	orrs	r3, r2
 800394c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00a      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800395c:	4b5c      	ldr	r3, [pc, #368]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800395e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003962:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800396a:	4959      	ldr	r1, [pc, #356]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800396c:	4313      	orrs	r3, r2
 800396e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00a      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800397e:	4b54      	ldr	r3, [pc, #336]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003984:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800398c:	4950      	ldr	r1, [pc, #320]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800398e:	4313      	orrs	r3, r2
 8003990:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00a      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039a0:	4b4b      	ldr	r3, [pc, #300]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ae:	4948      	ldr	r1, [pc, #288]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00a      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039c2:	4b43      	ldr	r3, [pc, #268]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d0:	493f      	ldr	r1, [pc, #252]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d028      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039e4:	4b3a      	ldr	r3, [pc, #232]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039f2:	4937      	ldr	r1, [pc, #220]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a02:	d106      	bne.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a04:	4b32      	ldr	r3, [pc, #200]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	4a31      	ldr	r2, [pc, #196]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a0e:	60d3      	str	r3, [r2, #12]
 8003a10:	e011      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a1a:	d10c      	bne.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	3304      	adds	r3, #4
 8003a20:	2101      	movs	r1, #1
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 f8c8 	bl	8003bb8 <RCCEx_PLLSAI1_Config>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003a2c:	7cfb      	ldrb	r3, [r7, #19]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003a32:	7cfb      	ldrb	r3, [r7, #19]
 8003a34:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d028      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a42:	4b23      	ldr	r3, [pc, #140]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a48:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a50:	491f      	ldr	r1, [pc, #124]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a60:	d106      	bne.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a62:	4b1b      	ldr	r3, [pc, #108]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	4a1a      	ldr	r2, [pc, #104]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a6c:	60d3      	str	r3, [r2, #12]
 8003a6e:	e011      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a78:	d10c      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	3304      	adds	r3, #4
 8003a7e:	2101      	movs	r1, #1
 8003a80:	4618      	mov	r0, r3
 8003a82:	f000 f899 	bl	8003bb8 <RCCEx_PLLSAI1_Config>
 8003a86:	4603      	mov	r3, r0
 8003a88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a8a:	7cfb      	ldrb	r3, [r7, #19]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003a90:	7cfb      	ldrb	r3, [r7, #19]
 8003a92:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d02b      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aae:	4908      	ldr	r1, [pc, #32]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003abe:	d109      	bne.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ac0:	4b03      	ldr	r3, [pc, #12]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	4a02      	ldr	r2, [pc, #8]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003aca:	60d3      	str	r3, [r2, #12]
 8003acc:	e014      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003ace:	bf00      	nop
 8003ad0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ad8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003adc:	d10c      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 f867 	bl	8003bb8 <RCCEx_PLLSAI1_Config>
 8003aea:	4603      	mov	r3, r0
 8003aec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003aee:	7cfb      	ldrb	r3, [r7, #19]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d001      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003af4:	7cfb      	ldrb	r3, [r7, #19]
 8003af6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d02f      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b04:	4b2b      	ldr	r3, [pc, #172]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b0a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b12:	4928      	ldr	r1, [pc, #160]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b22:	d10d      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	3304      	adds	r3, #4
 8003b28:	2102      	movs	r1, #2
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f000 f844 	bl	8003bb8 <RCCEx_PLLSAI1_Config>
 8003b30:	4603      	mov	r3, r0
 8003b32:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b34:	7cfb      	ldrb	r3, [r7, #19]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d014      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b3a:	7cfb      	ldrb	r3, [r7, #19]
 8003b3c:	74bb      	strb	r3, [r7, #18]
 8003b3e:	e011      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b48:	d10c      	bne.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	3320      	adds	r3, #32
 8003b4e:	2102      	movs	r1, #2
 8003b50:	4618      	mov	r0, r3
 8003b52:	f000 f925 	bl	8003da0 <RCCEx_PLLSAI2_Config>
 8003b56:	4603      	mov	r3, r0
 8003b58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b5a:	7cfb      	ldrb	r3, [r7, #19]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b60:	7cfb      	ldrb	r3, [r7, #19]
 8003b62:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00a      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b70:	4b10      	ldr	r3, [pc, #64]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b76:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b7e:	490d      	ldr	r1, [pc, #52]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00b      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b92:	4b08      	ldr	r3, [pc, #32]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b98:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ba2:	4904      	ldr	r1, [pc, #16]	; (8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003baa:	7cbb      	ldrb	r3, [r7, #18]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3718      	adds	r7, #24
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	40021000 	.word	0x40021000

08003bb8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003bc6:	4b75      	ldr	r3, [pc, #468]	; (8003d9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f003 0303 	and.w	r3, r3, #3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d018      	beq.n	8003c04 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003bd2:	4b72      	ldr	r3, [pc, #456]	; (8003d9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	f003 0203 	and.w	r2, r3, #3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d10d      	bne.n	8003bfe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
       ||
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d009      	beq.n	8003bfe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003bea:	4b6c      	ldr	r3, [pc, #432]	; (8003d9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	091b      	lsrs	r3, r3, #4
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	1c5a      	adds	r2, r3, #1
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
       ||
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d047      	beq.n	8003c8e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	73fb      	strb	r3, [r7, #15]
 8003c02:	e044      	b.n	8003c8e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2b03      	cmp	r3, #3
 8003c0a:	d018      	beq.n	8003c3e <RCCEx_PLLSAI1_Config+0x86>
 8003c0c:	2b03      	cmp	r3, #3
 8003c0e:	d825      	bhi.n	8003c5c <RCCEx_PLLSAI1_Config+0xa4>
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d002      	beq.n	8003c1a <RCCEx_PLLSAI1_Config+0x62>
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d009      	beq.n	8003c2c <RCCEx_PLLSAI1_Config+0x74>
 8003c18:	e020      	b.n	8003c5c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c1a:	4b60      	ldr	r3, [pc, #384]	; (8003d9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d11d      	bne.n	8003c62 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c2a:	e01a      	b.n	8003c62 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c2c:	4b5b      	ldr	r3, [pc, #364]	; (8003d9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d116      	bne.n	8003c66 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c3c:	e013      	b.n	8003c66 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c3e:	4b57      	ldr	r3, [pc, #348]	; (8003d9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10f      	bne.n	8003c6a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c4a:	4b54      	ldr	r3, [pc, #336]	; (8003d9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d109      	bne.n	8003c6a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c5a:	e006      	b.n	8003c6a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c60:	e004      	b.n	8003c6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c62:	bf00      	nop
 8003c64:	e002      	b.n	8003c6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c66:	bf00      	nop
 8003c68:	e000      	b.n	8003c6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c6c:	7bfb      	ldrb	r3, [r7, #15]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10d      	bne.n	8003c8e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c72:	4b4a      	ldr	r3, [pc, #296]	; (8003d9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6819      	ldr	r1, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	3b01      	subs	r3, #1
 8003c84:	011b      	lsls	r3, r3, #4
 8003c86:	430b      	orrs	r3, r1
 8003c88:	4944      	ldr	r1, [pc, #272]	; (8003d9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c8e:	7bfb      	ldrb	r3, [r7, #15]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d17d      	bne.n	8003d90 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c94:	4b41      	ldr	r3, [pc, #260]	; (8003d9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a40      	ldr	r2, [pc, #256]	; (8003d9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c9a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ca0:	f7fd fbee 	bl	8001480 <HAL_GetTick>
 8003ca4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ca6:	e009      	b.n	8003cbc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ca8:	f7fd fbea 	bl	8001480 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d902      	bls.n	8003cbc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	73fb      	strb	r3, [r7, #15]
        break;
 8003cba:	e005      	b.n	8003cc8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003cbc:	4b37      	ldr	r3, [pc, #220]	; (8003d9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1ef      	bne.n	8003ca8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003cc8:	7bfb      	ldrb	r3, [r7, #15]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d160      	bne.n	8003d90 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d111      	bne.n	8003cf8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cd4:	4b31      	ldr	r3, [pc, #196]	; (8003d9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	6892      	ldr	r2, [r2, #8]
 8003ce4:	0211      	lsls	r1, r2, #8
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	68d2      	ldr	r2, [r2, #12]
 8003cea:	0912      	lsrs	r2, r2, #4
 8003cec:	0452      	lsls	r2, r2, #17
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	492a      	ldr	r1, [pc, #168]	; (8003d9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	610b      	str	r3, [r1, #16]
 8003cf6:	e027      	b.n	8003d48 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d112      	bne.n	8003d24 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cfe:	4b27      	ldr	r3, [pc, #156]	; (8003d9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003d06:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	6892      	ldr	r2, [r2, #8]
 8003d0e:	0211      	lsls	r1, r2, #8
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6912      	ldr	r2, [r2, #16]
 8003d14:	0852      	lsrs	r2, r2, #1
 8003d16:	3a01      	subs	r2, #1
 8003d18:	0552      	lsls	r2, r2, #21
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	491f      	ldr	r1, [pc, #124]	; (8003d9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	610b      	str	r3, [r1, #16]
 8003d22:	e011      	b.n	8003d48 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d24:	4b1d      	ldr	r3, [pc, #116]	; (8003d9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d2c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6892      	ldr	r2, [r2, #8]
 8003d34:	0211      	lsls	r1, r2, #8
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	6952      	ldr	r2, [r2, #20]
 8003d3a:	0852      	lsrs	r2, r2, #1
 8003d3c:	3a01      	subs	r2, #1
 8003d3e:	0652      	lsls	r2, r2, #25
 8003d40:	430a      	orrs	r2, r1
 8003d42:	4916      	ldr	r1, [pc, #88]	; (8003d9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d48:	4b14      	ldr	r3, [pc, #80]	; (8003d9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a13      	ldr	r2, [pc, #76]	; (8003d9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d52:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d54:	f7fd fb94 	bl	8001480 <HAL_GetTick>
 8003d58:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d5a:	e009      	b.n	8003d70 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d5c:	f7fd fb90 	bl	8001480 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d902      	bls.n	8003d70 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	73fb      	strb	r3, [r7, #15]
          break;
 8003d6e:	e005      	b.n	8003d7c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d70:	4b0a      	ldr	r3, [pc, #40]	; (8003d9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d0ef      	beq.n	8003d5c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003d7c:	7bfb      	ldrb	r3, [r7, #15]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d106      	bne.n	8003d90 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d82:	4b06      	ldr	r3, [pc, #24]	; (8003d9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d84:	691a      	ldr	r2, [r3, #16]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	4904      	ldr	r1, [pc, #16]	; (8003d9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	40021000 	.word	0x40021000

08003da0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003daa:	2300      	movs	r3, #0
 8003dac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003dae:	4b6a      	ldr	r3, [pc, #424]	; (8003f58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	f003 0303 	and.w	r3, r3, #3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d018      	beq.n	8003dec <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003dba:	4b67      	ldr	r3, [pc, #412]	; (8003f58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	f003 0203 	and.w	r2, r3, #3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d10d      	bne.n	8003de6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
       ||
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d009      	beq.n	8003de6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003dd2:	4b61      	ldr	r3, [pc, #388]	; (8003f58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	091b      	lsrs	r3, r3, #4
 8003dd8:	f003 0307 	and.w	r3, r3, #7
 8003ddc:	1c5a      	adds	r2, r3, #1
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
       ||
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d047      	beq.n	8003e76 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	73fb      	strb	r3, [r7, #15]
 8003dea:	e044      	b.n	8003e76 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2b03      	cmp	r3, #3
 8003df2:	d018      	beq.n	8003e26 <RCCEx_PLLSAI2_Config+0x86>
 8003df4:	2b03      	cmp	r3, #3
 8003df6:	d825      	bhi.n	8003e44 <RCCEx_PLLSAI2_Config+0xa4>
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d002      	beq.n	8003e02 <RCCEx_PLLSAI2_Config+0x62>
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d009      	beq.n	8003e14 <RCCEx_PLLSAI2_Config+0x74>
 8003e00:	e020      	b.n	8003e44 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e02:	4b55      	ldr	r3, [pc, #340]	; (8003f58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d11d      	bne.n	8003e4a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e12:	e01a      	b.n	8003e4a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e14:	4b50      	ldr	r3, [pc, #320]	; (8003f58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d116      	bne.n	8003e4e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e24:	e013      	b.n	8003e4e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e26:	4b4c      	ldr	r3, [pc, #304]	; (8003f58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10f      	bne.n	8003e52 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e32:	4b49      	ldr	r3, [pc, #292]	; (8003f58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d109      	bne.n	8003e52 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e42:	e006      	b.n	8003e52 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	73fb      	strb	r3, [r7, #15]
      break;
 8003e48:	e004      	b.n	8003e54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e4a:	bf00      	nop
 8003e4c:	e002      	b.n	8003e54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e4e:	bf00      	nop
 8003e50:	e000      	b.n	8003e54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e52:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e54:	7bfb      	ldrb	r3, [r7, #15]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10d      	bne.n	8003e76 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e5a:	4b3f      	ldr	r3, [pc, #252]	; (8003f58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6819      	ldr	r1, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	011b      	lsls	r3, r3, #4
 8003e6e:	430b      	orrs	r3, r1
 8003e70:	4939      	ldr	r1, [pc, #228]	; (8003f58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e76:	7bfb      	ldrb	r3, [r7, #15]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d167      	bne.n	8003f4c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003e7c:	4b36      	ldr	r3, [pc, #216]	; (8003f58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a35      	ldr	r2, [pc, #212]	; (8003f58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e88:	f7fd fafa 	bl	8001480 <HAL_GetTick>
 8003e8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e8e:	e009      	b.n	8003ea4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e90:	f7fd faf6 	bl	8001480 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d902      	bls.n	8003ea4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	73fb      	strb	r3, [r7, #15]
        break;
 8003ea2:	e005      	b.n	8003eb0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ea4:	4b2c      	ldr	r3, [pc, #176]	; (8003f58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1ef      	bne.n	8003e90 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003eb0:	7bfb      	ldrb	r3, [r7, #15]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d14a      	bne.n	8003f4c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d111      	bne.n	8003ee0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ebc:	4b26      	ldr	r3, [pc, #152]	; (8003f58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ec4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	6892      	ldr	r2, [r2, #8]
 8003ecc:	0211      	lsls	r1, r2, #8
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	68d2      	ldr	r2, [r2, #12]
 8003ed2:	0912      	lsrs	r2, r2, #4
 8003ed4:	0452      	lsls	r2, r2, #17
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	491f      	ldr	r1, [pc, #124]	; (8003f58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	614b      	str	r3, [r1, #20]
 8003ede:	e011      	b.n	8003f04 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ee0:	4b1d      	ldr	r3, [pc, #116]	; (8003f58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ee8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	6892      	ldr	r2, [r2, #8]
 8003ef0:	0211      	lsls	r1, r2, #8
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	6912      	ldr	r2, [r2, #16]
 8003ef6:	0852      	lsrs	r2, r2, #1
 8003ef8:	3a01      	subs	r2, #1
 8003efa:	0652      	lsls	r2, r2, #25
 8003efc:	430a      	orrs	r2, r1
 8003efe:	4916      	ldr	r1, [pc, #88]	; (8003f58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003f04:	4b14      	ldr	r3, [pc, #80]	; (8003f58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a13      	ldr	r2, [pc, #76]	; (8003f58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f0e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f10:	f7fd fab6 	bl	8001480 <HAL_GetTick>
 8003f14:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f16:	e009      	b.n	8003f2c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f18:	f7fd fab2 	bl	8001480 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d902      	bls.n	8003f2c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	73fb      	strb	r3, [r7, #15]
          break;
 8003f2a:	e005      	b.n	8003f38 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f2c:	4b0a      	ldr	r3, [pc, #40]	; (8003f58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d0ef      	beq.n	8003f18 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003f38:	7bfb      	ldrb	r3, [r7, #15]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d106      	bne.n	8003f4c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003f3e:	4b06      	ldr	r3, [pc, #24]	; (8003f58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f40:	695a      	ldr	r2, [r3, #20]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	4904      	ldr	r1, [pc, #16]	; (8003f58 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	40021000 	.word	0x40021000

08003f5c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e042      	b.n	8003ff4 <HAL_RNG_Init+0x98>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	795b      	ldrb	r3, [r3, #5]
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d105      	bne.n	8003f84 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7fc faa6 	bl	80004d0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f042 0204 	orr.w	r2, r2, #4
 8003f98:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa4:	2b40      	cmp	r3, #64	; 0x40
 8003fa6:	d104      	bne.n	8003fb2 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2204      	movs	r2, #4
 8003fac:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e020      	b.n	8003ff4 <HAL_RNG_Init+0x98>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8003fb2:	f7fd fa65 	bl	8001480 <HAL_GetTick>
 8003fb6:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8003fb8:	e00e      	b.n	8003fd8 <HAL_RNG_Init+0x7c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8003fba:	f7fd fa61 	bl	8001480 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d907      	bls.n	8003fd8 <HAL_RNG_Init+0x7c>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2204      	movs	r2, #4
 8003fcc:	715a      	strb	r2, [r3, #5]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2202      	movs	r2, #2
 8003fd2:	609a      	str	r2, [r3, #8]
      return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e00d      	b.n	8003ff4 <HAL_RNG_Init+0x98>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f003 0304 	and.w	r3, r3, #4
 8003fe2:	2b04      	cmp	r3, #4
 8003fe4:	d0e9      	beq.n	8003fba <HAL_RNG_Init+0x5e>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e049      	b.n	80040a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d106      	bne.n	8004028 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f841 	bl	80040aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2202      	movs	r2, #2
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3304      	adds	r3, #4
 8004038:	4619      	mov	r1, r3
 800403a:	4610      	mov	r0, r2
 800403c:	f000 fa02 	bl	8004444 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3708      	adds	r7, #8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80040aa:	b480      	push	{r7}
 80040ac:	b083      	sub	sp, #12
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80040b2:	bf00      	nop
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
	...

080040c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d001      	beq.n	80040d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e04f      	b.n	8004178 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2202      	movs	r2, #2
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68da      	ldr	r2, [r3, #12]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 0201 	orr.w	r2, r2, #1
 80040ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a23      	ldr	r2, [pc, #140]	; (8004184 <HAL_TIM_Base_Start_IT+0xc4>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d01d      	beq.n	8004136 <HAL_TIM_Base_Start_IT+0x76>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004102:	d018      	beq.n	8004136 <HAL_TIM_Base_Start_IT+0x76>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a1f      	ldr	r2, [pc, #124]	; (8004188 <HAL_TIM_Base_Start_IT+0xc8>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d013      	beq.n	8004136 <HAL_TIM_Base_Start_IT+0x76>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a1e      	ldr	r2, [pc, #120]	; (800418c <HAL_TIM_Base_Start_IT+0xcc>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d00e      	beq.n	8004136 <HAL_TIM_Base_Start_IT+0x76>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a1c      	ldr	r2, [pc, #112]	; (8004190 <HAL_TIM_Base_Start_IT+0xd0>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d009      	beq.n	8004136 <HAL_TIM_Base_Start_IT+0x76>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a1b      	ldr	r2, [pc, #108]	; (8004194 <HAL_TIM_Base_Start_IT+0xd4>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d004      	beq.n	8004136 <HAL_TIM_Base_Start_IT+0x76>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a19      	ldr	r2, [pc, #100]	; (8004198 <HAL_TIM_Base_Start_IT+0xd8>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d115      	bne.n	8004162 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689a      	ldr	r2, [r3, #8]
 800413c:	4b17      	ldr	r3, [pc, #92]	; (800419c <HAL_TIM_Base_Start_IT+0xdc>)
 800413e:	4013      	ands	r3, r2
 8004140:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2b06      	cmp	r3, #6
 8004146:	d015      	beq.n	8004174 <HAL_TIM_Base_Start_IT+0xb4>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800414e:	d011      	beq.n	8004174 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 0201 	orr.w	r2, r2, #1
 800415e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004160:	e008      	b.n	8004174 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f042 0201 	orr.w	r2, r2, #1
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	e000      	b.n	8004176 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004174:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3714      	adds	r7, #20
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr
 8004184:	40012c00 	.word	0x40012c00
 8004188:	40000400 	.word	0x40000400
 800418c:	40000800 	.word	0x40000800
 8004190:	40000c00 	.word	0x40000c00
 8004194:	40013400 	.word	0x40013400
 8004198:	40014000 	.word	0x40014000
 800419c:	00010007 	.word	0x00010007

080041a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d122      	bne.n	80041fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d11b      	bne.n	80041fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f06f 0202 	mvn.w	r2, #2
 80041cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	f003 0303 	and.w	r3, r3, #3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f90f 	bl	8004406 <HAL_TIM_IC_CaptureCallback>
 80041e8:	e005      	b.n	80041f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f901 	bl	80043f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 f912 	bl	800441a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	f003 0304 	and.w	r3, r3, #4
 8004206:	2b04      	cmp	r3, #4
 8004208:	d122      	bne.n	8004250 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f003 0304 	and.w	r3, r3, #4
 8004214:	2b04      	cmp	r3, #4
 8004216:	d11b      	bne.n	8004250 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f06f 0204 	mvn.w	r2, #4
 8004220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2202      	movs	r2, #2
 8004226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f8e5 	bl	8004406 <HAL_TIM_IC_CaptureCallback>
 800423c:	e005      	b.n	800424a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f8d7 	bl	80043f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 f8e8 	bl	800441a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	f003 0308 	and.w	r3, r3, #8
 800425a:	2b08      	cmp	r3, #8
 800425c:	d122      	bne.n	80042a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	f003 0308 	and.w	r3, r3, #8
 8004268:	2b08      	cmp	r3, #8
 800426a:	d11b      	bne.n	80042a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f06f 0208 	mvn.w	r2, #8
 8004274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2204      	movs	r2, #4
 800427a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	f003 0303 	and.w	r3, r3, #3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f8bb 	bl	8004406 <HAL_TIM_IC_CaptureCallback>
 8004290:	e005      	b.n	800429e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f8ad 	bl	80043f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 f8be 	bl	800441a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	f003 0310 	and.w	r3, r3, #16
 80042ae:	2b10      	cmp	r3, #16
 80042b0:	d122      	bne.n	80042f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	f003 0310 	and.w	r3, r3, #16
 80042bc:	2b10      	cmp	r3, #16
 80042be:	d11b      	bne.n	80042f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f06f 0210 	mvn.w	r2, #16
 80042c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2208      	movs	r2, #8
 80042ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	69db      	ldr	r3, [r3, #28]
 80042d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d003      	beq.n	80042e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 f891 	bl	8004406 <HAL_TIM_IC_CaptureCallback>
 80042e4:	e005      	b.n	80042f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 f883 	bl	80043f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 f894 	bl	800441a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b01      	cmp	r3, #1
 8004304:	d10e      	bne.n	8004324 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	f003 0301 	and.w	r3, r3, #1
 8004310:	2b01      	cmp	r3, #1
 8004312:	d107      	bne.n	8004324 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f06f 0201 	mvn.w	r2, #1
 800431c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f85d 	bl	80043de <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800432e:	2b80      	cmp	r3, #128	; 0x80
 8004330:	d10e      	bne.n	8004350 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800433c:	2b80      	cmp	r3, #128	; 0x80
 800433e:	d107      	bne.n	8004350 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f91e 	bl	800458c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800435a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800435e:	d10e      	bne.n	800437e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800436a:	2b80      	cmp	r3, #128	; 0x80
 800436c:	d107      	bne.n	800437e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004376:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 f911 	bl	80045a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004388:	2b40      	cmp	r3, #64	; 0x40
 800438a:	d10e      	bne.n	80043aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004396:	2b40      	cmp	r3, #64	; 0x40
 8004398:	d107      	bne.n	80043aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 f842 	bl	800442e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	f003 0320 	and.w	r3, r3, #32
 80043b4:	2b20      	cmp	r3, #32
 80043b6:	d10e      	bne.n	80043d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	f003 0320 	and.w	r3, r3, #32
 80043c2:	2b20      	cmp	r3, #32
 80043c4:	d107      	bne.n	80043d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f06f 0220 	mvn.w	r2, #32
 80043ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 f8d1 	bl	8004578 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043d6:	bf00      	nop
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043de:	b480      	push	{r7}
 80043e0:	b083      	sub	sp, #12
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80043e6:	bf00      	nop
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr

080043f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043f2:	b480      	push	{r7}
 80043f4:	b083      	sub	sp, #12
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043fa:	bf00      	nop
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr

08004406 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004406:	b480      	push	{r7}
 8004408:	b083      	sub	sp, #12
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800440e:	bf00      	nop
 8004410:	370c      	adds	r7, #12
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr

0800441a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800441a:	b480      	push	{r7}
 800441c:	b083      	sub	sp, #12
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004422:	bf00      	nop
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr

0800442e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800442e:	b480      	push	{r7}
 8004430:	b083      	sub	sp, #12
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004436:	bf00      	nop
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
	...

08004444 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a40      	ldr	r2, [pc, #256]	; (8004558 <TIM_Base_SetConfig+0x114>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d013      	beq.n	8004484 <TIM_Base_SetConfig+0x40>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004462:	d00f      	beq.n	8004484 <TIM_Base_SetConfig+0x40>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a3d      	ldr	r2, [pc, #244]	; (800455c <TIM_Base_SetConfig+0x118>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d00b      	beq.n	8004484 <TIM_Base_SetConfig+0x40>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a3c      	ldr	r2, [pc, #240]	; (8004560 <TIM_Base_SetConfig+0x11c>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d007      	beq.n	8004484 <TIM_Base_SetConfig+0x40>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a3b      	ldr	r2, [pc, #236]	; (8004564 <TIM_Base_SetConfig+0x120>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d003      	beq.n	8004484 <TIM_Base_SetConfig+0x40>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a3a      	ldr	r2, [pc, #232]	; (8004568 <TIM_Base_SetConfig+0x124>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d108      	bne.n	8004496 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800448a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	4313      	orrs	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a2f      	ldr	r2, [pc, #188]	; (8004558 <TIM_Base_SetConfig+0x114>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d01f      	beq.n	80044de <TIM_Base_SetConfig+0x9a>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044a4:	d01b      	beq.n	80044de <TIM_Base_SetConfig+0x9a>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a2c      	ldr	r2, [pc, #176]	; (800455c <TIM_Base_SetConfig+0x118>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d017      	beq.n	80044de <TIM_Base_SetConfig+0x9a>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a2b      	ldr	r2, [pc, #172]	; (8004560 <TIM_Base_SetConfig+0x11c>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d013      	beq.n	80044de <TIM_Base_SetConfig+0x9a>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a2a      	ldr	r2, [pc, #168]	; (8004564 <TIM_Base_SetConfig+0x120>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d00f      	beq.n	80044de <TIM_Base_SetConfig+0x9a>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a29      	ldr	r2, [pc, #164]	; (8004568 <TIM_Base_SetConfig+0x124>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d00b      	beq.n	80044de <TIM_Base_SetConfig+0x9a>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a28      	ldr	r2, [pc, #160]	; (800456c <TIM_Base_SetConfig+0x128>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d007      	beq.n	80044de <TIM_Base_SetConfig+0x9a>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a27      	ldr	r2, [pc, #156]	; (8004570 <TIM_Base_SetConfig+0x12c>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d003      	beq.n	80044de <TIM_Base_SetConfig+0x9a>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a26      	ldr	r2, [pc, #152]	; (8004574 <TIM_Base_SetConfig+0x130>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d108      	bne.n	80044f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a10      	ldr	r2, [pc, #64]	; (8004558 <TIM_Base_SetConfig+0x114>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d00f      	beq.n	800453c <TIM_Base_SetConfig+0xf8>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a12      	ldr	r2, [pc, #72]	; (8004568 <TIM_Base_SetConfig+0x124>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d00b      	beq.n	800453c <TIM_Base_SetConfig+0xf8>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a11      	ldr	r2, [pc, #68]	; (800456c <TIM_Base_SetConfig+0x128>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d007      	beq.n	800453c <TIM_Base_SetConfig+0xf8>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a10      	ldr	r2, [pc, #64]	; (8004570 <TIM_Base_SetConfig+0x12c>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d003      	beq.n	800453c <TIM_Base_SetConfig+0xf8>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a0f      	ldr	r2, [pc, #60]	; (8004574 <TIM_Base_SetConfig+0x130>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d103      	bne.n	8004544 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	691a      	ldr	r2, [r3, #16]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	615a      	str	r2, [r3, #20]
}
 800454a:	bf00      	nop
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	40012c00 	.word	0x40012c00
 800455c:	40000400 	.word	0x40000400
 8004560:	40000800 	.word	0x40000800
 8004564:	40000c00 	.word	0x40000c00
 8004568:	40013400 	.word	0x40013400
 800456c:	40014000 	.word	0x40014000
 8004570:	40014400 	.word	0x40014400
 8004574:	40014800 	.word	0x40014800

08004578 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b087      	sub	sp, #28
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	4613      	mov	r3, r2
 80045c0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80045c2:	79fb      	ldrb	r3, [r7, #7]
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d165      	bne.n	8004694 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	4a3e      	ldr	r2, [pc, #248]	; (80046c4 <USB_SetTurnaroundTime+0x110>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d906      	bls.n	80045de <USB_SetTurnaroundTime+0x2a>
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	4a3d      	ldr	r2, [pc, #244]	; (80046c8 <USB_SetTurnaroundTime+0x114>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d202      	bcs.n	80045de <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80045d8:	230f      	movs	r3, #15
 80045da:	617b      	str	r3, [r7, #20]
 80045dc:	e05c      	b.n	8004698 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	4a39      	ldr	r2, [pc, #228]	; (80046c8 <USB_SetTurnaroundTime+0x114>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d306      	bcc.n	80045f4 <USB_SetTurnaroundTime+0x40>
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	4a38      	ldr	r2, [pc, #224]	; (80046cc <USB_SetTurnaroundTime+0x118>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d202      	bcs.n	80045f4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80045ee:	230e      	movs	r3, #14
 80045f0:	617b      	str	r3, [r7, #20]
 80045f2:	e051      	b.n	8004698 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	4a35      	ldr	r2, [pc, #212]	; (80046cc <USB_SetTurnaroundTime+0x118>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d306      	bcc.n	800460a <USB_SetTurnaroundTime+0x56>
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	4a34      	ldr	r2, [pc, #208]	; (80046d0 <USB_SetTurnaroundTime+0x11c>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d202      	bcs.n	800460a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004604:	230d      	movs	r3, #13
 8004606:	617b      	str	r3, [r7, #20]
 8004608:	e046      	b.n	8004698 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	4a30      	ldr	r2, [pc, #192]	; (80046d0 <USB_SetTurnaroundTime+0x11c>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d306      	bcc.n	8004620 <USB_SetTurnaroundTime+0x6c>
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	4a2f      	ldr	r2, [pc, #188]	; (80046d4 <USB_SetTurnaroundTime+0x120>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d802      	bhi.n	8004620 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800461a:	230c      	movs	r3, #12
 800461c:	617b      	str	r3, [r7, #20]
 800461e:	e03b      	b.n	8004698 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	4a2c      	ldr	r2, [pc, #176]	; (80046d4 <USB_SetTurnaroundTime+0x120>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d906      	bls.n	8004636 <USB_SetTurnaroundTime+0x82>
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	4a2b      	ldr	r2, [pc, #172]	; (80046d8 <USB_SetTurnaroundTime+0x124>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d802      	bhi.n	8004636 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004630:	230b      	movs	r3, #11
 8004632:	617b      	str	r3, [r7, #20]
 8004634:	e030      	b.n	8004698 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	4a27      	ldr	r2, [pc, #156]	; (80046d8 <USB_SetTurnaroundTime+0x124>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d906      	bls.n	800464c <USB_SetTurnaroundTime+0x98>
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	4a26      	ldr	r2, [pc, #152]	; (80046dc <USB_SetTurnaroundTime+0x128>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d802      	bhi.n	800464c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004646:	230a      	movs	r3, #10
 8004648:	617b      	str	r3, [r7, #20]
 800464a:	e025      	b.n	8004698 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	4a23      	ldr	r2, [pc, #140]	; (80046dc <USB_SetTurnaroundTime+0x128>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d906      	bls.n	8004662 <USB_SetTurnaroundTime+0xae>
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	4a22      	ldr	r2, [pc, #136]	; (80046e0 <USB_SetTurnaroundTime+0x12c>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d202      	bcs.n	8004662 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800465c:	2309      	movs	r3, #9
 800465e:	617b      	str	r3, [r7, #20]
 8004660:	e01a      	b.n	8004698 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	4a1e      	ldr	r2, [pc, #120]	; (80046e0 <USB_SetTurnaroundTime+0x12c>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d306      	bcc.n	8004678 <USB_SetTurnaroundTime+0xc4>
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	4a1d      	ldr	r2, [pc, #116]	; (80046e4 <USB_SetTurnaroundTime+0x130>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d802      	bhi.n	8004678 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004672:	2308      	movs	r3, #8
 8004674:	617b      	str	r3, [r7, #20]
 8004676:	e00f      	b.n	8004698 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	4a1a      	ldr	r2, [pc, #104]	; (80046e4 <USB_SetTurnaroundTime+0x130>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d906      	bls.n	800468e <USB_SetTurnaroundTime+0xda>
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	4a19      	ldr	r2, [pc, #100]	; (80046e8 <USB_SetTurnaroundTime+0x134>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d202      	bcs.n	800468e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004688:	2307      	movs	r3, #7
 800468a:	617b      	str	r3, [r7, #20]
 800468c:	e004      	b.n	8004698 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800468e:	2306      	movs	r3, #6
 8004690:	617b      	str	r3, [r7, #20]
 8004692:	e001      	b.n	8004698 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004694:	2309      	movs	r3, #9
 8004696:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	68da      	ldr	r2, [r3, #12]
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	029b      	lsls	r3, r3, #10
 80046ac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80046b0:	431a      	orrs	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	371c      	adds	r7, #28
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr
 80046c4:	00d8acbf 	.word	0x00d8acbf
 80046c8:	00e4e1c0 	.word	0x00e4e1c0
 80046cc:	00f42400 	.word	0x00f42400
 80046d0:	01067380 	.word	0x01067380
 80046d4:	011a499f 	.word	0x011a499f
 80046d8:	01312cff 	.word	0x01312cff
 80046dc:	014ca43f 	.word	0x014ca43f
 80046e0:	016e3600 	.word	0x016e3600
 80046e4:	01a6ab1f 	.word	0x01a6ab1f
 80046e8:	01e84800 	.word	0x01e84800

080046ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80046f6:	2300      	movs	r3, #0
 80046f8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	019b      	lsls	r3, r3, #6
 80046fe:	f043 0220 	orr.w	r2, r3, #32
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	3301      	adds	r3, #1
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4a09      	ldr	r2, [pc, #36]	; (8004734 <USB_FlushTxFifo+0x48>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d901      	bls.n	8004718 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e006      	b.n	8004726 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	f003 0320 	and.w	r3, r3, #32
 8004720:	2b20      	cmp	r3, #32
 8004722:	d0f0      	beq.n	8004706 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3714      	adds	r7, #20
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	00030d40 	.word	0x00030d40

08004738 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004738:	b480      	push	{r7}
 800473a:	b087      	sub	sp, #28
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f003 0306 	and.w	r3, r3, #6
 8004750:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2b02      	cmp	r3, #2
 8004756:	d002      	beq.n	800475e <USB_GetDevSpeed+0x26>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2b06      	cmp	r3, #6
 800475c:	d102      	bne.n	8004764 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800475e:	2302      	movs	r3, #2
 8004760:	75fb      	strb	r3, [r7, #23]
 8004762:	e001      	b.n	8004768 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8004764:	230f      	movs	r3, #15
 8004766:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004768:	7dfb      	ldrb	r3, [r7, #23]
}
 800476a:	4618      	mov	r0, r3
 800476c:	371c      	adds	r7, #28
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr

08004776 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004776:	b480      	push	{r7}
 8004778:	b085      	sub	sp, #20
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
 800477e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	785b      	ldrb	r3, [r3, #1]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d13a      	bne.n	8004808 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004798:	69da      	ldr	r2, [r3, #28]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	f003 030f 	and.w	r3, r3, #15
 80047a2:	2101      	movs	r1, #1
 80047a4:	fa01 f303 	lsl.w	r3, r1, r3
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	68f9      	ldr	r1, [r7, #12]
 80047ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047b0:	4313      	orrs	r3, r2
 80047b2:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	015a      	lsls	r2, r3, #5
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	4413      	add	r3, r2
 80047bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d155      	bne.n	8004876 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	015a      	lsls	r2, r3, #5
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	4413      	add	r3, r2
 80047d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	78db      	ldrb	r3, [r3, #3]
 80047e4:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80047e6:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	059b      	lsls	r3, r3, #22
 80047ec:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80047ee:	4313      	orrs	r3, r2
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	0151      	lsls	r1, r2, #5
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	440a      	add	r2, r1
 80047f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004800:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004804:	6013      	str	r3, [r2, #0]
 8004806:	e036      	b.n	8004876 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800480e:	69da      	ldr	r2, [r3, #28]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	f003 030f 	and.w	r3, r3, #15
 8004818:	2101      	movs	r1, #1
 800481a:	fa01 f303 	lsl.w	r3, r1, r3
 800481e:	041b      	lsls	r3, r3, #16
 8004820:	68f9      	ldr	r1, [r7, #12]
 8004822:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004826:	4313      	orrs	r3, r2
 8004828:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	015a      	lsls	r2, r3, #5
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	4413      	add	r3, r2
 8004832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d11a      	bne.n	8004876 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	015a      	lsls	r2, r3, #5
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4413      	add	r3, r2
 8004848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	78db      	ldrb	r3, [r3, #3]
 800485a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800485c:	430b      	orrs	r3, r1
 800485e:	4313      	orrs	r3, r2
 8004860:	68ba      	ldr	r2, [r7, #8]
 8004862:	0151      	lsls	r1, r2, #5
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	440a      	add	r2, r1
 8004868:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800486c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004870:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004874:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3714      	adds	r7, #20
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	785b      	ldrb	r3, [r3, #1]
 800489c:	2b01      	cmp	r3, #1
 800489e:	f040 810a 	bne.w	8004ab6 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d132      	bne.n	8004910 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	015a      	lsls	r2, r3, #5
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	4413      	add	r3, r2
 80048b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	0151      	lsls	r1, r2, #5
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	440a      	add	r2, r1
 80048c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80048cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	015a      	lsls	r2, r3, #5
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	4413      	add	r3, r2
 80048d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	0151      	lsls	r1, r2, #5
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	440a      	add	r2, r1
 80048e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	015a      	lsls	r2, r3, #5
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	4413      	add	r3, r2
 80048f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	693a      	ldr	r2, [r7, #16]
 80048fe:	0151      	lsls	r1, r2, #5
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	440a      	add	r2, r1
 8004904:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004908:	0cdb      	lsrs	r3, r3, #19
 800490a:	04db      	lsls	r3, r3, #19
 800490c:	6113      	str	r3, [r2, #16]
 800490e:	e074      	b.n	80049fa <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	015a      	lsls	r2, r3, #5
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	4413      	add	r3, r2
 8004918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	0151      	lsls	r1, r2, #5
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	440a      	add	r2, r1
 8004926:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800492a:	0cdb      	lsrs	r3, r3, #19
 800492c:	04db      	lsls	r3, r3, #19
 800492e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	015a      	lsls	r2, r3, #5
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	4413      	add	r3, r2
 8004938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	0151      	lsls	r1, r2, #5
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	440a      	add	r2, r1
 8004946:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800494a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800494e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004952:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	015a      	lsls	r2, r3, #5
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	4413      	add	r3, r2
 800495c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004960:	691a      	ldr	r2, [r3, #16]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	6959      	ldr	r1, [r3, #20]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	440b      	add	r3, r1
 800496c:	1e59      	subs	r1, r3, #1
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	fbb1 f3f3 	udiv	r3, r1, r3
 8004976:	04d9      	lsls	r1, r3, #19
 8004978:	4baf      	ldr	r3, [pc, #700]	; (8004c38 <USB_EPStartXfer+0x3b4>)
 800497a:	400b      	ands	r3, r1
 800497c:	6939      	ldr	r1, [r7, #16]
 800497e:	0148      	lsls	r0, r1, #5
 8004980:	6979      	ldr	r1, [r7, #20]
 8004982:	4401      	add	r1, r0
 8004984:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004988:	4313      	orrs	r3, r2
 800498a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	015a      	lsls	r2, r3, #5
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	4413      	add	r3, r2
 8004994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004998:	691a      	ldr	r2, [r3, #16]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049a2:	6939      	ldr	r1, [r7, #16]
 80049a4:	0148      	lsls	r0, r1, #5
 80049a6:	6979      	ldr	r1, [r7, #20]
 80049a8:	4401      	add	r1, r0
 80049aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80049ae:	4313      	orrs	r3, r2
 80049b0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	78db      	ldrb	r3, [r3, #3]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d11f      	bne.n	80049fa <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	015a      	lsls	r2, r3, #5
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	4413      	add	r3, r2
 80049c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	0151      	lsls	r1, r2, #5
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	440a      	add	r2, r1
 80049d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049d4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80049d8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	015a      	lsls	r2, r3, #5
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	4413      	add	r3, r2
 80049e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	0151      	lsls	r1, r2, #5
 80049ec:	697a      	ldr	r2, [r7, #20]
 80049ee:	440a      	add	r2, r1
 80049f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80049f8:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	015a      	lsls	r2, r3, #5
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	4413      	add	r3, r2
 8004a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	0151      	lsls	r1, r2, #5
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	440a      	add	r2, r1
 8004a10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a18:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	78db      	ldrb	r3, [r3, #3]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d015      	beq.n	8004a4e <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f000 8100 	beq.w	8004c2c <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	f003 030f 	and.w	r3, r3, #15
 8004a3c:	2101      	movs	r1, #1
 8004a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a42:	6979      	ldr	r1, [r7, #20]
 8004a44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	634b      	str	r3, [r1, #52]	; 0x34
 8004a4c:	e0ee      	b.n	8004c2c <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d110      	bne.n	8004a80 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	015a      	lsls	r2, r3, #5
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	4413      	add	r3, r2
 8004a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	0151      	lsls	r1, r2, #5
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	440a      	add	r2, r1
 8004a74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a7c:	6013      	str	r3, [r2, #0]
 8004a7e:	e00f      	b.n	8004aa0 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	015a      	lsls	r2, r3, #5
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	4413      	add	r3, r2
 8004a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	0151      	lsls	r1, r2, #5
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	440a      	add	r2, r1
 8004a96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a9e:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	68d9      	ldr	r1, [r3, #12]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	781a      	ldrb	r2, [r3, #0]
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f9e2 	bl	8004e78 <USB_WritePacket>
 8004ab4:	e0ba      	b.n	8004c2c <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	015a      	lsls	r2, r3, #5
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	4413      	add	r3, r2
 8004abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	0151      	lsls	r1, r2, #5
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	440a      	add	r2, r1
 8004acc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ad0:	0cdb      	lsrs	r3, r3, #19
 8004ad2:	04db      	lsls	r3, r3, #19
 8004ad4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	015a      	lsls	r2, r3, #5
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	4413      	add	r3, r2
 8004ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	0151      	lsls	r1, r2, #5
 8004ae8:	697a      	ldr	r2, [r7, #20]
 8004aea:	440a      	add	r2, r1
 8004aec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004af0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004af4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004af8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d123      	bne.n	8004b4a <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	015a      	lsls	r2, r3, #5
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	4413      	add	r3, r2
 8004b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b0e:	691a      	ldr	r2, [r3, #16]
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b18:	6939      	ldr	r1, [r7, #16]
 8004b1a:	0148      	lsls	r0, r1, #5
 8004b1c:	6979      	ldr	r1, [r7, #20]
 8004b1e:	4401      	add	r1, r0
 8004b20:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b24:	4313      	orrs	r3, r2
 8004b26:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	015a      	lsls	r2, r3, #5
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	4413      	add	r3, r2
 8004b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	693a      	ldr	r2, [r7, #16]
 8004b38:	0151      	lsls	r1, r2, #5
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	440a      	add	r2, r1
 8004b3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b46:	6113      	str	r3, [r2, #16]
 8004b48:	e033      	b.n	8004bb2 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	695a      	ldr	r2, [r3, #20]
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	4413      	add	r3, r2
 8004b54:	1e5a      	subs	r2, r3, #1
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b5e:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	015a      	lsls	r2, r3, #5
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	4413      	add	r3, r2
 8004b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b6c:	691a      	ldr	r2, [r3, #16]
 8004b6e:	89fb      	ldrh	r3, [r7, #14]
 8004b70:	04d9      	lsls	r1, r3, #19
 8004b72:	4b31      	ldr	r3, [pc, #196]	; (8004c38 <USB_EPStartXfer+0x3b4>)
 8004b74:	400b      	ands	r3, r1
 8004b76:	6939      	ldr	r1, [r7, #16]
 8004b78:	0148      	lsls	r0, r1, #5
 8004b7a:	6979      	ldr	r1, [r7, #20]
 8004b7c:	4401      	add	r1, r0
 8004b7e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b82:	4313      	orrs	r3, r2
 8004b84:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	015a      	lsls	r2, r3, #5
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b92:	691a      	ldr	r2, [r3, #16]
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	89f9      	ldrh	r1, [r7, #14]
 8004b9a:	fb01 f303 	mul.w	r3, r1, r3
 8004b9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ba2:	6939      	ldr	r1, [r7, #16]
 8004ba4:	0148      	lsls	r0, r1, #5
 8004ba6:	6979      	ldr	r1, [r7, #20]
 8004ba8:	4401      	add	r1, r0
 8004baa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	78db      	ldrb	r3, [r3, #3]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d128      	bne.n	8004c0c <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d110      	bne.n	8004bec <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	015a      	lsls	r2, r3, #5
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	0151      	lsls	r1, r2, #5
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	440a      	add	r2, r1
 8004be0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004be4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004be8:	6013      	str	r3, [r2, #0]
 8004bea:	e00f      	b.n	8004c0c <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	015a      	lsls	r2, r3, #5
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	0151      	lsls	r1, r2, #5
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	440a      	add	r2, r1
 8004c02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c0a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	015a      	lsls	r2, r3, #5
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	4413      	add	r3, r2
 8004c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	0151      	lsls	r1, r2, #5
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	440a      	add	r2, r1
 8004c22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c26:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3718      	adds	r7, #24
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	1ff80000 	.word	0x1ff80000

08004c3c <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	785b      	ldrb	r3, [r3, #1]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	f040 80ab 	bne.w	8004db0 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d132      	bne.n	8004cc8 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	015a      	lsls	r2, r3, #5
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	4413      	add	r3, r2
 8004c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	68ba      	ldr	r2, [r7, #8]
 8004c72:	0151      	lsls	r1, r2, #5
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	440a      	add	r2, r1
 8004c78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c7c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c80:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	015a      	lsls	r2, r3, #5
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	68ba      	ldr	r2, [r7, #8]
 8004c96:	0151      	lsls	r1, r2, #5
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	440a      	add	r2, r1
 8004c9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ca0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ca4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	015a      	lsls	r2, r3, #5
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	4413      	add	r3, r2
 8004cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	68ba      	ldr	r2, [r7, #8]
 8004cb6:	0151      	lsls	r1, r2, #5
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	440a      	add	r2, r1
 8004cbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cc0:	0cdb      	lsrs	r3, r3, #19
 8004cc2:	04db      	lsls	r3, r3, #19
 8004cc4:	6113      	str	r3, [r2, #16]
 8004cc6:	e04e      	b.n	8004d66 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	0151      	lsls	r1, r2, #5
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	440a      	add	r2, r1
 8004cde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ce2:	0cdb      	lsrs	r3, r3, #19
 8004ce4:	04db      	lsls	r3, r3, #19
 8004ce6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	68ba      	ldr	r2, [r7, #8]
 8004cf8:	0151      	lsls	r1, r2, #5
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	440a      	add	r2, r1
 8004cfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d02:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d06:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d0a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	695a      	ldr	r2, [r3, #20]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d903      	bls.n	8004d20 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	689a      	ldr	r2, [r3, #8]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	015a      	lsls	r2, r3, #5
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	4413      	add	r3, r2
 8004d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	68ba      	ldr	r2, [r7, #8]
 8004d30:	0151      	lsls	r1, r2, #5
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	440a      	add	r2, r1
 8004d36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	015a      	lsls	r2, r3, #5
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	4413      	add	r3, r2
 8004d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d4c:	691a      	ldr	r2, [r3, #16]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d56:	68b9      	ldr	r1, [r7, #8]
 8004d58:	0148      	lsls	r0, r1, #5
 8004d5a:	68f9      	ldr	r1, [r7, #12]
 8004d5c:	4401      	add	r1, r0
 8004d5e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d62:	4313      	orrs	r3, r2
 8004d64:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	015a      	lsls	r2, r3, #5
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	0151      	lsls	r1, r2, #5
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	440a      	add	r2, r1
 8004d7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d80:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d84:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d06d      	beq.n	8004e6a <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	f003 030f 	and.w	r3, r3, #15
 8004d9e:	2101      	movs	r1, #1
 8004da0:	fa01 f303 	lsl.w	r3, r1, r3
 8004da4:	68f9      	ldr	r1, [r7, #12]
 8004da6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004daa:	4313      	orrs	r3, r2
 8004dac:	634b      	str	r3, [r1, #52]	; 0x34
 8004dae:	e05c      	b.n	8004e6a <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	015a      	lsls	r2, r3, #5
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	4413      	add	r3, r2
 8004db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	0151      	lsls	r1, r2, #5
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	440a      	add	r2, r1
 8004dc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dca:	0cdb      	lsrs	r3, r3, #19
 8004dcc:	04db      	lsls	r3, r3, #19
 8004dce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	015a      	lsls	r2, r3, #5
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	68ba      	ldr	r2, [r7, #8]
 8004de0:	0151      	lsls	r1, r2, #5
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	440a      	add	r2, r1
 8004de6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004dee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004df2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	695b      	ldr	r3, [r3, #20]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d003      	beq.n	8004e04 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	689a      	ldr	r2, [r3, #8]
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	015a      	lsls	r2, r3, #5
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	68ba      	ldr	r2, [r7, #8]
 8004e14:	0151      	lsls	r1, r2, #5
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	440a      	add	r2, r1
 8004e1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e22:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	015a      	lsls	r2, r3, #5
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e30:	691a      	ldr	r2, [r3, #16]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e3a:	68b9      	ldr	r1, [r7, #8]
 8004e3c:	0148      	lsls	r0, r1, #5
 8004e3e:	68f9      	ldr	r1, [r7, #12]
 8004e40:	4401      	add	r1, r0
 8004e42:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e46:	4313      	orrs	r3, r2
 8004e48:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	015a      	lsls	r2, r3, #5
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	4413      	add	r3, r2
 8004e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	0151      	lsls	r1, r2, #5
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	440a      	add	r2, r1
 8004e60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e64:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e68:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3714      	adds	r7, #20
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b089      	sub	sp, #36	; 0x24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	4611      	mov	r1, r2
 8004e84:	461a      	mov	r2, r3
 8004e86:	460b      	mov	r3, r1
 8004e88:	71fb      	strb	r3, [r7, #7]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8004e96:	88bb      	ldrh	r3, [r7, #4]
 8004e98:	3303      	adds	r3, #3
 8004e9a:	089b      	lsrs	r3, r3, #2
 8004e9c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	61bb      	str	r3, [r7, #24]
 8004ea2:	e00f      	b.n	8004ec4 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004ea4:	79fb      	ldrb	r3, [r7, #7]
 8004ea6:	031a      	lsls	r2, r3, #12
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	4413      	add	r3, r2
 8004eac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6013      	str	r3, [r2, #0]
    pSrc++;
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	3304      	adds	r3, #4
 8004ebc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	61bb      	str	r3, [r7, #24]
 8004ec4:	69ba      	ldr	r2, [r7, #24]
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d3eb      	bcc.n	8004ea4 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3724      	adds	r7, #36	; 0x24
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004eda:	b480      	push	{r7}
 8004edc:	b089      	sub	sp, #36	; 0x24
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	60f8      	str	r0, [r7, #12]
 8004ee2:	60b9      	str	r1, [r7, #8]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004ef0:	88fb      	ldrh	r3, [r7, #6]
 8004ef2:	3303      	adds	r3, #3
 8004ef4:	089b      	lsrs	r3, r3, #2
 8004ef6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004ef8:	2300      	movs	r3, #0
 8004efa:	61bb      	str	r3, [r7, #24]
 8004efc:	e00b      	b.n	8004f16 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	601a      	str	r2, [r3, #0]
    pDest++;
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	3304      	adds	r3, #4
 8004f0e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	3301      	adds	r3, #1
 8004f14:	61bb      	str	r3, [r7, #24]
 8004f16:	69ba      	ldr	r2, [r7, #24]
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d3ef      	bcc.n	8004efe <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004f1e:	69fb      	ldr	r3, [r7, #28]
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3724      	adds	r7, #36	; 0x24
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	785b      	ldrb	r3, [r3, #1]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d12c      	bne.n	8004fa2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	015a      	lsls	r2, r3, #5
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	4413      	add	r3, r2
 8004f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	db12      	blt.n	8004f80 <USB_EPSetStall+0x54>
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00f      	beq.n	8004f80 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	015a      	lsls	r2, r3, #5
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	4413      	add	r3, r2
 8004f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	0151      	lsls	r1, r2, #5
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	440a      	add	r2, r1
 8004f76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f7a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f7e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	015a      	lsls	r2, r3, #5
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	4413      	add	r3, r2
 8004f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	0151      	lsls	r1, r2, #5
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	440a      	add	r2, r1
 8004f96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f9e:	6013      	str	r3, [r2, #0]
 8004fa0:	e02b      	b.n	8004ffa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	015a      	lsls	r2, r3, #5
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	4413      	add	r3, r2
 8004faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	db12      	blt.n	8004fda <USB_EPSetStall+0xae>
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00f      	beq.n	8004fda <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	015a      	lsls	r2, r3, #5
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	0151      	lsls	r1, r2, #5
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	440a      	add	r2, r1
 8004fd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fd4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004fd8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	015a      	lsls	r2, r3, #5
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	0151      	lsls	r1, r2, #5
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	440a      	add	r2, r1
 8004ff0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ff4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ff8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3714      	adds	r7, #20
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	785b      	ldrb	r3, [r3, #1]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d128      	bne.n	8005076 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	4413      	add	r3, r2
 800502c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68ba      	ldr	r2, [r7, #8]
 8005034:	0151      	lsls	r1, r2, #5
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	440a      	add	r2, r1
 800503a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800503e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005042:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	78db      	ldrb	r3, [r3, #3]
 8005048:	2b03      	cmp	r3, #3
 800504a:	d003      	beq.n	8005054 <USB_EPClearStall+0x4c>
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	78db      	ldrb	r3, [r3, #3]
 8005050:	2b02      	cmp	r3, #2
 8005052:	d138      	bne.n	80050c6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	015a      	lsls	r2, r3, #5
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	4413      	add	r3, r2
 800505c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	0151      	lsls	r1, r2, #5
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	440a      	add	r2, r1
 800506a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800506e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005072:	6013      	str	r3, [r2, #0]
 8005074:	e027      	b.n	80050c6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	015a      	lsls	r2, r3, #5
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	4413      	add	r3, r2
 800507e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68ba      	ldr	r2, [r7, #8]
 8005086:	0151      	lsls	r1, r2, #5
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	440a      	add	r2, r1
 800508c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005090:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005094:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	78db      	ldrb	r3, [r3, #3]
 800509a:	2b03      	cmp	r3, #3
 800509c:	d003      	beq.n	80050a6 <USB_EPClearStall+0x9e>
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	78db      	ldrb	r3, [r3, #3]
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d10f      	bne.n	80050c6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	015a      	lsls	r2, r3, #5
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	4413      	add	r3, r2
 80050ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	0151      	lsls	r1, r2, #5
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	440a      	add	r2, r1
 80050bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050c4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3714      	adds	r7, #20
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	460b      	mov	r3, r1
 80050de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050f2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80050f6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	78fb      	ldrb	r3, [r7, #3]
 8005102:	011b      	lsls	r3, r3, #4
 8005104:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005108:	68f9      	ldr	r1, [r7, #12]
 800510a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800510e:	4313      	orrs	r3, r2
 8005110:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	695b      	ldr	r3, [r3, #20]
 800512c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	4013      	ands	r3, r2
 8005136:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005138:	68fb      	ldr	r3, [r7, #12]
}
 800513a:	4618      	mov	r0, r3
 800513c:	3714      	adds	r7, #20
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr

08005146 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005146:	b480      	push	{r7}
 8005148:	b085      	sub	sp, #20
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005162:	69db      	ldr	r3, [r3, #28]
 8005164:	68ba      	ldr	r2, [r7, #8]
 8005166:	4013      	ands	r3, r2
 8005168:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	0c1b      	lsrs	r3, r3, #16
}
 800516e:	4618      	mov	r0, r3
 8005170:	3714      	adds	r7, #20
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr

0800517a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800517a:	b480      	push	{r7}
 800517c:	b085      	sub	sp, #20
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005196:	69db      	ldr	r3, [r3, #28]
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	4013      	ands	r3, r2
 800519c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	b29b      	uxth	r3, r3
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3714      	adds	r7, #20
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr

080051ae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b085      	sub	sp, #20
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
 80051b6:	460b      	mov	r3, r1
 80051b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80051be:	78fb      	ldrb	r3, [r7, #3]
 80051c0:	015a      	lsls	r2, r3, #5
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	4413      	add	r3, r2
 80051c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	68ba      	ldr	r2, [r7, #8]
 80051d8:	4013      	ands	r3, r2
 80051da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80051dc:	68bb      	ldr	r3, [r7, #8]
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3714      	adds	r7, #20
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80051ea:	b480      	push	{r7}
 80051ec:	b087      	sub	sp, #28
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
 80051f2:	460b      	mov	r3, r1
 80051f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800520a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800520c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800520e:	78fb      	ldrb	r3, [r7, #3]
 8005210:	f003 030f 	and.w	r3, r3, #15
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	fa22 f303 	lsr.w	r3, r2, r3
 800521a:	01db      	lsls	r3, r3, #7
 800521c:	b2db      	uxtb	r3, r3
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	4313      	orrs	r3, r2
 8005222:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005224:	78fb      	ldrb	r3, [r7, #3]
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	4413      	add	r3, r2
 800522c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	693a      	ldr	r2, [r7, #16]
 8005234:	4013      	ands	r3, r2
 8005236:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005238:	68bb      	ldr	r3, [r7, #8]
}
 800523a:	4618      	mov	r0, r3
 800523c:	371c      	adds	r7, #28
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr

08005246 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005246:	b480      	push	{r7}
 8005248:	b083      	sub	sp, #12
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	f003 0301 	and.w	r3, r3, #1
}
 8005256:	4618      	mov	r0, r3
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr

08005262 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005262:	b480      	push	{r7}
 8005264:	b085      	sub	sp, #20
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800527c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005280:	f023 0307 	bic.w	r3, r3, #7
 8005284:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005298:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3714      	adds	r7, #20
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	333c      	adds	r3, #60	; 0x3c
 80052ba:	3304      	adds	r3, #4
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	4a1c      	ldr	r2, [pc, #112]	; (8005334 <USB_EP0_OutStart+0x8c>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d90a      	bls.n	80052de <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052d8:	d101      	bne.n	80052de <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 80052da:	2300      	movs	r3, #0
 80052dc:	e024      	b.n	8005328 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e4:	461a      	mov	r2, r3
 80052e6:	2300      	movs	r3, #0
 80052e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800530c:	f043 0318 	orr.w	r3, r3, #24
 8005310:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005320:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005324:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3714      	adds	r7, #20
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr
 8005334:	4f54300a 	.word	0x4f54300a

08005338 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	370c      	adds	r7, #12
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800534e:	b580      	push	{r7, lr}
 8005350:	b084      	sub	sp, #16
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
 8005356:	460b      	mov	r3, r1
 8005358:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800535a:	2303      	movs	r3, #3
 800535c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005364:	2b00      	cmp	r3, #0
 8005366:	d009      	beq.n	800537c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	78fa      	ldrb	r2, [r7, #3]
 8005372:	4611      	mov	r1, r2
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	4798      	blx	r3
 8005378:	4603      	mov	r3, r0
 800537a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800537c:	7bfb      	ldrb	r3, [r7, #15]
}
 800537e:	4618      	mov	r0, r3
 8005380:	3710      	adds	r7, #16
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b082      	sub	sp, #8
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
 800538e:	460b      	mov	r3, r1
 8005390:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005398:	2b00      	cmp	r3, #0
 800539a:	d007      	beq.n	80053ac <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	78fa      	ldrb	r2, [r7, #3]
 80053a6:	4611      	mov	r1, r2
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	4798      	blx	r3
  }

  return USBD_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b084      	sub	sp, #16
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
 80053be:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80053c6:	6839      	ldr	r1, [r7, #0]
 80053c8:	4618      	mov	r0, r3
 80053ca:	f000 ffb9 	bl	8006340 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80053dc:	461a      	mov	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80053ea:	f003 031f 	and.w	r3, r3, #31
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d01a      	beq.n	8005428 <USBD_LL_SetupStage+0x72>
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d822      	bhi.n	800543c <USBD_LL_SetupStage+0x86>
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d002      	beq.n	8005400 <USBD_LL_SetupStage+0x4a>
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d00a      	beq.n	8005414 <USBD_LL_SetupStage+0x5e>
 80053fe:	e01d      	b.n	800543c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005406:	4619      	mov	r1, r3
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 fa61 	bl	80058d0 <USBD_StdDevReq>
 800540e:	4603      	mov	r3, r0
 8005410:	73fb      	strb	r3, [r7, #15]
      break;
 8005412:	e020      	b.n	8005456 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800541a:	4619      	mov	r1, r3
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 fac5 	bl	80059ac <USBD_StdItfReq>
 8005422:	4603      	mov	r3, r0
 8005424:	73fb      	strb	r3, [r7, #15]
      break;
 8005426:	e016      	b.n	8005456 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800542e:	4619      	mov	r1, r3
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 fb04 	bl	8005a3e <USBD_StdEPReq>
 8005436:	4603      	mov	r3, r0
 8005438:	73fb      	strb	r3, [r7, #15]
      break;
 800543a:	e00c      	b.n	8005456 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005442:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005446:	b2db      	uxtb	r3, r3
 8005448:	4619      	mov	r1, r3
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f001 f966 	bl	800671c <USBD_LL_StallEP>
 8005450:	4603      	mov	r3, r0
 8005452:	73fb      	strb	r3, [r7, #15]
      break;
 8005454:	bf00      	nop
  }

  return ret;
 8005456:	7bfb      	ldrb	r3, [r7, #15]
}
 8005458:	4618      	mov	r0, r3
 800545a:	3710      	adds	r7, #16
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b086      	sub	sp, #24
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	460b      	mov	r3, r1
 800546a:	607a      	str	r2, [r7, #4]
 800546c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800546e:	7afb      	ldrb	r3, [r7, #11]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d138      	bne.n	80054e6 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800547a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005482:	2b03      	cmp	r3, #3
 8005484:	d14a      	bne.n	800551c <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	689a      	ldr	r2, [r3, #8]
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	429a      	cmp	r2, r3
 8005490:	d913      	bls.n	80054ba <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	689a      	ldr	r2, [r3, #8]
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	1ad2      	subs	r2, r2, r3
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	68da      	ldr	r2, [r3, #12]
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	4293      	cmp	r3, r2
 80054aa:	bf28      	it	cs
 80054ac:	4613      	movcs	r3, r2
 80054ae:	461a      	mov	r2, r3
 80054b0:	6879      	ldr	r1, [r7, #4]
 80054b2:	68f8      	ldr	r0, [r7, #12]
 80054b4:	f000 ffbb 	bl	800642e <USBD_CtlContinueRx>
 80054b8:	e030      	b.n	800551c <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b03      	cmp	r3, #3
 80054c4:	d10b      	bne.n	80054de <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d005      	beq.n	80054de <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f000 ffb6 	bl	8006450 <USBD_CtlSendStatus>
 80054e4:	e01a      	b.n	800551c <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b03      	cmp	r3, #3
 80054f0:	d114      	bne.n	800551c <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00e      	beq.n	800551c <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	7afa      	ldrb	r2, [r7, #11]
 8005508:	4611      	mov	r1, r2
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	4798      	blx	r3
 800550e:	4603      	mov	r3, r0
 8005510:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005512:	7dfb      	ldrb	r3, [r7, #23]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d001      	beq.n	800551c <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005518:	7dfb      	ldrb	r3, [r7, #23]
 800551a:	e000      	b.n	800551e <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3718      	adds	r7, #24
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005526:	b580      	push	{r7, lr}
 8005528:	b086      	sub	sp, #24
 800552a:	af00      	add	r7, sp, #0
 800552c:	60f8      	str	r0, [r7, #12]
 800552e:	460b      	mov	r3, r1
 8005530:	607a      	str	r2, [r7, #4]
 8005532:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005534:	7afb      	ldrb	r3, [r7, #11]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d16b      	bne.n	8005612 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	3314      	adds	r3, #20
 800553e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005546:	2b02      	cmp	r3, #2
 8005548:	d156      	bne.n	80055f8 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	689a      	ldr	r2, [r3, #8]
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	429a      	cmp	r2, r3
 8005554:	d914      	bls.n	8005580 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	689a      	ldr	r2, [r3, #8]
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	1ad2      	subs	r2, r2, r3
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	461a      	mov	r2, r3
 800556a:	6879      	ldr	r1, [r7, #4]
 800556c:	68f8      	ldr	r0, [r7, #12]
 800556e:	f000 ff4d 	bl	800640c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005572:	2300      	movs	r3, #0
 8005574:	2200      	movs	r2, #0
 8005576:	2100      	movs	r1, #0
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	f001 f9d5 	bl	8006928 <USBD_LL_PrepareReceive>
 800557e:	e03b      	b.n	80055f8 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	68da      	ldr	r2, [r3, #12]
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	429a      	cmp	r2, r3
 800558a:	d11c      	bne.n	80055c6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	685a      	ldr	r2, [r3, #4]
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005594:	429a      	cmp	r2, r3
 8005596:	d316      	bcc.n	80055c6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	685a      	ldr	r2, [r3, #4]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d20f      	bcs.n	80055c6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80055a6:	2200      	movs	r2, #0
 80055a8:	2100      	movs	r1, #0
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f000 ff2e 	bl	800640c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80055b8:	2300      	movs	r3, #0
 80055ba:	2200      	movs	r2, #0
 80055bc:	2100      	movs	r1, #0
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f001 f9b2 	bl	8006928 <USBD_LL_PrepareReceive>
 80055c4:	e018      	b.n	80055f8 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b03      	cmp	r3, #3
 80055d0:	d10b      	bne.n	80055ea <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d005      	beq.n	80055ea <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80055ea:	2180      	movs	r1, #128	; 0x80
 80055ec:	68f8      	ldr	r0, [r7, #12]
 80055ee:	f001 f895 	bl	800671c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80055f2:	68f8      	ldr	r0, [r7, #12]
 80055f4:	f000 ff3f 	bl	8006476 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d122      	bne.n	8005648 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f7ff fe98 	bl	8005338 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005610:	e01a      	b.n	8005648 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b03      	cmp	r3, #3
 800561c:	d114      	bne.n	8005648 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00e      	beq.n	8005648 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	7afa      	ldrb	r2, [r7, #11]
 8005634:	4611      	mov	r1, r2
 8005636:	68f8      	ldr	r0, [r7, #12]
 8005638:	4798      	blx	r3
 800563a:	4603      	mov	r3, r0
 800563c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800563e:	7dfb      	ldrb	r3, [r7, #23]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d001      	beq.n	8005648 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8005644:	7dfb      	ldrb	r3, [r7, #23]
 8005646:	e000      	b.n	800564a <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3718      	adds	r7, #24
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}

08005652 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005652:	b580      	push	{r7, lr}
 8005654:	b082      	sub	sp, #8
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800567e:	2b00      	cmp	r3, #0
 8005680:	d101      	bne.n	8005686 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005682:	2303      	movs	r3, #3
 8005684:	e02f      	b.n	80056e6 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00f      	beq.n	80056b0 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d009      	beq.n	80056b0 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	6852      	ldr	r2, [r2, #4]
 80056a8:	b2d2      	uxtb	r2, r2
 80056aa:	4611      	mov	r1, r2
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80056b0:	2340      	movs	r3, #64	; 0x40
 80056b2:	2200      	movs	r2, #0
 80056b4:	2100      	movs	r1, #0
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 fff2 	bl	80066a0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2240      	movs	r2, #64	; 0x40
 80056c8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80056cc:	2340      	movs	r3, #64	; 0x40
 80056ce:	2200      	movs	r2, #0
 80056d0:	2180      	movs	r1, #128	; 0x80
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 ffe4 	bl	80066a0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2240      	movs	r2, #64	; 0x40
 80056e2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3708      	adds	r7, #8
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80056ee:	b480      	push	{r7}
 80056f0:	b083      	sub	sp, #12
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
 80056f6:	460b      	mov	r3, r1
 80056f8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	78fa      	ldrb	r2, [r7, #3]
 80056fe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	370c      	adds	r7, #12
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr

0800570e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800570e:	b480      	push	{r7}
 8005710:	b083      	sub	sp, #12
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800571c:	b2da      	uxtb	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2204      	movs	r2, #4
 8005728:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	370c      	adds	r7, #12
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr

0800573a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800573a:	b480      	push	{r7}
 800573c:	b083      	sub	sp, #12
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b04      	cmp	r3, #4
 800574c:	d106      	bne.n	800575c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005754:	b2da      	uxtb	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	370c      	adds	r7, #12
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b082      	sub	sp, #8
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005778:	2b00      	cmp	r3, #0
 800577a:	d101      	bne.n	8005780 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800577c:	2303      	movs	r3, #3
 800577e:	e012      	b.n	80057a6 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2b03      	cmp	r3, #3
 800578a:	d10b      	bne.n	80057a4 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005792:	69db      	ldr	r3, [r3, #28]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d005      	beq.n	80057a4 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800579e:	69db      	ldr	r3, [r3, #28]
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3708      	adds	r7, #8
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b082      	sub	sp, #8
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
 80057b6:	460b      	mov	r3, r1
 80057b8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d101      	bne.n	80057c8 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e014      	b.n	80057f2 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	2b03      	cmp	r3, #3
 80057d2:	d10d      	bne.n	80057f0 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057da:	6a1b      	ldr	r3, [r3, #32]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d007      	beq.n	80057f0 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057e6:	6a1b      	ldr	r3, [r3, #32]
 80057e8:	78fa      	ldrb	r2, [r7, #3]
 80057ea:	4611      	mov	r1, r2
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3708      	adds	r7, #8
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b082      	sub	sp, #8
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
 8005802:	460b      	mov	r3, r1
 8005804:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800580c:	2b00      	cmp	r3, #0
 800580e:	d101      	bne.n	8005814 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005810:	2303      	movs	r3, #3
 8005812:	e014      	b.n	800583e <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800581a:	b2db      	uxtb	r3, r3
 800581c:	2b03      	cmp	r3, #3
 800581e:	d10d      	bne.n	800583c <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005828:	2b00      	cmp	r3, #0
 800582a:	d007      	beq.n	800583c <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005834:	78fa      	ldrb	r2, [r7, #3]
 8005836:	4611      	mov	r1, r2
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005846:	b480      	push	{r7}
 8005848:	b083      	sub	sp, #12
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005872:	2b00      	cmp	r3, #0
 8005874:	d009      	beq.n	800588a <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	6852      	ldr	r2, [r2, #4]
 8005882:	b2d2      	uxtb	r2, r2
 8005884:	4611      	mov	r1, r2
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	4798      	blx	r3
  }

  return USBD_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3708      	adds	r7, #8
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005894:	b480      	push	{r7}
 8005896:	b087      	sub	sp, #28
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	3301      	adds	r3, #1
 80058aa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80058b2:	8a3b      	ldrh	r3, [r7, #16]
 80058b4:	021b      	lsls	r3, r3, #8
 80058b6:	b21a      	sxth	r2, r3
 80058b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80058bc:	4313      	orrs	r3, r2
 80058be:	b21b      	sxth	r3, r3
 80058c0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80058c2:	89fb      	ldrh	r3, [r7, #14]
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	371c      	adds	r7, #28
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80058da:	2300      	movs	r3, #0
 80058dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80058e6:	2b40      	cmp	r3, #64	; 0x40
 80058e8:	d005      	beq.n	80058f6 <USBD_StdDevReq+0x26>
 80058ea:	2b40      	cmp	r3, #64	; 0x40
 80058ec:	d853      	bhi.n	8005996 <USBD_StdDevReq+0xc6>
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00b      	beq.n	800590a <USBD_StdDevReq+0x3a>
 80058f2:	2b20      	cmp	r3, #32
 80058f4:	d14f      	bne.n	8005996 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	6839      	ldr	r1, [r7, #0]
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	4798      	blx	r3
 8005904:	4603      	mov	r3, r0
 8005906:	73fb      	strb	r3, [r7, #15]
      break;
 8005908:	e04a      	b.n	80059a0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	785b      	ldrb	r3, [r3, #1]
 800590e:	2b09      	cmp	r3, #9
 8005910:	d83b      	bhi.n	800598a <USBD_StdDevReq+0xba>
 8005912:	a201      	add	r2, pc, #4	; (adr r2, 8005918 <USBD_StdDevReq+0x48>)
 8005914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005918:	0800596d 	.word	0x0800596d
 800591c:	08005981 	.word	0x08005981
 8005920:	0800598b 	.word	0x0800598b
 8005924:	08005977 	.word	0x08005977
 8005928:	0800598b 	.word	0x0800598b
 800592c:	0800594b 	.word	0x0800594b
 8005930:	08005941 	.word	0x08005941
 8005934:	0800598b 	.word	0x0800598b
 8005938:	08005963 	.word	0x08005963
 800593c:	08005955 	.word	0x08005955
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005940:	6839      	ldr	r1, [r7, #0]
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 f9de 	bl	8005d04 <USBD_GetDescriptor>
          break;
 8005948:	e024      	b.n	8005994 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800594a:	6839      	ldr	r1, [r7, #0]
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 fb6d 	bl	800602c <USBD_SetAddress>
          break;
 8005952:	e01f      	b.n	8005994 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005954:	6839      	ldr	r1, [r7, #0]
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 fbac 	bl	80060b4 <USBD_SetConfig>
 800595c:	4603      	mov	r3, r0
 800595e:	73fb      	strb	r3, [r7, #15]
          break;
 8005960:	e018      	b.n	8005994 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005962:	6839      	ldr	r1, [r7, #0]
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 fc4b 	bl	8006200 <USBD_GetConfig>
          break;
 800596a:	e013      	b.n	8005994 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800596c:	6839      	ldr	r1, [r7, #0]
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 fc7c 	bl	800626c <USBD_GetStatus>
          break;
 8005974:	e00e      	b.n	8005994 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005976:	6839      	ldr	r1, [r7, #0]
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 fcab 	bl	80062d4 <USBD_SetFeature>
          break;
 800597e:	e009      	b.n	8005994 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005980:	6839      	ldr	r1, [r7, #0]
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 fcba 	bl	80062fc <USBD_ClrFeature>
          break;
 8005988:	e004      	b.n	8005994 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800598a:	6839      	ldr	r1, [r7, #0]
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 fd11 	bl	80063b4 <USBD_CtlError>
          break;
 8005992:	bf00      	nop
      }
      break;
 8005994:	e004      	b.n	80059a0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8005996:	6839      	ldr	r1, [r7, #0]
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 fd0b 	bl	80063b4 <USBD_CtlError>
      break;
 800599e:	bf00      	nop
  }

  return ret;
 80059a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3710      	adds	r7, #16
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop

080059ac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80059b6:	2300      	movs	r3, #0
 80059b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059c2:	2b40      	cmp	r3, #64	; 0x40
 80059c4:	d005      	beq.n	80059d2 <USBD_StdItfReq+0x26>
 80059c6:	2b40      	cmp	r3, #64	; 0x40
 80059c8:	d82f      	bhi.n	8005a2a <USBD_StdItfReq+0x7e>
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d001      	beq.n	80059d2 <USBD_StdItfReq+0x26>
 80059ce:	2b20      	cmp	r3, #32
 80059d0:	d12b      	bne.n	8005a2a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	3b01      	subs	r3, #1
 80059dc:	2b02      	cmp	r3, #2
 80059de:	d81d      	bhi.n	8005a1c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	889b      	ldrh	r3, [r3, #4]
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d813      	bhi.n	8005a12 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	6839      	ldr	r1, [r7, #0]
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	4798      	blx	r3
 80059f8:	4603      	mov	r3, r0
 80059fa:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	88db      	ldrh	r3, [r3, #6]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d110      	bne.n	8005a26 <USBD_StdItfReq+0x7a>
 8005a04:	7bfb      	ldrb	r3, [r7, #15]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d10d      	bne.n	8005a26 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 fd20 	bl	8006450 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005a10:	e009      	b.n	8005a26 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8005a12:	6839      	ldr	r1, [r7, #0]
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 fccd 	bl	80063b4 <USBD_CtlError>
          break;
 8005a1a:	e004      	b.n	8005a26 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8005a1c:	6839      	ldr	r1, [r7, #0]
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 fcc8 	bl	80063b4 <USBD_CtlError>
          break;
 8005a24:	e000      	b.n	8005a28 <USBD_StdItfReq+0x7c>
          break;
 8005a26:	bf00      	nop
      }
      break;
 8005a28:	e004      	b.n	8005a34 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8005a2a:	6839      	ldr	r1, [r7, #0]
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 fcc1 	bl	80063b4 <USBD_CtlError>
      break;
 8005a32:	bf00      	nop
  }

  return ret;
 8005a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b084      	sub	sp, #16
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
 8005a46:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	889b      	ldrh	r3, [r3, #4]
 8005a50:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a5a:	2b40      	cmp	r3, #64	; 0x40
 8005a5c:	d007      	beq.n	8005a6e <USBD_StdEPReq+0x30>
 8005a5e:	2b40      	cmp	r3, #64	; 0x40
 8005a60:	f200 8145 	bhi.w	8005cee <USBD_StdEPReq+0x2b0>
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00c      	beq.n	8005a82 <USBD_StdEPReq+0x44>
 8005a68:	2b20      	cmp	r3, #32
 8005a6a:	f040 8140 	bne.w	8005cee <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	6839      	ldr	r1, [r7, #0]
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	4798      	blx	r3
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a80:	e13a      	b.n	8005cf8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	785b      	ldrb	r3, [r3, #1]
 8005a86:	2b03      	cmp	r3, #3
 8005a88:	d007      	beq.n	8005a9a <USBD_StdEPReq+0x5c>
 8005a8a:	2b03      	cmp	r3, #3
 8005a8c:	f300 8129 	bgt.w	8005ce2 <USBD_StdEPReq+0x2a4>
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d07f      	beq.n	8005b94 <USBD_StdEPReq+0x156>
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d03c      	beq.n	8005b12 <USBD_StdEPReq+0xd4>
 8005a98:	e123      	b.n	8005ce2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	2b02      	cmp	r3, #2
 8005aa4:	d002      	beq.n	8005aac <USBD_StdEPReq+0x6e>
 8005aa6:	2b03      	cmp	r3, #3
 8005aa8:	d016      	beq.n	8005ad8 <USBD_StdEPReq+0x9a>
 8005aaa:	e02c      	b.n	8005b06 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005aac:	7bbb      	ldrb	r3, [r7, #14]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00d      	beq.n	8005ace <USBD_StdEPReq+0x90>
 8005ab2:	7bbb      	ldrb	r3, [r7, #14]
 8005ab4:	2b80      	cmp	r3, #128	; 0x80
 8005ab6:	d00a      	beq.n	8005ace <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005ab8:	7bbb      	ldrb	r3, [r7, #14]
 8005aba:	4619      	mov	r1, r3
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 fe2d 	bl	800671c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005ac2:	2180      	movs	r1, #128	; 0x80
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 fe29 	bl	800671c <USBD_LL_StallEP>
 8005aca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005acc:	e020      	b.n	8005b10 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8005ace:	6839      	ldr	r1, [r7, #0]
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 fc6f 	bl	80063b4 <USBD_CtlError>
              break;
 8005ad6:	e01b      	b.n	8005b10 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	885b      	ldrh	r3, [r3, #2]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10e      	bne.n	8005afe <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005ae0:	7bbb      	ldrb	r3, [r7, #14]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00b      	beq.n	8005afe <USBD_StdEPReq+0xc0>
 8005ae6:	7bbb      	ldrb	r3, [r7, #14]
 8005ae8:	2b80      	cmp	r3, #128	; 0x80
 8005aea:	d008      	beq.n	8005afe <USBD_StdEPReq+0xc0>
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	88db      	ldrh	r3, [r3, #6]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d104      	bne.n	8005afe <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005af4:	7bbb      	ldrb	r3, [r7, #14]
 8005af6:	4619      	mov	r1, r3
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 fe0f 	bl	800671c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 fca6 	bl	8006450 <USBD_CtlSendStatus>

              break;
 8005b04:	e004      	b.n	8005b10 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8005b06:	6839      	ldr	r1, [r7, #0]
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 fc53 	bl	80063b4 <USBD_CtlError>
              break;
 8005b0e:	bf00      	nop
          }
          break;
 8005b10:	e0ec      	b.n	8005cec <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d002      	beq.n	8005b24 <USBD_StdEPReq+0xe6>
 8005b1e:	2b03      	cmp	r3, #3
 8005b20:	d016      	beq.n	8005b50 <USBD_StdEPReq+0x112>
 8005b22:	e030      	b.n	8005b86 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005b24:	7bbb      	ldrb	r3, [r7, #14]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00d      	beq.n	8005b46 <USBD_StdEPReq+0x108>
 8005b2a:	7bbb      	ldrb	r3, [r7, #14]
 8005b2c:	2b80      	cmp	r3, #128	; 0x80
 8005b2e:	d00a      	beq.n	8005b46 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005b30:	7bbb      	ldrb	r3, [r7, #14]
 8005b32:	4619      	mov	r1, r3
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 fdf1 	bl	800671c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005b3a:	2180      	movs	r1, #128	; 0x80
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 fded 	bl	800671c <USBD_LL_StallEP>
 8005b42:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005b44:	e025      	b.n	8005b92 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8005b46:	6839      	ldr	r1, [r7, #0]
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 fc33 	bl	80063b4 <USBD_CtlError>
              break;
 8005b4e:	e020      	b.n	8005b92 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	885b      	ldrh	r3, [r3, #2]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d11b      	bne.n	8005b90 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005b58:	7bbb      	ldrb	r3, [r7, #14]
 8005b5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d004      	beq.n	8005b6c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005b62:	7bbb      	ldrb	r3, [r7, #14]
 8005b64:	4619      	mov	r1, r3
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 fe0e 	bl	8006788 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 fc6f 	bl	8006450 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	6839      	ldr	r1, [r7, #0]
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	4798      	blx	r3
 8005b80:	4603      	mov	r3, r0
 8005b82:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005b84:	e004      	b.n	8005b90 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8005b86:	6839      	ldr	r1, [r7, #0]
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 fc13 	bl	80063b4 <USBD_CtlError>
              break;
 8005b8e:	e000      	b.n	8005b92 <USBD_StdEPReq+0x154>
              break;
 8005b90:	bf00      	nop
          }
          break;
 8005b92:	e0ab      	b.n	8005cec <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d002      	beq.n	8005ba6 <USBD_StdEPReq+0x168>
 8005ba0:	2b03      	cmp	r3, #3
 8005ba2:	d032      	beq.n	8005c0a <USBD_StdEPReq+0x1cc>
 8005ba4:	e097      	b.n	8005cd6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ba6:	7bbb      	ldrb	r3, [r7, #14]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d007      	beq.n	8005bbc <USBD_StdEPReq+0x17e>
 8005bac:	7bbb      	ldrb	r3, [r7, #14]
 8005bae:	2b80      	cmp	r3, #128	; 0x80
 8005bb0:	d004      	beq.n	8005bbc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8005bb2:	6839      	ldr	r1, [r7, #0]
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 fbfd 	bl	80063b4 <USBD_CtlError>
                break;
 8005bba:	e091      	b.n	8005ce0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005bbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	da0b      	bge.n	8005bdc <USBD_StdEPReq+0x19e>
 8005bc4:	7bbb      	ldrb	r3, [r7, #14]
 8005bc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005bca:	4613      	mov	r3, r2
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	4413      	add	r3, r2
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	3310      	adds	r3, #16
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	3304      	adds	r3, #4
 8005bda:	e00b      	b.n	8005bf4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005bdc:	7bbb      	ldrb	r3, [r7, #14]
 8005bde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005be2:	4613      	mov	r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	4413      	add	r3, r2
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	3304      	adds	r3, #4
 8005bf4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	2202      	movs	r2, #2
 8005c00:	4619      	mov	r1, r3
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 fbe7 	bl	80063d6 <USBD_CtlSendData>
              break;
 8005c08:	e06a      	b.n	8005ce0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005c0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	da11      	bge.n	8005c36 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005c12:	7bbb      	ldrb	r3, [r7, #14]
 8005c14:	f003 020f 	and.w	r2, r3, #15
 8005c18:	6879      	ldr	r1, [r7, #4]
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4413      	add	r3, r2
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	440b      	add	r3, r1
 8005c24:	3324      	adds	r3, #36	; 0x24
 8005c26:	881b      	ldrh	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d117      	bne.n	8005c5c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005c2c:	6839      	ldr	r1, [r7, #0]
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 fbc0 	bl	80063b4 <USBD_CtlError>
                  break;
 8005c34:	e054      	b.n	8005ce0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005c36:	7bbb      	ldrb	r3, [r7, #14]
 8005c38:	f003 020f 	and.w	r2, r3, #15
 8005c3c:	6879      	ldr	r1, [r7, #4]
 8005c3e:	4613      	mov	r3, r2
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	4413      	add	r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	440b      	add	r3, r1
 8005c48:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005c4c:	881b      	ldrh	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d104      	bne.n	8005c5c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005c52:	6839      	ldr	r1, [r7, #0]
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 fbad 	bl	80063b4 <USBD_CtlError>
                  break;
 8005c5a:	e041      	b.n	8005ce0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	da0b      	bge.n	8005c7c <USBD_StdEPReq+0x23e>
 8005c64:	7bbb      	ldrb	r3, [r7, #14]
 8005c66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	4413      	add	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	3310      	adds	r3, #16
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	4413      	add	r3, r2
 8005c78:	3304      	adds	r3, #4
 8005c7a:	e00b      	b.n	8005c94 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005c7c:	7bbb      	ldrb	r3, [r7, #14]
 8005c7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c82:	4613      	mov	r3, r2
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	4413      	add	r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	4413      	add	r3, r2
 8005c92:	3304      	adds	r3, #4
 8005c94:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005c96:	7bbb      	ldrb	r3, [r7, #14]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d002      	beq.n	8005ca2 <USBD_StdEPReq+0x264>
 8005c9c:	7bbb      	ldrb	r3, [r7, #14]
 8005c9e:	2b80      	cmp	r3, #128	; 0x80
 8005ca0:	d103      	bne.n	8005caa <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	601a      	str	r2, [r3, #0]
 8005ca8:	e00e      	b.n	8005cc8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005caa:	7bbb      	ldrb	r3, [r7, #14]
 8005cac:	4619      	mov	r1, r3
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 fda0 	bl	80067f4 <USBD_LL_IsStallEP>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d003      	beq.n	8005cc2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	601a      	str	r2, [r3, #0]
 8005cc0:	e002      	b.n	8005cc8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	2202      	movs	r2, #2
 8005ccc:	4619      	mov	r1, r3
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 fb81 	bl	80063d6 <USBD_CtlSendData>
              break;
 8005cd4:	e004      	b.n	8005ce0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8005cd6:	6839      	ldr	r1, [r7, #0]
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 fb6b 	bl	80063b4 <USBD_CtlError>
              break;
 8005cde:	bf00      	nop
          }
          break;
 8005ce0:	e004      	b.n	8005cec <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8005ce2:	6839      	ldr	r1, [r7, #0]
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 fb65 	bl	80063b4 <USBD_CtlError>
          break;
 8005cea:	bf00      	nop
      }
      break;
 8005cec:	e004      	b.n	8005cf8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8005cee:	6839      	ldr	r1, [r7, #0]
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 fb5f 	bl	80063b4 <USBD_CtlError>
      break;
 8005cf6:	bf00      	nop
  }

  return ret;
 8005cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
	...

08005d04 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005d12:	2300      	movs	r3, #0
 8005d14:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005d16:	2300      	movs	r3, #0
 8005d18:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	885b      	ldrh	r3, [r3, #2]
 8005d1e:	0a1b      	lsrs	r3, r3, #8
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	3b01      	subs	r3, #1
 8005d24:	2b0e      	cmp	r3, #14
 8005d26:	f200 8152 	bhi.w	8005fce <USBD_GetDescriptor+0x2ca>
 8005d2a:	a201      	add	r2, pc, #4	; (adr r2, 8005d30 <USBD_GetDescriptor+0x2c>)
 8005d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d30:	08005da1 	.word	0x08005da1
 8005d34:	08005db9 	.word	0x08005db9
 8005d38:	08005df9 	.word	0x08005df9
 8005d3c:	08005fcf 	.word	0x08005fcf
 8005d40:	08005fcf 	.word	0x08005fcf
 8005d44:	08005f6f 	.word	0x08005f6f
 8005d48:	08005f9b 	.word	0x08005f9b
 8005d4c:	08005fcf 	.word	0x08005fcf
 8005d50:	08005fcf 	.word	0x08005fcf
 8005d54:	08005fcf 	.word	0x08005fcf
 8005d58:	08005fcf 	.word	0x08005fcf
 8005d5c:	08005fcf 	.word	0x08005fcf
 8005d60:	08005fcf 	.word	0x08005fcf
 8005d64:	08005fcf 	.word	0x08005fcf
 8005d68:	08005d6d 	.word	0x08005d6d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d72:	69db      	ldr	r3, [r3, #28]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00b      	beq.n	8005d90 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d7e:	69db      	ldr	r3, [r3, #28]
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	7c12      	ldrb	r2, [r2, #16]
 8005d84:	f107 0108 	add.w	r1, r7, #8
 8005d88:	4610      	mov	r0, r2
 8005d8a:	4798      	blx	r3
 8005d8c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d8e:	e126      	b.n	8005fde <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005d90:	6839      	ldr	r1, [r7, #0]
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 fb0e 	bl	80063b4 <USBD_CtlError>
        err++;
 8005d98:	7afb      	ldrb	r3, [r7, #11]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	72fb      	strb	r3, [r7, #11]
      break;
 8005d9e:	e11e      	b.n	8005fde <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	7c12      	ldrb	r2, [r2, #16]
 8005dac:	f107 0108 	add.w	r1, r7, #8
 8005db0:	4610      	mov	r0, r2
 8005db2:	4798      	blx	r3
 8005db4:	60f8      	str	r0, [r7, #12]
      break;
 8005db6:	e112      	b.n	8005fde <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	7c1b      	ldrb	r3, [r3, #16]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d10d      	bne.n	8005ddc <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc8:	f107 0208 	add.w	r2, r7, #8
 8005dcc:	4610      	mov	r0, r2
 8005dce:	4798      	blx	r3
 8005dd0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005dda:	e100      	b.n	8005fde <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de4:	f107 0208 	add.w	r2, r7, #8
 8005de8:	4610      	mov	r0, r2
 8005dea:	4798      	blx	r3
 8005dec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	3301      	adds	r3, #1
 8005df2:	2202      	movs	r2, #2
 8005df4:	701a      	strb	r2, [r3, #0]
      break;
 8005df6:	e0f2      	b.n	8005fde <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	885b      	ldrh	r3, [r3, #2]
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b05      	cmp	r3, #5
 8005e00:	f200 80ac 	bhi.w	8005f5c <USBD_GetDescriptor+0x258>
 8005e04:	a201      	add	r2, pc, #4	; (adr r2, 8005e0c <USBD_GetDescriptor+0x108>)
 8005e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e0a:	bf00      	nop
 8005e0c:	08005e25 	.word	0x08005e25
 8005e10:	08005e59 	.word	0x08005e59
 8005e14:	08005e8d 	.word	0x08005e8d
 8005e18:	08005ec1 	.word	0x08005ec1
 8005e1c:	08005ef5 	.word	0x08005ef5
 8005e20:	08005f29 	.word	0x08005f29
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00b      	beq.n	8005e48 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	7c12      	ldrb	r2, [r2, #16]
 8005e3c:	f107 0108 	add.w	r1, r7, #8
 8005e40:	4610      	mov	r0, r2
 8005e42:	4798      	blx	r3
 8005e44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e46:	e091      	b.n	8005f6c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005e48:	6839      	ldr	r1, [r7, #0]
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 fab2 	bl	80063b4 <USBD_CtlError>
            err++;
 8005e50:	7afb      	ldrb	r3, [r7, #11]
 8005e52:	3301      	adds	r3, #1
 8005e54:	72fb      	strb	r3, [r7, #11]
          break;
 8005e56:	e089      	b.n	8005f6c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00b      	beq.n	8005e7c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	7c12      	ldrb	r2, [r2, #16]
 8005e70:	f107 0108 	add.w	r1, r7, #8
 8005e74:	4610      	mov	r0, r2
 8005e76:	4798      	blx	r3
 8005e78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e7a:	e077      	b.n	8005f6c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005e7c:	6839      	ldr	r1, [r7, #0]
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 fa98 	bl	80063b4 <USBD_CtlError>
            err++;
 8005e84:	7afb      	ldrb	r3, [r7, #11]
 8005e86:	3301      	adds	r3, #1
 8005e88:	72fb      	strb	r3, [r7, #11]
          break;
 8005e8a:	e06f      	b.n	8005f6c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00b      	beq.n	8005eb0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	7c12      	ldrb	r2, [r2, #16]
 8005ea4:	f107 0108 	add.w	r1, r7, #8
 8005ea8:	4610      	mov	r0, r2
 8005eaa:	4798      	blx	r3
 8005eac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005eae:	e05d      	b.n	8005f6c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005eb0:	6839      	ldr	r1, [r7, #0]
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 fa7e 	bl	80063b4 <USBD_CtlError>
            err++;
 8005eb8:	7afb      	ldrb	r3, [r7, #11]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	72fb      	strb	r3, [r7, #11]
          break;
 8005ebe:	e055      	b.n	8005f6c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d00b      	beq.n	8005ee4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	7c12      	ldrb	r2, [r2, #16]
 8005ed8:	f107 0108 	add.w	r1, r7, #8
 8005edc:	4610      	mov	r0, r2
 8005ede:	4798      	blx	r3
 8005ee0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ee2:	e043      	b.n	8005f6c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005ee4:	6839      	ldr	r1, [r7, #0]
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 fa64 	bl	80063b4 <USBD_CtlError>
            err++;
 8005eec:	7afb      	ldrb	r3, [r7, #11]
 8005eee:	3301      	adds	r3, #1
 8005ef0:	72fb      	strb	r3, [r7, #11]
          break;
 8005ef2:	e03b      	b.n	8005f6c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005efa:	695b      	ldr	r3, [r3, #20]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d00b      	beq.n	8005f18 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f06:	695b      	ldr	r3, [r3, #20]
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	7c12      	ldrb	r2, [r2, #16]
 8005f0c:	f107 0108 	add.w	r1, r7, #8
 8005f10:	4610      	mov	r0, r2
 8005f12:	4798      	blx	r3
 8005f14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f16:	e029      	b.n	8005f6c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005f18:	6839      	ldr	r1, [r7, #0]
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 fa4a 	bl	80063b4 <USBD_CtlError>
            err++;
 8005f20:	7afb      	ldrb	r3, [r7, #11]
 8005f22:	3301      	adds	r3, #1
 8005f24:	72fb      	strb	r3, [r7, #11]
          break;
 8005f26:	e021      	b.n	8005f6c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f2e:	699b      	ldr	r3, [r3, #24]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00b      	beq.n	8005f4c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	7c12      	ldrb	r2, [r2, #16]
 8005f40:	f107 0108 	add.w	r1, r7, #8
 8005f44:	4610      	mov	r0, r2
 8005f46:	4798      	blx	r3
 8005f48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f4a:	e00f      	b.n	8005f6c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005f4c:	6839      	ldr	r1, [r7, #0]
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 fa30 	bl	80063b4 <USBD_CtlError>
            err++;
 8005f54:	7afb      	ldrb	r3, [r7, #11]
 8005f56:	3301      	adds	r3, #1
 8005f58:	72fb      	strb	r3, [r7, #11]
          break;
 8005f5a:	e007      	b.n	8005f6c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005f5c:	6839      	ldr	r1, [r7, #0]
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 fa28 	bl	80063b4 <USBD_CtlError>
          err++;
 8005f64:	7afb      	ldrb	r3, [r7, #11]
 8005f66:	3301      	adds	r3, #1
 8005f68:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8005f6a:	bf00      	nop
      }
      break;
 8005f6c:	e037      	b.n	8005fde <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	7c1b      	ldrb	r3, [r3, #16]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d109      	bne.n	8005f8a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f7e:	f107 0208 	add.w	r2, r7, #8
 8005f82:	4610      	mov	r0, r2
 8005f84:	4798      	blx	r3
 8005f86:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005f88:	e029      	b.n	8005fde <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005f8a:	6839      	ldr	r1, [r7, #0]
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 fa11 	bl	80063b4 <USBD_CtlError>
        err++;
 8005f92:	7afb      	ldrb	r3, [r7, #11]
 8005f94:	3301      	adds	r3, #1
 8005f96:	72fb      	strb	r3, [r7, #11]
      break;
 8005f98:	e021      	b.n	8005fde <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	7c1b      	ldrb	r3, [r3, #16]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d10d      	bne.n	8005fbe <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005faa:	f107 0208 	add.w	r2, r7, #8
 8005fae:	4610      	mov	r0, r2
 8005fb0:	4798      	blx	r3
 8005fb2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	2207      	movs	r2, #7
 8005fba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005fbc:	e00f      	b.n	8005fde <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005fbe:	6839      	ldr	r1, [r7, #0]
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 f9f7 	bl	80063b4 <USBD_CtlError>
        err++;
 8005fc6:	7afb      	ldrb	r3, [r7, #11]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	72fb      	strb	r3, [r7, #11]
      break;
 8005fcc:	e007      	b.n	8005fde <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8005fce:	6839      	ldr	r1, [r7, #0]
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 f9ef 	bl	80063b4 <USBD_CtlError>
      err++;
 8005fd6:	7afb      	ldrb	r3, [r7, #11]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	72fb      	strb	r3, [r7, #11]
      break;
 8005fdc:	bf00      	nop
  }

  if (err != 0U)
 8005fde:	7afb      	ldrb	r3, [r7, #11]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d11e      	bne.n	8006022 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	88db      	ldrh	r3, [r3, #6]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d016      	beq.n	800601a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8005fec:	893b      	ldrh	r3, [r7, #8]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00e      	beq.n	8006010 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	88da      	ldrh	r2, [r3, #6]
 8005ff6:	893b      	ldrh	r3, [r7, #8]
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	bf28      	it	cs
 8005ffc:	4613      	movcs	r3, r2
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006002:	893b      	ldrh	r3, [r7, #8]
 8006004:	461a      	mov	r2, r3
 8006006:	68f9      	ldr	r1, [r7, #12]
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 f9e4 	bl	80063d6 <USBD_CtlSendData>
 800600e:	e009      	b.n	8006024 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006010:	6839      	ldr	r1, [r7, #0]
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f9ce 	bl	80063b4 <USBD_CtlError>
 8006018:	e004      	b.n	8006024 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 fa18 	bl	8006450 <USBD_CtlSendStatus>
 8006020:	e000      	b.n	8006024 <USBD_GetDescriptor+0x320>
    return;
 8006022:	bf00      	nop
  }
}
 8006024:	3710      	adds	r7, #16
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop

0800602c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	889b      	ldrh	r3, [r3, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d131      	bne.n	80060a2 <USBD_SetAddress+0x76>
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	88db      	ldrh	r3, [r3, #6]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d12d      	bne.n	80060a2 <USBD_SetAddress+0x76>
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	885b      	ldrh	r3, [r3, #2]
 800604a:	2b7f      	cmp	r3, #127	; 0x7f
 800604c:	d829      	bhi.n	80060a2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	885b      	ldrh	r3, [r3, #2]
 8006052:	b2db      	uxtb	r3, r3
 8006054:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006058:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006060:	b2db      	uxtb	r3, r3
 8006062:	2b03      	cmp	r3, #3
 8006064:	d104      	bne.n	8006070 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006066:	6839      	ldr	r1, [r7, #0]
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 f9a3 	bl	80063b4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800606e:	e01d      	b.n	80060ac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	7bfa      	ldrb	r2, [r7, #15]
 8006074:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006078:	7bfb      	ldrb	r3, [r7, #15]
 800607a:	4619      	mov	r1, r3
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 fbe5 	bl	800684c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f9e4 	bl	8006450 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006088:	7bfb      	ldrb	r3, [r7, #15]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d004      	beq.n	8006098 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2202      	movs	r2, #2
 8006092:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006096:	e009      	b.n	80060ac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060a0:	e004      	b.n	80060ac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80060a2:	6839      	ldr	r1, [r7, #0]
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 f985 	bl	80063b4 <USBD_CtlError>
  }
}
 80060aa:	bf00      	nop
 80060ac:	bf00      	nop
 80060ae:	3710      	adds	r7, #16
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80060be:	2300      	movs	r3, #0
 80060c0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	885b      	ldrh	r3, [r3, #2]
 80060c6:	b2da      	uxtb	r2, r3
 80060c8:	4b4c      	ldr	r3, [pc, #304]	; (80061fc <USBD_SetConfig+0x148>)
 80060ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80060cc:	4b4b      	ldr	r3, [pc, #300]	; (80061fc <USBD_SetConfig+0x148>)
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d905      	bls.n	80060e0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80060d4:	6839      	ldr	r1, [r7, #0]
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 f96c 	bl	80063b4 <USBD_CtlError>
    return USBD_FAIL;
 80060dc:	2303      	movs	r3, #3
 80060de:	e088      	b.n	80061f2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d002      	beq.n	80060f2 <USBD_SetConfig+0x3e>
 80060ec:	2b03      	cmp	r3, #3
 80060ee:	d025      	beq.n	800613c <USBD_SetConfig+0x88>
 80060f0:	e071      	b.n	80061d6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80060f2:	4b42      	ldr	r3, [pc, #264]	; (80061fc <USBD_SetConfig+0x148>)
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d01c      	beq.n	8006134 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80060fa:	4b40      	ldr	r3, [pc, #256]	; (80061fc <USBD_SetConfig+0x148>)
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	461a      	mov	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006104:	4b3d      	ldr	r3, [pc, #244]	; (80061fc <USBD_SetConfig+0x148>)
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	4619      	mov	r1, r3
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f7ff f91f 	bl	800534e <USBD_SetClassConfig>
 8006110:	4603      	mov	r3, r0
 8006112:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006114:	7bfb      	ldrb	r3, [r7, #15]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d004      	beq.n	8006124 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800611a:	6839      	ldr	r1, [r7, #0]
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 f949 	bl	80063b4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006122:	e065      	b.n	80061f0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 f993 	bl	8006450 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2203      	movs	r2, #3
 800612e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006132:	e05d      	b.n	80061f0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 f98b 	bl	8006450 <USBD_CtlSendStatus>
      break;
 800613a:	e059      	b.n	80061f0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800613c:	4b2f      	ldr	r3, [pc, #188]	; (80061fc <USBD_SetConfig+0x148>)
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d112      	bne.n	800616a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2202      	movs	r2, #2
 8006148:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800614c:	4b2b      	ldr	r3, [pc, #172]	; (80061fc <USBD_SetConfig+0x148>)
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	461a      	mov	r2, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006156:	4b29      	ldr	r3, [pc, #164]	; (80061fc <USBD_SetConfig+0x148>)
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	4619      	mov	r1, r3
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f7ff f912 	bl	8005386 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f974 	bl	8006450 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006168:	e042      	b.n	80061f0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800616a:	4b24      	ldr	r3, [pc, #144]	; (80061fc <USBD_SetConfig+0x148>)
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	461a      	mov	r2, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	429a      	cmp	r2, r3
 8006176:	d02a      	beq.n	80061ce <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	b2db      	uxtb	r3, r3
 800617e:	4619      	mov	r1, r3
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f7ff f900 	bl	8005386 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006186:	4b1d      	ldr	r3, [pc, #116]	; (80061fc <USBD_SetConfig+0x148>)
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	461a      	mov	r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006190:	4b1a      	ldr	r3, [pc, #104]	; (80061fc <USBD_SetConfig+0x148>)
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	4619      	mov	r1, r3
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f7ff f8d9 	bl	800534e <USBD_SetClassConfig>
 800619c:	4603      	mov	r3, r0
 800619e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80061a0:	7bfb      	ldrb	r3, [r7, #15]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00f      	beq.n	80061c6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80061a6:	6839      	ldr	r1, [r7, #0]
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 f903 	bl	80063b4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	4619      	mov	r1, r3
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f7ff f8e5 	bl	8005386 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2202      	movs	r2, #2
 80061c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80061c4:	e014      	b.n	80061f0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f942 	bl	8006450 <USBD_CtlSendStatus>
      break;
 80061cc:	e010      	b.n	80061f0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f93e 	bl	8006450 <USBD_CtlSendStatus>
      break;
 80061d4:	e00c      	b.n	80061f0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80061d6:	6839      	ldr	r1, [r7, #0]
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 f8eb 	bl	80063b4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80061de:	4b07      	ldr	r3, [pc, #28]	; (80061fc <USBD_SetConfig+0x148>)
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	4619      	mov	r1, r3
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f7ff f8ce 	bl	8005386 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80061ea:	2303      	movs	r3, #3
 80061ec:	73fb      	strb	r3, [r7, #15]
      break;
 80061ee:	bf00      	nop
  }

  return ret;
 80061f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3710      	adds	r7, #16
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	20000040 	.word	0x20000040

08006200 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	88db      	ldrh	r3, [r3, #6]
 800620e:	2b01      	cmp	r3, #1
 8006210:	d004      	beq.n	800621c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006212:	6839      	ldr	r1, [r7, #0]
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 f8cd 	bl	80063b4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800621a:	e023      	b.n	8006264 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006222:	b2db      	uxtb	r3, r3
 8006224:	2b02      	cmp	r3, #2
 8006226:	dc02      	bgt.n	800622e <USBD_GetConfig+0x2e>
 8006228:	2b00      	cmp	r3, #0
 800622a:	dc03      	bgt.n	8006234 <USBD_GetConfig+0x34>
 800622c:	e015      	b.n	800625a <USBD_GetConfig+0x5a>
 800622e:	2b03      	cmp	r3, #3
 8006230:	d00b      	beq.n	800624a <USBD_GetConfig+0x4a>
 8006232:	e012      	b.n	800625a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	3308      	adds	r3, #8
 800623e:	2201      	movs	r2, #1
 8006240:	4619      	mov	r1, r3
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 f8c7 	bl	80063d6 <USBD_CtlSendData>
        break;
 8006248:	e00c      	b.n	8006264 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	3304      	adds	r3, #4
 800624e:	2201      	movs	r2, #1
 8006250:	4619      	mov	r1, r3
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 f8bf 	bl	80063d6 <USBD_CtlSendData>
        break;
 8006258:	e004      	b.n	8006264 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800625a:	6839      	ldr	r1, [r7, #0]
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 f8a9 	bl	80063b4 <USBD_CtlError>
        break;
 8006262:	bf00      	nop
}
 8006264:	bf00      	nop
 8006266:	3708      	adds	r7, #8
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800627c:	b2db      	uxtb	r3, r3
 800627e:	3b01      	subs	r3, #1
 8006280:	2b02      	cmp	r3, #2
 8006282:	d81e      	bhi.n	80062c2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	88db      	ldrh	r3, [r3, #6]
 8006288:	2b02      	cmp	r3, #2
 800628a:	d004      	beq.n	8006296 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800628c:	6839      	ldr	r1, [r7, #0]
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 f890 	bl	80063b4 <USBD_CtlError>
        break;
 8006294:	e01a      	b.n	80062cc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2201      	movs	r2, #1
 800629a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d005      	beq.n	80062b2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	f043 0202 	orr.w	r2, r3, #2
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	330c      	adds	r3, #12
 80062b6:	2202      	movs	r2, #2
 80062b8:	4619      	mov	r1, r3
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f88b 	bl	80063d6 <USBD_CtlSendData>
      break;
 80062c0:	e004      	b.n	80062cc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80062c2:	6839      	ldr	r1, [r7, #0]
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 f875 	bl	80063b4 <USBD_CtlError>
      break;
 80062ca:	bf00      	nop
  }
}
 80062cc:	bf00      	nop
 80062ce:	3708      	adds	r7, #8
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	885b      	ldrh	r3, [r3, #2]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d106      	bne.n	80062f4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2201      	movs	r2, #1
 80062ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f8ae 	bl	8006450 <USBD_CtlSendStatus>
  }
}
 80062f4:	bf00      	nop
 80062f6:	3708      	adds	r7, #8
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800630c:	b2db      	uxtb	r3, r3
 800630e:	3b01      	subs	r3, #1
 8006310:	2b02      	cmp	r3, #2
 8006312:	d80b      	bhi.n	800632c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	885b      	ldrh	r3, [r3, #2]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d10c      	bne.n	8006336 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 f893 	bl	8006450 <USBD_CtlSendStatus>
      }
      break;
 800632a:	e004      	b.n	8006336 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800632c:	6839      	ldr	r1, [r7, #0]
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 f840 	bl	80063b4 <USBD_CtlError>
      break;
 8006334:	e000      	b.n	8006338 <USBD_ClrFeature+0x3c>
      break;
 8006336:	bf00      	nop
  }
}
 8006338:	bf00      	nop
 800633a:	3708      	adds	r7, #8
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	781a      	ldrb	r2, [r3, #0]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	3301      	adds	r3, #1
 800635a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	781a      	ldrb	r2, [r3, #0]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	3301      	adds	r3, #1
 8006368:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f7ff fa92 	bl	8005894 <SWAPBYTE>
 8006370:	4603      	mov	r3, r0
 8006372:	461a      	mov	r2, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	3301      	adds	r3, #1
 800637c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	3301      	adds	r3, #1
 8006382:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006384:	68f8      	ldr	r0, [r7, #12]
 8006386:	f7ff fa85 	bl	8005894 <SWAPBYTE>
 800638a:	4603      	mov	r3, r0
 800638c:	461a      	mov	r2, r3
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	3301      	adds	r3, #1
 8006396:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	3301      	adds	r3, #1
 800639c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800639e:	68f8      	ldr	r0, [r7, #12]
 80063a0:	f7ff fa78 	bl	8005894 <SWAPBYTE>
 80063a4:	4603      	mov	r3, r0
 80063a6:	461a      	mov	r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	80da      	strh	r2, [r3, #6]
}
 80063ac:	bf00      	nop
 80063ae:	3710      	adds	r7, #16
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80063be:	2180      	movs	r1, #128	; 0x80
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 f9ab 	bl	800671c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80063c6:	2100      	movs	r1, #0
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 f9a7 	bl	800671c <USBD_LL_StallEP>
}
 80063ce:	bf00      	nop
 80063d0:	3708      	adds	r7, #8
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b084      	sub	sp, #16
 80063da:	af00      	add	r7, sp, #0
 80063dc:	60f8      	str	r0, [r7, #12]
 80063de:	60b9      	str	r1, [r7, #8]
 80063e0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2202      	movs	r2, #2
 80063e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	68ba      	ldr	r2, [r7, #8]
 80063fa:	2100      	movs	r1, #0
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f000 fa5b 	bl	80068b8 <USBD_LL_Transmit>

  return USBD_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	68ba      	ldr	r2, [r7, #8]
 800641c:	2100      	movs	r1, #0
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	f000 fa4a 	bl	80068b8 <USBD_LL_Transmit>

  return USBD_OK;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	3710      	adds	r7, #16
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800642e:	b580      	push	{r7, lr}
 8006430:	b084      	sub	sp, #16
 8006432:	af00      	add	r7, sp, #0
 8006434:	60f8      	str	r0, [r7, #12]
 8006436:	60b9      	str	r1, [r7, #8]
 8006438:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	68ba      	ldr	r2, [r7, #8]
 800643e:	2100      	movs	r1, #0
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	f000 fa71 	bl	8006928 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3710      	adds	r7, #16
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2204      	movs	r2, #4
 800645c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006460:	2300      	movs	r3, #0
 8006462:	2200      	movs	r2, #0
 8006464:	2100      	movs	r1, #0
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 fa26 	bl	80068b8 <USBD_LL_Transmit>

  return USBD_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3708      	adds	r7, #8
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b082      	sub	sp, #8
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2205      	movs	r2, #5
 8006482:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006486:	2300      	movs	r3, #0
 8006488:	2200      	movs	r2, #0
 800648a:	2100      	movs	r1, #0
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 fa4b 	bl	8006928 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	3708      	adds	r7, #8
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80064b0:	4619      	mov	r1, r3
 80064b2:	4610      	mov	r0, r2
 80064b4:	f7fe ff7f 	bl	80053b6 <USBD_LL_SetupStage>
}
 80064b8:	bf00      	nop
 80064ba:	3708      	adds	r7, #8
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	460b      	mov	r3, r1
 80064ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80064d2:	78fa      	ldrb	r2, [r7, #3]
 80064d4:	6879      	ldr	r1, [r7, #4]
 80064d6:	4613      	mov	r3, r2
 80064d8:	00db      	lsls	r3, r3, #3
 80064da:	1a9b      	subs	r3, r3, r2
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	440b      	add	r3, r1
 80064e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	78fb      	ldrb	r3, [r7, #3]
 80064e8:	4619      	mov	r1, r3
 80064ea:	f7fe ffb9 	bl	8005460 <USBD_LL_DataOutStage>
}
 80064ee:	bf00      	nop
 80064f0:	3708      	adds	r7, #8
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b082      	sub	sp, #8
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
 80064fe:	460b      	mov	r3, r1
 8006500:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006508:	78fa      	ldrb	r2, [r7, #3]
 800650a:	6879      	ldr	r1, [r7, #4]
 800650c:	4613      	mov	r3, r2
 800650e:	00db      	lsls	r3, r3, #3
 8006510:	1a9b      	subs	r3, r3, r2
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	440b      	add	r3, r1
 8006516:	3348      	adds	r3, #72	; 0x48
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	78fb      	ldrb	r3, [r7, #3]
 800651c:	4619      	mov	r1, r3
 800651e:	f7ff f802 	bl	8005526 <USBD_LL_DataInStage>
}
 8006522:	bf00      	nop
 8006524:	3708      	adds	r7, #8
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}

0800652a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800652a:	b580      	push	{r7, lr}
 800652c:	b082      	sub	sp, #8
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006538:	4618      	mov	r0, r3
 800653a:	f7ff f916 	bl	800576a <USBD_LL_SOF>
}
 800653e:	bf00      	nop
 8006540:	3708      	adds	r7, #8
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b084      	sub	sp, #16
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800654e:	2301      	movs	r3, #1
 8006550:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	2b02      	cmp	r3, #2
 8006558:	d001      	beq.n	800655e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800655a:	f7f9 ff6f 	bl	800043c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006564:	7bfa      	ldrb	r2, [r7, #15]
 8006566:	4611      	mov	r1, r2
 8006568:	4618      	mov	r0, r3
 800656a:	f7ff f8c0 	bl	80056ee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006574:	4618      	mov	r0, r3
 8006576:	f7ff f86c 	bl	8005652 <USBD_LL_Reset>
}
 800657a:	bf00      	nop
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
	...

08006584 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	6812      	ldr	r2, [r2, #0]
 800659a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800659e:	f043 0301 	orr.w	r3, r3, #1
 80065a2:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7ff f8af 	bl	800570e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a1b      	ldr	r3, [r3, #32]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d005      	beq.n	80065c4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80065b8:	4b04      	ldr	r3, [pc, #16]	; (80065cc <HAL_PCD_SuspendCallback+0x48>)
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	4a03      	ldr	r2, [pc, #12]	; (80065cc <HAL_PCD_SuspendCallback+0x48>)
 80065be:	f043 0306 	orr.w	r3, r3, #6
 80065c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80065c4:	bf00      	nop
 80065c6:	3708      	adds	r7, #8
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	e000ed00 	.word	0xe000ed00

080065d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b082      	sub	sp, #8
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	6812      	ldr	r2, [r2, #0]
 80065e6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80065ea:	f023 0301 	bic.w	r3, r3, #1
 80065ee:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a1b      	ldr	r3, [r3, #32]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d007      	beq.n	8006608 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80065f8:	4b08      	ldr	r3, [pc, #32]	; (800661c <HAL_PCD_ResumeCallback+0x4c>)
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	4a07      	ldr	r2, [pc, #28]	; (800661c <HAL_PCD_ResumeCallback+0x4c>)
 80065fe:	f023 0306 	bic.w	r3, r3, #6
 8006602:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8006604:	f000 fa16 	bl	8006a34 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800660e:	4618      	mov	r0, r3
 8006610:	f7ff f893 	bl	800573a <USBD_LL_Resume>
}
 8006614:	bf00      	nop
 8006616:	3708      	adds	r7, #8
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	e000ed00 	.word	0xe000ed00

08006620 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	460b      	mov	r3, r1
 800662a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006632:	78fa      	ldrb	r2, [r7, #3]
 8006634:	4611      	mov	r1, r2
 8006636:	4618      	mov	r0, r3
 8006638:	f7ff f8df 	bl	80057fa <USBD_LL_IsoOUTIncomplete>
}
 800663c:	bf00      	nop
 800663e:	3708      	adds	r7, #8
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	460b      	mov	r3, r1
 800664e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006656:	78fa      	ldrb	r2, [r7, #3]
 8006658:	4611      	mov	r1, r2
 800665a:	4618      	mov	r0, r3
 800665c:	f7ff f8a7 	bl	80057ae <USBD_LL_IsoINIncomplete>
}
 8006660:	bf00      	nop
 8006662:	3708      	adds	r7, #8
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006676:	4618      	mov	r0, r3
 8006678:	f7ff f8e5 	bl	8005846 <USBD_LL_DevConnected>
}
 800667c:	bf00      	nop
 800667e:	3708      	adds	r7, #8
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006692:	4618      	mov	r0, r3
 8006694:	f7ff f8e2 	bl	800585c <USBD_LL_DevDisconnected>
}
 8006698:	bf00      	nop
 800669a:	3708      	adds	r7, #8
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	4608      	mov	r0, r1
 80066aa:	4611      	mov	r1, r2
 80066ac:	461a      	mov	r2, r3
 80066ae:	4603      	mov	r3, r0
 80066b0:	70fb      	strb	r3, [r7, #3]
 80066b2:	460b      	mov	r3, r1
 80066b4:	70bb      	strb	r3, [r7, #2]
 80066b6:	4613      	mov	r3, r2
 80066b8:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066ba:	2300      	movs	r3, #0
 80066bc:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066be:	2300      	movs	r3, #0
 80066c0:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80066c8:	78bb      	ldrb	r3, [r7, #2]
 80066ca:	883a      	ldrh	r2, [r7, #0]
 80066cc:	78f9      	ldrb	r1, [r7, #3]
 80066ce:	f7fb fe78 	bl	80023c2 <HAL_PCD_EP_Open>
 80066d2:	4603      	mov	r3, r0
 80066d4:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80066d6:	7bbb      	ldrb	r3, [r7, #14]
 80066d8:	2b03      	cmp	r3, #3
 80066da:	d817      	bhi.n	800670c <USBD_LL_OpenEP+0x6c>
 80066dc:	a201      	add	r2, pc, #4	; (adr r2, 80066e4 <USBD_LL_OpenEP+0x44>)
 80066de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e2:	bf00      	nop
 80066e4:	080066f5 	.word	0x080066f5
 80066e8:	080066fb 	.word	0x080066fb
 80066ec:	08006701 	.word	0x08006701
 80066f0:	08006707 	.word	0x08006707
    case HAL_OK :
      usb_status = USBD_OK;
 80066f4:	2300      	movs	r3, #0
 80066f6:	73fb      	strb	r3, [r7, #15]
    break;
 80066f8:	e00b      	b.n	8006712 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80066fa:	2303      	movs	r3, #3
 80066fc:	73fb      	strb	r3, [r7, #15]
    break;
 80066fe:	e008      	b.n	8006712 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006700:	2301      	movs	r3, #1
 8006702:	73fb      	strb	r3, [r7, #15]
    break;
 8006704:	e005      	b.n	8006712 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006706:	2303      	movs	r3, #3
 8006708:	73fb      	strb	r3, [r7, #15]
    break;
 800670a:	e002      	b.n	8006712 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800670c:	2303      	movs	r3, #3
 800670e:	73fb      	strb	r3, [r7, #15]
    break;
 8006710:	bf00      	nop
  }
  return usb_status;
 8006712:	7bfb      	ldrb	r3, [r7, #15]
}
 8006714:	4618      	mov	r0, r3
 8006716:	3710      	adds	r7, #16
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	460b      	mov	r3, r1
 8006726:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006728:	2300      	movs	r3, #0
 800672a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800672c:	2300      	movs	r3, #0
 800672e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006736:	78fa      	ldrb	r2, [r7, #3]
 8006738:	4611      	mov	r1, r2
 800673a:	4618      	mov	r0, r3
 800673c:	f7fb ff24 	bl	8002588 <HAL_PCD_EP_SetStall>
 8006740:	4603      	mov	r3, r0
 8006742:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006744:	7bbb      	ldrb	r3, [r7, #14]
 8006746:	2b03      	cmp	r3, #3
 8006748:	d816      	bhi.n	8006778 <USBD_LL_StallEP+0x5c>
 800674a:	a201      	add	r2, pc, #4	; (adr r2, 8006750 <USBD_LL_StallEP+0x34>)
 800674c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006750:	08006761 	.word	0x08006761
 8006754:	08006767 	.word	0x08006767
 8006758:	0800676d 	.word	0x0800676d
 800675c:	08006773 	.word	0x08006773
    case HAL_OK :
      usb_status = USBD_OK;
 8006760:	2300      	movs	r3, #0
 8006762:	73fb      	strb	r3, [r7, #15]
    break;
 8006764:	e00b      	b.n	800677e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006766:	2303      	movs	r3, #3
 8006768:	73fb      	strb	r3, [r7, #15]
    break;
 800676a:	e008      	b.n	800677e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800676c:	2301      	movs	r3, #1
 800676e:	73fb      	strb	r3, [r7, #15]
    break;
 8006770:	e005      	b.n	800677e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006772:	2303      	movs	r3, #3
 8006774:	73fb      	strb	r3, [r7, #15]
    break;
 8006776:	e002      	b.n	800677e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006778:	2303      	movs	r3, #3
 800677a:	73fb      	strb	r3, [r7, #15]
    break;
 800677c:	bf00      	nop
  }
  return usb_status;
 800677e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006780:	4618      	mov	r0, r3
 8006782:	3710      	adds	r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	460b      	mov	r3, r1
 8006792:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006794:	2300      	movs	r3, #0
 8006796:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006798:	2300      	movs	r3, #0
 800679a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80067a2:	78fa      	ldrb	r2, [r7, #3]
 80067a4:	4611      	mov	r1, r2
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7fb ff50 	bl	800264c <HAL_PCD_EP_ClrStall>
 80067ac:	4603      	mov	r3, r0
 80067ae:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80067b0:	7bbb      	ldrb	r3, [r7, #14]
 80067b2:	2b03      	cmp	r3, #3
 80067b4:	d816      	bhi.n	80067e4 <USBD_LL_ClearStallEP+0x5c>
 80067b6:	a201      	add	r2, pc, #4	; (adr r2, 80067bc <USBD_LL_ClearStallEP+0x34>)
 80067b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067bc:	080067cd 	.word	0x080067cd
 80067c0:	080067d3 	.word	0x080067d3
 80067c4:	080067d9 	.word	0x080067d9
 80067c8:	080067df 	.word	0x080067df
    case HAL_OK :
      usb_status = USBD_OK;
 80067cc:	2300      	movs	r3, #0
 80067ce:	73fb      	strb	r3, [r7, #15]
    break;
 80067d0:	e00b      	b.n	80067ea <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80067d2:	2303      	movs	r3, #3
 80067d4:	73fb      	strb	r3, [r7, #15]
    break;
 80067d6:	e008      	b.n	80067ea <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80067d8:	2301      	movs	r3, #1
 80067da:	73fb      	strb	r3, [r7, #15]
    break;
 80067dc:	e005      	b.n	80067ea <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80067de:	2303      	movs	r3, #3
 80067e0:	73fb      	strb	r3, [r7, #15]
    break;
 80067e2:	e002      	b.n	80067ea <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80067e4:	2303      	movs	r3, #3
 80067e6:	73fb      	strb	r3, [r7, #15]
    break;
 80067e8:	bf00      	nop
  }
  return usb_status;
 80067ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3710      	adds	r7, #16
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	460b      	mov	r3, r1
 80067fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006806:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006808:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800680c:	2b00      	cmp	r3, #0
 800680e:	da0b      	bge.n	8006828 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006810:	78fb      	ldrb	r3, [r7, #3]
 8006812:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006816:	68f9      	ldr	r1, [r7, #12]
 8006818:	4613      	mov	r3, r2
 800681a:	00db      	lsls	r3, r3, #3
 800681c:	1a9b      	subs	r3, r3, r2
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	440b      	add	r3, r1
 8006822:	333e      	adds	r3, #62	; 0x3e
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	e00b      	b.n	8006840 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006828:	78fb      	ldrb	r3, [r7, #3]
 800682a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800682e:	68f9      	ldr	r1, [r7, #12]
 8006830:	4613      	mov	r3, r2
 8006832:	00db      	lsls	r3, r3, #3
 8006834:	1a9b      	subs	r3, r3, r2
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	440b      	add	r3, r1
 800683a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800683e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006840:	4618      	mov	r0, r3
 8006842:	3714      	adds	r7, #20
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	460b      	mov	r3, r1
 8006856:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006858:	2300      	movs	r3, #0
 800685a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800685c:	2300      	movs	r3, #0
 800685e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006866:	78fa      	ldrb	r2, [r7, #3]
 8006868:	4611      	mov	r1, r2
 800686a:	4618      	mov	r0, r3
 800686c:	f7fb fd84 	bl	8002378 <HAL_PCD_SetAddress>
 8006870:	4603      	mov	r3, r0
 8006872:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006874:	7bbb      	ldrb	r3, [r7, #14]
 8006876:	2b03      	cmp	r3, #3
 8006878:	d816      	bhi.n	80068a8 <USBD_LL_SetUSBAddress+0x5c>
 800687a:	a201      	add	r2, pc, #4	; (adr r2, 8006880 <USBD_LL_SetUSBAddress+0x34>)
 800687c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006880:	08006891 	.word	0x08006891
 8006884:	08006897 	.word	0x08006897
 8006888:	0800689d 	.word	0x0800689d
 800688c:	080068a3 	.word	0x080068a3
    case HAL_OK :
      usb_status = USBD_OK;
 8006890:	2300      	movs	r3, #0
 8006892:	73fb      	strb	r3, [r7, #15]
    break;
 8006894:	e00b      	b.n	80068ae <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006896:	2303      	movs	r3, #3
 8006898:	73fb      	strb	r3, [r7, #15]
    break;
 800689a:	e008      	b.n	80068ae <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800689c:	2301      	movs	r3, #1
 800689e:	73fb      	strb	r3, [r7, #15]
    break;
 80068a0:	e005      	b.n	80068ae <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80068a2:	2303      	movs	r3, #3
 80068a4:	73fb      	strb	r3, [r7, #15]
    break;
 80068a6:	e002      	b.n	80068ae <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 80068a8:	2303      	movs	r3, #3
 80068aa:	73fb      	strb	r3, [r7, #15]
    break;
 80068ac:	bf00      	nop
  }
  return usb_status;
 80068ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3710      	adds	r7, #16
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b086      	sub	sp, #24
 80068bc:	af00      	add	r7, sp, #0
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	607a      	str	r2, [r7, #4]
 80068c2:	603b      	str	r3, [r7, #0]
 80068c4:	460b      	mov	r3, r1
 80068c6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80068c8:	2300      	movs	r3, #0
 80068ca:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80068cc:	2300      	movs	r3, #0
 80068ce:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80068d6:	7af9      	ldrb	r1, [r7, #11]
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	f7fb fe17 	bl	800250e <HAL_PCD_EP_Transmit>
 80068e0:	4603      	mov	r3, r0
 80068e2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80068e4:	7dbb      	ldrb	r3, [r7, #22]
 80068e6:	2b03      	cmp	r3, #3
 80068e8:	d816      	bhi.n	8006918 <USBD_LL_Transmit+0x60>
 80068ea:	a201      	add	r2, pc, #4	; (adr r2, 80068f0 <USBD_LL_Transmit+0x38>)
 80068ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f0:	08006901 	.word	0x08006901
 80068f4:	08006907 	.word	0x08006907
 80068f8:	0800690d 	.word	0x0800690d
 80068fc:	08006913 	.word	0x08006913
    case HAL_OK :
      usb_status = USBD_OK;
 8006900:	2300      	movs	r3, #0
 8006902:	75fb      	strb	r3, [r7, #23]
    break;
 8006904:	e00b      	b.n	800691e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006906:	2303      	movs	r3, #3
 8006908:	75fb      	strb	r3, [r7, #23]
    break;
 800690a:	e008      	b.n	800691e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800690c:	2301      	movs	r3, #1
 800690e:	75fb      	strb	r3, [r7, #23]
    break;
 8006910:	e005      	b.n	800691e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006912:	2303      	movs	r3, #3
 8006914:	75fb      	strb	r3, [r7, #23]
    break;
 8006916:	e002      	b.n	800691e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8006918:	2303      	movs	r3, #3
 800691a:	75fb      	strb	r3, [r7, #23]
    break;
 800691c:	bf00      	nop
  }
  return usb_status;
 800691e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006920:	4618      	mov	r0, r3
 8006922:	3718      	adds	r7, #24
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b086      	sub	sp, #24
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	607a      	str	r2, [r7, #4]
 8006932:	603b      	str	r3, [r7, #0]
 8006934:	460b      	mov	r3, r1
 8006936:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006938:	2300      	movs	r3, #0
 800693a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800693c:	2300      	movs	r3, #0
 800693e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006946:	7af9      	ldrb	r1, [r7, #11]
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	f7fb fda1 	bl	8002492 <HAL_PCD_EP_Receive>
 8006950:	4603      	mov	r3, r0
 8006952:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8006954:	7dbb      	ldrb	r3, [r7, #22]
 8006956:	2b03      	cmp	r3, #3
 8006958:	d816      	bhi.n	8006988 <USBD_LL_PrepareReceive+0x60>
 800695a:	a201      	add	r2, pc, #4	; (adr r2, 8006960 <USBD_LL_PrepareReceive+0x38>)
 800695c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006960:	08006971 	.word	0x08006971
 8006964:	08006977 	.word	0x08006977
 8006968:	0800697d 	.word	0x0800697d
 800696c:	08006983 	.word	0x08006983
    case HAL_OK :
      usb_status = USBD_OK;
 8006970:	2300      	movs	r3, #0
 8006972:	75fb      	strb	r3, [r7, #23]
    break;
 8006974:	e00b      	b.n	800698e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006976:	2303      	movs	r3, #3
 8006978:	75fb      	strb	r3, [r7, #23]
    break;
 800697a:	e008      	b.n	800698e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800697c:	2301      	movs	r3, #1
 800697e:	75fb      	strb	r3, [r7, #23]
    break;
 8006980:	e005      	b.n	800698e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006982:	2303      	movs	r3, #3
 8006984:	75fb      	strb	r3, [r7, #23]
    break;
 8006986:	e002      	b.n	800698e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8006988:	2303      	movs	r3, #3
 800698a:	75fb      	strb	r3, [r7, #23]
    break;
 800698c:	bf00      	nop
  }
  return usb_status;
 800698e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006990:	4618      	mov	r0, r3
 8006992:	3718      	adds	r7, #24
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	460b      	mov	r3, r1
 80069a2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80069a4:	78fb      	ldrb	r3, [r7, #3]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d002      	beq.n	80069b0 <HAL_PCDEx_LPM_Callback+0x18>
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d01f      	beq.n	80069ee <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80069ae:	e03b      	b.n	8006a28 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6a1b      	ldr	r3, [r3, #32]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d007      	beq.n	80069c8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80069b8:	f000 f83c 	bl	8006a34 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80069bc:	4b1c      	ldr	r3, [pc, #112]	; (8006a30 <HAL_PCDEx_LPM_Callback+0x98>)
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	4a1b      	ldr	r2, [pc, #108]	; (8006a30 <HAL_PCDEx_LPM_Callback+0x98>)
 80069c2:	f023 0306 	bic.w	r3, r3, #6
 80069c6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	6812      	ldr	r2, [r2, #0]
 80069d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80069da:	f023 0301 	bic.w	r3, r3, #1
 80069de:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80069e6:	4618      	mov	r0, r3
 80069e8:	f7fe fea7 	bl	800573a <USBD_LL_Resume>
    break;
 80069ec:	e01c      	b.n	8006a28 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	6812      	ldr	r2, [r2, #0]
 80069fc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a00:	f043 0301 	orr.w	r3, r3, #1
 8006a04:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7fe fe7e 	bl	800570e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a1b      	ldr	r3, [r3, #32]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d005      	beq.n	8006a26 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006a1a:	4b05      	ldr	r3, [pc, #20]	; (8006a30 <HAL_PCDEx_LPM_Callback+0x98>)
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	4a04      	ldr	r2, [pc, #16]	; (8006a30 <HAL_PCDEx_LPM_Callback+0x98>)
 8006a20:	f043 0306 	orr.w	r3, r3, #6
 8006a24:	6113      	str	r3, [r2, #16]
    break;
 8006a26:	bf00      	nop
}
 8006a28:	bf00      	nop
 8006a2a:	3708      	adds	r7, #8
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	e000ed00 	.word	0xe000ed00

08006a34 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8006a38:	f7f9 fc02 	bl	8000240 <SystemClock_Config>
}
 8006a3c:	bf00      	nop
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <__libc_init_array>:
 8006a40:	b570      	push	{r4, r5, r6, lr}
 8006a42:	4d0d      	ldr	r5, [pc, #52]	; (8006a78 <__libc_init_array+0x38>)
 8006a44:	4c0d      	ldr	r4, [pc, #52]	; (8006a7c <__libc_init_array+0x3c>)
 8006a46:	1b64      	subs	r4, r4, r5
 8006a48:	10a4      	asrs	r4, r4, #2
 8006a4a:	2600      	movs	r6, #0
 8006a4c:	42a6      	cmp	r6, r4
 8006a4e:	d109      	bne.n	8006a64 <__libc_init_array+0x24>
 8006a50:	4d0b      	ldr	r5, [pc, #44]	; (8006a80 <__libc_init_array+0x40>)
 8006a52:	4c0c      	ldr	r4, [pc, #48]	; (8006a84 <__libc_init_array+0x44>)
 8006a54:	f000 f820 	bl	8006a98 <_init>
 8006a58:	1b64      	subs	r4, r4, r5
 8006a5a:	10a4      	asrs	r4, r4, #2
 8006a5c:	2600      	movs	r6, #0
 8006a5e:	42a6      	cmp	r6, r4
 8006a60:	d105      	bne.n	8006a6e <__libc_init_array+0x2e>
 8006a62:	bd70      	pop	{r4, r5, r6, pc}
 8006a64:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a68:	4798      	blx	r3
 8006a6a:	3601      	adds	r6, #1
 8006a6c:	e7ee      	b.n	8006a4c <__libc_init_array+0xc>
 8006a6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a72:	4798      	blx	r3
 8006a74:	3601      	adds	r6, #1
 8006a76:	e7f2      	b.n	8006a5e <__libc_init_array+0x1e>
 8006a78:	08007564 	.word	0x08007564
 8006a7c:	08007564 	.word	0x08007564
 8006a80:	08007564 	.word	0x08007564
 8006a84:	08007568 	.word	0x08007568

08006a88 <memset>:
 8006a88:	4402      	add	r2, r0
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d100      	bne.n	8006a92 <memset+0xa>
 8006a90:	4770      	bx	lr
 8006a92:	f803 1b01 	strb.w	r1, [r3], #1
 8006a96:	e7f9      	b.n	8006a8c <memset+0x4>

08006a98 <_init>:
 8006a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a9a:	bf00      	nop
 8006a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a9e:	bc08      	pop	{r3}
 8006aa0:	469e      	mov	lr, r3
 8006aa2:	4770      	bx	lr

08006aa4 <_fini>:
 8006aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aa6:	bf00      	nop
 8006aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aaa:	bc08      	pop	{r3}
 8006aac:	469e      	mov	lr, r3
 8006aae:	4770      	bx	lr
